!function(global, factory) {
    "object" == typeof module && "object" == typeof module.exports ? module.exports = global.document ? factory(global, !0) : function(w) {
        if (!w.document) throw new Error("jQuery requires a window with a document");
        return factory(w);
    } : factory(global);
}("undefined" != typeof window ? window : this, function(window, noGlobal) {
    var deletedIds = [], slice = deletedIds.slice, concat = deletedIds.concat, push = deletedIds.push, indexOf = deletedIds.indexOf, class2type = {}, toString = class2type.toString, hasOwn = class2type.hasOwnProperty, support = {}, jQuery = function(selector, context) {
        return new jQuery.fn.init(selector, context);
    }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function(all, letter) {
        return letter.toUpperCase();
    };
    jQuery.fn = jQuery.prototype = {
        jquery: "1.11.2",
        constructor: jQuery,
        selector: "",
        length: 0,
        toArray: function() {
            return slice.call(this);
        },
        get: function(num) {
            return null != num ? num < 0 ? this[num + this.length] : this[num] : slice.call(this);
        },
        pushStack: function(elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            ret.context = this.context;
            return ret;
        },
        each: function(callback, args) {
            return jQuery.each(this, callback, args);
        },
        map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        slice: function() {
            return this.pushStack(slice.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        eq: function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(0 <= j && j < len ? [ this[j] ] : []);
        },
        end: function() {
            return this.prevObject || this.constructor(null);
        },
        push: push,
        sort: deletedIds.sort,
        splice: deletedIds.splice
    };
    jQuery.extend = jQuery.fn.extend = function() {
        var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = !1;
        if ("boolean" == typeof target) {
            deep = target;
            target = arguments[i] || {};
            i++;
        }
        "object" == typeof target || jQuery.isFunction(target) || (target = {});
        if (i === length) {
            target = this;
            i--;
        }
        for (;i < length; i++) if (null != (options = arguments[i])) for (name in options) {
            src = target[name];
            if (target !== (copy = options[name])) if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                if (copyIsArray) {
                    copyIsArray = !1;
                    clone = src && jQuery.isArray(src) ? src : [];
                } else clone = src && jQuery.isPlainObject(src) ? src : {};
                target[name] = jQuery.extend(deep, clone, copy);
            } else void 0 !== copy && (target[name] = copy);
        }
        return target;
    };
    jQuery.extend({
        expando: "jQuery" + ("1.11.2" + Math.random()).replace(/\D/g, ""),
        isReady: !0,
        error: function(msg) {
            throw new Error(msg);
        },
        noop: function() {},
        isFunction: function(obj) {
            return "function" === jQuery.type(obj);
        },
        isArray: Array.isArray || function(obj) {
            return "array" === jQuery.type(obj);
        },
        isWindow: function(obj) {
            return null != obj && obj == obj.window;
        },
        isNumeric: function(obj) {
            return !jQuery.isArray(obj) && 0 <= obj - parseFloat(obj) + 1;
        },
        isEmptyObject: function(obj) {
            var name;
            for (name in obj) return !1;
            return !0;
        },
        isPlainObject: function(obj) {
            var key;
            if (!obj || "object" !== jQuery.type(obj) || obj.nodeType || jQuery.isWindow(obj)) return !1;
            try {
                if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) return !1;
            } catch (e) {
                return !1;
            }
            if (support.ownLast) for (key in obj) return hasOwn.call(obj, key);
            for (key in obj) ;
            return void 0 === key || hasOwn.call(obj, key);
        },
        type: function(obj) {
            return null == obj ? obj + "" : "object" == typeof obj || "function" == typeof obj ? class2type[toString.call(obj)] || "object" : typeof obj;
        },
        globalEval: function(data) {
            data && jQuery.trim(data) && (window.execScript || function(data) {
                window.eval.call(window, data);
            })(data);
        },
        camelCase: function(string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },
        nodeName: function(elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        each: function(obj, callback, args) {
            var i = 0, length = obj.length, isArray = isArraylike(obj);
            if (args) {
                if (isArray) for (;i < length && !1 !== callback.apply(obj[i], args); i++) ; else for (i in obj) if (!1 === callback.apply(obj[i], args)) break;
            } else if (isArray) for (;i < length && !1 !== callback.call(obj[i], i, obj[i]); i++) ; else for (i in obj) if (!1 === callback.call(obj[i], i, obj[i])) break;
            return obj;
        },
        trim: function(text) {
            return null == text ? "" : (text + "").replace(rtrim, "");
        },
        makeArray: function(arr, results) {
            var ret = results || [];
            null != arr && (isArraylike(Object(arr)) ? jQuery.merge(ret, "string" == typeof arr ? [ arr ] : arr) : push.call(ret, arr));
            return ret;
        },
        inArray: function(elem, arr, i) {
            var len;
            if (arr) {
                if (indexOf) return indexOf.call(arr, elem, i);
                len = arr.length;
                i = i ? i < 0 ? Math.max(0, len + i) : i : 0;
                for (;i < len; i++) if (i in arr && arr[i] === elem) return i;
            }
            return -1;
        },
        merge: function(first, second) {
            for (var len = +second.length, j = 0, i = first.length; j < len; ) first[i++] = second[j++];
            if (len != len) for (;void 0 !== second[j]; ) first[i++] = second[j++];
            first.length = i;
            return first;
        },
        grep: function(elems, callback, invert) {
            for (var matches = [], i = 0, length = elems.length, callbackExpect = !invert; i < length; i++) !callback(elems[i], i) !== callbackExpect && matches.push(elems[i]);
            return matches;
        },
        map: function(elems, callback, arg) {
            var value, i = 0, length = elems.length, ret = [];
            if (isArraylike(elems)) for (;i < length; i++) null != (value = callback(elems[i], i, arg)) && ret.push(value); else for (i in elems) null != (value = callback(elems[i], i, arg)) && ret.push(value);
            return concat.apply([], ret);
        },
        guid: 1,
        proxy: function(fn, context) {
            var args, proxy, tmp;
            if ("string" == typeof context) {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }
            if (jQuery.isFunction(fn)) {
                args = slice.call(arguments, 2);
                (proxy = function() {
                    return fn.apply(context || this, args.concat(slice.call(arguments)));
                }).guid = fn.guid = fn.guid || jQuery.guid++;
                return proxy;
            }
        },
        now: function() {
            return +new Date();
        },
        support: support
    });
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });
    function isArraylike(obj) {
        var length = obj.length, type = jQuery.type(obj);
        return "function" !== type && !jQuery.isWindow(obj) && (!(1 !== obj.nodeType || !length) || ("array" === type || 0 === length || "number" == typeof length && 0 < length && length - 1 in obj));
    }
    var Sizzle = function(window) {
        var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function(a, b) {
            a === b && (hasDuplicate = !0);
            return 0;
        }, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = function(list, elem) {
            for (var i = 0, len = list.length; i < len; i++) if (list[i] === elem) return i;
            return -1;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace = "[\\x20\\t\\r\\n\\f]", characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", identifier = characterEncoding.replace("w", "w#"), attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + characterEncoding + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|.*)\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            ID: new RegExp("^#(" + characterEncoding + ")"),
            CLASS: new RegExp("^\\.(" + characterEncoding + ")"),
            TAG: new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
            ATTR: new RegExp("^" + attributes),
            PSEUDO: new RegExp("^" + pseudos),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + booleans + ")$", "i"),
            needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, rescape = /'|\\/g, runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"), funescape = function(_, escaped, escapedWhitespace) {
            var high = "0x" + escaped - 65536;
            return high != high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, 1023 & high | 56320);
        }, unloadHandler = function() {
            setDocument();
        };
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr.length ? function(target, els) {
                    push_native.apply(target, slice.call(els));
                } : function(target, els) {
                    for (var j = target.length, i = 0; target[j++] = els[i++]; ) ;
                    target.length = j - 1;
                }
            };
        }
        function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
            (context ? context.ownerDocument || context : preferredDoc) !== document && setDocument(context);
            results = results || [];
            nodeType = (context = context || document).nodeType;
            if ("string" != typeof selector || !selector || 1 !== nodeType && 9 !== nodeType && 11 !== nodeType) return results;
            if (!seed && documentIsHTML) {
                if (11 !== nodeType && (match = rquickExpr.exec(selector))) if (m = match[1]) {
                    if (9 === nodeType) {
                        if (!(elem = context.getElementById(m)) || !elem.parentNode) return results;
                        if (elem.id === m) {
                            results.push(elem);
                            return results;
                        }
                    } else if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                        results.push(elem);
                        return results;
                    }
                } else {
                    if (match[2]) {
                        push.apply(results, context.getElementsByTagName(selector));
                        return results;
                    }
                    if ((m = match[3]) && support.getElementsByClassName) {
                        push.apply(results, context.getElementsByClassName(m));
                        return results;
                    }
                }
                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                    nid = old = expando;
                    newContext = context;
                    newSelector = 1 !== nodeType && selector;
                    if (1 === nodeType && "object" !== context.nodeName.toLowerCase()) {
                        groups = tokenize(selector);
                        (old = context.getAttribute("id")) ? nid = old.replace(rescape, "\\$&") : context.setAttribute("id", nid);
                        nid = "[id='" + nid + "'] ";
                        i = groups.length;
                        for (;i--; ) groups[i] = nid + toSelector(groups[i]);
                        newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                        newSelector = groups.join(",");
                    }
                    if (newSelector) try {
                        push.apply(results, newContext.querySelectorAll(newSelector));
                        return results;
                    } catch (qsaError) {} finally {
                        old || context.removeAttribute("id");
                    }
                }
            }
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        function createCache() {
            var keys = [];
            return function cache(key, value) {
                keys.push(key + " ") > Expr.cacheLength && delete cache[keys.shift()];
                return cache[key + " "] = value;
            };
        }
        function markFunction(fn) {
            fn[expando] = !0;
            return fn;
        }
        function assert(fn) {
            var div = document.createElement("div");
            try {
                return !!fn(div);
            } catch (e) {
                return !1;
            } finally {
                div.parentNode && div.parentNode.removeChild(div);
                div = null;
            }
        }
        function addHandle(attrs, handler) {
            for (var arr = attrs.split("|"), i = attrs.length; i--; ) Expr.attrHandle[arr[i]] = handler;
        }
        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || 1 << 31) - (~a.sourceIndex || 1 << 31);
            if (diff) return diff;
            if (cur) for (;cur = cur.nextSibling; ) if (cur === b) return -1;
            return a ? 1 : -1;
        }
        function createInputPseudo(type) {
            return function(elem) {
                return "input" === elem.nodeName.toLowerCase() && elem.type === type;
            };
        }
        function createButtonPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return ("input" === name || "button" === name) && elem.type === type;
            };
        }
        function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches) {
                    for (var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length; i--; ) seed[j = matchIndexes[i]] && (seed[j] = !(matches[j] = seed[j]));
                });
            });
        }
        function testContext(context) {
            return context && void 0 !== context.getElementsByTagName && context;
        }
        support = Sizzle.support = {};
        isXML = Sizzle.isXML = function(elem) {
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return !!documentElement && "HTML" !== documentElement.nodeName;
        };
        setDocument = Sizzle.setDocument = function(node) {
            var hasCompare, parent, doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc === document || 9 !== doc.nodeType || !doc.documentElement) return document;
            docElem = (document = doc).documentElement;
            (parent = doc.defaultView) && parent !== parent.top && (parent.addEventListener ? parent.addEventListener("unload", unloadHandler, !1) : parent.attachEvent && parent.attachEvent("onunload", unloadHandler));
            documentIsHTML = !isXML(doc);
            support.attributes = assert(function(div) {
                div.className = "i";
                return !div.getAttribute("className");
            });
            support.getElementsByTagName = assert(function(div) {
                div.appendChild(doc.createComment(""));
                return !div.getElementsByTagName("*").length;
            });
            support.getElementsByClassName = rnative.test(doc.getElementsByClassName);
            support.getById = assert(function(div) {
                docElem.appendChild(div).id = expando;
                return !doc.getElementsByName || !doc.getElementsByName(expando).length;
            });
            if (support.getById) {
                Expr.find.ID = function(id, context) {
                    if (void 0 !== context.getElementById && documentIsHTML) {
                        var m = context.getElementById(id);
                        return m && m.parentNode ? [ m ] : [];
                    }
                };
                Expr.filter.ID = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
            } else {
                delete Expr.find.ID;
                Expr.filter.ID = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        var node = void 0 !== elem.getAttributeNode && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
            }
            Expr.find.TAG = support.getElementsByTagName ? function(tag, context) {
                return void 0 !== context.getElementsByTagName ? context.getElementsByTagName(tag) : support.qsa ? context.querySelectorAll(tag) : void 0;
            } : function(tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                if ("*" !== tag) return results;
                for (;elem = results[i++]; ) 1 === elem.nodeType && tmp.push(elem);
                return tmp;
            };
            Expr.find.CLASS = support.getElementsByClassName && function(className, context) {
                if (documentIsHTML) return context.getElementsByClassName(className);
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support.qsa = rnative.test(doc.querySelectorAll)) {
                assert(function(div) {
                    docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a><select id='" + expando + "-\f]' msallowcapture=''><option selected=''></option></select>";
                    div.querySelectorAll("[msallowcapture^='']").length && rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    div.querySelectorAll("[selected]").length || rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    div.querySelectorAll("[id~=" + expando + "-]").length || rbuggyQSA.push("~=");
                    div.querySelectorAll(":checked").length || rbuggyQSA.push(":checked");
                    div.querySelectorAll("a#" + expando + "+*").length || rbuggyQSA.push(".#.+[+~]");
                });
                assert(function(div) {
                    var input = doc.createElement("input");
                    input.setAttribute("type", "hidden");
                    div.appendChild(input).setAttribute("name", "D");
                    div.querySelectorAll("[name=d]").length && rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                    div.querySelectorAll(":enabled").length || rbuggyQSA.push(":enabled", ":disabled");
                    div.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }
            (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) && assert(function(div) {
                support.disconnectedMatch = matches.call(div, "div");
                matches.call(div, "[s!='']:x");
                rbuggyMatches.push("!=", pseudos);
            });
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            hasCompare = rnative.test(docElem.compareDocumentPosition);
            contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
                var adown = 9 === a.nodeType ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !(!bup || 1 !== bup.nodeType || !(adown.contains ? adown.contains(bup) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(bup)));
            } : function(a, b) {
                if (b) for (;b = b.parentNode; ) if (b === a) return !0;
                return !1;
            };
            sortOrder = hasCompare ? function(a, b) {
                if (a === b) {
                    hasDuplicate = !0;
                    return 0;
                }
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                return compare || (1 & (compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1) || !support.sortDetached && b.compareDocumentPosition(a) === compare ? a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ? -1 : b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0 : 4 & compare ? -1 : 1);
            } : function(a, b) {
                if (a === b) {
                    hasDuplicate = !0;
                    return 0;
                }
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [ a ], bp = [ b ];
                if (!aup || !bup) return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                if (aup === bup) return siblingCheck(a, b);
                cur = a;
                for (;cur = cur.parentNode; ) ap.unshift(cur);
                cur = b;
                for (;cur = cur.parentNode; ) bp.unshift(cur);
                for (;ap[i] === bp[i]; ) i++;
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            return doc;
        };
        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function(elem, expr) {
            (elem.ownerDocument || elem) !== document && setDocument(elem);
            expr = expr.replace(rattributeQuotes, "='$1']");
            if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) try {
                var ret = matches.call(elem, expr);
                if (ret || support.disconnectedMatch || elem.document && 11 !== elem.document.nodeType) return ret;
            } catch (e) {}
            return 0 < Sizzle(expr, document, null, [ elem ]).length;
        };
        Sizzle.contains = function(context, elem) {
            (context.ownerDocument || context) !== document && setDocument(context);
            return contains(context, elem);
        };
        Sizzle.attr = function(elem, name) {
            (elem.ownerDocument || elem) !== document && setDocument(elem);
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : void 0;
            return void 0 !== val ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        Sizzle.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                for (;elem = results[i++]; ) elem === results[i] && (j = duplicates.push(i));
                for (;j--; ) results.splice(duplicates[j], 1);
            }
            sortInput = null;
            return results;
        };
        getText = Sizzle.getText = function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (nodeType) {
                if (1 === nodeType || 9 === nodeType || 11 === nodeType) {
                    if ("string" == typeof elem.textContent) return elem.textContent;
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) ret += getText(elem);
                } else if (3 === nodeType || 4 === nodeType) return elem.nodeValue;
            } else for (;node = elem[i++]; ) ret += getText(node);
            return ret;
        };
        (Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: !0
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: !0
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                    "~=" === match[2] && (match[3] = " " + match[3] + " ");
                    return match.slice(0, 4);
                },
                CHILD: function(match) {
                    match[1] = match[1].toLowerCase();
                    if ("nth" === match[1].slice(0, 3)) {
                        match[3] || Sizzle.error(match[0]);
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * ("even" === match[3] || "odd" === match[3]));
                        match[5] = +(match[7] + match[8] || "odd" === match[3]);
                    } else match[3] && Sizzle.error(match[0]);
                    return match;
                },
                PSEUDO: function(match) {
                    var excess, unquoted = !match[6] && match[2];
                    if (matchExpr.CHILD.test(match[0])) return null;
                    if (match[3]) match[2] = match[4] || match[5] || ""; else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, !0)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    return match.slice(0, 3);
                }
            },
            filter: {
                TAG: function(nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return "*" === nodeNameSelector ? function() {
                        return !0;
                    } : function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                CLASS: function(className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                        return pattern.test("string" == typeof elem.className && elem.className || void 0 !== elem.getAttribute && elem.getAttribute("class") || "");
                    });
                },
                ATTR: function(name, operator, check) {
                    return function(elem) {
                        var result = Sizzle.attr(elem, name);
                        if (null == result) return "!=" === operator;
                        if (!operator) return !0;
                        result += "";
                        return "=" === operator ? result === check : "!=" === operator ? result !== check : "^=" === operator ? check && 0 === result.indexOf(check) : "*=" === operator ? check && -1 < result.indexOf(check) : "$=" === operator ? check && result.slice(-check.length) === check : "~=" === operator ? -1 < (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) : "|=" === operator && (result === check || result.slice(0, check.length + 1) === check + "-");
                    };
                },
                CHILD: function(type, what, argument, first, last) {
                    var simple = "nth" !== type.slice(0, 3), forward = "last" !== type.slice(-4), ofType = "of-type" === what;
                    return 1 === first && 0 === last ? function(elem) {
                        return !!elem.parentNode;
                    } : function(elem, context, xml) {
                        var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
                        if (parent) {
                            if (simple) {
                                for (;dir; ) {
                                    node = elem;
                                    for (;node = node[dir]; ) if (ofType ? node.nodeName.toLowerCase() === name : 1 === node.nodeType) return !1;
                                    start = dir = "only" === type && !start && "nextSibling";
                                }
                                return !0;
                            }
                            start = [ forward ? parent.firstChild : parent.lastChild ];
                            if (forward && useCache) {
                                nodeIndex = (cache = (outerCache = parent[expando] || (parent[expando] = {}))[type] || [])[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                for (;node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop(); ) if (1 === node.nodeType && ++diff && node === elem) {
                                    outerCache[type] = [ dirruns, nodeIndex, diff ];
                                    break;
                                }
                            } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) diff = cache[1]; else for (;node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop(); ) if ((ofType ? node.nodeName.toLowerCase() === name : 1 === node.nodeType) && ++diff) {
                                useCache && ((node[expando] || (node[expando] = {}))[type] = [ dirruns, diff ]);
                                if (node === elem) break;
                            }
                            return (diff -= last) === first || diff % first == 0 && 0 <= diff / first;
                        }
                    };
                },
                PSEUDO: function(pseudo, argument) {
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                    if (fn[expando]) return fn(argument);
                    if (1 < fn.length) {
                        args = [ pseudo, pseudo, "", argument ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                            for (var idx, matched = fn(seed, argument), i = matched.length; i--; ) seed[idx = indexOf(seed, matched[i])] = !(matches[idx] = matched[i]);
                        }) : function(elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                not: markFunction(function(selector) {
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                        for (var elem, unmatched = matcher(seed, null, xml, []), i = seed.length; i--; ) (elem = unmatched[i]) && (seed[i] = !(matches[i] = elem));
                    }) : function(elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        input[0] = null;
                        return !results.pop();
                    };
                }),
                has: markFunction(function(selector) {
                    return function(elem) {
                        return 0 < Sizzle(selector, elem).length;
                    };
                }),
                contains: markFunction(function(text) {
                    text = text.replace(runescape, funescape);
                    return function(elem) {
                        return -1 < (elem.textContent || elem.innerText || getText(elem)).indexOf(text);
                    };
                }),
                lang: markFunction(function(lang) {
                    ridentifier.test(lang || "") || Sizzle.error("unsupported lang: " + lang);
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        var elemLang;
                        do {
                            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) return (elemLang = elemLang.toLowerCase()) === lang || 0 === elemLang.indexOf(lang + "-");
                        } while ((elem = elem.parentNode) && 1 === elem.nodeType);
                        return !1;
                    };
                }),
                target: function(elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                root: function(elem) {
                    return elem === docElem;
                },
                focus: function(elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                enabled: function(elem) {
                    return !1 === elem.disabled;
                },
                disabled: function(elem) {
                    return !0 === elem.disabled;
                },
                checked: function(elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return "input" === nodeName && !!elem.checked || "option" === nodeName && !!elem.selected;
                },
                selected: function(elem) {
                    elem.parentNode && elem.parentNode.selectedIndex;
                    return !0 === elem.selected;
                },
                empty: function(elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) if (elem.nodeType < 6) return !1;
                    return !0;
                },
                parent: function(elem) {
                    return !Expr.pseudos.empty(elem);
                },
                header: function(elem) {
                    return rheader.test(elem.nodeName);
                },
                input: function(elem) {
                    return rinputs.test(elem.nodeName);
                },
                button: function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return "input" === name && "button" === elem.type || "button" === name;
                },
                text: function(elem) {
                    var attr;
                    return "input" === elem.nodeName.toLowerCase() && "text" === elem.type && (null == (attr = elem.getAttribute("type")) || "text" === attr.toLowerCase());
                },
                first: createPositionalPseudo(function() {
                    return [ 0 ];
                }),
                last: createPositionalPseudo(function(matchIndexes, length) {
                    return [ length - 1 ];
                }),
                eq: createPositionalPseudo(function(matchIndexes, length, argument) {
                    return [ argument < 0 ? argument + length : argument ];
                }),
                even: createPositionalPseudo(function(matchIndexes, length) {
                    for (var i = 0; i < length; i += 2) matchIndexes.push(i);
                    return matchIndexes;
                }),
                odd: createPositionalPseudo(function(matchIndexes, length) {
                    for (var i = 1; i < length; i += 2) matchIndexes.push(i);
                    return matchIndexes;
                }),
                lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    for (var i = argument < 0 ? argument + length : argument; 0 <= --i; ) matchIndexes.push(i);
                    return matchIndexes;
                }),
                gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    for (var i = argument < 0 ? argument + length : argument; ++i < length; ) matchIndexes.push(i);
                    return matchIndexes;
                })
            }
        }).pseudos.nth = Expr.pseudos.eq;
        for (i in {
            radio: !0,
            checkbox: !0,
            file: !0,
            password: !0,
            image: !0
        }) Expr.pseudos[i] = createInputPseudo(i);
        for (i in {
            submit: !0,
            reset: !0
        }) Expr.pseudos[i] = createButtonPseudo(i);
        function setFilters() {}
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle.tokenize = function(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) return parseOnly ? 0 : cached.slice(0);
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            for (;soFar; ) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    match && (soFar = soFar.slice(match[0].length) || soFar);
                    groups.push(tokens = []);
                }
                matched = !1;
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: type,
                        matches: match
                    });
                    soFar = soFar.slice(matched.length);
                }
                if (!matched) break;
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        };
        function toSelector(tokens) {
            for (var i = 0, len = tokens.length, selector = ""; i < len; i++) selector += tokens[i].value;
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, checkNonElements = base && "parentNode" === dir, doneName = done++;
            return combinator.first ? function(elem, context, xml) {
                for (;elem = elem[dir]; ) if (1 === elem.nodeType || checkNonElements) return matcher(elem, context, xml);
            } : function(elem, context, xml) {
                var oldCache, outerCache, newCache = [ dirruns, doneName ];
                if (xml) {
                    for (;elem = elem[dir]; ) if ((1 === elem.nodeType || checkNonElements) && matcher(elem, context, xml)) return !0;
                } else for (;elem = elem[dir]; ) if (1 === elem.nodeType || checkNonElements) {
                    if ((oldCache = (outerCache = elem[expando] || (elem[expando] = {}))[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) return newCache[2] = oldCache[2];
                    if ((outerCache[dir] = newCache)[2] = matcher(elem, context, xml)) return !0;
                }
            };
        }
        function elementMatcher(matchers) {
            return 1 < matchers.length ? function(elem, context, xml) {
                for (var i = matchers.length; i--; ) if (!matchers[i](elem, context, xml)) return !1;
                return !0;
            } : matchers[0];
        }
        function condense(unmatched, map, filter, context, xml) {
            for (var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = null != map; i < len; i++) if ((elem = unmatched[i]) && (!filter || filter(elem, context, xml))) {
                newUnmatched.push(elem);
                mapped && map.push(i);
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            postFilter && !postFilter[expando] && (postFilter = setMatcher(postFilter));
            postFinder && !postFinder[expando] && (postFinder = setMatcher(postFinder, postSelector));
            return markFunction(function(seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || function(selector, contexts, results) {
                    for (var i = 0, len = contexts.length; i < len; i++) Sizzle(selector, contexts[i], results);
                    return results;
                }(selector || "*", context.nodeType ? [ context ] : context, []), matcherIn = !preFilter || !seed && selector ? elems : condense(elems, preMap, preFilter, context, xml), matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                matcher && matcher(matcherIn, matcherOut, context, xml);
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    for (;i--; ) (elem = temp[i]) && (matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem));
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            for (;i--; ) (elem = matcherOut[i]) && temp.push(matcherIn[i] = elem);
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        i = matcherOut.length;
                        for (;i--; ) (elem = matcherOut[i]) && -1 < (temp = postFinder ? indexOf(seed, elem) : preMap[i]) && (seed[temp] = !(results[temp] = elem));
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    postFinder ? postFinder(null, results, matcherOut, xml) : push.apply(results, matcherOut);
                }
            });
        }
        function matcherFromTokens(tokens) {
            for (var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
                return elem === checkContext;
            }, implicitRelative, !0), matchAnyContext = addCombinator(function(elem) {
                return -1 < indexOf(checkContext, elem);
            }, implicitRelative, !0), matchers = [ function(elem, context, xml) {
                var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                checkContext = null;
                return ret;
            } ]; i < len; i++) if (matcher = Expr.relative[tokens[i].type]) matchers = [ addCombinator(elementMatcher(matchers), matcher) ]; else {
                if ((matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches))[expando]) {
                    j = ++i;
                    for (;j < len && !Expr.relative[tokens[j].type]; j++) ;
                    return setMatcher(1 < i && elementMatcher(matchers), 1 < i && toSelector(tokens.slice(0, i - 1).concat({
                        value: " " === tokens[i - 2].type ? "*" : ""
                    })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                }
                matchers.push(matcher);
            }
            return elementMatcher(matchers);
        }
        compile = Sizzle.compile = function(selector, match) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
                match || (match = tokenize(selector));
                i = match.length;
                for (;i--; ) (cached = matcherFromTokens(match[i]))[expando] ? setMatchers.push(cached) : elementMatchers.push(cached);
                (cached = compilerCache(selector, function(elementMatchers, setMatchers) {
                    var bySet = 0 < setMatchers.length, byElement = 0 < elementMatchers.length, superMatcher = function(seed, context, xml, results, outermost) {
                        var elem, j, matcher, matchedCount = 0, i = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find.TAG("*", outermost), dirrunsUnique = dirruns += null == contextBackup ? 1 : Math.random() || .1, len = elems.length;
                        outermost && (outermostContext = context !== document && context);
                        for (;i !== len && null != (elem = elems[i]); i++) {
                            if (byElement && elem) {
                                j = 0;
                                for (;matcher = elementMatchers[j++]; ) if (matcher(elem, context, xml)) {
                                    results.push(elem);
                                    break;
                                }
                                outermost && (dirruns = dirrunsUnique);
                            }
                            if (bySet) {
                                (elem = !matcher && elem) && matchedCount--;
                                seed && unmatched.push(elem);
                            }
                        }
                        matchedCount += i;
                        if (bySet && i !== matchedCount) {
                            j = 0;
                            for (;matcher = setMatchers[j++]; ) matcher(unmatched, setMatched, context, xml);
                            if (seed) {
                                if (0 < matchedCount) for (;i--; ) unmatched[i] || setMatched[i] || (setMatched[i] = pop.call(results));
                                setMatched = condense(setMatched);
                            }
                            push.apply(results, setMatched);
                            outermost && !seed && 0 < setMatched.length && 1 < matchedCount + setMatchers.length && Sizzle.uniqueSort(results);
                        }
                        if (outermost) {
                            dirruns = dirrunsUnique;
                            outermostContext = contextBackup;
                        }
                        return unmatched;
                    };
                    return bySet ? markFunction(superMatcher) : superMatcher;
                }(elementMatchers, setMatchers))).selector = selector;
            }
            return cached;
        };
        select = Sizzle.select = function(selector, context, results, seed) {
            var i, tokens, token, type, find, compiled = "function" == typeof selector && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            if (1 === match.length) {
                if (2 < (tokens = match[0] = match[0].slice(0)).length && "ID" === (token = tokens[0]).type && support.getById && 9 === context.nodeType && documentIsHTML && Expr.relative[tokens[1].type]) {
                    if (!(context = (Expr.find.ID(token.matches[0].replace(runescape, funescape), context) || [])[0])) return results;
                    compiled && (context = context.parentNode);
                    selector = selector.slice(tokens.shift().value.length);
                }
                i = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
                for (;i--; ) {
                    token = tokens[i];
                    if (Expr.relative[type = token.type]) break;
                    if ((find = Expr.find[type]) && (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context))) {
                        tokens.splice(i, 1);
                        if (selector = seed.length && toSelector(tokens)) break;
                        push.apply(results, seed);
                        return results;
                    }
                }
            }
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
        };
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        support.detectDuplicates = !!hasDuplicate;
        setDocument();
        support.sortDetached = assert(function(div1) {
            return 1 & div1.compareDocumentPosition(document.createElement("div"));
        });
        assert(function(div) {
            div.innerHTML = "<a href='#'></a>";
            return "#" === div.firstChild.getAttribute("href");
        }) || addHandle("type|href|height|width", function(elem, name, isXML) {
            if (!isXML) return elem.getAttribute(name, "type" === name.toLowerCase() ? 1 : 2);
        });
        support.attributes && assert(function(div) {
            div.innerHTML = "<input/>";
            div.firstChild.setAttribute("value", "");
            return "" === div.firstChild.getAttribute("value");
        }) || addHandle("value", function(elem, name, isXML) {
            if (!isXML && "input" === elem.nodeName.toLowerCase()) return elem.defaultValue;
        });
        assert(function(div) {
            return null == div.getAttribute("disabled");
        }) || addHandle(booleans, function(elem, name, isXML) {
            var val;
            if (!isXML) return !0 === elem[name] ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        });
        return Sizzle;
    }(window);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    var rneedsContext = jQuery.expr.match.needsContext, rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, risSimple = /^.[^:#\[\.,]*$/;
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) return jQuery.grep(elements, function(elem, i) {
            return !!qualifier.call(elem, i, elem) !== not;
        });
        if (qualifier.nodeType) return jQuery.grep(elements, function(elem) {
            return elem === qualifier !== not;
        });
        if ("string" == typeof qualifier) {
            if (risSimple.test(qualifier)) return jQuery.filter(qualifier, elements, not);
            qualifier = jQuery.filter(qualifier, elements);
        }
        return jQuery.grep(elements, function(elem) {
            return 0 <= jQuery.inArray(elem, qualifier) !== not;
        });
    }
    jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];
        not && (expr = ":not(" + expr + ")");
        return 1 === elems.length && 1 === elem.nodeType ? jQuery.find.matchesSelector(elem, expr) ? [ elem ] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
            return 1 === elem.nodeType;
        }));
    };
    jQuery.fn.extend({
        find: function(selector) {
            var i, ret = [], self = this, len = self.length;
            if ("string" != typeof selector) return this.pushStack(jQuery(selector).filter(function() {
                for (i = 0; i < len; i++) if (jQuery.contains(self[i], this)) return !0;
            }));
            for (i = 0; i < len; i++) jQuery.find(selector, self[i], ret);
            (ret = this.pushStack(1 < len ? jQuery.unique(ret) : ret)).selector = this.selector ? this.selector + " " + selector : selector;
            return ret;
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], !1));
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector || [], !0));
        },
        is: function(selector) {
            return !!winnow(this, "string" == typeof selector && rneedsContext.test(selector) ? jQuery(selector) : selector || [], !1).length;
        }
    });
    var rootjQuery, document = window.document, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;
    (jQuery.fn.init = function(selector, context) {
        var match, elem;
        if (!selector) return this;
        if ("string" == typeof selector) {
            if (!(match = "<" === selector.charAt(0) && ">" === selector.charAt(selector.length - 1) && 3 <= selector.length ? [ null, selector, null ] : rquickExpr.exec(selector)) || !match[1] && context) return !context || context.jquery ? (context || rootjQuery).find(selector) : this.constructor(context).find(selector);
            if (match[1]) {
                context = context instanceof jQuery ? context[0] : context;
                jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, !0));
                if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) for (match in context) jQuery.isFunction(this[match]) ? this[match](context[match]) : this.attr(match, context[match]);
                return this;
            }
            if ((elem = document.getElementById(match[2])) && elem.parentNode) {
                if (elem.id !== match[2]) return rootjQuery.find(selector);
                this.length = 1;
                this[0] = elem;
            }
            this.context = document;
            this.selector = selector;
            return this;
        }
        if (selector.nodeType) {
            this.context = this[0] = selector;
            this.length = 1;
            return this;
        }
        if (jQuery.isFunction(selector)) return void 0 !== rootjQuery.ready ? rootjQuery.ready(selector) : selector(jQuery);
        if (void 0 !== selector.selector) {
            this.selector = selector.selector;
            this.context = selector.context;
        }
        return jQuery.makeArray(selector, this);
    }).prototype = jQuery.fn;
    rootjQuery = jQuery(document);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
        children: !0,
        contents: !0,
        next: !0,
        prev: !0
    };
    jQuery.extend({
        dir: function(elem, dir, until) {
            for (var matched = [], cur = elem[dir]; cur && 9 !== cur.nodeType && (void 0 === until || 1 !== cur.nodeType || !jQuery(cur).is(until)); ) {
                1 === cur.nodeType && matched.push(cur);
                cur = cur[dir];
            }
            return matched;
        },
        sibling: function(n, elem) {
            for (var r = []; n; n = n.nextSibling) 1 === n.nodeType && n !== elem && r.push(n);
            return r;
        }
    });
    jQuery.fn.extend({
        has: function(target) {
            var i, targets = jQuery(target, this), len = targets.length;
            return this.filter(function() {
                for (i = 0; i < len; i++) if (jQuery.contains(this, targets[i])) return !0;
            });
        },
        closest: function(selectors, context) {
            for (var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || "string" != typeof selectors ? jQuery(selectors, context || this.context) : 0; i < l; i++) for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) if (cur.nodeType < 11 && (pos ? -1 < pos.index(cur) : 1 === cur.nodeType && jQuery.find.matchesSelector(cur, selectors))) {
                matched.push(cur);
                break;
            }
            return this.pushStack(1 < matched.length ? jQuery.unique(matched) : matched);
        },
        index: function(elem) {
            return elem ? "string" == typeof elem ? jQuery.inArray(this[0], jQuery(elem)) : jQuery.inArray(elem.jquery ? elem[0] : elem, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
        },
        add: function(selector, context) {
            return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function(selector) {
            return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        for (;(cur = cur[dir]) && 1 !== cur.nodeType; ) ;
        return cur;
    }
    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && 11 !== parent.nodeType ? parent : null;
        },
        parents: function(elem) {
            return jQuery.dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        next: function(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
            return jQuery.sibling(elem.firstChild);
        },
        contents: function(elem) {
            return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var ret = jQuery.map(this, fn, until);
            "Until" !== name.slice(-5) && (selector = until);
            selector && "string" == typeof selector && (ret = jQuery.filter(selector, ret));
            if (1 < this.length) {
                guaranteedUnique[name] || (ret = jQuery.unique(ret));
                rparentsprev.test(name) && (ret = ret.reverse());
            }
            return this.pushStack(ret);
        };
    });
    var readyList, rnotwhite = /\S+/g, optionsCache = {};
    jQuery.Callbacks = function(options) {
        options = "string" == typeof options ? optionsCache[options] || function(options) {
            var object = optionsCache[options] = {};
            jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
                object[flag] = !0;
            });
            return object;
        }(options) : jQuery.extend({}, options);
        var firing, memory, fired, firingLength, firingIndex, firingStart, list = [], stack = !options.once && [], fire = function(data) {
            memory = options.memory && data;
            fired = !0;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            firing = !0;
            for (;list && firingIndex < firingLength; firingIndex++) if (!1 === list[firingIndex].apply(data[0], data[1]) && options.stopOnFalse) {
                memory = !1;
                break;
            }
            firing = !1;
            list && (stack ? stack.length && fire(stack.shift()) : memory ? list = [] : self.disable());
        }, self = {
            add: function() {
                if (list) {
                    var start = list.length;
                    !function add(args) {
                        jQuery.each(args, function(_, arg) {
                            var type = jQuery.type(arg);
                            "function" === type ? options.unique && self.has(arg) || list.push(arg) : arg && arg.length && "string" !== type && add(arg);
                        });
                    }(arguments);
                    if (firing) firingLength = list.length; else if (memory) {
                        firingStart = start;
                        fire(memory);
                    }
                }
                return this;
            },
            remove: function() {
                list && jQuery.each(arguments, function(_, arg) {
                    for (var index; -1 < (index = jQuery.inArray(arg, list, index)); ) {
                        list.splice(index, 1);
                        if (firing) {
                            index <= firingLength && firingLength--;
                            index <= firingIndex && firingIndex--;
                        }
                    }
                });
                return this;
            },
            has: function(fn) {
                return fn ? -1 < jQuery.inArray(fn, list) : !(!list || !list.length);
            },
            empty: function() {
                list = [];
                firingLength = 0;
                return this;
            },
            disable: function() {
                list = stack = memory = void 0;
                return this;
            },
            disabled: function() {
                return !list;
            },
            lock: function() {
                stack = void 0;
                memory || self.disable();
                return this;
            },
            locked: function() {
                return !stack;
            },
            fireWith: function(context, args) {
                if (list && (!fired || stack)) {
                    args = [ context, (args = args || []).slice ? args.slice() : args ];
                    firing ? stack.push(args) : fire(args);
                }
                return this;
            },
            fire: function() {
                self.fireWith(this, arguments);
                return this;
            },
            fired: function() {
                return !!fired;
            }
        };
        return self;
    };
    jQuery.extend({
        Deferred: function(func) {
            var tuples = [ [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ], [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ], [ "notify", "progress", jQuery.Callbacks("memory") ] ], state = "pending", promise = {
                state: function() {
                    return state;
                },
                always: function() {
                    deferred.done(arguments).fail(arguments);
                    return this;
                },
                then: function() {
                    var fns = arguments;
                    return jQuery.Deferred(function(newDefer) {
                        jQuery.each(tuples, function(i, tuple) {
                            var fn = jQuery.isFunction(fns[i]) && fns[i];
                            deferred[tuple[1]](function() {
                                var returned = fn && fn.apply(this, arguments);
                                returned && jQuery.isFunction(returned.promise) ? returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify) : newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments);
                            });
                        });
                        fns = null;
                    }).promise();
                },
                promise: function(obj) {
                    return null != obj ? jQuery.extend(obj, promise) : promise;
                }
            }, deferred = {};
            promise.pipe = promise.then;
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2], stateString = tuple[3];
                promise[tuple[1]] = list.add;
                stateString && list.add(function() {
                    state = stateString;
                }, tuples[1 ^ i][2].disable, tuples[2][2].lock);
                deferred[tuple[0]] = function() {
                    deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                    return this;
                };
                deferred[tuple[0] + "With"] = list.fireWith;
            });
            promise.promise(deferred);
            func && func.call(deferred, deferred);
            return deferred;
        },
        when: function(subordinate) {
            var progressValues, progressContexts, resolveContexts, i = 0, resolveValues = slice.call(arguments), length = resolveValues.length, remaining = 1 !== length || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0, deferred = 1 === remaining ? subordinate : jQuery.Deferred(), updateFunc = function(i, contexts, values) {
                return function(value) {
                    contexts[i] = this;
                    values[i] = 1 < arguments.length ? slice.call(arguments) : value;
                    values === progressValues ? deferred.notifyWith(contexts, values) : --remaining || deferred.resolveWith(contexts, values);
                };
            };
            if (1 < length) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (;i < length; i++) resolveValues[i] && jQuery.isFunction(resolveValues[i].promise) ? resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues)) : --remaining;
            }
            remaining || deferred.resolveWith(resolveContexts, resolveValues);
            return deferred.promise();
        }
    });
    jQuery.fn.ready = function(fn) {
        jQuery.ready.promise().done(fn);
        return this;
    };
    jQuery.extend({
        isReady: !1,
        readyWait: 1,
        holdReady: function(hold) {
            hold ? jQuery.readyWait++ : jQuery.ready(!0);
        },
        ready: function(wait) {
            if (!0 === wait ? !--jQuery.readyWait : !jQuery.isReady) {
                if (!document.body) return setTimeout(jQuery.ready);
                if (!((jQuery.isReady = !0) !== wait && 0 < --jQuery.readyWait)) {
                    readyList.resolveWith(document, [ jQuery ]);
                    if (jQuery.fn.triggerHandler) {
                        jQuery(document).triggerHandler("ready");
                        jQuery(document).off("ready");
                    }
                }
            }
        }
    });
    function detach() {
        if (document.addEventListener) {
            document.removeEventListener("DOMContentLoaded", completed, !1);
            window.removeEventListener("load", completed, !1);
        } else {
            document.detachEvent("onreadystatechange", completed);
            window.detachEvent("onload", completed);
        }
    }
    function completed() {
        if (document.addEventListener || "load" === event.type || "complete" === document.readyState) {
            detach();
            jQuery.ready();
        }
    }
    jQuery.ready.promise = function(obj) {
        if (!readyList) {
            readyList = jQuery.Deferred();
            if ("complete" === document.readyState) setTimeout(jQuery.ready); else if (document.addEventListener) {
                document.addEventListener("DOMContentLoaded", completed, !1);
                window.addEventListener("load", completed, !1);
            } else {
                document.attachEvent("onreadystatechange", completed);
                window.attachEvent("onload", completed);
                var top = !1;
                try {
                    top = null == window.frameElement && document.documentElement;
                } catch (e) {}
                top && top.doScroll && function doScrollCheck() {
                    if (!jQuery.isReady) {
                        try {
                            top.doScroll("left");
                        } catch (e) {
                            return setTimeout(doScrollCheck, 50);
                        }
                        detach();
                        jQuery.ready();
                    }
                }();
            }
        }
        return readyList.promise(obj);
    };
    var i, strundefined = "undefined";
    for (i in jQuery(support)) break;
    support.ownLast = "0" !== i;
    support.inlineBlockNeedsLayout = !1;
    jQuery(function() {
        var val, div, body, container;
        if ((body = document.getElementsByTagName("body")[0]) && body.style) {
            div = document.createElement("div");
            (container = document.createElement("div")).style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
            body.appendChild(container).appendChild(div);
            if (typeof div.style.zoom !== strundefined) {
                div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";
                support.inlineBlockNeedsLayout = val = 3 === div.offsetWidth;
                val && (body.style.zoom = 1);
            }
            body.removeChild(container);
        }
    });
    !function() {
        var div = document.createElement("div");
        if (null == support.deleteExpando) {
            support.deleteExpando = !0;
            try {
                delete div.test;
            } catch (e) {
                support.deleteExpando = !1;
            }
        }
        div = null;
    }();
    jQuery.acceptData = function(elem) {
        var noData = jQuery.noData[(elem.nodeName + " ").toLowerCase()], nodeType = +elem.nodeType || 1;
        return (1 === nodeType || 9 === nodeType) && (!noData || !0 !== noData && elem.getAttribute("classid") === noData);
    };
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /([A-Z])/g;
    function dataAttr(elem, key, data) {
        if (void 0 === data && 1 === elem.nodeType) {
            var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
            if ("string" == typeof (data = elem.getAttribute(name))) {
                try {
                    data = "true" === data || "false" !== data && ("null" === data ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data);
                } catch (e) {}
                jQuery.data(elem, key, data);
            } else data = void 0;
        }
        return data;
    }
    function isEmptyDataObject(obj) {
        var name;
        for (name in obj) if (("data" !== name || !jQuery.isEmptyObject(obj[name])) && "toJSON" !== name) return !1;
        return !0;
    }
    function internalData(elem, name, data, pvt) {
        if (jQuery.acceptData(elem)) {
            var ret, thisCache, internalKey = jQuery.expando, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;
            if (id && cache[id] && (pvt || cache[id].data) || void 0 !== data || "string" != typeof name) {
                id || (id = isNode ? elem[internalKey] = deletedIds.pop() || jQuery.guid++ : internalKey);
                cache[id] || (cache[id] = isNode ? {} : {
                    toJSON: jQuery.noop
                });
                "object" != typeof name && "function" != typeof name || (pvt ? cache[id] = jQuery.extend(cache[id], name) : cache[id].data = jQuery.extend(cache[id].data, name));
                thisCache = cache[id];
                if (!pvt) {
                    thisCache.data || (thisCache.data = {});
                    thisCache = thisCache.data;
                }
                void 0 !== data && (thisCache[jQuery.camelCase(name)] = data);
                "string" == typeof name ? null == (ret = thisCache[name]) && (ret = thisCache[jQuery.camelCase(name)]) : ret = thisCache;
                return ret;
            }
        }
    }
    function internalRemoveData(elem, name, pvt) {
        if (jQuery.acceptData(elem)) {
            var thisCache, i, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[jQuery.expando] : jQuery.expando;
            if (cache[id]) {
                if (name && (thisCache = pvt ? cache[id] : cache[id].data)) {
                    i = (name = jQuery.isArray(name) ? name.concat(jQuery.map(name, jQuery.camelCase)) : name in thisCache ? [ name ] : (name = jQuery.camelCase(name)) in thisCache ? [ name ] : name.split(" ")).length;
                    for (;i--; ) delete thisCache[name[i]];
                    if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) return;
                }
                if (!pvt) {
                    delete cache[id].data;
                    if (!isEmptyDataObject(cache[id])) return;
                }
                isNode ? jQuery.cleanData([ elem ], !0) : support.deleteExpando || cache != cache.window ? delete cache[id] : cache[id] = null;
            }
        }
    }
    jQuery.extend({
        cache: {},
        noData: {
            "applet ": !0,
            "embed ": !0,
            "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        },
        hasData: function(elem) {
            return !!(elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando]) && !isEmptyDataObject(elem);
        },
        data: function(elem, name, data) {
            return internalData(elem, name, data);
        },
        removeData: function(elem, name) {
            return internalRemoveData(elem, name);
        },
        _data: function(elem, name, data) {
            return internalData(elem, name, data, !0);
        },
        _removeData: function(elem, name) {
            return internalRemoveData(elem, name, !0);
        }
    });
    jQuery.fn.extend({
        data: function(key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (void 0 !== key) return "object" == typeof key ? this.each(function() {
                jQuery.data(this, key);
            }) : 1 < arguments.length ? this.each(function() {
                jQuery.data(this, key, value);
            }) : elem ? dataAttr(elem, key, jQuery.data(elem, key)) : void 0;
            if (this.length) {
                data = jQuery.data(elem);
                if (1 === elem.nodeType && !jQuery._data(elem, "parsedAttrs")) {
                    i = attrs.length;
                    for (;i--; ) attrs[i] && 0 === (name = attrs[i].name).indexOf("data-") && dataAttr(elem, name = jQuery.camelCase(name.slice(5)), data[name]);
                    jQuery._data(elem, "parsedAttrs", !0);
                }
            }
            return data;
        },
        removeData: function(key) {
            return this.each(function() {
                jQuery.removeData(this, key);
            });
        }
    });
    jQuery.extend({
        queue: function(elem, type, data) {
            var queue;
            if (elem) {
                type = (type || "fx") + "queue";
                queue = jQuery._data(elem, type);
                data && (!queue || jQuery.isArray(data) ? queue = jQuery._data(elem, type, jQuery.makeArray(data)) : queue.push(data));
                return queue || [];
            }
        },
        dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type);
            if ("inprogress" === fn) {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                "fx" === type && queue.unshift("inprogress");
                delete hooks.stop;
                fn.call(elem, function() {
                    jQuery.dequeue(elem, type);
                }, hooks);
            }
            !startLength && hooks && hooks.empty.fire();
        },
        _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return jQuery._data(elem, key) || jQuery._data(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    jQuery._removeData(elem, type + "queue");
                    jQuery._removeData(elem, key);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function(type, data) {
            var setter = 2;
            if ("string" != typeof type) {
                data = type;
                type = "fx";
                setter--;
            }
            return arguments.length < setter ? jQuery.queue(this[0], type) : void 0 === data ? this : this.each(function() {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                "fx" === type && "inprogress" !== queue[0] && jQuery.dequeue(this, type);
            });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", []);
        },
        promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
                --count || defer.resolveWith(elements, [ elements ]);
            };
            if ("string" != typeof type) {
                obj = type;
                type = void 0;
            }
            type = type || "fx";
            for (;i--; ) if ((tmp = jQuery._data(elements[i], type + "queueHooks")) && tmp.empty) {
                count++;
                tmp.empty.add(resolve);
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, cssExpand = [ "Top", "Right", "Bottom", "Left" ], isHidden = function(elem, el) {
        elem = el || elem;
        return "none" === jQuery.css(elem, "display") || !jQuery.contains(elem.ownerDocument, elem);
    }, access = jQuery.access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, length = elems.length, bulk = null == key;
        if ("object" === jQuery.type(key)) {
            chainable = !0;
            for (i in key) jQuery.access(elems, fn, i, key[i], !0, emptyGet, raw);
        } else if (void 0 !== value) {
            chainable = !0;
            jQuery.isFunction(value) || (raw = !0);
            if (bulk) if (raw) {
                fn.call(elems, value);
                fn = null;
            } else {
                bulk = fn;
                fn = function(elem, key, value) {
                    return bulk.call(jQuery(elem), value);
                };
            }
            if (fn) for (;i < length; i++) fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
        return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
    }, rcheckableType = /^(?:checkbox|radio)$/i;
    !function() {
        var input = document.createElement("input"), div = document.createElement("div"), fragment = document.createDocumentFragment();
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        support.leadingWhitespace = 3 === div.firstChild.nodeType;
        support.tbody = !div.getElementsByTagName("tbody").length;
        support.htmlSerialize = !!div.getElementsByTagName("link").length;
        support.html5Clone = "<:nav></:nav>" !== document.createElement("nav").cloneNode(!0).outerHTML;
        input.type = "checkbox";
        input.checked = !0;
        fragment.appendChild(input);
        support.appendChecked = input.checked;
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(!0).lastChild.defaultValue;
        fragment.appendChild(div);
        div.innerHTML = "<input type='radio' checked='checked' name='t'/>";
        support.checkClone = div.cloneNode(!0).cloneNode(!0).lastChild.checked;
        support.noCloneEvent = !0;
        if (div.attachEvent) {
            div.attachEvent("onclick", function() {
                support.noCloneEvent = !1;
            });
            div.cloneNode(!0).click();
        }
        if (null == support.deleteExpando) {
            support.deleteExpando = !0;
            try {
                delete div.test;
            } catch (e) {
                support.deleteExpando = !1;
            }
        }
    }();
    !function() {
        var i, eventName, div = document.createElement("div");
        for (i in {
            submit: !0,
            change: !0,
            focusin: !0
        }) {
            eventName = "on" + i;
            if (!(support[i + "Bubbles"] = eventName in window)) {
                div.setAttribute(eventName, "t");
                support[i + "Bubbles"] = !1 === div.attributes[eventName].expando;
            }
        }
        div = null;
    }();
    var rformElems = /^(?:input|select|textarea)$/i, rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
    function returnTrue() {
        return !0;
    }
    function returnFalse() {
        return !1;
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {}
    }
    jQuery.event = {
        global: {},
        add: function(elem, types, handler, data, selector) {
            var tmp, events, t, handleObjIn, special, eventHandle, handleObj, handlers, type, namespaces, origType, elemData = jQuery._data(elem);
            if (elemData) {
                if (handler.handler) {
                    handler = (handleObjIn = handler).handler;
                    selector = handleObjIn.selector;
                }
                handler.guid || (handler.guid = jQuery.guid++);
                (events = elemData.events) || (events = elemData.events = {});
                (eventHandle = elemData.handle) || ((eventHandle = elemData.handle = function(e) {
                    return typeof jQuery === strundefined || e && jQuery.event.triggered === e.type ? void 0 : jQuery.event.dispatch.apply(eventHandle.elem, arguments);
                }).elem = elem);
                t = (types = (types || "").match(rnotwhite) || [ "" ]).length;
                for (;t--; ) {
                    type = origType = (tmp = rtypenamespace.exec(types[t]) || [])[1];
                    namespaces = (tmp[2] || "").split(".").sort();
                    if (type) {
                        special = jQuery.event.special[type] || {};
                        type = (selector ? special.delegateType : special.bindType) || type;
                        special = jQuery.event.special[type] || {};
                        handleObj = jQuery.extend({
                            type: type,
                            origType: origType,
                            data: data,
                            handler: handler,
                            guid: handler.guid,
                            selector: selector,
                            needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                            namespace: namespaces.join(".")
                        }, handleObjIn);
                        if (!(handlers = events[type])) {
                            (handlers = events[type] = []).delegateCount = 0;
                            special.setup && !1 !== special.setup.call(elem, data, namespaces, eventHandle) || (elem.addEventListener ? elem.addEventListener(type, eventHandle, !1) : elem.attachEvent && elem.attachEvent("on" + type, eventHandle));
                        }
                        if (special.add) {
                            special.add.call(elem, handleObj);
                            handleObj.handler.guid || (handleObj.handler.guid = handler.guid);
                        }
                        selector ? handlers.splice(handlers.delegateCount++, 0, handleObj) : handlers.push(handleObj);
                        jQuery.event.global[type] = !0;
                    }
                }
                elem = null;
            }
        },
        remove: function(elem, types, handler, selector, mappedTypes) {
            var j, handleObj, tmp, origCount, t, events, special, handlers, type, namespaces, origType, elemData = jQuery.hasData(elem) && jQuery._data(elem);
            if (elemData && (events = elemData.events)) {
                t = (types = (types || "").match(rnotwhite) || [ "" ]).length;
                for (;t--; ) {
                    type = origType = (tmp = rtypenamespace.exec(types[t]) || [])[1];
                    namespaces = (tmp[2] || "").split(".").sort();
                    if (type) {
                        special = jQuery.event.special[type] || {};
                        handlers = events[type = (selector ? special.delegateType : special.bindType) || type] || [];
                        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                        origCount = j = handlers.length;
                        for (;j--; ) {
                            handleObj = handlers[j];
                            if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || "**" === selector && handleObj.selector)) {
                                handlers.splice(j, 1);
                                handleObj.selector && handlers.delegateCount--;
                                special.remove && special.remove.call(elem, handleObj);
                            }
                        }
                        if (origCount && !handlers.length) {
                            special.teardown && !1 !== special.teardown.call(elem, namespaces, elemData.handle) || jQuery.removeEvent(elem, type, elemData.handle);
                            delete events[type];
                        }
                    } else for (type in events) jQuery.event.remove(elem, type + types[t], handler, selector, !0);
                }
                if (jQuery.isEmptyObject(events)) {
                    delete elemData.handle;
                    jQuery._removeData(elem, "events");
                }
            }
        },
        trigger: function(event, data, elem, onlyHandlers) {
            var handle, ontype, cur, bubbleType, special, tmp, i, eventPath = [ elem || document ], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = tmp = elem = elem || document;
            if (3 !== elem.nodeType && 8 !== elem.nodeType && !rfocusMorph.test(type + jQuery.event.triggered)) {
                if (0 <= type.indexOf(".")) {
                    type = (namespaces = type.split(".")).shift();
                    namespaces.sort();
                }
                ontype = type.indexOf(":") < 0 && "on" + type;
                (event = event[jQuery.expando] ? event : new jQuery.Event(type, "object" == typeof event && event)).isTrigger = onlyHandlers ? 2 : 3;
                event.namespace = namespaces.join(".");
                event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
                event.result = void 0;
                event.target || (event.target = elem);
                data = null == data ? [ event ] : jQuery.makeArray(data, [ event ]);
                special = jQuery.event.special[type] || {};
                if (onlyHandlers || !special.trigger || !1 !== special.trigger.apply(elem, data)) {
                    if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                        bubbleType = special.delegateType || type;
                        rfocusMorph.test(bubbleType + type) || (cur = cur.parentNode);
                        for (;cur; cur = cur.parentNode) {
                            eventPath.push(cur);
                            tmp = cur;
                        }
                        tmp === (elem.ownerDocument || document) && eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                    }
                    i = 0;
                    for (;(cur = eventPath[i++]) && !event.isPropagationStopped(); ) {
                        event.type = 1 < i ? bubbleType : special.bindType || type;
                        (handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle")) && handle.apply(cur, data);
                        if ((handle = ontype && cur[ontype]) && handle.apply && jQuery.acceptData(cur)) {
                            event.result = handle.apply(cur, data);
                            !1 === event.result && event.preventDefault();
                        }
                    }
                    event.type = type;
                    if (!onlyHandlers && !event.isDefaultPrevented() && (!special._default || !1 === special._default.apply(eventPath.pop(), data)) && jQuery.acceptData(elem) && ontype && elem[type] && !jQuery.isWindow(elem)) {
                        (tmp = elem[ontype]) && (elem[ontype] = null);
                        jQuery.event.triggered = type;
                        try {
                            elem[type]();
                        } catch (e) {}
                        jQuery.event.triggered = void 0;
                        tmp && (elem[ontype] = tmp);
                    }
                    return event.result;
                }
            }
        },
        dispatch: function(event) {
            event = jQuery.event.fix(event);
            var i, ret, handleObj, matched, j, handlerQueue, args = slice.call(arguments), handlers = (jQuery._data(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            (args[0] = event).delegateTarget = this;
            if (!special.preDispatch || !1 !== special.preDispatch.call(this, event)) {
                handlerQueue = jQuery.event.handlers.call(this, event, handlers);
                i = 0;
                for (;(matched = handlerQueue[i++]) && !event.isPropagationStopped(); ) {
                    event.currentTarget = matched.elem;
                    j = 0;
                    for (;(handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped(); ) if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        if (void 0 !== (ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args)) && !1 === (event.result = ret)) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                    }
                }
                special.postDispatch && special.postDispatch.call(this, event);
                return event.result;
            }
        },
        handlers: function(event, handlers) {
            var sel, handleObj, matches, i, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && (!event.button || "click" !== event.type)) for (;cur != this; cur = cur.parentNode || this) if (1 === cur.nodeType && (!0 !== cur.disabled || "click" !== event.type)) {
                matches = [];
                for (i = 0; i < delegateCount; i++) {
                    void 0 === matches[sel = (handleObj = handlers[i]).selector + " "] && (matches[sel] = handleObj.needsContext ? 0 <= jQuery(sel, this).index(cur) : jQuery.find(sel, this, null, [ cur ]).length);
                    matches[sel] && matches.push(handleObj);
                }
                matches.length && handlerQueue.push({
                    elem: cur,
                    handlers: matches
                });
            }
            delegateCount < handlers.length && handlerQueue.push({
                elem: this,
                handlers: handlers.slice(delegateCount)
            });
            return handlerQueue;
        },
        fix: function(event) {
            if (event[jQuery.expando]) return event;
            var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
            fixHook || (this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {});
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = new jQuery.Event(originalEvent);
            i = copy.length;
            for (;i--; ) event[prop = copy[i]] = originalEvent[prop];
            event.target || (event.target = originalEvent.srcElement || document);
            3 === event.target.nodeType && (event.target = event.target.parentNode);
            event.metaKey = !!event.metaKey;
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(event, original) {
                null == event.which && (event.which = null != original.charCode ? original.charCode : original.keyCode);
                return event;
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(event, original) {
                var body, eventDoc, doc, button = original.button, fromElement = original.fromElement;
                if (null == event.pageX && null != original.clientX) {
                    doc = (eventDoc = event.target.ownerDocument || document).documentElement;
                    body = eventDoc.body;
                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                }
                !event.relatedTarget && fromElement && (event.relatedTarget = fromElement === event.target ? original.toElement : fromElement);
                event.which || void 0 === button || (event.which = 1 & button ? 1 : 2 & button ? 3 : 4 & button ? 2 : 0);
                return event;
            }
        },
        special: {
            load: {
                noBubble: !0
            },
            focus: {
                trigger: function() {
                    if (this !== safeActiveElement() && this.focus) try {
                        this.focus();
                        return !1;
                    } catch (e) {}
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return !1;
                    }
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    if (jQuery.nodeName(this, "input") && "checkbox" === this.type && this.click) {
                        this.click();
                        return !1;
                    }
                },
                _default: function(event) {
                    return jQuery.nodeName(event.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function(event) {
                    void 0 !== event.result && event.originalEvent && (event.originalEvent.returnValue = event.result);
                }
            }
        },
        simulate: function(type, elem, event, bubble) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: !0,
                originalEvent: {}
            });
            bubble ? jQuery.event.trigger(e, null, elem) : jQuery.event.dispatch.call(elem, e);
            e.isDefaultPrevented() && event.preventDefault();
        }
    };
    jQuery.removeEvent = document.removeEventListener ? function(elem, type, handle) {
        elem.removeEventListener && elem.removeEventListener(type, handle, !1);
    } : function(elem, type, handle) {
        var name = "on" + type;
        if (elem.detachEvent) {
            typeof elem[name] === strundefined && (elem[name] = null);
            elem.detachEvent(name, handle);
        }
    };
    jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) return new jQuery.Event(src, props);
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || void 0 === src.defaultPrevented && !1 === src.returnValue ? returnTrue : returnFalse;
        } else this.type = src;
        props && jQuery.extend(this, props);
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = !0;
    };
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            e && (e.preventDefault ? e.preventDefault() : e.returnValue = !1);
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e) {
                e.stopPropagation && e.stopPropagation();
                e.cancelBubble = !0;
            }
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            e && e.stopImmediatePropagation && e.stopImmediatePropagation();
            this.stopPropagation();
        }
    };
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
                var ret, related = event.relatedTarget, handleObj = event.handleObj;
                if (!related || related !== this && !jQuery.contains(this, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    support.submitBubbles || (jQuery.event.special.submit = {
        setup: function() {
            if (jQuery.nodeName(this, "form")) return !1;
            jQuery.event.add(this, "click._submit keypress._submit", function(e) {
                var elem = e.target, form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : void 0;
                if (form && !jQuery._data(form, "submitBubbles")) {
                    jQuery.event.add(form, "submit._submit", function(event) {
                        event._submit_bubble = !0;
                    });
                    jQuery._data(form, "submitBubbles", !0);
                }
            });
        },
        postDispatch: function(event) {
            if (event._submit_bubble) {
                delete event._submit_bubble;
                this.parentNode && !event.isTrigger && jQuery.event.simulate("submit", this.parentNode, event, !0);
            }
        },
        teardown: function() {
            if (jQuery.nodeName(this, "form")) return !1;
            jQuery.event.remove(this, "._submit");
        }
    });
    support.changeBubbles || (jQuery.event.special.change = {
        setup: function() {
            if (rformElems.test(this.nodeName)) {
                if ("checkbox" === this.type || "radio" === this.type) {
                    jQuery.event.add(this, "propertychange._change", function(event) {
                        "checked" === event.originalEvent.propertyName && (this._just_changed = !0);
                    });
                    jQuery.event.add(this, "click._change", function(event) {
                        this._just_changed && !event.isTrigger && (this._just_changed = !1);
                        jQuery.event.simulate("change", this, event, !0);
                    });
                }
                return !1;
            }
            jQuery.event.add(this, "beforeactivate._change", function(e) {
                var elem = e.target;
                if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {
                    jQuery.event.add(elem, "change._change", function(event) {
                        !this.parentNode || event.isSimulated || event.isTrigger || jQuery.event.simulate("change", this.parentNode, event, !0);
                    });
                    jQuery._data(elem, "changeBubbles", !0);
                }
            });
        },
        handle: function(event) {
            var elem = event.target;
            if (this !== elem || event.isSimulated || event.isTrigger || "radio" !== elem.type && "checkbox" !== elem.type) return event.handleObj.handler.apply(this, arguments);
        },
        teardown: function() {
            jQuery.event.remove(this, "._change");
            return !rformElems.test(this.nodeName);
        }
    });
    support.focusinBubbles || jQuery.each({
        focus: "focusin",
        blur: "focusout"
    }, function(orig, fix) {
        var handler = function(event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), !0);
        };
        jQuery.event.special[fix] = {
            setup: function() {
                var doc = this.ownerDocument || this, attaches = jQuery._data(doc, fix);
                attaches || doc.addEventListener(orig, handler, !0);
                jQuery._data(doc, fix, (attaches || 0) + 1);
            },
            teardown: function() {
                var doc = this.ownerDocument || this, attaches = jQuery._data(doc, fix) - 1;
                if (attaches) jQuery._data(doc, fix, attaches); else {
                    doc.removeEventListener(orig, handler, !0);
                    jQuery._removeData(doc, fix);
                }
            }
        };
    });
    jQuery.fn.extend({
        on: function(types, selector, data, fn, one) {
            var type, origFn;
            if ("object" == typeof types) {
                if ("string" != typeof selector) {
                    data = data || selector;
                    selector = void 0;
                }
                for (type in types) this.on(type, selector, data, types[type], one);
                return this;
            }
            if (null == data && null == fn) {
                fn = selector;
                data = selector = void 0;
            } else if (null == fn) if ("string" == typeof selector) {
                fn = data;
                data = void 0;
            } else {
                fn = data;
                data = selector;
                selector = void 0;
            }
            if (!1 === fn) fn = returnFalse; else if (!fn) return this;
            if (1 === one) {
                origFn = fn;
                (fn = function(event) {
                    jQuery().off(event);
                    return origFn.apply(this, arguments);
                }).guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return this.each(function() {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },
        one: function(types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if ("object" == typeof types) {
                for (type in types) this.off(type, selector, types[type]);
                return this;
            }
            if (!1 === selector || "function" == typeof selector) {
                fn = selector;
                selector = void 0;
            }
            !1 === fn && (fn = returnFalse);
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        },
        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) return jQuery.event.trigger(type, data, elem, !0);
        }
    });
    function createSafeFragment(document) {
        var list = nodeNames.split("|"), safeFrag = document.createDocumentFragment();
        if (safeFrag.createElement) for (;list.length; ) safeFrag.createElement(list.pop());
        return safeFrag;
    }
    var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g, rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"), rleadingWhitespace = /^\s+/, rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rtbody = /<tbody/i, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, wrapMap = {
        option: [ 1, "<select multiple='multiple'>", "</select>" ],
        legend: [ 1, "<fieldset>", "</fieldset>" ],
        area: [ 1, "<map>", "</map>" ],
        param: [ 1, "<object>", "</object>" ],
        thead: [ 1, "<table>", "</table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
    }, fragmentDiv = createSafeFragment(document).appendChild(document.createElement("div"));
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    function getAll(context, tag) {
        var elems, elem, i = 0, found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== strundefined ? context.querySelectorAll(tag || "*") : void 0;
        if (!found) for (found = [], elems = context.childNodes || context; null != (elem = elems[i]); i++) !tag || jQuery.nodeName(elem, tag) ? found.push(elem) : jQuery.merge(found, getAll(elem, tag));
        return void 0 === tag || tag && jQuery.nodeName(context, tag) ? jQuery.merge([ context ], found) : found;
    }
    function fixDefaultChecked(elem) {
        rcheckableType.test(elem.type) && (elem.defaultChecked = elem.checked);
    }
    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") && jQuery.nodeName(11 !== content.nodeType ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
    }
    function disableScript(elem) {
        elem.type = (null !== jQuery.find.attr(elem, "type")) + "/" + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        match ? elem.type = match[1] : elem.removeAttribute("type");
        return elem;
    }
    function setGlobalEval(elems, refElements) {
        for (var elem, i = 0; null != (elem = elems[i]); i++) jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"));
    }
    function cloneCopyEvent(src, dest) {
        if (1 === dest.nodeType && jQuery.hasData(src)) {
            var type, i, l, oldData = jQuery._data(src), curData = jQuery._data(dest, oldData), events = oldData.events;
            if (events) {
                delete curData.handle;
                curData.events = {};
                for (type in events) for (i = 0, l = events[type].length; i < l; i++) jQuery.event.add(dest, type, events[type][i]);
            }
            curData.data && (curData.data = jQuery.extend({}, curData.data));
        }
    }
    function fixCloneNodeIssues(src, dest) {
        var nodeName, e, data;
        if (1 === dest.nodeType) {
            nodeName = dest.nodeName.toLowerCase();
            if (!support.noCloneEvent && dest[jQuery.expando]) {
                data = jQuery._data(dest);
                for (e in data.events) jQuery.removeEvent(dest, e, data.handle);
                dest.removeAttribute(jQuery.expando);
            }
            if ("script" === nodeName && dest.text !== src.text) {
                disableScript(dest).text = src.text;
                restoreScript(dest);
            } else if ("object" === nodeName) {
                dest.parentNode && (dest.outerHTML = src.outerHTML);
                support.html5Clone && src.innerHTML && !jQuery.trim(dest.innerHTML) && (dest.innerHTML = src.innerHTML);
            } else if ("input" === nodeName && rcheckableType.test(src.type)) {
                dest.defaultChecked = dest.checked = src.checked;
                dest.value !== src.value && (dest.value = src.value);
            } else "option" === nodeName ? dest.defaultSelected = dest.selected = src.defaultSelected : "input" !== nodeName && "textarea" !== nodeName || (dest.defaultValue = src.defaultValue);
        }
    }
    jQuery.extend({
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var destElements, node, clone, i, srcElements, inPage = jQuery.contains(elem.ownerDocument, elem);
            if (support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) clone = elem.cloneNode(!0); else {
                fragmentDiv.innerHTML = elem.outerHTML;
                fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
            }
            if (!(support.noCloneEvent && support.noCloneChecked || 1 !== elem.nodeType && 11 !== elem.nodeType || jQuery.isXMLDoc(elem))) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0; null != (node = srcElements[i]); ++i) destElements[i] && fixCloneNodeIssues(node, destElements[i]);
            }
            if (dataAndEvents) if (deepDataAndEvents) {
                srcElements = srcElements || getAll(elem);
                destElements = destElements || getAll(clone);
                for (i = 0; null != (node = srcElements[i]); i++) cloneCopyEvent(node, destElements[i]);
            } else cloneCopyEvent(elem, clone);
            0 < (destElements = getAll(clone, "script")).length && setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            destElements = srcElements = node = null;
            return clone;
        },
        buildFragment: function(elems, context, scripts, selection) {
            for (var j, elem, contains, tmp, tag, tbody, wrap, l = elems.length, safe = createSafeFragment(context), nodes = [], i = 0; i < l; i++) if ((elem = elems[i]) || 0 === elem) if ("object" === jQuery.type(elem)) jQuery.merge(nodes, elem.nodeType ? [ elem ] : elem); else if (rhtml.test(elem)) {
                tmp = tmp || safe.appendChild(context.createElement("div"));
                tag = (rtagName.exec(elem) || [ "", "" ])[1].toLowerCase();
                wrap = wrapMap[tag] || wrapMap._default;
                tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                j = wrap[0];
                for (;j--; ) tmp = tmp.lastChild;
                !support.leadingWhitespace && rleadingWhitespace.test(elem) && nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
                if (!support.tbody) {
                    j = (elem = "table" !== tag || rtbody.test(elem) ? "<table>" !== wrap[1] || rtbody.test(elem) ? 0 : tmp : tmp.firstChild) && elem.childNodes.length;
                    for (;j--; ) jQuery.nodeName(tbody = elem.childNodes[j], "tbody") && !tbody.childNodes.length && elem.removeChild(tbody);
                }
                jQuery.merge(nodes, tmp.childNodes);
                tmp.textContent = "";
                for (;tmp.firstChild; ) tmp.removeChild(tmp.firstChild);
                tmp = safe.lastChild;
            } else nodes.push(context.createTextNode(elem));
            tmp && safe.removeChild(tmp);
            support.appendChecked || jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
            i = 0;
            for (;elem = nodes[i++]; ) if (!selection || -1 === jQuery.inArray(elem, selection)) {
                contains = jQuery.contains(elem.ownerDocument, elem);
                tmp = getAll(safe.appendChild(elem), "script");
                contains && setGlobalEval(tmp);
                if (scripts) {
                    j = 0;
                    for (;elem = tmp[j++]; ) rscriptType.test(elem.type || "") && scripts.push(elem);
                }
            }
            tmp = null;
            return safe;
        },
        cleanData: function(elems, acceptData) {
            for (var elem, type, id, data, i = 0, internalKey = jQuery.expando, cache = jQuery.cache, deleteExpando = support.deleteExpando, special = jQuery.event.special; null != (elem = elems[i]); i++) if ((acceptData || jQuery.acceptData(elem)) && (data = (id = elem[internalKey]) && cache[id])) {
                if (data.events) for (type in data.events) special[type] ? jQuery.event.remove(elem, type) : jQuery.removeEvent(elem, type, data.handle);
                if (cache[id]) {
                    delete cache[id];
                    deleteExpando ? delete elem[internalKey] : typeof elem.removeAttribute !== strundefined ? elem.removeAttribute(internalKey) : elem[internalKey] = null;
                    deletedIds.push(id);
                }
            }
        }
    });
    jQuery.fn.extend({
        text: function(value) {
            return access(this, function(value) {
                return void 0 === value ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
            }, null, value, arguments.length);
        },
        append: function() {
            return this.domManip(arguments, function(elem) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    manipulationTarget(this, elem).appendChild(elem);
                }
            });
        },
        prepend: function() {
            return this.domManip(arguments, function(elem) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function() {
            return this.domManip(arguments, function(elem) {
                this.parentNode && this.parentNode.insertBefore(elem, this);
            });
        },
        after: function() {
            return this.domManip(arguments, function(elem) {
                this.parentNode && this.parentNode.insertBefore(elem, this.nextSibling);
            });
        },
        remove: function(selector, keepData) {
            for (var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0; null != (elem = elems[i]); i++) {
                keepData || 1 !== elem.nodeType || jQuery.cleanData(getAll(elem));
                if (elem.parentNode) {
                    keepData && jQuery.contains(elem.ownerDocument, elem) && setGlobalEval(getAll(elem, "script"));
                    elem.parentNode.removeChild(elem);
                }
            }
            return this;
        },
        empty: function() {
            for (var elem, i = 0; null != (elem = this[i]); i++) {
                1 === elem.nodeType && jQuery.cleanData(getAll(elem, !1));
                for (;elem.firstChild; ) elem.removeChild(elem.firstChild);
                elem.options && jQuery.nodeName(elem, "select") && (elem.options.length = 0);
            }
            return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = null != dataAndEvents && dataAndEvents;
            deepDataAndEvents = null == deepDataAndEvents ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function(value) {
            return access(this, function(value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (void 0 === value) return 1 === elem.nodeType ? elem.innerHTML.replace(rinlinejQuery, "") : void 0;
                if ("string" == typeof value && !rnoInnerhtml.test(value) && (support.htmlSerialize || !rnoshimcache.test(value)) && (support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || [ "", "" ])[1].toLowerCase()]) {
                    value = value.replace(rxhtmlTag, "<$1></$2>");
                    try {
                        for (;i < l; i++) if (1 === (elem = this[i] || {}).nodeType) {
                            jQuery.cleanData(getAll(elem, !1));
                            elem.innerHTML = value;
                        }
                        elem = 0;
                    } catch (e) {}
                }
                elem && this.empty().append(value);
            }, null, value, arguments.length);
        },
        replaceWith: function() {
            var arg = arguments[0];
            this.domManip(arguments, function(elem) {
                arg = this.parentNode;
                jQuery.cleanData(getAll(this));
                arg && arg.replaceChild(elem, this);
            });
            return arg && (arg.length || arg.nodeType) ? this : this.remove();
        },
        detach: function(selector) {
            return this.remove(selector, !0);
        },
        domManip: function(args, callback) {
            args = concat.apply([], args);
            var first, node, hasScripts, scripts, doc, fragment, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
            if (isFunction || 1 < l && "string" == typeof value && !support.checkClone && rchecked.test(value)) return this.each(function(index) {
                var self = set.eq(index);
                isFunction && (args[0] = value.call(this, index, self.html()));
                self.domManip(args, callback);
            });
            if (l) {
                first = (fragment = jQuery.buildFragment(args, this[0].ownerDocument, !1, this)).firstChild;
                1 === fragment.childNodes.length && (fragment = first);
                if (first) {
                    hasScripts = (scripts = jQuery.map(getAll(fragment, "script"), disableScript)).length;
                    for (;i < l; i++) {
                        node = fragment;
                        if (i !== iNoClone) {
                            node = jQuery.clone(node, !0, !0);
                            hasScripts && jQuery.merge(scripts, getAll(node, "script"));
                        }
                        callback.call(this[i], node, i);
                    }
                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;
                        jQuery.map(scripts, restoreScript);
                        for (i = 0; i < hasScripts; i++) {
                            node = scripts[i];
                            rscriptType.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(doc, node) && (node.src ? jQuery._evalUrl && jQuery._evalUrl(node.src) : jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, "")));
                        }
                    }
                    fragment = first = null;
                }
            }
            return this;
        }
    });
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            for (var elems, i = 0, ret = [], insert = jQuery(selector), last = insert.length - 1; i <= last; i++) {
                elems = i === last ? this : this.clone(!0);
                jQuery(insert[i])[original](elems);
                push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    var iframe, shrinkWrapBlocksVal, elemdisplay = {};
    function actualDisplay(name, doc) {
        var style, elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], "display");
        elem.detach();
        return display;
    }
    function defaultDisplay(nodeName) {
        var doc = document, display = elemdisplay[nodeName];
        if (!display) {
            if ("none" === (display = actualDisplay(nodeName, doc)) || !display) {
                (doc = ((iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement))[0].contentWindow || iframe[0].contentDocument).document).write();
                doc.close();
                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }
            elemdisplay[nodeName] = display;
        }
        return display;
    }
    support.shrinkWrapBlocks = function() {
        if (null != shrinkWrapBlocksVal) return shrinkWrapBlocksVal;
        shrinkWrapBlocksVal = !1;
        var div, body, container;
        if ((body = document.getElementsByTagName("body")[0]) && body.style) {
            div = document.createElement("div");
            (container = document.createElement("div")).style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
            body.appendChild(container).appendChild(div);
            if (typeof div.style.zoom !== strundefined) {
                div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1";
                div.appendChild(document.createElement("div")).style.width = "5px";
                shrinkWrapBlocksVal = 3 !== div.offsetWidth;
            }
            body.removeChild(container);
            return shrinkWrapBlocksVal;
        }
    };
    var getStyles, curCSS, rmargin = /^margin/, rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i"), rposition = /^(top|right|bottom|left)$/;
    if (window.getComputedStyle) {
        getStyles = function(elem) {
            return elem.ownerDocument.defaultView.opener ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : window.getComputedStyle(elem, null);
        };
        curCSS = function(elem, name, computed) {
            var width, minWidth, maxWidth, ret, style = elem.style;
            ret = (computed = computed || getStyles(elem)) ? computed.getPropertyValue(name) || computed[name] : void 0;
            if (computed) {
                "" !== ret || jQuery.contains(elem.ownerDocument, elem) || (ret = jQuery.style(elem, name));
                if (rnumnonpx.test(ret) && rmargin.test(name)) {
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;
                    style.minWidth = style.maxWidth = style.width = ret;
                    ret = computed.width;
                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth;
                }
            }
            return void 0 === ret ? ret : ret + "";
        };
    } else if (document.documentElement.currentStyle) {
        getStyles = function(elem) {
            return elem.currentStyle;
        };
        curCSS = function(elem, name, computed) {
            var left, rs, rsLeft, ret, style = elem.style;
            null == (ret = (computed = computed || getStyles(elem)) ? computed[name] : void 0) && style && style[name] && (ret = style[name]);
            if (rnumnonpx.test(ret) && !rposition.test(name)) {
                left = style.left;
                (rsLeft = (rs = elem.runtimeStyle) && rs.left) && (rs.left = elem.currentStyle.left);
                style.left = "fontSize" === name ? "1em" : ret;
                ret = style.pixelLeft + "px";
                style.left = left;
                rsLeft && (rs.left = rsLeft);
            }
            return void 0 === ret ? ret : ret + "" || "auto";
        };
    }
    function addGetHookIf(conditionFn, hookFn) {
        return {
            get: function() {
                var condition = conditionFn();
                if (null != condition) {
                    if (!condition) return (this.get = hookFn).apply(this, arguments);
                    delete this.get;
                }
            }
        };
    }
    !function() {
        var div, style, a, pixelPositionVal, boxSizingReliableVal, reliableHiddenOffsetsVal, reliableMarginRightVal;
        (div = document.createElement("div")).innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        if (style = (a = div.getElementsByTagName("a")[0]) && a.style) {
            style.cssText = "float:left;opacity:.5";
            support.opacity = "0.5" === style.opacity;
            support.cssFloat = !!style.cssFloat;
            div.style.backgroundClip = "content-box";
            div.cloneNode(!0).style.backgroundClip = "";
            support.clearCloneStyle = "content-box" === div.style.backgroundClip;
            support.boxSizing = "" === style.boxSizing || "" === style.MozBoxSizing || "" === style.WebkitBoxSizing;
            jQuery.extend(support, {
                reliableHiddenOffsets: function() {
                    null == reliableHiddenOffsetsVal && computeStyleTests();
                    return reliableHiddenOffsetsVal;
                },
                boxSizingReliable: function() {
                    null == boxSizingReliableVal && computeStyleTests();
                    return boxSizingReliableVal;
                },
                pixelPosition: function() {
                    null == pixelPositionVal && computeStyleTests();
                    return pixelPositionVal;
                },
                reliableMarginRight: function() {
                    null == reliableMarginRightVal && computeStyleTests();
                    return reliableMarginRightVal;
                }
            });
        }
        function computeStyleTests() {
            var div, body, container, contents;
            if ((body = document.getElementsByTagName("body")[0]) && body.style) {
                div = document.createElement("div");
                (container = document.createElement("div")).style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
                body.appendChild(container).appendChild(div);
                div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute";
                pixelPositionVal = boxSizingReliableVal = !1;
                reliableMarginRightVal = !0;
                if (window.getComputedStyle) {
                    pixelPositionVal = "1%" !== (window.getComputedStyle(div, null) || {}).top;
                    boxSizingReliableVal = "4px" === (window.getComputedStyle(div, null) || {
                        width: "4px"
                    }).width;
                    (contents = div.appendChild(document.createElement("div"))).style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0";
                    contents.style.marginRight = contents.style.width = "0";
                    div.style.width = "1px";
                    reliableMarginRightVal = !parseFloat((window.getComputedStyle(contents, null) || {}).marginRight);
                    div.removeChild(contents);
                }
                div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
                (contents = div.getElementsByTagName("td"))[0].style.cssText = "margin:0;border:0;padding:0;display:none";
                if (reliableHiddenOffsetsVal = 0 === contents[0].offsetHeight) {
                    contents[0].style.display = "";
                    contents[1].style.display = "none";
                    reliableHiddenOffsetsVal = 0 === contents[0].offsetHeight;
                }
                body.removeChild(container);
            }
        }
    }();
    jQuery.swap = function(elem, options, callback, args) {
        var ret, name, old = {};
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) elem.style[name] = old[name];
        return ret;
    };
    var ralpha = /alpha\([^)]*\)/i, ropacity = /opacity\s*=\s*([^)]*)/, rdisplayswap = /^(none|table(?!-c[ea]).+)/, rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"), rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"), cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
    }, cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];
    function vendorPropName(style, name) {
        if (name in style) return name;
        for (var capName = name.charAt(0).toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length; i--; ) if ((name = cssPrefixes[i] + capName) in style) return name;
        return origName;
    }
    function showHide(elements, show) {
        for (var display, elem, hidden, values = [], index = 0, length = elements.length; index < length; index++) if ((elem = elements[index]).style) {
            values[index] = jQuery._data(elem, "olddisplay");
            display = elem.style.display;
            if (show) {
                values[index] || "none" !== display || (elem.style.display = "");
                "" === elem.style.display && isHidden(elem) && (values[index] = jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName)));
            } else {
                hidden = isHidden(elem);
                (display && "none" !== display || !hidden) && jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
            }
        }
        for (index = 0; index < length; index++) (elem = elements[index]).style && (show && "none" !== elem.style.display && "" !== elem.style.display || (elem.style.display = show ? values[index] || "" : "none"));
        return elements;
    }
    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
    }
    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        for (var i = extra === (isBorderBox ? "border" : "content") ? 4 : "width" === name ? 1 : 0, val = 0; i < 4; i += 2) {
            "margin" === extra && (val += jQuery.css(elem, extra + cssExpand[i], !0, styles));
            if (isBorderBox) {
                "content" === extra && (val -= jQuery.css(elem, "padding" + cssExpand[i], !0, styles));
                "margin" !== extra && (val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", !0, styles));
            } else {
                val += jQuery.css(elem, "padding" + cssExpand[i], !0, styles);
                "padding" !== extra && (val += jQuery.css(elem, "border" + cssExpand[i] + "Width", !0, styles));
            }
        }
        return val;
    }
    function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox = !0, val = "width" === name ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = support.boxSizing && "border-box" === jQuery.css(elem, "boxSizing", !1, styles);
        if (val <= 0 || null == val) {
            ((val = curCSS(elem, name, styles)) < 0 || null == val) && (val = elem.style[name]);
            if (rnumnonpx.test(val)) return val;
            valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
            val = parseFloat(val) || 0;
        }
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
    }
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, "opacity");
                        return "" === ret ? "1" : ret;
                    }
                }
            }
        },
        cssNumber: {
            columnCount: !0,
            fillOpacity: !0,
            flexGrow: !0,
            flexShrink: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {
            float: support.cssFloat ? "cssFloat" : "styleFloat"
        },
        style: function(elem, name, value, extra) {
            if (elem && 3 !== elem.nodeType && 8 !== elem.nodeType && elem.style) {
                var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
                name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
                hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
                if (void 0 === value) return hooks && "get" in hooks && void 0 !== (ret = hooks.get(elem, !1, extra)) ? ret : style[name];
                if ("string" === (type = typeof value) && (ret = rrelNum.exec(value))) {
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    type = "number";
                }
                if (null != value && value == value) {
                    "number" !== type || jQuery.cssNumber[origName] || (value += "px");
                    support.clearCloneStyle || "" !== value || 0 !== name.indexOf("background") || (style[name] = "inherit");
                    if (!(hooks && "set" in hooks && void 0 === (value = hooks.set(elem, value, extra)))) try {
                        style[name] = value;
                    } catch (e) {}
                }
            }
        },
        css: function(elem, name, extra, styles) {
            var num, val, hooks, origName = jQuery.camelCase(name);
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
            (hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]) && "get" in hooks && (val = hooks.get(elem, !0, extra));
            void 0 === val && (val = curCSS(elem, name, styles));
            "normal" === val && name in cssNormalTransform && (val = cssNormalTransform[name]);
            if ("" === extra || extra) {
                num = parseFloat(val);
                return !0 === extra || jQuery.isNumeric(num) ? num || 0 : val;
            }
            return val;
        }
    });
    jQuery.each([ "height", "width" ], function(i, name) {
        jQuery.cssHooks[name] = {
            get: function(elem, computed, extra) {
                if (computed) return rdisplayswap.test(jQuery.css(elem, "display")) && 0 === elem.offsetWidth ? jQuery.swap(elem, cssShow, function() {
                    return getWidthOrHeight(elem, name, extra);
                }) : getWidthOrHeight(elem, name, extra);
            },
            set: function(elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(0, value, extra ? augmentWidthOrHeight(elem, name, extra, support.boxSizing && "border-box" === jQuery.css(elem, "boxSizing", !1, styles), styles) : 0);
            }
        };
    });
    support.opacity || (jQuery.cssHooks.opacity = {
        get: function(elem, computed) {
            return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : computed ? "1" : "";
        },
        set: function(elem, value) {
            var style = elem.style, currentStyle = elem.currentStyle, opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + 100 * value + ")" : "", filter = currentStyle && currentStyle.filter || style.filter || "";
            if (((style.zoom = 1) <= value || "" === value) && "" === jQuery.trim(filter.replace(ralpha, "")) && style.removeAttribute) {
                style.removeAttribute("filter");
                if ("" === value || currentStyle && !currentStyle.filter) return;
            }
            style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
        }
    });
    jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(elem, computed) {
        if (computed) return jQuery.swap(elem, {
            display: "inline-block"
        }, curCSS, [ elem, "marginRight" ]);
    });
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
                for (var i = 0, expanded = {}, parts = "string" == typeof value ? value.split(" ") : [ value ]; i < 4; i++) expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                return expanded;
            }
        };
        rmargin.test(prefix) || (jQuery.cssHooks[prefix + suffix].set = setPositiveNumber);
    });
    jQuery.fn.extend({
        css: function(name, value) {
            return access(this, function(elem, name, value) {
                var styles, len, map = {}, i = 0;
                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (;i < len; i++) map[name[i]] = jQuery.css(elem, name[i], !1, styles);
                    return map;
                }
                return void 0 !== value ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, 1 < arguments.length);
        },
        show: function() {
            return showHide(this, !0);
        },
        hide: function() {
            return showHide(this);
        },
        toggle: function(state) {
            return "boolean" == typeof state ? state ? this.show() : this.hide() : this.each(function() {
                isHidden(this) ? jQuery(this).show() : jQuery(this).hide();
            });
        }
    });
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    ((jQuery.Tween = Tween).prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            this.options.duration ? this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration) : this.pos = eased = percent;
            this.now = (this.end - this.start) * eased + this.start;
            this.options.step && this.options.step.call(this.elem, this.now, this);
            hooks && hooks.set ? hooks.set(this) : Tween.propHooks._default.set(this);
            return this;
        }
    }).init.prototype = Tween.prototype;
    (Tween.propHooks = {
        _default: {
            get: function(tween) {
                var result;
                return null == tween.elem[tween.prop] || tween.elem.style && null != tween.elem.style[tween.prop] ? (result = jQuery.css(tween.elem, tween.prop, "")) && "auto" !== result ? result : 0 : tween.elem[tween.prop];
            },
            set: function(tween) {
                jQuery.fx.step[tween.prop] ? jQuery.fx.step[tween.prop](tween) : tween.elem.style && (null != tween.elem.style[jQuery.cssProps[tween.prop]] || jQuery.cssHooks[tween.prop]) ? jQuery.style(tween.elem, tween.prop, tween.now + tween.unit) : tween.elem[tween.prop] = tween.now;
            }
        }
    }).scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
            tween.elem.nodeType && tween.elem.parentNode && (tween.elem[tween.prop] = tween.now);
        }
    };
    jQuery.easing = {
        linear: function(p) {
            return p;
        },
        swing: function(p) {
            return .5 - Math.cos(p * Math.PI) / 2;
        }
    };
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.step = {};
    var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"), rrun = /queueHooks$/, animationPrefilters = [ function(elem, props, opts) {
        var prop, value, toggle, tween, hooks, oldfire, display, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = jQuery._data(elem, "fxshow");
        if (!opts.queue) {
            if (null == (hooks = jQuery._queueHooks(elem, "fx")).unqueued) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    hooks.unqueued || oldfire();
                };
            }
            hooks.unqueued++;
            anim.always(function() {
                anim.always(function() {
                    hooks.unqueued--;
                    jQuery.queue(elem, "fx").length || hooks.empty.fire();
                });
            });
        }
        if (1 === elem.nodeType && ("height" in props || "width" in props)) {
            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
            display = jQuery.css(elem, "display");
            "inline" === ("none" === display ? jQuery._data(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display) && "none" === jQuery.css(elem, "float") && (support.inlineBlockNeedsLayout && "inline" !== defaultDisplay(elem.nodeName) ? style.zoom = 1 : style.display = "inline-block");
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            support.shrinkWrapBlocks() || anim.always(function() {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || "toggle" === value;
                if (value === (hidden ? "hide" : "show")) {
                    if ("show" !== value || !dataShow || void 0 === dataShow[prop]) continue;
                    hidden = !0;
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            } else display = void 0;
        }
        if (jQuery.isEmptyObject(orig)) "inline" === ("none" === display ? defaultDisplay(elem.nodeName) : display) && (style.display = display); else {
            dataShow ? "hidden" in dataShow && (hidden = dataShow.hidden) : dataShow = jQuery._data(elem, "fxshow", {});
            toggle && (dataShow.hidden = !hidden);
            hidden ? jQuery(elem).show() : anim.done(function() {
                jQuery(elem).hide();
            });
            anim.done(function() {
                var prop;
                jQuery._removeData(elem, "fxshow");
                for (prop in orig) jQuery.style(elem, prop, orig[prop]);
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = "width" === prop || "height" === prop ? 1 : 0;
                    }
                }
            }
        }
    } ], tweeners = {
        "*": [ function(prop, value) {
            var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"), start = (jQuery.cssNumber[prop] || "px" !== unit && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
            if (start && start[3] !== unit) {
                unit = unit || start[3];
                parts = parts || [];
                start = +target || 1;
                do {
                    start /= scale = scale || ".5";
                    jQuery.style(tween.elem, prop, start + unit);
                } while (scale !== (scale = tween.cur() / target) && 1 !== scale && --maxIterations);
            }
            if (parts) {
                start = tween.start = +start || +target || 0;
                tween.unit = unit;
                tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
            }
            return tween;
        } ]
    };
    function createFxNow() {
        setTimeout(function() {
            fxNow = void 0;
        });
        return fxNow = jQuery.now();
    }
    function genFx(type, includeWidth) {
        var which, attrs = {
            height: type
        }, i = 0;
        includeWidth = includeWidth ? 1 : 0;
        for (;i < 4; i += 2 - includeWidth) attrs["margin" + (which = cssExpand[i])] = attrs["padding" + which] = type;
        includeWidth && (attrs.opacity = attrs.width = type);
        return attrs;
    }
    function createTween(value, prop, animation) {
        for (var tween, collection = (tweeners[prop] || []).concat(tweeners["*"]), index = 0, length = collection.length; index < length; index++) if (tween = collection[index].call(animation, prop, value)) return tween;
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function() {
            delete tick.elem;
        }), tick = function() {
            if (stopped) return !1;
            for (var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), percent = 1 - (remaining / animation.duration || 0), index = 0, length = animation.tweens.length; index < length; index++) animation.tweens[index].run(percent);
            deferred.notifyWith(elem, [ animation, percent, remaining ]);
            if (percent < 1 && length) return remaining;
            deferred.resolveWith(elem, [ animation ]);
            return !1;
        }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(!0, {
                specialEasing: {}
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
            },
            stop: function(gotoEnd) {
                var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) return this;
                stopped = !0;
                for (;index < length; index++) animation.tweens[index].run(1);
                gotoEnd ? deferred.resolveWith(elem, [ animation, gotoEnd ]) : deferred.rejectWith(elem, [ animation, gotoEnd ]);
                return this;
            }
        }), props = animation.props;
        !function(props, specialEasing) {
            var index, name, easing, value, hooks;
            for (index in props) {
                easing = specialEasing[name = jQuery.camelCase(index)];
                value = props[index];
                if (jQuery.isArray(value)) {
                    easing = value[1];
                    value = props[index] = value[0];
                }
                if (index !== name) {
                    props[name] = value;
                    delete props[index];
                }
                if ((hooks = jQuery.cssHooks[name]) && "expand" in hooks) {
                    value = hooks.expand(value);
                    delete props[name];
                    for (index in value) if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                } else specialEasing[name] = easing;
            }
        }(props, animation.opts.specialEasing);
        for (;index < length; index++) if (result = animationPrefilters[index].call(animation, elem, props, animation.opts)) return result;
        jQuery.map(props, createTween, animation);
        jQuery.isFunction(animation.opts.start) && animation.opts.start.call(elem, animation);
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweener: function(props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = [ "*" ];
            } else props = props.split(" ");
            for (var prop, index = 0, length = props.length; index < length; index++) {
                prop = props[index];
                tweeners[prop] = tweeners[prop] || [];
                tweeners[prop].unshift(callback);
            }
        },
        prefilter: function(callback, prepend) {
            prepend ? animationPrefilters.unshift(callback) : animationPrefilters.push(callback);
        }
    });
    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && "object" == typeof speed ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        opt.duration = jQuery.fx.off ? 0 : "number" == typeof opt.duration ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        null != opt.queue && !0 !== opt.queue || (opt.queue = "fx");
        opt.old = opt.complete;
        opt.complete = function() {
            jQuery.isFunction(opt.old) && opt.old.call(this);
            opt.queue && jQuery.dequeue(this, opt.queue);
        };
        return opt;
    };
    jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
            return this.filter(isHidden).css("opacity", 0).show().end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
                var anim = Animation(this, jQuery.extend({}, prop), optall);
                (empty || jQuery._data(this, "finish")) && anim.stop(!0);
            };
            doAnimation.finish = doAnimation;
            return empty || !1 === optall.queue ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if ("string" != typeof type) {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = void 0;
            }
            clearQueue && !1 !== type && this.queue(type || "fx", []);
            return this.each(function() {
                var dequeue = !0, index = null != type && type + "queueHooks", timers = jQuery.timers, data = jQuery._data(this);
                if (index) data[index] && data[index].stop && stopQueue(data[index]); else for (index in data) data[index] && data[index].stop && rrun.test(index) && stopQueue(data[index]);
                for (index = timers.length; index--; ) if (timers[index].elem === this && (null == type || timers[index].queue === type)) {
                    timers[index].anim.stop(gotoEnd);
                    dequeue = !1;
                    timers.splice(index, 1);
                }
                !dequeue && gotoEnd || jQuery.dequeue(this, type);
            });
        },
        finish: function(type) {
            !1 !== type && (type = type || "fx");
            return this.each(function() {
                var index, data = jQuery._data(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
                data.finish = !0;
                jQuery.queue(this, type, []);
                hooks && hooks.stop && hooks.stop.call(this, !0);
                for (index = timers.length; index--; ) if (timers[index].elem === this && timers[index].queue === type) {
                    timers[index].anim.stop(!0);
                    timers.splice(index, 1);
                }
                for (index = 0; index < length; index++) queue[index] && queue[index].finish && queue[index].finish.call(this);
                delete data.finish;
            });
        }
    });
    jQuery.each([ "toggle", "show", "hide" ], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return null == speed || "boolean" == typeof speed ? cssFn.apply(this, arguments) : this.animate(genFx(name, !0), speed, easing, callback);
        };
    });
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer, timers = jQuery.timers, i = 0;
        fxNow = jQuery.now();
        for (;i < timers.length; i++) (timer = timers[i])() || timers[i] !== timer || timers.splice(i--, 1);
        timers.length || jQuery.fx.stop();
        fxNow = void 0;
    };
    jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        timer() ? jQuery.fx.start() : jQuery.timers.pop();
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function() {
        timerId || (timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval));
    };
    jQuery.fx.stop = function() {
        clearInterval(timerId);
        timerId = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    jQuery.fn.delay = function(time, type) {
        time = jQuery.fx && jQuery.fx.speeds[time] || time;
        type = type || "fx";
        return this.queue(type, function(next, hooks) {
            var timeout = setTimeout(next, time);
            hooks.stop = function() {
                clearTimeout(timeout);
            };
        });
    };
    !function() {
        var input, div, select, a, opt;
        (div = document.createElement("div")).setAttribute("className", "t");
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        a = div.getElementsByTagName("a")[0];
        opt = (select = document.createElement("select")).appendChild(document.createElement("option"));
        input = div.getElementsByTagName("input")[0];
        a.style.cssText = "top:1px";
        support.getSetAttribute = "t" !== div.className;
        support.style = /top/.test(a.getAttribute("style"));
        support.hrefNormalized = "/a" === a.getAttribute("href");
        support.checkOn = !!input.value;
        support.optSelected = opt.selected;
        support.enctype = !!document.createElement("form").enctype;
        select.disabled = !0;
        support.optDisabled = !opt.disabled;
        (input = document.createElement("input")).setAttribute("value", "");
        support.input = "" === input.getAttribute("value");
        input.value = "t";
        input.setAttribute("type", "radio");
        support.radioValue = "t" === input.value;
    }();
    var rreturn = /\r/g;
    jQuery.fn.extend({
        val: function(value) {
            var hooks, ret, isFunction, elem = this[0];
            if (!arguments.length) return elem ? (hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()]) && "get" in hooks && void 0 !== (ret = hooks.get(elem, "value")) ? ret : "string" == typeof (ret = elem.value) ? ret.replace(rreturn, "") : null == ret ? "" : ret : void 0;
            isFunction = jQuery.isFunction(value);
            return this.each(function(i) {
                var val;
                if (1 === this.nodeType) {
                    null == (val = isFunction ? value.call(this, i, jQuery(this).val()) : value) ? val = "" : "number" == typeof val ? val += "" : jQuery.isArray(val) && (val = jQuery.map(val, function(value) {
                        return null == value ? "" : value + "";
                    }));
                    (hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]) && "set" in hooks && void 0 !== hooks.set(this, val, "value") || (this.value = val);
                }
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function(elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return null != val ? val : jQuery.trim(jQuery.text(elem));
                }
            },
            select: {
                get: function(elem) {
                    for (var value, option, options = elem.options, index = elem.selectedIndex, one = "select-one" === elem.type || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0; i < max; i++) if (((option = options[i]).selected || i === index) && (support.optDisabled ? !option.disabled : null === option.getAttribute("disabled")) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                        value = jQuery(option).val();
                        if (one) return value;
                        values.push(value);
                    }
                    return values;
                },
                set: function(elem, value) {
                    for (var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length; i--; ) {
                        option = options[i];
                        if (0 <= jQuery.inArray(jQuery.valHooks.option.get(option), values)) try {
                            option.selected = optionSet = !0;
                        } catch (_) {
                            option.scrollHeight;
                        } else option.selected = !1;
                    }
                    optionSet || (elem.selectedIndex = -1);
                    return options;
                }
            }
        }
    });
    jQuery.each([ "radio", "checkbox" ], function() {
        jQuery.valHooks[this] = {
            set: function(elem, value) {
                if (jQuery.isArray(value)) return elem.checked = 0 <= jQuery.inArray(jQuery(elem).val(), value);
            }
        };
        support.checkOn || (jQuery.valHooks[this].get = function(elem) {
            return null === elem.getAttribute("value") ? "on" : elem.value;
        });
    });
    var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle, ruseDefault = /^(?:checked|selected)$/i, getSetAttribute = support.getSetAttribute, getSetInput = support.input;
    jQuery.fn.extend({
        attr: function(name, value) {
            return access(this, jQuery.attr, name, value, 1 < arguments.length);
        },
        removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function(elem, name, value) {
            var hooks, ret, nType = elem.nodeType;
            if (elem && 3 !== nType && 8 !== nType && 2 !== nType) {
                if (typeof elem.getAttribute === strundefined) return jQuery.prop(elem, name, value);
                if (1 !== nType || !jQuery.isXMLDoc(elem)) {
                    name = name.toLowerCase();
                    hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
                }
                if (void 0 === value) return hooks && "get" in hooks && null !== (ret = hooks.get(elem, name)) ? ret : null == (ret = jQuery.find.attr(elem, name)) ? void 0 : ret;
                if (null !== value) {
                    if (hooks && "set" in hooks && void 0 !== (ret = hooks.set(elem, value, name))) return ret;
                    elem.setAttribute(name, value + "");
                    return value;
                }
                jQuery.removeAttr(elem, name);
            }
        },
        removeAttr: function(elem, value) {
            var name, propName, i = 0, attrNames = value && value.match(rnotwhite);
            if (attrNames && 1 === elem.nodeType) for (;name = attrNames[i++]; ) {
                propName = jQuery.propFix[name] || name;
                jQuery.expr.match.bool.test(name) ? getSetInput && getSetAttribute || !ruseDefault.test(name) ? elem[propName] = !1 : elem[jQuery.camelCase("default-" + name)] = elem[propName] = !1 : jQuery.attr(elem, name, "");
                elem.removeAttribute(getSetAttribute ? name : propName);
            }
        },
        attrHooks: {
            type: {
                set: function(elem, value) {
                    if (!support.radioValue && "radio" === value && jQuery.nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        val && (elem.value = val);
                        return value;
                    }
                }
            }
        }
    });
    boolHook = {
        set: function(elem, value, name) {
            !1 === value ? jQuery.removeAttr(elem, name) : getSetInput && getSetAttribute || !ruseDefault.test(name) ? elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name) : elem[jQuery.camelCase("default-" + name)] = elem[name] = !0;
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = getSetInput && getSetAttribute || !ruseDefault.test(name) ? function(elem, name, isXML) {
            var ret, handle;
            if (!isXML) {
                handle = attrHandle[name];
                attrHandle[name] = ret;
                ret = null != getter(elem, name, isXML) ? name.toLowerCase() : null;
                attrHandle[name] = handle;
            }
            return ret;
        } : function(elem, name, isXML) {
            if (!isXML) return elem[jQuery.camelCase("default-" + name)] ? name.toLowerCase() : null;
        };
    });
    getSetInput && getSetAttribute || (jQuery.attrHooks.value = {
        set: function(elem, value, name) {
            if (!jQuery.nodeName(elem, "input")) return nodeHook && nodeHook.set(elem, value, name);
            elem.defaultValue = value;
        }
    });
    if (!getSetAttribute) {
        nodeHook = {
            set: function(elem, value, name) {
                var ret = elem.getAttributeNode(name);
                ret || elem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));
                ret.value = value += "";
                if ("value" === name || value === elem.getAttribute(name)) return value;
            }
        };
        attrHandle.id = attrHandle.name = attrHandle.coords = function(elem, name, isXML) {
            var ret;
            if (!isXML) return (ret = elem.getAttributeNode(name)) && "" !== ret.value ? ret.value : null;
        };
        jQuery.valHooks.button = {
            get: function(elem, name) {
                var ret = elem.getAttributeNode(name);
                if (ret && ret.specified) return ret.value;
            },
            set: nodeHook.set
        };
        jQuery.attrHooks.contenteditable = {
            set: function(elem, value, name) {
                nodeHook.set(elem, "" !== value && value, name);
            }
        };
        jQuery.each([ "width", "height" ], function(i, name) {
            jQuery.attrHooks[name] = {
                set: function(elem, value) {
                    if ("" === value) {
                        elem.setAttribute(name, "auto");
                        return value;
                    }
                }
            };
        });
    }
    support.style || (jQuery.attrHooks.style = {
        get: function(elem) {
            return elem.style.cssText || void 0;
        },
        set: function(elem, value) {
            return elem.style.cssText = value + "";
        }
    });
    var rfocusable = /^(?:input|select|textarea|button|object)$/i, rclickable = /^(?:a|area)$/i;
    jQuery.fn.extend({
        prop: function(name, value) {
            return access(this, jQuery.prop, name, value, 1 < arguments.length);
        },
        removeProp: function(name) {
            name = jQuery.propFix[name] || name;
            return this.each(function() {
                try {
                    this[name] = void 0;
                    delete this[name];
                } catch (e) {}
            });
        }
    });
    jQuery.extend({
        propFix: {
            for: "htmlFor",
            class: "className"
        },
        prop: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (elem && 3 !== nType && 8 !== nType && 2 !== nType) {
                if (1 !== nType || !jQuery.isXMLDoc(elem)) {
                    name = jQuery.propFix[name] || name;
                    hooks = jQuery.propHooks[name];
                }
                return void 0 !== value ? hooks && "set" in hooks && void 0 !== (ret = hooks.set(elem, value, name)) ? ret : elem[name] = value : hooks && "get" in hooks && null !== (ret = hooks.get(elem, name)) ? ret : elem[name];
            }
        },
        propHooks: {
            tabIndex: {
                get: function(elem) {
                    var tabindex = jQuery.find.attr(elem, "tabindex");
                    return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
                }
            }
        }
    });
    support.hrefNormalized || jQuery.each([ "href", "src" ], function(i, name) {
        jQuery.propHooks[name] = {
            get: function(elem) {
                return elem.getAttribute(name, 4);
            }
        };
    });
    support.optSelected || (jQuery.propHooks.selected = {
        get: function(elem) {
            var parent = elem.parentNode;
            if (parent) {
                parent.selectedIndex;
                parent.parentNode && parent.parentNode.selectedIndex;
            }
            return null;
        }
    });
    jQuery.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    support.enctype || (jQuery.propFix.enctype = "encoding");
    var rclass = /[\t\r\n\f]/g;
    jQuery.fn.extend({
        addClass: function(value) {
            var classes, elem, cur, clazz, j, finalValue, i = 0, len = this.length, proceed = "string" == typeof value && value;
            if (jQuery.isFunction(value)) return this.each(function(j) {
                jQuery(this).addClass(value.call(this, j, this.className));
            });
            if (proceed) {
                classes = (value || "").match(rnotwhite) || [];
                for (;i < len; i++) if (cur = 1 === (elem = this[i]).nodeType && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ")) {
                    j = 0;
                    for (;clazz = classes[j++]; ) cur.indexOf(" " + clazz + " ") < 0 && (cur += clazz + " ");
                    finalValue = jQuery.trim(cur);
                    elem.className !== finalValue && (elem.className = finalValue);
                }
            }
            return this;
        },
        removeClass: function(value) {
            var classes, elem, cur, clazz, j, finalValue, i = 0, len = this.length, proceed = 0 === arguments.length || "string" == typeof value && value;
            if (jQuery.isFunction(value)) return this.each(function(j) {
                jQuery(this).removeClass(value.call(this, j, this.className));
            });
            if (proceed) {
                classes = (value || "").match(rnotwhite) || [];
                for (;i < len; i++) if (cur = 1 === (elem = this[i]).nodeType && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "")) {
                    j = 0;
                    for (;clazz = classes[j++]; ) for (;0 <= cur.indexOf(" " + clazz + " "); ) cur = cur.replace(" " + clazz + " ", " ");
                    finalValue = value ? jQuery.trim(cur) : "";
                    elem.className !== finalValue && (elem.className = finalValue);
                }
            }
            return this;
        },
        toggleClass: function(value, stateVal) {
            var type = typeof value;
            return "boolean" == typeof stateVal && "string" === type ? stateVal ? this.addClass(value) : this.removeClass(value) : jQuery.isFunction(value) ? this.each(function(i) {
                jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
            }) : this.each(function() {
                if ("string" === type) for (var className, i = 0, self = jQuery(this), classNames = value.match(rnotwhite) || []; className = classNames[i++]; ) self.hasClass(className) ? self.removeClass(className) : self.addClass(className); else if (type === strundefined || "boolean" === type) {
                    this.className && jQuery._data(this, "__className__", this.className);
                    this.className = this.className || !1 === value ? "" : jQuery._data(this, "__className__") || "";
                }
            });
        },
        hasClass: function(selector) {
            for (var className = " " + selector + " ", i = 0, l = this.length; i < l; i++) if (1 === this[i].nodeType && 0 <= (" " + this[i].className + " ").replace(rclass, " ").indexOf(className)) return !0;
            return !1;
        }
    });
    jQuery.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(i, name) {
        jQuery.fn[name] = function(data, fn) {
            return 0 < arguments.length ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },
        bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
            return 1 === arguments.length ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        }
    });
    var nonce = jQuery.now(), rquery = /\?/, rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
    jQuery.parseJSON = function(data) {
        if (window.JSON && window.JSON.parse) return window.JSON.parse(data + "");
        var requireNonComma, depth = null, str = jQuery.trim(data + "");
        return str && !jQuery.trim(str.replace(rvalidtokens, function(token, comma, open, close) {
            requireNonComma && comma && (depth = 0);
            if (0 === depth) return token;
            requireNonComma = open || comma;
            depth += !close - !open;
            return "";
        })) ? Function("return " + str)() : jQuery.error("Invalid JSON: " + data);
    };
    jQuery.parseXML = function(data) {
        var xml;
        if (!data || "string" != typeof data) return null;
        try {
            if (window.DOMParser) xml = new DOMParser().parseFromString(data, "text/xml"); else {
                (xml = new ActiveXObject("Microsoft.XMLDOM")).async = "false";
                xml.loadXML(data);
            }
        } catch (e) {
            xml = void 0;
        }
        xml && xml.documentElement && !xml.getElementsByTagName("parsererror").length || jQuery.error("Invalid XML: " + data);
        return xml;
    };
    var ajaxLocParts, ajaxLocation, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, prefilters = {}, transports = {}, allTypes = "*/".concat("*");
    try {
        ajaxLocation = location.href;
    } catch (e) {
        (ajaxLocation = document.createElement("a")).href = "";
        ajaxLocation = ajaxLocation.href;
    }
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
    function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
            if ("string" != typeof dataTypeExpression) {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
            if (jQuery.isFunction(func)) for (;dataType = dataTypes[i++]; ) if ("+" === dataType.charAt(0)) {
                dataType = dataType.slice(1) || "*";
                (structure[dataType] = structure[dataType] || []).unshift(func);
            } else (structure[dataType] = structure[dataType] || []).push(func);
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = !0;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if ("string" == typeof dataTypeOrTransport && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return !1;
                }
                if (seekingTransport) return !(selected = dataTypeOrTransport);
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }
    function ajaxExtend(target, src) {
        var deep, key, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) void 0 !== src[key] && ((flatOptions[key] ? target : deep || (deep = {}))[key] = src[key]);
        deep && jQuery.extend(!0, target, deep);
        return target;
    }
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(ajaxLocParts[1]),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": jQuery.parseJSON,
                "text xml": jQuery.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function(target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function(url, options) {
            if ("object" == typeof url) {
                options = url;
                url = void 0;
            }
            options = options || {};
            var parts, i, cacheURL, responseHeadersString, timeoutTimer, fireGlobals, transport, responseHeaders, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = "canceled", jqXHR = {
                readyState: 0,
                getResponseHeader: function(key) {
                    var match;
                    if (2 === state) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            for (;match = rheaders.exec(responseHeadersString); ) responseHeaders[match[1].toLowerCase()] = match[2];
                        }
                        match = responseHeaders[key.toLowerCase()];
                    }
                    return null == match ? null : match;
                },
                getAllResponseHeaders: function() {
                    return 2 === state ? responseHeadersString : null;
                },
                setRequestHeader: function(name, value) {
                    var lname = name.toLowerCase();
                    if (!state) {
                        name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },
                overrideMimeType: function(type) {
                    state || (s.mimeType = type);
                    return this;
                },
                statusCode: function(map) {
                    var code;
                    if (map) if (state < 2) for (code in map) statusCode[code] = [ statusCode[code], map[code] ]; else jqXHR.always(map[jqXHR.status]);
                    return this;
                },
                abort: function(statusText) {
                    var finalText = statusText || strAbort;
                    transport && transport.abort(finalText);
                    done(0, finalText);
                    return this;
                }
            };
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [ "" ];
            if (null == s.crossDomain) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !(!parts || parts[1] === ajaxLocParts[1] && parts[2] === ajaxLocParts[2] && (parts[3] || ("http:" === parts[1] ? "80" : "443")) === (ajaxLocParts[3] || ("http:" === ajaxLocParts[1] ? "80" : "443")));
            }
            s.data && s.processData && "string" != typeof s.data && (s.data = jQuery.param(s.data, s.traditional));
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (2 === state) return jqXHR;
            (fireGlobals = jQuery.event && s.global) && 0 == jQuery.active++ && jQuery.event.trigger("ajaxStart");
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url;
            if (!s.hasContent) {
                if (s.data) {
                    cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                    delete s.data;
                }
                !1 === s.cache && (s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + nonce++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++);
            }
            if (s.ifModified) {
                jQuery.lastModified[cacheURL] && jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                jQuery.etag[cacheURL] && jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
            }
            (s.data && s.hasContent && !1 !== s.contentType || options.contentType) && jqXHR.setRequestHeader("Content-Type", s.contentType);
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + ("*" !== s.dataTypes[0] ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            for (i in s.headers) jqXHR.setRequestHeader(i, s.headers[i]);
            if (s.beforeSend && (!1 === s.beforeSend.call(callbackContext, jqXHR, s) || 2 === state)) return jqXHR.abort();
            strAbort = "abort";
            for (i in {
                success: 1,
                error: 1,
                complete: 1
            }) jqXHR[i](s[i]);
            if (transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR)) {
                jqXHR.readyState = 1;
                fireGlobals && globalEventContext.trigger("ajaxSend", [ jqXHR, s ]);
                s.async && 0 < s.timeout && (timeoutTimer = setTimeout(function() {
                    jqXHR.abort("timeout");
                }, s.timeout));
                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (!(state < 2)) throw e;
                    done(-1, e);
                }
            } else done(-1, "No Transport");
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (2 !== state) {
                    state = 2;
                    timeoutTimer && clearTimeout(timeoutTimer);
                    transport = void 0;
                    responseHeadersString = headers || "";
                    jqXHR.readyState = 0 < status ? 4 : 0;
                    isSuccess = 200 <= status && status < 300 || 304 === status;
                    responses && (response = function(s, jqXHR, responses) {
                        for (var firstDataType, ct, finalDataType, type, contents = s.contents, dataTypes = s.dataTypes; "*" === dataTypes[0]; ) {
                            dataTypes.shift();
                            void 0 === ct && (ct = s.mimeType || jqXHR.getResponseHeader("Content-Type"));
                        }
                        if (ct) for (type in contents) if (contents[type] && contents[type].test(ct)) {
                            dataTypes.unshift(type);
                            break;
                        }
                        if (dataTypes[0] in responses) finalDataType = dataTypes[0]; else {
                            for (type in responses) {
                                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                                    finalDataType = type;
                                    break;
                                }
                                firstDataType || (firstDataType = type);
                            }
                            finalDataType = finalDataType || firstDataType;
                        }
                        if (finalDataType) {
                            finalDataType !== dataTypes[0] && dataTypes.unshift(finalDataType);
                            return responses[finalDataType];
                        }
                    }(s, jqXHR, responses));
                    response = function(s, response, jqXHR, isSuccess) {
                        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
                        if (dataTypes[1]) for (conv in s.converters) converters[conv.toLowerCase()] = s.converters[conv];
                        current = dataTypes.shift();
                        for (;current; ) {
                            s.responseFields[current] && (jqXHR[s.responseFields[current]] = response);
                            !prev && isSuccess && s.dataFilter && (response = s.dataFilter(response, s.dataType));
                            prev = current;
                            if (current = dataTypes.shift()) if ("*" === current) current = prev; else if ("*" !== prev && prev !== current) {
                                if (!(conv = converters[prev + " " + current] || converters["* " + current])) for (conv2 in converters) if ((tmp = conv2.split(" "))[1] === current && (conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]])) {
                                    if (!0 === conv) conv = converters[conv2]; else if (!0 !== converters[conv2]) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                                if (!0 !== conv) if (conv && s.throws) response = conv(response); else try {
                                    response = conv(response);
                                } catch (e) {
                                    return {
                                        state: "parsererror",
                                        error: conv ? e : "No conversion from " + prev + " to " + current
                                    };
                                }
                            }
                        }
                        return {
                            state: "success",
                            data: response
                        };
                    }(s, response, jqXHR, isSuccess);
                    if (isSuccess) {
                        if (s.ifModified) {
                            (modified = jqXHR.getResponseHeader("Last-Modified")) && (jQuery.lastModified[cacheURL] = modified);
                            (modified = jqXHR.getResponseHeader("etag")) && (jQuery.etag[cacheURL] = modified);
                        }
                        if (204 === status || "HEAD" === s.type) statusText = "nocontent"; else if (304 === status) statusText = "notmodified"; else {
                            statusText = response.state;
                            success = response.data;
                            isSuccess = !(error = response.error);
                        }
                    } else {
                        error = statusText;
                        if (status || !statusText) {
                            statusText = "error";
                            status < 0 && (status = 0);
                        }
                    }
                    jqXHR.status = status;
                    jqXHR.statusText = (nativeStatusText || statusText) + "";
                    isSuccess ? deferred.resolveWith(callbackContext, [ success, statusText, jqXHR ]) : deferred.rejectWith(callbackContext, [ jqXHR, statusText, error ]);
                    jqXHR.statusCode(statusCode);
                    statusCode = void 0;
                    fireGlobals && globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [ jqXHR, s, isSuccess ? success : error ]);
                    completeDeferred.fireWith(callbackContext, [ jqXHR, statusText ]);
                    if (fireGlobals) {
                        globalEventContext.trigger("ajaxComplete", [ jqXHR, s ]);
                        --jQuery.active || jQuery.event.trigger("ajaxStop");
                    }
                }
            }
            return jqXHR;
        },
        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        getScript: function(url, callback) {
            return jQuery.get(url, void 0, callback, "script");
        }
    });
    jQuery.each([ "get", "post" ], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = void 0;
            }
            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        };
    });
    jQuery._evalUrl = function(url) {
        return jQuery.ajax({
            url: url,
            type: "GET",
            dataType: "script",
            async: !1,
            global: !1,
            throws: !0
        });
    };
    jQuery.fn.extend({
        wrapAll: function(html) {
            if (jQuery.isFunction(html)) return this.each(function(i) {
                jQuery(this).wrapAll(html.call(this, i));
            });
            if (this[0]) {
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(!0);
                this[0].parentNode && wrap.insertBefore(this[0]);
                wrap.map(function() {
                    for (var elem = this; elem.firstChild && 1 === elem.firstChild.nodeType; ) elem = elem.firstChild;
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function(html) {
            return jQuery.isFunction(html) ? this.each(function(i) {
                jQuery(this).wrapInner(html.call(this, i));
            }) : this.each(function() {
                var self = jQuery(this), contents = self.contents();
                contents.length ? contents.wrapAll(html) : self.append(html);
            });
        },
        wrap: function(html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function(i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function() {
            return this.parent().each(function() {
                jQuery.nodeName(this, "body") || jQuery(this).replaceWith(this.childNodes);
            }).end();
        }
    });
    jQuery.expr.filters.hidden = function(elem) {
        return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !support.reliableHiddenOffsets() && "none" === (elem.style && elem.style.display || jQuery.css(elem, "display"));
    };
    jQuery.expr.filters.visible = function(elem) {
        return !jQuery.expr.filters.hidden(elem);
    };
    var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) jQuery.each(obj, function(i, v) {
            traditional || rbracket.test(prefix) ? add(prefix, v) : buildParams(prefix + "[" + ("object" == typeof v ? i : "") + "]", v, traditional, add);
        }); else if (traditional || "object" !== jQuery.type(obj)) add(prefix, obj); else for (name in obj) buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
    }
    jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function(key, value) {
            value = jQuery.isFunction(value) ? value() : null == value ? "" : value;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
        };
        void 0 === traditional && (traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional);
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) jQuery.each(a, function() {
            add(this.name, this.value);
        }); else for (prefix in a) buildParams(prefix, a[prefix], traditional, add);
        return s.join("&").replace(r20, "+");
    };
    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
                var type = this.type;
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(i, elem) {
                var val = jQuery(this).val();
                return null == val ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    };
                }) : {
                    name: elem.name,
                    value: val.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    jQuery.ajaxSettings.xhr = void 0 !== window.ActiveXObject ? function() {
        return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && createStandardXHR() || function() {
            try {
                return new window.ActiveXObject("Microsoft.XMLHTTP");
            } catch (e) {}
        }();
    } : createStandardXHR;
    var xhrId = 0, xhrCallbacks = {}, xhrSupported = jQuery.ajaxSettings.xhr();
    window.attachEvent && window.attachEvent("onunload", function() {
        for (var key in xhrCallbacks) xhrCallbacks[key](void 0, !0);
    });
    support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
    (xhrSupported = support.ajax = !!xhrSupported) && jQuery.ajaxTransport(function(options) {
        if (!options.crossDomain || support.cors) {
            var callback;
            return {
                send: function(headers, complete) {
                    var i, xhr = options.xhr(), id = ++xhrId;
                    xhr.open(options.type, options.url, options.async, options.username, options.password);
                    if (options.xhrFields) for (i in options.xhrFields) xhr[i] = options.xhrFields[i];
                    options.mimeType && xhr.overrideMimeType && xhr.overrideMimeType(options.mimeType);
                    options.crossDomain || headers["X-Requested-With"] || (headers["X-Requested-With"] = "XMLHttpRequest");
                    for (i in headers) void 0 !== headers[i] && xhr.setRequestHeader(i, headers[i] + "");
                    xhr.send(options.hasContent && options.data || null);
                    callback = function(_, isAbort) {
                        var status, statusText, responses;
                        if (callback && (isAbort || 4 === xhr.readyState)) {
                            delete xhrCallbacks[id];
                            callback = void 0;
                            xhr.onreadystatechange = jQuery.noop;
                            if (isAbort) 4 !== xhr.readyState && xhr.abort(); else {
                                responses = {};
                                status = xhr.status;
                                "string" == typeof xhr.responseText && (responses.text = xhr.responseText);
                                try {
                                    statusText = xhr.statusText;
                                } catch (e) {
                                    statusText = "";
                                }
                                status || !options.isLocal || options.crossDomain ? 1223 === status && (status = 204) : status = responses.text ? 200 : 404;
                            }
                        }
                        responses && complete(status, statusText, responses, xhr.getAllResponseHeaders());
                    };
                    options.async ? 4 === xhr.readyState ? setTimeout(callback) : xhr.onreadystatechange = xhrCallbacks[id] = callback : callback();
                },
                abort: function() {
                    callback && callback(void 0, !0);
                }
            };
        }
    });
    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {}
    }
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter("script", function(s) {
        void 0 === s.cache && (s.cache = !1);
        if (s.crossDomain) {
            s.type = "GET";
            s.global = !1;
        }
    });
    jQuery.ajaxTransport("script", function(s) {
        if (s.crossDomain) {
            var script, head = document.head || jQuery("head")[0] || document.documentElement;
            return {
                send: function(_, callback) {
                    (script = document.createElement("script")).async = !0;
                    s.scriptCharset && (script.charset = s.scriptCharset);
                    script.src = s.url;
                    script.onload = script.onreadystatechange = function(_, isAbort) {
                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                            script.onload = script.onreadystatechange = null;
                            script.parentNode && script.parentNode.removeChild(script);
                            script = null;
                            isAbort || callback(200, "success");
                        }
                    };
                    head.insertBefore(script, head.firstChild);
                },
                abort: function() {
                    script && script.onload(void 0, !0);
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
            this[callback] = !0;
            return callback;
        }
    });
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = !1 !== s.jsonp && (rjsonp.test(s.url) ? "url" : "string" == typeof s.data && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
        if (jsonProp || "jsonp" === s.dataTypes[0]) {
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            jsonProp ? s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName) : !1 !== s.jsonp && (s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName);
            s.converters["script json"] = function() {
                responseContainer || jQuery.error(callbackName + " was not called");
                return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            overwritten = window[callbackName];
            window[callbackName] = function() {
                responseContainer = arguments;
            };
            jqXHR.always(function() {
                window[callbackName] = overwritten;
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName);
                }
                responseContainer && jQuery.isFunction(overwritten) && overwritten(responseContainer[0]);
                responseContainer = overwritten = void 0;
            });
            return "script";
        }
    });
    jQuery.parseHTML = function(data, context, keepScripts) {
        if (!data || "string" != typeof data) return null;
        if ("boolean" == typeof context) {
            keepScripts = context;
            context = !1;
        }
        context = context || document;
        var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
        if (parsed) return [ context.createElement(parsed[1]) ];
        parsed = jQuery.buildFragment([ data ], context, scripts);
        scripts && scripts.length && jQuery(scripts).remove();
        return jQuery.merge([], parsed.childNodes);
    };
    var _load = jQuery.fn.load;
    jQuery.fn.load = function(url, params, callback) {
        if ("string" != typeof url && _load) return _load.apply(this, arguments);
        var selector, response, type, self = this, off = url.indexOf(" ");
        if (0 <= off) {
            selector = jQuery.trim(url.slice(off, url.length));
            url = url.slice(0, off);
        }
        if (jQuery.isFunction(params)) {
            callback = params;
            params = void 0;
        } else params && "object" == typeof params && (type = "POST");
        0 < self.length && jQuery.ajax({
            url: url,
            type: type,
            dataType: "html",
            data: params
        }).done(function(responseText) {
            response = arguments;
            self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
        }).complete(callback && function(jqXHR, status) {
            self.each(callback, response || [ jqXHR.responseText, status, jqXHR ]);
        });
        return this;
    };
    jQuery.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });
    jQuery.expr.filters.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
        }).length;
    };
    var docElem = window.document.documentElement;
    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : 9 === elem.nodeType && (elem.defaultView || elem.parentWindow);
    }
    jQuery.offset = {
        setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {};
            "static" === position && (elem.style.position = "relative");
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            if (("absolute" === position || "fixed" === position) && -1 < jQuery.inArray("auto", [ curCSSTop, curCSSLeft ])) {
                curTop = (curPosition = curElem.position()).top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            jQuery.isFunction(options) && (options = options.call(elem, i, curOffset));
            null != options.top && (props.top = options.top - curOffset.top + curTop);
            null != options.left && (props.left = options.left - curOffset.left + curLeft);
            "using" in options ? options.using.call(elem, props) : curElem.css(props);
        }
    };
    jQuery.fn.extend({
        offset: function(options) {
            if (arguments.length) return void 0 === options ? this : this.each(function(i) {
                jQuery.offset.setOffset(this, options, i);
            });
            var docElem, win, box = {
                top: 0,
                left: 0
            }, elem = this[0], doc = elem && elem.ownerDocument;
            if (doc) {
                docElem = doc.documentElement;
                if (!jQuery.contains(docElem, elem)) return box;
                typeof elem.getBoundingClientRect !== strundefined && (box = elem.getBoundingClientRect());
                win = getWindow(doc);
                return {
                    top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
                    left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
                };
            }
        },
        position: function() {
            if (this[0]) {
                var offsetParent, offset, parentOffset = {
                    top: 0,
                    left: 0
                }, elem = this[0];
                if ("fixed" === jQuery.css(elem, "position")) offset = elem.getBoundingClientRect(); else {
                    offsetParent = this.offsetParent();
                    offset = this.offset();
                    jQuery.nodeName(offsetParent[0], "html") || (parentOffset = offsetParent.offset());
                    parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", !0);
                    parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", !0);
                }
                return {
                    top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", !0),
                    left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", !0)
                };
            }
        },
        offsetParent: function() {
            return this.map(function() {
                for (var offsetParent = this.offsetParent || docElem; offsetParent && !jQuery.nodeName(offsetParent, "html") && "static" === jQuery.css(offsetParent, "position"); ) offsetParent = offsetParent.offsetParent;
                return offsetParent || docElem;
            });
        }
    });
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = /Y/.test(prop);
        jQuery.fn[method] = function(val) {
            return access(this, function(elem, method, val) {
                var win = getWindow(elem);
                if (void 0 === val) return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];
                win ? win.scrollTo(top ? jQuery(win).scrollLeft() : val, top ? val : jQuery(win).scrollTop()) : elem[method] = val;
            }, method, val, arguments.length, null);
        };
    });
    jQuery.each([ "top", "left" ], function(i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
            }
        });
    });
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function(defaultExtra, funcName) {
            jQuery.fn[funcName] = function(margin, value) {
                var chainable = arguments.length && (defaultExtra || "boolean" != typeof margin), extra = defaultExtra || (!0 === margin || !0 === value ? "margin" : "border");
                return access(this, function(elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) return elem.document.documentElement["client" + name];
                    if (9 !== elem.nodeType) return void 0 === value ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                    doc = elem.documentElement;
                    return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                }, type, chainable ? margin : void 0, chainable, null);
            };
        });
    });
    jQuery.fn.size = function() {
        return this.length;
    };
    jQuery.fn.andSelf = jQuery.fn.addBack;
    "function" == typeof define && define.amd && define("jquery", [], function() {
        return jQuery;
    });
    var _jQuery = window.jQuery, _$ = window.$;
    jQuery.noConflict = function(deep) {
        window.$ === jQuery && (window.$ = _$);
        deep && window.jQuery === jQuery && (window.jQuery = _jQuery);
        return jQuery;
    };
    typeof noGlobal === strundefined && (window.jQuery = window.$ = jQuery);
    return jQuery;
});

(function() {
    var undefined, FUNC_ERROR_TEXT = "Expected a function", PLACEHOLDER = "__lodash_placeholder__", NAN = NaN, wrapFlags = [ [ "ary", 128 ], [ "bind", 1 ], [ "bindKey", 2 ], [ "curry", 8 ], [ "curryRight", 16 ], [ "flip", 512 ], [ "partial", 32 ], [ "partialRight", 64 ], [ "rearg", 256 ] ], argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", weakMapTag = "[object WeakMap]", arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]", reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g, reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source), reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g, reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source), reTrim = /^\s+|\s+$/g, reTrimStart = /^\s+/, reTrimEnd = /\s+$/, reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /, reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g, reEscapeChar = /\\(\\)?/g, reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g, reFlags = /\w*$/, reIsBadHex = /^[-+]0x[0-9a-f]+$/i, reIsBinary = /^0b[01]+$/i, reIsHostCtor = /^\[object .+?Constructor\]$/, reIsOctal = /^0o[0-7]+$/i, reIsUint = /^(?:0|[1-9]\d*)$/, reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, reNoMatch = /($^)/, reUnescapedString = /['\n\r\u2028\u2029\\]/g, rsComboRange = "\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff", rsBreakRange = "\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsAstral = "[\\ud800-\\udfff]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[\\u2700-\\u27bf]", rsLower = "[a-z\\xdf-\\xf6\\xf8-\\xff]", rsMisc = "[^\\ud800-\\udfff" + rsBreakRange + rsDigits + "\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsNonAstral = "[^\\ud800-\\udfff]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[A-Z\\xc0-\\xd6\\xd8-\\xde]", rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", reOptMod = "(?:" + rsCombo + "|" + rsFitz + ")" + "?", rsSeq = "[\\ufe0e\\ufe0f]?" + reOptMod + ("(?:\\u200d(?:" + [ rsNonAstral, rsRegional, rsSurrPair ].join("|") + ")[\\ufe0e\\ufe0f]?" + reOptMod + ")*"), rsEmoji = "(?:" + [ rsDingbat, rsRegional, rsSurrPair ].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [ rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral ].join("|") + ")", reApos = RegExp("['’]", "g"), reComboMark = RegExp(rsCombo, "g"), reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g"), reUnicodeWord = RegExp([ rsUpper + "?" + rsLower + "+(?:['’](?:d|ll|m|re|s|t|ve))?(?=" + [ rsBreak, rsUpper, "$" ].join("|") + ")", rsMiscUpper + "+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=" + [ rsBreak, rsUpper + rsMiscLower, "$" ].join("|") + ")", rsUpper + "?" + rsMiscLower + "+(?:['’](?:d|ll|m|re|s|t|ve))?", rsUpper + "+(?:['’](?:D|LL|M|RE|S|T|VE))?", "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsDigits, rsEmoji ].join("|"), "g"), reHasUnicode = RegExp("[\\u200d\\ud800-\\udfff" + rsComboRange + "\\ufe0e\\ufe0f]"), reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/, contextProps = [ "Array", "Buffer", "DataView", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Map", "Math", "Object", "Promise", "RegExp", "Set", "String", "Symbol", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "_", "clearTimeout", "isFinite", "parseInt", "setTimeout" ], templateCounter = -1, typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags["[object Uint8ClampedArray]"] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = !0;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = !1;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags["[object Uint8ClampedArray]"] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = !0;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = !1;
    var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
    }, freeParseFloat = parseFloat, freeParseInt = parseInt, freeGlobal = "object" == typeof global && global && global.Object === Object && global, freeSelf = "object" == typeof self && self && self.Object === Object && self, root = freeGlobal || freeSelf || Function("return this")(), freeExports = "object" == typeof exports && exports && !exports.nodeType && exports, freeModule = freeExports && "object" == typeof module && module && !module.nodeType && module, moduleExports = freeModule && freeModule.exports === freeExports, freeProcess = moduleExports && freeGlobal.process, nodeUtil = function() {
        try {
            var types = freeModule && freeModule.require && freeModule.require("util").types;
            return types || freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {}
    }(), nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);

          case 1:
            return func.call(thisArg, args[0]);

          case 2:
            return func.call(thisArg, args[0], args[1]);

          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
    }
    function arrayAggregator(array, setter, iteratee, accumulator) {
        for (var index = -1, length = null == array ? 0 : array.length; ++index < length; ) {
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
    }
    function arrayEach(array, iteratee) {
        for (var index = -1, length = null == array ? 0 : array.length; ++index < length && !1 !== iteratee(array[index], index, array); ) ;
        return array;
    }
    function arrayEachRight(array, iteratee) {
        for (var length = null == array ? 0 : array.length; length-- && !1 !== iteratee(array[length], length, array); ) ;
        return array;
    }
    function arrayEvery(array, predicate) {
        for (var index = -1, length = null == array ? 0 : array.length; ++index < length; ) if (!predicate(array[index], index, array)) return !1;
        return !0;
    }
    function arrayFilter(array, predicate) {
        for (var index = -1, length = null == array ? 0 : array.length, resIndex = 0, result = []; ++index < length; ) {
            var value = array[index];
            predicate(value, index, array) && (result[resIndex++] = value);
        }
        return result;
    }
    function arrayIncludes(array, value) {
        return !!(null == array ? 0 : array.length) && -1 < baseIndexOf(array, value, 0);
    }
    function arrayIncludesWith(array, value, comparator) {
        for (var index = -1, length = null == array ? 0 : array.length; ++index < length; ) if (comparator(value, array[index])) return !0;
        return !1;
    }
    function arrayMap(array, iteratee) {
        for (var index = -1, length = null == array ? 0 : array.length, result = Array(length); ++index < length; ) result[index] = iteratee(array[index], index, array);
        return result;
    }
    function arrayPush(array, values) {
        for (var index = -1, length = values.length, offset = array.length; ++index < length; ) array[offset + index] = values[index];
        return array;
    }
    function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = null == array ? 0 : array.length;
        initAccum && length && (accumulator = array[++index]);
        for (;++index < length; ) accumulator = iteratee(accumulator, array[index], index, array);
        return accumulator;
    }
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = null == array ? 0 : array.length;
        initAccum && length && (accumulator = array[--length]);
        for (;length--; ) accumulator = iteratee(accumulator, array[length], length, array);
        return accumulator;
    }
    function arraySome(array, predicate) {
        for (var index = -1, length = null == array ? 0 : array.length; ++index < length; ) if (predicate(array[index], index, array)) return !0;
        return !1;
    }
    var asciiSize = baseProperty("length");
    function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection) {
            if (predicate(value, key, collection)) {
                result = key;
                return !1;
            }
        });
        return result;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
        for (var length = array.length, index = fromIndex + (fromRight ? 1 : -1); fromRight ? index-- : ++index < length; ) if (predicate(array[index], index, array)) return index;
        return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
        return value == value ? function(array, value, fromIndex) {
            var index = fromIndex - 1, length = array.length;
            for (;++index < length; ) if (array[index] === value) return index;
            return -1;
        }(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    function baseIndexOfWith(array, value, fromIndex, comparator) {
        for (var index = fromIndex - 1, length = array.length; ++index < length; ) if (comparator(array[index], value)) return index;
        return -1;
    }
    function baseIsNaN(value) {
        return value != value;
    }
    function baseMean(array, iteratee) {
        var length = null == array ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
    }
    function baseProperty(key) {
        return function(object) {
            return null == object ? undefined : object[key];
        };
    }
    function basePropertyOf(object) {
        return function(key) {
            return null == object ? undefined : object[key];
        };
    }
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection) {
            accumulator = initAccum ? (initAccum = !1, value) : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
    }
    function baseSum(array, iteratee) {
        for (var result, index = -1, length = array.length; ++index < length; ) {
            var current = iteratee(array[index]);
            current !== undefined && (result = result === undefined ? current : result + current);
        }
        return result;
    }
    function baseTimes(n, iteratee) {
        for (var index = -1, result = Array(n); ++index < n; ) result[index] = iteratee(index);
        return result;
    }
    function baseUnary(func) {
        return function(value) {
            return func(value);
        };
    }
    function baseValues(object, props) {
        return arrayMap(props, function(key) {
            return object[key];
        });
    }
    function cacheHas(cache, key) {
        return cache.has(key);
    }
    function charsStartIndex(strSymbols, chrSymbols) {
        for (var index = -1, length = strSymbols.length; ++index < length && -1 < baseIndexOf(chrSymbols, strSymbols[index], 0); ) ;
        return index;
    }
    function charsEndIndex(strSymbols, chrSymbols) {
        for (var index = strSymbols.length; index-- && -1 < baseIndexOf(chrSymbols, strSymbols[index], 0); ) ;
        return index;
    }
    var deburrLetter = basePropertyOf({
        "À": "A",
        "Á": "A",
        "Â": "A",
        "Ã": "A",
        "Ä": "A",
        "Å": "A",
        "à": "a",
        "á": "a",
        "â": "a",
        "ã": "a",
        "ä": "a",
        "å": "a",
        "Ç": "C",
        "ç": "c",
        "Ð": "D",
        "ð": "d",
        "È": "E",
        "É": "E",
        "Ê": "E",
        "Ë": "E",
        "è": "e",
        "é": "e",
        "ê": "e",
        "ë": "e",
        "Ì": "I",
        "Í": "I",
        "Î": "I",
        "Ï": "I",
        "ì": "i",
        "í": "i",
        "î": "i",
        "ï": "i",
        "Ñ": "N",
        "ñ": "n",
        "Ò": "O",
        "Ó": "O",
        "Ô": "O",
        "Õ": "O",
        "Ö": "O",
        "Ø": "O",
        "ò": "o",
        "ó": "o",
        "ô": "o",
        "õ": "o",
        "ö": "o",
        "ø": "o",
        "Ù": "U",
        "Ú": "U",
        "Û": "U",
        "Ü": "U",
        "ù": "u",
        "ú": "u",
        "û": "u",
        "ü": "u",
        "Ý": "Y",
        "ý": "y",
        "ÿ": "y",
        "Æ": "Ae",
        "æ": "ae",
        "Þ": "Th",
        "þ": "th",
        "ß": "ss",
        "Ā": "A",
        "Ă": "A",
        "Ą": "A",
        "ā": "a",
        "ă": "a",
        "ą": "a",
        "Ć": "C",
        "Ĉ": "C",
        "Ċ": "C",
        "Č": "C",
        "ć": "c",
        "ĉ": "c",
        "ċ": "c",
        "č": "c",
        "Ď": "D",
        "Đ": "D",
        "ď": "d",
        "đ": "d",
        "Ē": "E",
        "Ĕ": "E",
        "Ė": "E",
        "Ę": "E",
        "Ě": "E",
        "ē": "e",
        "ĕ": "e",
        "ė": "e",
        "ę": "e",
        "ě": "e",
        "Ĝ": "G",
        "Ğ": "G",
        "Ġ": "G",
        "Ģ": "G",
        "ĝ": "g",
        "ğ": "g",
        "ġ": "g",
        "ģ": "g",
        "Ĥ": "H",
        "Ħ": "H",
        "ĥ": "h",
        "ħ": "h",
        "Ĩ": "I",
        "Ī": "I",
        "Ĭ": "I",
        "Į": "I",
        "İ": "I",
        "ĩ": "i",
        "ī": "i",
        "ĭ": "i",
        "į": "i",
        "ı": "i",
        "Ĵ": "J",
        "ĵ": "j",
        "Ķ": "K",
        "ķ": "k",
        "ĸ": "k",
        "Ĺ": "L",
        "Ļ": "L",
        "Ľ": "L",
        "Ŀ": "L",
        "Ł": "L",
        "ĺ": "l",
        "ļ": "l",
        "ľ": "l",
        "ŀ": "l",
        "ł": "l",
        "Ń": "N",
        "Ņ": "N",
        "Ň": "N",
        "Ŋ": "N",
        "ń": "n",
        "ņ": "n",
        "ň": "n",
        "ŋ": "n",
        "Ō": "O",
        "Ŏ": "O",
        "Ő": "O",
        "ō": "o",
        "ŏ": "o",
        "ő": "o",
        "Ŕ": "R",
        "Ŗ": "R",
        "Ř": "R",
        "ŕ": "r",
        "ŗ": "r",
        "ř": "r",
        "Ś": "S",
        "Ŝ": "S",
        "Ş": "S",
        "Š": "S",
        "ś": "s",
        "ŝ": "s",
        "ş": "s",
        "š": "s",
        "Ţ": "T",
        "Ť": "T",
        "Ŧ": "T",
        "ţ": "t",
        "ť": "t",
        "ŧ": "t",
        "Ũ": "U",
        "Ū": "U",
        "Ŭ": "U",
        "Ů": "U",
        "Ű": "U",
        "Ų": "U",
        "ũ": "u",
        "ū": "u",
        "ŭ": "u",
        "ů": "u",
        "ű": "u",
        "ų": "u",
        "Ŵ": "W",
        "ŵ": "w",
        "Ŷ": "Y",
        "ŷ": "y",
        "Ÿ": "Y",
        "Ź": "Z",
        "Ż": "Z",
        "Ž": "Z",
        "ź": "z",
        "ż": "z",
        "ž": "z",
        "Ĳ": "IJ",
        "ĳ": "ij",
        "Œ": "Oe",
        "œ": "oe",
        "ŉ": "'n",
        "ſ": "s"
    }), escapeHtmlChar = basePropertyOf({
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
    });
    function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
    }
    function hasUnicode(string) {
        return reHasUnicode.test(string);
    }
    function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
            result[++index] = [ key, value ];
        });
        return result;
    }
    function overArg(func, transform) {
        return function(arg) {
            return func(transform(arg));
        };
    }
    function replaceHolders(array, placeholder) {
        for (var index = -1, length = array.length, resIndex = 0, result = []; ++index < length; ) {
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
                array[index] = PLACEHOLDER;
                result[resIndex++] = index;
            }
        }
        return result;
    }
    function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
            result[++index] = value;
        });
        return result;
    }
    function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
            result[++index] = [ value, value ];
        });
        return result;
    }
    function stringSize(string) {
        return hasUnicode(string) ? function(string) {
            var result = reUnicode.lastIndex = 0;
            for (;reUnicode.test(string); ) ++result;
            return result;
        }(string) : asciiSize(string);
    }
    function stringToArray(string) {
        return hasUnicode(string) ? function(string) {
            return string.match(reUnicode) || [];
        }(string) : function(string) {
            return string.split("");
        }(string);
    }
    var unescapeHtmlChar = basePropertyOf({
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
    });
    var _ = function runInContext(context) {
        var uid, Array = (context = null == context ? root : _.defaults(root.Object(), context, _.pick(root, contextProps))).Array, Date = context.Date, Error = context.Error, Function = context.Function, Math = context.Math, Object = context.Object, RegExp = context.RegExp, String = context.String, TypeError = context.TypeError, arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype, coreJsData = context["__core-js_shared__"], funcToString = funcProto.toString, hasOwnProperty = objectProto.hasOwnProperty, idCounter = 0, maskSrcKey = (uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "")) ? "Symbol(src)_1." + uid : "", nativeObjectToString = objectProto.toString, objectCtorString = funcToString.call(Object), oldDash = root._, reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"), Buffer = moduleExports ? context.Buffer : undefined, Symbol = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined, symIterator = Symbol ? Symbol.iterator : undefined, symToStringTag = Symbol ? Symbol.toStringTag : undefined, defineProperty = function() {
            try {
                var func = getNative(Object, "defineProperty");
                func({}, "", {});
                return func;
            } catch (e) {}
        }(), ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date && Date.now !== root.Date.now && Date.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout, nativeCeil = Math.ceil, nativeFloor = Math.floor, nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object.keys, Object), nativeMax = Math.max, nativeMin = Math.min, nativeNow = Date.now, nativeParseInt = context.parseInt, nativeRandom = Math.random, nativeReverse = arrayProto.reverse, DataView = getNative(context, "DataView"), Map = getNative(context, "Map"), Promise = getNative(context, "Promise"), Set = getNative(context, "Set"), WeakMap = getNative(context, "WeakMap"), nativeCreate = getNative(Object, "create"), metaMap = WeakMap && new WeakMap(), realNames = {}, dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap), symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
        function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                if (value instanceof LodashWrapper) return value;
                if (hasOwnProperty.call(value, "__wrapped__")) return wrapperClone(value);
            }
            return new LodashWrapper(value);
        }
        var baseCreate = function() {
            function object() {}
            return function(proto) {
                if (!isObject(proto)) return {};
                if (objectCreate) return objectCreate(proto);
                object.prototype = proto;
                var result = new object();
                object.prototype = undefined;
                return result;
            };
        }();
        function baseLodash() {}
        function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined;
        }
        lodash.templateSettings = {
            escape: reEscape,
            evaluate: reEvaluate,
            interpolate: reInterpolate,
            variable: "",
            imports: {
                _: lodash
            }
        };
        (lodash.prototype = baseLodash.prototype).constructor = lodash;
        (LodashWrapper.prototype = baseCreate(baseLodash.prototype)).constructor = LodashWrapper;
        function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = !1;
            this.__iteratees__ = [];
            this.__takeCount__ = 4294967295;
            this.__views__ = [];
        }
        (LazyWrapper.prototype = baseCreate(baseLodash.prototype)).constructor = LazyWrapper;
        function Hash(entries) {
            var index = -1, length = null == entries ? 0 : entries.length;
            this.clear();
            for (;++index < length; ) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        Hash.prototype.clear = function() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
        };
        Hash.prototype.delete = function(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
        };
        Hash.prototype.get = function(key) {
            var data = this.__data__;
            if (nativeCreate) {
                var result = data[key];
                return "__lodash_hash_undefined__" === result ? undefined : result;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined;
        };
        Hash.prototype.has = function(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
        };
        Hash.prototype.set = function(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined ? "__lodash_hash_undefined__" : value;
            return this;
        };
        function ListCache(entries) {
            var index = -1, length = null == entries ? 0 : entries.length;
            this.clear();
            for (;++index < length; ) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        ListCache.prototype.clear = function() {
            this.__data__ = [];
            this.size = 0;
        };
        ListCache.prototype.delete = function(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) return !1;
            index == data.length - 1 ? data.pop() : splice.call(data, index, 1);
            --this.size;
            return !0;
        };
        ListCache.prototype.get = function(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined : data[index][1];
        };
        ListCache.prototype.has = function(key) {
            return -1 < assocIndexOf(this.__data__, key);
        };
        ListCache.prototype.set = function(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
                ++this.size;
                data.push([ key, value ]);
            } else data[index][1] = value;
            return this;
        };
        function MapCache(entries) {
            var index = -1, length = null == entries ? 0 : entries.length;
            this.clear();
            for (;++index < length; ) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        MapCache.prototype.clear = function() {
            this.size = 0;
            this.__data__ = {
                hash: new Hash(),
                map: new (Map || ListCache)(),
                string: new Hash()
            };
        };
        MapCache.prototype.delete = function(key) {
            var result = getMapData(this, key).delete(key);
            this.size -= result ? 1 : 0;
            return result;
        };
        MapCache.prototype.get = function(key) {
            return getMapData(this, key).get(key);
        };
        MapCache.prototype.has = function(key) {
            return getMapData(this, key).has(key);
        };
        MapCache.prototype.set = function(key, value) {
            var data = getMapData(this, key), size = data.size;
            data.set(key, value);
            this.size += data.size == size ? 0 : 1;
            return this;
        };
        function SetCache(values) {
            var index = -1, length = null == values ? 0 : values.length;
            this.__data__ = new MapCache();
            for (;++index < length; ) this.add(values[index]);
        }
        SetCache.prototype.add = SetCache.prototype.push = function(value) {
            this.__data__.set(value, "__lodash_hash_undefined__");
            return this;
        };
        SetCache.prototype.has = function(value) {
            return this.__data__.has(value);
        };
        function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
        }
        Stack.prototype.clear = function() {
            this.__data__ = new ListCache();
            this.size = 0;
        };
        Stack.prototype.delete = function(key) {
            var data = this.__data__, result = data.delete(key);
            this.size = data.size;
            return result;
        };
        Stack.prototype.get = function(key) {
            return this.__data__.get(key);
        };
        Stack.prototype.has = function(key) {
            return this.__data__.has(key);
        };
        Stack.prototype.set = function(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || pairs.length < 199) {
                    pairs.push([ key, value ]);
                    this.size = ++data.size;
                    return this;
                }
                data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
        };
        function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
            for (var key in value) !inherited && !hasOwnProperty.call(value, key) || skipIndexes && ("length" == key || isBuff && ("offset" == key || "parent" == key) || isType && ("buffer" == key || "byteLength" == key || "byteOffset" == key) || isIndex(key, length)) || result.push(key);
            return result;
        }
        function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined;
        }
        function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
            (value === undefined || eq(object[key], value)) && (value !== undefined || key in object) || baseAssignValue(object, key, value);
        }
        function assignValue(object, key, value) {
            var objValue = object[key];
            hasOwnProperty.call(object, key) && eq(objValue, value) && (value !== undefined || key in object) || baseAssignValue(object, key, value);
        }
        function assocIndexOf(array, key) {
            for (var length = array.length; length--; ) if (eq(array[length][0], key)) return length;
            return -1;
        }
        function baseAggregator(collection, setter, iteratee, accumulator) {
            baseEach(collection, function(value, key, collection) {
                setter(accumulator, value, iteratee(value), collection);
            });
            return accumulator;
        }
        function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
        }
        function baseAssignValue(object, key, value) {
            "__proto__" == key && defineProperty ? defineProperty(object, key, {
                configurable: !0,
                enumerable: !0,
                value: value,
                writable: !0
            }) : object[key] = value;
        }
        function baseAt(object, paths) {
            for (var index = -1, length = paths.length, result = Array(length), skip = null == object; ++index < length; ) result[index] = skip ? undefined : get(object, paths[index]);
            return result;
        }
        function baseClamp(number, lower, upper) {
            if (number == number) {
                upper !== undefined && (number = number <= upper ? number : upper);
                lower !== undefined && (number = lower <= number ? number : lower);
            }
            return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
            var result, isDeep = 1 & bitmask, isFlat = 2 & bitmask, isFull = 4 & bitmask;
            customizer && (result = object ? customizer(value, key, object, stack) : customizer(value));
            if (result !== undefined) return result;
            if (!isObject(value)) return value;
            var isArr = isArray(value);
            if (isArr) {
                result = function(array) {
                    var length = array.length, result = new array.constructor(length);
                    if (length && "string" == typeof array[0] && hasOwnProperty.call(array, "index")) {
                        result.index = array.index;
                        result.input = array.input;
                    }
                    return result;
                }(value);
                if (!isDeep) return copyArray(value, result);
            } else {
                var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
                if (isBuffer(value)) return cloneBuffer(value, isDeep);
                if (tag == objectTag || tag == argsTag || isFunc && !object) {
                    result = isFlat || isFunc ? {} : initCloneObject(value);
                    if (!isDeep) return isFlat ? function(source, object) {
                        return copyObject(source, getSymbolsIn(source), object);
                    }(value, function(object, source) {
                        return object && copyObject(source, keysIn(source), object);
                    }(result, value)) : function(source, object) {
                        return copyObject(source, getSymbols(source), object);
                    }(value, baseAssign(result, value));
                } else {
                    if (!cloneableTags[tag]) return object ? value : {};
                    result = function(object, tag, isDeep) {
                        var symbol, Ctor = object.constructor;
                        switch (tag) {
                          case arrayBufferTag:
                            return cloneArrayBuffer(object);

                          case boolTag:
                          case dateTag:
                            return new Ctor(+object);

                          case dataViewTag:
                            return function(dataView, isDeep) {
                                var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
                                return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
                            }(object, isDeep);

                          case float32Tag:
                          case float64Tag:
                          case int8Tag:
                          case int16Tag:
                          case int32Tag:
                          case uint8Tag:
                          case "[object Uint8ClampedArray]":
                          case uint16Tag:
                          case uint32Tag:
                            return cloneTypedArray(object, isDeep);

                          case mapTag:
                            return new Ctor();

                          case numberTag:
                          case stringTag:
                            return new Ctor(object);

                          case regexpTag:
                            return function(regexp) {
                                var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
                                result.lastIndex = regexp.lastIndex;
                                return result;
                            }(object);

                          case setTag:
                            return new Ctor();

                          case symbolTag:
                            return symbol = object, symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
                        }
                    }(value, tag, isDeep);
                }
            }
            stack || (stack = new Stack());
            var stacked = stack.get(value);
            if (stacked) return stacked;
            stack.set(value, result);
            if (isSet(value)) {
                value.forEach(function(subValue) {
                    result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
                });
                return result;
            }
            if (isMap(value)) {
                value.forEach(function(subValue, key) {
                    result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
                });
                return result;
            }
            var props = isArr ? undefined : (isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys)(value);
            arrayEach(props || value, function(subValue, key) {
                props && (subValue = value[key = subValue]);
                assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
            return result;
        }
        function baseConformsTo(object, source, props) {
            var length = props.length;
            if (null == object) return !length;
            object = Object(object);
            for (;length--; ) {
                var key = props[length], predicate = source[key], value = object[key];
                if (value === undefined && !(key in object) || !predicate(value)) return !1;
            }
            return !0;
        }
        function baseDelay(func, wait, args) {
            if ("function" != typeof func) throw new TypeError(FUNC_ERROR_TEXT);
            return setTimeout(function() {
                func.apply(undefined, args);
            }, wait);
        }
        function baseDifference(array, values, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, isCommon = !0, length = array.length, result = [], valuesLength = values.length;
            if (!length) return result;
            iteratee && (values = arrayMap(values, baseUnary(iteratee)));
            if (comparator) {
                includes = arrayIncludesWith;
                isCommon = !1;
            } else if (200 <= values.length) {
                includes = cacheHas;
                isCommon = !1;
                values = new SetCache(values);
            }
            outer: for (;++index < length; ) {
                var value = array[index], computed = null == iteratee ? value : iteratee(value);
                value = comparator || 0 !== value ? value : 0;
                if (isCommon && computed == computed) {
                    for (var valuesIndex = valuesLength; valuesIndex--; ) if (values[valuesIndex] === computed) continue outer;
                    result.push(value);
                } else includes(values, computed, comparator) || result.push(value);
            }
            return result;
        }
        var baseEach = createBaseEach(baseForOwn), baseEachRight = createBaseEach(baseForOwnRight, !0);
        function baseEvery(collection, predicate) {
            var result = !0;
            baseEach(collection, function(value, index, collection) {
                return result = !!predicate(value, index, collection);
            });
            return result;
        }
        function baseExtremum(array, iteratee, comparator) {
            for (var index = -1, length = array.length; ++index < length; ) {
                var value = array[index], current = iteratee(value);
                if (null != current && (computed === undefined ? current == current && !isSymbol(current) : comparator(current, computed))) var computed = current, result = value;
            }
            return result;
        }
        function baseFilter(collection, predicate) {
            var result = [];
            baseEach(collection, function(value, index, collection) {
                predicate(value, index, collection) && result.push(value);
            });
            return result;
        }
        function baseFlatten(array, depth, predicate, isStrict, result) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result || (result = []);
            for (;++index < length; ) {
                var value = array[index];
                0 < depth && predicate(value) ? 1 < depth ? baseFlatten(value, depth - 1, predicate, isStrict, result) : arrayPush(result, value) : isStrict || (result[result.length] = value);
            }
            return result;
        }
        var baseFor = createBaseFor(), baseForRight = createBaseFor(!0);
        function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys);
        }
        function baseForOwnRight(object, iteratee) {
            return object && baseForRight(object, iteratee, keys);
        }
        function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
                return isFunction(object[key]);
            });
        }
        function baseGet(object, path) {
            for (var index = 0, length = (path = castPath(path, object)).length; null != object && index < length; ) object = object[toKey(path[index++])];
            return index && index == length ? object : undefined;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }
        function baseGetTag(value) {
            return null == value ? value === undefined ? "[object Undefined]" : "[object Null]" : symToStringTag && symToStringTag in Object(value) ? function(value) {
                var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
                try {
                    value[symToStringTag] = undefined;
                    var unmasked = !0;
                } catch (e) {}
                var result = nativeObjectToString.call(value);
                unmasked && (isOwn ? value[symToStringTag] = tag : delete value[symToStringTag]);
                return result;
            }(value) : function(value) {
                return nativeObjectToString.call(value);
            }(value);
        }
        function baseGt(value, other) {
            return other < value;
        }
        function baseHas(object, key) {
            return null != object && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
            return null != object && key in Object(object);
        }
        function baseIntersection(arrays, iteratee, comparator) {
            for (var includes = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = 1 / 0, result = []; othIndex--; ) {
                var array = arrays[othIndex];
                othIndex && iteratee && (array = arrayMap(array, baseUnary(iteratee)));
                maxLength = nativeMin(array.length, maxLength);
                caches[othIndex] = !comparator && (iteratee || 120 <= length && 120 <= array.length) ? new SetCache(othIndex && array) : undefined;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer: for (;++index < length && result.length < maxLength; ) {
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                value = comparator || 0 !== value ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
                    othIndex = othLength;
                    for (;--othIndex; ) {
                        var cache = caches[othIndex];
                        if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) continue outer;
                    }
                    seen && seen.push(computed);
                    result.push(value);
                }
            }
            return result;
        }
        function baseInvoke(object, path, args) {
            var func = null == (object = parent(object, path = castPath(path, object))) ? object : object[toKey(last(path))];
            return null == func ? undefined : apply(func, object, args);
        }
        function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
            return value === other || (null == value || null == other || !isObjectLike(value) && !isObjectLike(other) ? value != value && other != other : function(object, other, bitmask, customizer, equalFunc, stack) {
                var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other), objIsObj = (objTag = objTag == argsTag ? objectTag : objTag) == objectTag, othIsObj = (othTag = othTag == argsTag ? objectTag : othTag) == objectTag, isSameTag = objTag == othTag;
                if (isSameTag && isBuffer(object)) {
                    if (!isBuffer(other)) return !1;
                    objIsObj = !(objIsArr = !0);
                }
                if (isSameTag && !objIsObj) {
                    stack || (stack = new Stack());
                    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : function(object, other, tag, bitmask, customizer, equalFunc, stack) {
                        switch (tag) {
                          case dataViewTag:
                            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return !1;
                            object = object.buffer;
                            other = other.buffer;

                          case arrayBufferTag:
                            return !(object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other)));

                          case boolTag:
                          case dateTag:
                          case numberTag:
                            return eq(+object, +other);

                          case errorTag:
                            return object.name == other.name && object.message == other.message;

                          case regexpTag:
                          case stringTag:
                            return object == other + "";

                          case mapTag:
                            var convert = mapToArray;

                          case setTag:
                            var isPartial = 1 & bitmask;
                            convert || (convert = setToArray);
                            if (object.size != other.size && !isPartial) return !1;
                            var stacked = stack.get(object);
                            if (stacked) return stacked == other;
                            bitmask |= 2;
                            stack.set(object, other);
                            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                            stack.delete(object);
                            return result;

                          case symbolTag:
                            if (symbolValueOf) return symbolValueOf.call(object) == symbolValueOf.call(other);
                        }
                        return !1;
                    }(object, other, objTag, bitmask, customizer, equalFunc, stack);
                }
                if (!(1 & bitmask)) {
                    var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
                    if (objIsWrapped || othIsWrapped) {
                        var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                        stack || (stack = new Stack());
                        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                    }
                }
                if (!isSameTag) return !1;
                stack || (stack = new Stack());
                return function(object, other, bitmask, customizer, equalFunc, stack) {
                    var isPartial = 1 & bitmask, objProps = getAllKeys(object), objLength = objProps.length, othLength = getAllKeys(other).length;
                    if (objLength != othLength && !isPartial) return !1;
                    for (var index = objLength; index--; ) {
                        var key = objProps[index];
                        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) return !1;
                    }
                    var stacked = stack.get(object);
                    if (stacked && stack.get(other)) return stacked == other;
                    var result = !0;
                    stack.set(object, other);
                    stack.set(other, object);
                    for (var skipCtor = isPartial; ++index < objLength; ) {
                        key = objProps[index];
                        var objValue = object[key], othValue = other[key];
                        if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
                        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                            result = !1;
                            break;
                        }
                        skipCtor || (skipCtor = "constructor" == key);
                    }
                    if (result && !skipCtor) {
                        var objCtor = object.constructor, othCtor = other.constructor;
                        objCtor != othCtor && "constructor" in object && "constructor" in other && !("function" == typeof objCtor && objCtor instanceof objCtor && "function" == typeof othCtor && othCtor instanceof othCtor) && (result = !1);
                    }
                    stack.delete(object);
                    stack.delete(other);
                    return result;
                }(object, other, bitmask, customizer, equalFunc, stack);
            }(value, other, bitmask, customizer, baseIsEqual, stack));
        }
        function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (null == object) return !length;
            object = Object(object);
            for (;index--; ) {
                var data = matchData[index];
                if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return !1;
            }
            for (;++index < length; ) {
                var key = (data = matchData[index])[0], objValue = object[key], srcValue = data[1];
                if (noCustomizer && data[2]) {
                    if (objValue === undefined && !(key in object)) return !1;
                } else {
                    var stack = new Stack();
                    if (customizer) var result = customizer(objValue, srcValue, key, object, source, stack);
                    if (!(result === undefined ? baseIsEqual(srcValue, objValue, 3, customizer, stack) : result)) return !1;
                }
            }
            return !0;
        }
        function baseIsNative(value) {
            return !(!isObject(value) || (func = value, maskSrcKey && maskSrcKey in func)) && (isFunction(value) ? reIsNative : reIsHostCtor).test(toSource(value));
            var func;
        }
        function baseIteratee(value) {
            return "function" == typeof value ? value : null == value ? identity : "object" == typeof value ? isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value) : property(value);
        }
        function baseKeys(object) {
            if (!isPrototype(object)) return nativeKeys(object);
            var result = [];
            for (var key in Object(object)) hasOwnProperty.call(object, key) && "constructor" != key && result.push(key);
            return result;
        }
        function baseKeysIn(object) {
            if (!isObject(object)) return function(object) {
                var result = [];
                if (null != object) for (var key in Object(object)) result.push(key);
                return result;
            }(object);
            var isProto = isPrototype(object), result = [];
            for (var key in object) ("constructor" != key || !isProto && hasOwnProperty.call(object, key)) && result.push(key);
            return result;
        }
        function baseLt(value, other) {
            return value < other;
        }
        function baseMap(collection, iteratee) {
            var index = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, function(value, key, collection) {
                result[++index] = iteratee(value, key, collection);
            });
            return result;
        }
        function baseMatches(source) {
            var matchData = getMatchData(source);
            return 1 == matchData.length && matchData[0][2] ? matchesStrictComparable(matchData[0][0], matchData[0][1]) : function(object) {
                return object === source || baseIsMatch(object, source, matchData);
            };
        }
        function baseMatchesProperty(path, srcValue) {
            return isKey(path) && isStrictComparable(srcValue) ? matchesStrictComparable(toKey(path), srcValue) : function(object) {
                var objValue = get(object, path);
                return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, 3);
            };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
            object !== source && baseFor(source, function(srcValue, key) {
                if (isObject(srcValue)) {
                    stack || (stack = new Stack());
                    !function(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                        var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
                        if (stacked) assignMergeValue(object, key, stacked); else {
                            var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined, isCommon = newValue === undefined;
                            if (isCommon) {
                                var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
                                newValue = srcValue;
                                isArr || isBuff || isTyped ? newValue = isArray(objValue) ? objValue : isArrayLikeObject(objValue) ? copyArray(objValue) : isBuff ? cloneBuffer(srcValue, !(isCommon = !1)) : isTyped ? cloneTypedArray(srcValue, !(isCommon = !1)) : [] : isPlainObject(srcValue) || isArguments(srcValue) ? isArguments(newValue = objValue) ? newValue = toPlainObject(objValue) : isObject(objValue) && !isFunction(objValue) || (newValue = initCloneObject(srcValue)) : isCommon = !1;
                            }
                            if (isCommon) {
                                stack.set(srcValue, newValue);
                                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                                stack.delete(srcValue);
                            }
                            assignMergeValue(object, key, newValue);
                        }
                    }(object, source, key, srcIndex, baseMerge, customizer, stack);
                } else {
                    var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined;
                    newValue === undefined && (newValue = srcValue);
                    assignMergeValue(object, key, newValue);
                }
            }, keysIn);
        }
        function baseNth(array, n) {
            var length = array.length;
            if (length) return isIndex(n += n < 0 ? length : 0, length) ? array[n] : undefined;
        }
        function baseOrderBy(collection, iteratees, orders) {
            var index = -1;
            iteratees = arrayMap(iteratees.length ? iteratees : [ identity ], baseUnary(getIteratee()));
            return function(array, comparer) {
                var length = array.length;
                array.sort(comparer);
                for (;length--; ) array[length] = array[length].value;
                return array;
            }(baseMap(collection, function(value, key, collection) {
                return {
                    criteria: arrayMap(iteratees, function(iteratee) {
                        return iteratee(value);
                    }),
                    index: ++index,
                    value: value
                };
            }), function(object, other) {
                return function(object, other, orders) {
                    for (var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length; ++index < length; ) {
                        var result = compareAscending(objCriteria[index], othCriteria[index]);
                        if (result) {
                            if (ordersLength <= index) return result;
                            var order = orders[index];
                            return result * ("desc" == order ? -1 : 1);
                        }
                    }
                    return object.index - other.index;
                }(object, other, orders);
            });
        }
        function basePickBy(object, paths, predicate) {
            for (var index = -1, length = paths.length, result = {}; ++index < length; ) {
                var path = paths[index], value = baseGet(object, path);
                predicate(value, path) && baseSet(result, castPath(path, object), value);
            }
            return result;
        }
        function basePullAll(array, values, iteratee, comparator) {
            var indexOf = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values.length, seen = array;
            array === values && (values = copyArray(values));
            iteratee && (seen = arrayMap(array, baseUnary(iteratee)));
            for (;++index < length; ) for (var fromIndex = 0, value = values[index], computed = iteratee ? iteratee(value) : value; -1 < (fromIndex = indexOf(seen, computed, fromIndex, comparator)); ) {
                seen !== array && splice.call(seen, fromIndex, 1);
                splice.call(array, fromIndex, 1);
            }
            return array;
        }
        function basePullAt(array, indexes) {
            for (var length = array ? indexes.length : 0, lastIndex = length - 1; length--; ) {
                var index = indexes[length];
                if (length == lastIndex || index !== previous) {
                    var previous = index;
                    isIndex(index) ? splice.call(array, index, 1) : baseUnset(array, index);
                }
            }
            return array;
        }
        function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRepeat(string, n) {
            var result = "";
            if (!string || n < 1 || 9007199254740991 < n) return result;
            do {
                n % 2 && (result += string);
                (n = nativeFloor(n / 2)) && (string += string);
            } while (n);
            return result;
        }
        function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + "");
        }
        function baseSample(collection) {
            return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
            var array = values(collection);
            return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
            if (!isObject(object)) return object;
            for (var index = -1, length = (path = castPath(path, object)).length, lastIndex = length - 1, nested = object; null != nested && ++index < length; ) {
                var key = toKey(path[index]), newValue = value;
                if (index != lastIndex) {
                    var objValue = nested[key];
                    (newValue = customizer ? customizer(objValue, key, nested) : undefined) === undefined && (newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {});
                }
                assignValue(nested, key, newValue);
                nested = nested[key];
            }
            return object;
        }
        var baseSetData = metaMap ? function(func, data) {
            metaMap.set(func, data);
            return func;
        } : identity, baseSetToString = defineProperty ? function(func, string) {
            return defineProperty(func, "toString", {
                configurable: !0,
                enumerable: !1,
                value: constant(string),
                writable: !0
            });
        } : identity;
        function baseShuffle(collection) {
            return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
            var index = -1, length = array.length;
            start < 0 && (start = length < -start ? 0 : length + start);
            (end = length < end ? length : end) < 0 && (end += length);
            length = end < start ? 0 : end - start >>> 0;
            start >>>= 0;
            for (var result = Array(length); ++index < length; ) result[index] = array[index + start];
            return result;
        }
        function baseSome(collection, predicate) {
            var result;
            baseEach(collection, function(value, index, collection) {
                return !(result = predicate(value, index, collection));
            });
            return !!result;
        }
        function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = null == array ? low : array.length;
            if ("number" == typeof value && value == value && high <= 2147483647) {
                for (;low < high; ) {
                    var mid = low + high >>> 1, computed = array[mid];
                    null !== computed && !isSymbol(computed) && (retHighest ? computed <= value : computed < value) ? low = mid + 1 : high = mid;
                }
                return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee, retHighest) {
            value = iteratee(value);
            for (var low = 0, high = null == array ? 0 : array.length, valIsNaN = value != value, valIsNull = null === value, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined; low < high; ) {
                var mid = nativeFloor((low + high) / 2), computed = iteratee(array[mid]), othIsDefined = computed !== undefined, othIsNull = null === computed, othIsReflexive = computed == computed, othIsSymbol = isSymbol(computed);
                if (valIsNaN) var setLow = retHighest || othIsReflexive; else setLow = valIsUndefined ? othIsReflexive && (retHighest || othIsDefined) : valIsNull ? othIsReflexive && othIsDefined && (retHighest || !othIsNull) : valIsSymbol ? othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol) : !othIsNull && !othIsSymbol && (retHighest ? computed <= value : computed < value);
                setLow ? low = mid + 1 : high = mid;
            }
            return nativeMin(high, 4294967294);
        }
        function baseSortedUniq(array, iteratee) {
            for (var index = -1, length = array.length, resIndex = 0, result = []; ++index < length; ) {
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                if (!index || !eq(computed, seen)) {
                    var seen = computed;
                    result[resIndex++] = 0 === value ? 0 : value;
                }
            }
            return result;
        }
        function baseToNumber(value) {
            return "number" == typeof value ? value : isSymbol(value) ? NAN : +value;
        }
        function baseToString(value) {
            if ("string" == typeof value) return value;
            if (isArray(value)) return arrayMap(value, baseToString) + "";
            if (isSymbol(value)) return symbolToString ? symbolToString.call(value) : "";
            var result = value + "";
            return "0" == result && 1 / value == -1 / 0 ? "-0" : result;
        }
        function baseUniq(array, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, length = array.length, isCommon = !0, result = [], seen = result;
            if (comparator) {
                isCommon = !1;
                includes = arrayIncludesWith;
            } else if (200 <= length) {
                var set = iteratee ? null : createSet(array);
                if (set) return setToArray(set);
                isCommon = !1;
                includes = cacheHas;
                seen = new SetCache();
            } else seen = iteratee ? [] : result;
            outer: for (;++index < length; ) {
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                value = comparator || 0 !== value ? value : 0;
                if (isCommon && computed == computed) {
                    for (var seenIndex = seen.length; seenIndex--; ) if (seen[seenIndex] === computed) continue outer;
                    iteratee && seen.push(computed);
                    result.push(value);
                } else if (!includes(seen, computed, comparator)) {
                    seen !== result && seen.push(computed);
                    result.push(value);
                }
            }
            return result;
        }
        function baseUnset(object, path) {
            return null == (object = parent(object, path = castPath(path, object))) || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
            for (var length = array.length, index = fromRight ? length : -1; (fromRight ? index-- : ++index < length) && predicate(array[index], index, array); ) ;
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
            var result = value;
            result instanceof LazyWrapper && (result = result.value());
            return arrayReduce(actions, function(result, action) {
                return action.func.apply(action.thisArg, arrayPush([ result ], action.args));
            }, result);
        }
        function baseXor(arrays, iteratee, comparator) {
            var length = arrays.length;
            if (length < 2) return length ? baseUniq(arrays[0]) : [];
            for (var index = -1, result = Array(length); ++index < length; ) for (var array = arrays[index], othIndex = -1; ++othIndex < length; ) othIndex != index && (result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator));
            return baseUniq(baseFlatten(result, 1), iteratee, comparator);
        }
        function baseZipObject(props, values, assignFunc) {
            for (var index = -1, length = props.length, valsLength = values.length, result = {}; ++index < length; ) {
                var value = index < valsLength ? values[index] : undefined;
                assignFunc(result, props[index], value);
            }
            return result;
        }
        function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
            return "function" == typeof value ? value : identity;
        }
        function castPath(value, object) {
            return isArray(value) ? value : isKey(value, object) ? [ value ] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
            var length = array.length;
            end = end === undefined ? length : end;
            return !start && length <= end ? array : baseSlice(array, start, end);
        }
        var clearTimeout = ctxClearTimeout || function(id) {
            return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
            if (isDeep) return buffer.slice();
            var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result);
            return result;
        }
        function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array(result).set(new Uint8Array(arrayBuffer));
            return result;
        }
        function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
            if (value !== other) {
                var valIsDefined = value !== undefined, valIsNull = null === value, valIsReflexive = value == value, valIsSymbol = isSymbol(value), othIsDefined = other !== undefined, othIsNull = null === other, othIsReflexive = other == other, othIsSymbol = isSymbol(other);
                if (!othIsNull && !othIsSymbol && !valIsSymbol && other < value || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) return 1;
                if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) return -1;
            }
            return 0;
        }
        function composeArgs(args, partials, holders, isCurried) {
            for (var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(leftLength + rangeLength), isUncurried = !isCurried; ++leftIndex < leftLength; ) result[leftIndex] = partials[leftIndex];
            for (;++argsIndex < holdersLength; ) (isUncurried || argsIndex < argsLength) && (result[holders[argsIndex]] = args[argsIndex]);
            for (;rangeLength--; ) result[leftIndex++] = args[argsIndex++];
            return result;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
            for (var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(rangeLength + rightLength), isUncurried = !isCurried; ++argsIndex < rangeLength; ) result[argsIndex] = args[argsIndex];
            for (var offset = argsIndex; ++rightIndex < rightLength; ) result[offset + rightIndex] = partials[rightIndex];
            for (;++holdersIndex < holdersLength; ) (isUncurried || argsIndex < argsLength) && (result[offset + holders[holdersIndex]] = args[argsIndex++]);
            return result;
        }
        function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array(length));
            for (;++index < length; ) array[index] = source[index];
            return array;
        }
        function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            for (var index = -1, length = props.length; ++index < length; ) {
                var key = props[index], newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
                newValue === undefined && (newValue = source[key]);
                isNew ? baseAssignValue(object, key, newValue) : assignValue(object, key, newValue);
            }
            return object;
        }
        function createAggregator(setter, initializer) {
            return function(collection, iteratee) {
                var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
                return func(collection, setter, getIteratee(iteratee, 2), accumulator);
            };
        }
        function createAssigner(assigner) {
            return baseRest(function(object, sources) {
                var index = -1, length = sources.length, customizer = 1 < length ? sources[length - 1] : undefined, guard = 2 < length ? sources[2] : undefined;
                customizer = 3 < assigner.length && "function" == typeof customizer ? (length--, 
                customizer) : undefined;
                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    customizer = length < 3 ? undefined : customizer;
                    length = 1;
                }
                object = Object(object);
                for (;++index < length; ) {
                    var source = sources[index];
                    source && assigner(object, source, index, customizer);
                }
                return object;
            });
        }
        function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee) {
                if (null == collection) return collection;
                if (!isArrayLike(collection)) return eachFunc(collection, iteratee);
                for (var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection); (fromRight ? index-- : ++index < length) && !1 !== iteratee(iterable[index], index, iterable); ) ;
                return collection;
            };
        }
        function createBaseFor(fromRight) {
            return function(object, iteratee, keysFunc) {
                for (var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length; length--; ) {
                    var key = props[fromRight ? length : ++index];
                    if (!1 === iteratee(iterable[key], key, iterable)) break;
                }
                return object;
            };
        }
        function createCaseFirst(methodName) {
            return function(string) {
                var strSymbols = hasUnicode(string = toString(string)) ? stringToArray(string) : undefined, chr = strSymbols ? strSymbols[0] : string.charAt(0), trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
                return chr[methodName]() + trailing;
            };
        }
        function createCompounder(callback) {
            return function(string) {
                return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
            };
        }
        function createCtor(Ctor) {
            return function() {
                var args = arguments;
                switch (args.length) {
                  case 0:
                    return new Ctor();

                  case 1:
                    return new Ctor(args[0]);

                  case 2:
                    return new Ctor(args[0], args[1]);

                  case 3:
                    return new Ctor(args[0], args[1], args[2]);

                  case 4:
                    return new Ctor(args[0], args[1], args[2], args[3]);

                  case 5:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4]);

                  case 6:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);

                  case 7:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                }
                var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
                return isObject(result) ? result : thisBinding;
            };
        }
        function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
                var iterable = Object(collection);
                if (!isArrayLike(collection)) {
                    var iteratee = getIteratee(predicate, 3);
                    collection = keys(collection);
                    predicate = function(key) {
                        return iteratee(iterable[key], key, iterable);
                    };
                }
                var index = findIndexFunc(collection, predicate, fromIndex);
                return -1 < index ? iterable[iteratee ? collection[index] : index] : undefined;
            };
        }
        function createFlow(fromRight) {
            return flatRest(function(funcs) {
                var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
                fromRight && funcs.reverse();
                for (;index--; ) {
                    var func = funcs[index];
                    if ("function" != typeof func) throw new TypeError(FUNC_ERROR_TEXT);
                    if (prereq && !wrapper && "wrapper" == getFuncName(func)) var wrapper = new LodashWrapper([], !0);
                }
                index = wrapper ? index : length;
                for (;++index < length; ) {
                    var funcName = getFuncName(func = funcs[index]), data = "wrapper" == funcName ? getData(func) : undefined;
                    wrapper = data && isLaziable(data[0]) && 424 == data[1] && !data[4].length && 1 == data[9] ? wrapper[getFuncName(data[0])].apply(wrapper, data[3]) : 1 == func.length && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
                return function() {
                    var args = arguments, value = args[0];
                    if (wrapper && 1 == args.length && isArray(value)) return wrapper.plant(value).value();
                    for (var index = 0, result = length ? funcs[index].apply(this, args) : value; ++index < length; ) result = funcs[index].call(this, result);
                    return result;
                };
            });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
            var isAry = 128 & bitmask, isBind = 1 & bitmask, isBindKey = 2 & bitmask, isCurried = 24 & bitmask, isFlip = 512 & bitmask, Ctor = isBindKey ? undefined : createCtor(func);
            return function wrapper() {
                for (var length = arguments.length, args = Array(length), index = length; index--; ) args[index] = arguments[index];
                if (isCurried) var placeholder = getHolder(wrapper), holdersCount = function(array, placeholder) {
                    for (var length = array.length, result = 0; length--; ) array[length] === placeholder && ++result;
                    return result;
                }(args, placeholder);
                partials && (args = composeArgs(args, partials, holders, isCurried));
                partialsRight && (args = composeArgsRight(args, partialsRight, holdersRight, isCurried));
                length -= holdersCount;
                if (isCurried && length < arity) {
                    var newHolders = replaceHolders(args, placeholder);
                    return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
                }
                var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
                length = args.length;
                argPos ? args = function(array, indexes) {
                    for (var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array); length--; ) {
                        var index = indexes[length];
                        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
                    }
                    return array;
                }(args, argPos) : isFlip && 1 < length && args.reverse();
                isAry && ary < length && (args.length = ary);
                this && this !== root && this instanceof wrapper && (fn = Ctor || createCtor(fn));
                return fn.apply(thisBinding, args);
            };
        }
        function createInverter(setter, toIteratee) {
            return function(object, iteratee) {
                return function(object, setter, iteratee, accumulator) {
                    baseForOwn(object, function(value, key, object) {
                        setter(accumulator, iteratee(value), key, object);
                    });
                    return accumulator;
                }(object, setter, toIteratee(iteratee), {});
            };
        }
        function createMathOperation(operator, defaultValue) {
            return function(value, other) {
                var result;
                if (value === undefined && other === undefined) return defaultValue;
                value !== undefined && (result = value);
                if (other !== undefined) {
                    if (result === undefined) return other;
                    if ("string" == typeof value || "string" == typeof other) {
                        value = baseToString(value);
                        other = baseToString(other);
                    } else {
                        value = baseToNumber(value);
                        other = baseToNumber(other);
                    }
                    result = operator(value, other);
                }
                return result;
            };
        }
        function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                return baseRest(function(args) {
                    var thisArg = this;
                    return arrayFunc(iteratees, function(iteratee) {
                        return apply(iteratee, thisArg, args);
                    });
                });
            });
        }
        function createPadding(length, chars) {
            var charsLength = (chars = chars === undefined ? " " : baseToString(chars)).length;
            if (charsLength < 2) return charsLength ? baseRepeat(chars, length) : chars;
            var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join("") : result.slice(0, length);
        }
        function createRange(fromRight) {
            return function(start, end, step) {
                step && "number" != typeof step && isIterateeCall(start, end, step) && (end = step = undefined);
                start = toFinite(start);
                if (end === undefined) {
                    end = start;
                    start = 0;
                } else end = toFinite(end);
                return function(start, end, step, fromRight) {
                    for (var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length); length--; ) {
                        result[fromRight ? length : ++index] = start;
                        start += step;
                    }
                    return result;
                }(start, end, step = step === undefined ? start < end ? 1 : -1 : toFinite(step), fromRight);
            };
        }
        function createRelationalOperation(operator) {
            return function(value, other) {
                if ("string" != typeof value || "string" != typeof other) {
                    value = toNumber(value);
                    other = toNumber(other);
                }
                return operator(value, other);
            };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
            var isCurry = 8 & bitmask;
            bitmask |= isCurry ? 32 : 64;
            4 & (bitmask &= ~(isCurry ? 64 : 32)) || (bitmask &= -4);
            var newData = [ func, bitmask, thisArg, isCurry ? partials : undefined, isCurry ? holders : undefined, isCurry ? undefined : partials, isCurry ? undefined : holders, argPos, ary, arity ], result = wrapFunc.apply(undefined, newData);
            isLaziable(func) && setData(result, newData);
            result.placeholder = placeholder;
            return setWrapToString(result, func, bitmask);
        }
        function createRound(methodName) {
            var func = Math[methodName];
            return function(number, precision) {
                number = toNumber(number);
                if (precision = null == precision ? 0 : nativeMin(toInteger(precision), 292)) {
                    var pair = (toString(number) + "e").split("e");
                    return +((pair = (toString(func(pair[0] + "e" + (+pair[1] + precision))) + "e").split("e"))[0] + "e" + (+pair[1] - precision));
                }
                return func(number);
            };
        }
        var createSet = Set && 1 / setToArray(new Set([ , -0 ]))[1] == 1 / 0 ? function(values) {
            return new Set(values);
        } : noop;
        function createToPairs(keysFunc) {
            return function(object) {
                var tag = getTag(object);
                return tag == mapTag ? mapToArray(object) : tag == setTag ? setToPairs(object) : function(object, props) {
                    return arrayMap(props, function(key) {
                        return [ key, object[key] ];
                    });
                }(object, keysFunc(object));
            };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
            var isBindKey = 2 & bitmask;
            if (!isBindKey && "function" != typeof func) throw new TypeError(FUNC_ERROR_TEXT);
            var length = partials ? partials.length : 0;
            if (!length) {
                bitmask &= -97;
                partials = holders = undefined;
            }
            ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
            arity = arity === undefined ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (64 & bitmask) {
                var partialsRight = partials, holdersRight = holders;
                partials = holders = undefined;
            }
            var data = isBindKey ? undefined : getData(func), newData = [ func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity ];
            data && function(data, source) {
                var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < 131, isCombo = 128 == srcBitmask && 8 == bitmask || 128 == srcBitmask && 256 == bitmask && data[7].length <= source[8] || 384 == srcBitmask && source[7].length <= source[8] && 8 == bitmask;
                if (isCommon || isCombo) {
                    if (1 & srcBitmask) {
                        data[2] = source[2];
                        newBitmask |= 1 & bitmask ? 0 : 4;
                    }
                    var value = source[3];
                    if (value) {
                        var partials = data[3];
                        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
                    }
                    if (value = source[5]) {
                        partials = data[5];
                        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
                    }
                    (value = source[7]) && (data[7] = value);
                    128 & srcBitmask && (data[8] = null == data[8] ? source[8] : nativeMin(data[8], source[8]));
                    null == data[9] && (data[9] = source[9]);
                    data[0] = source[0];
                    data[1] = newBitmask;
                }
            }(newData, data);
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            !(arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0)) && 24 & bitmask && (bitmask &= -25);
            if (bitmask && 1 != bitmask) result = 8 == bitmask || 16 == bitmask ? function(func, bitmask, arity) {
                var Ctor = createCtor(func);
                return function wrapper() {
                    for (var length = arguments.length, args = Array(length), index = length, placeholder = getHolder(wrapper); index--; ) args[index] = arguments[index];
                    var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
                    return (length -= holders.length) < arity ? createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length) : apply(this && this !== root && this instanceof wrapper ? Ctor : func, this, args);
                };
            }(func, bitmask, arity) : 32 != bitmask && 33 != bitmask || holders.length ? createHybrid.apply(undefined, newData) : function(func, bitmask, thisArg, partials) {
                var isBind = 1 & bitmask, Ctor = createCtor(func);
                return function wrapper() {
                    for (var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func; ++leftIndex < leftLength; ) args[leftIndex] = partials[leftIndex];
                    for (;argsLength--; ) args[leftIndex++] = arguments[++argsIndex];
                    return apply(fn, isBind ? thisArg : this, args);
                };
            }(func, bitmask, thisArg, partials); else var result = function(func, bitmask, thisArg) {
                var isBind = 1 & bitmask, Ctor = createCtor(func);
                return function wrapper() {
                    return (this && this !== root && this instanceof wrapper ? Ctor : func).apply(isBind ? thisArg : this, arguments);
                };
            }(func, bitmask, thisArg);
            return setWrapToString((data ? baseSetData : setData)(result, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
            return objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key) ? srcValue : objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
                stack.set(srcValue, objValue);
                baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                stack.delete(srcValue);
            }
            return objValue;
        }
        function customOmitClone(value) {
            return isPlainObject(value) ? undefined : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = 1 & bitmask, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && arrLength < othLength)) return !1;
            var stacked = stack.get(array);
            if (stacked && stack.get(other)) return stacked == other;
            var index = -1, result = !0, seen = 2 & bitmask ? new SetCache() : undefined;
            stack.set(array, other);
            stack.set(other, array);
            for (;++index < arrLength; ) {
                var arrValue = array[index], othValue = other[index];
                if (customizer) var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
                if (compared !== undefined) {
                    if (compared) continue;
                    result = !1;
                    break;
                }
                if (seen) {
                    if (!arraySome(other, function(othValue, othIndex) {
                        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) return seen.push(othIndex);
                    })) {
                        result = !1;
                        break;
                    }
                } else if (arrValue !== othValue && !equalFunc(arrValue, othValue, bitmask, customizer, stack)) {
                    result = !1;
                    break;
                }
            }
            stack.delete(array);
            stack.delete(other);
            return result;
        }
        function flatRest(func) {
            return setToString(overRest(func, undefined, flatten), func + "");
        }
        function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = metaMap ? function(func) {
            return metaMap.get(func);
        } : noop;
        function getFuncName(func) {
            for (var result = func.name + "", array = realNames[result], length = hasOwnProperty.call(realNames, result) ? array.length : 0; length--; ) {
                var data = array[length], otherFunc = data.func;
                if (null == otherFunc || otherFunc == func) return data.name;
            }
            return result;
        }
        function getHolder(func) {
            return (hasOwnProperty.call(lodash, "placeholder") ? lodash : func).placeholder;
        }
        function getIteratee() {
            var result = lodash.iteratee || iteratee;
            result = result === iteratee ? baseIteratee : result;
            return arguments.length ? result(arguments[0], arguments[1]) : result;
        }
        function getMapData(map, key) {
            var value, type, data = map.__data__;
            return ("string" == (type = typeof (value = key)) || "number" == type || "symbol" == type || "boolean" == type ? "__proto__" !== value : null === value) ? data["string" == typeof key ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
            for (var result = keys(object), length = result.length; length--; ) {
                var key = result[length], value = object[key];
                result[length] = [ key, value, isStrictComparable(value) ];
            }
            return result;
        }
        function getNative(object, key) {
            var value = function(object, key) {
                return null == object ? undefined : object[key];
            }(object, key);
            return baseIsNative(value) ? value : undefined;
        }
        var getSymbols = nativeGetSymbols ? function(object) {
            if (null == object) return [];
            object = Object(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
                return propertyIsEnumerable.call(object, symbol);
            });
        } : stubArray, getSymbolsIn = nativeGetSymbols ? function(object) {
            for (var result = []; object; ) {
                arrayPush(result, getSymbols(object));
                object = getPrototype(object);
            }
            return result;
        } : stubArray, getTag = baseGetTag;
        (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && "[object Promise]" != getTag(Promise.resolve()) || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) && (getTag = function(value) {
            var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;

              case mapCtorString:
                return mapTag;

              case promiseCtorString:
                return "[object Promise]";

              case setCtorString:
                return setTag;

              case weakMapCtorString:
                return weakMapTag;
            }
            return result;
        });
        function hasPath(object, path, hasFunc) {
            for (var index = -1, length = (path = castPath(path, object)).length, result = !1; ++index < length; ) {
                var key = toKey(path[index]);
                if (!(result = null != object && hasFunc(object, key))) break;
                object = object[key];
            }
            return result || ++index != length ? result : !!(length = null == object ? 0 : object.length) && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneObject(object) {
            return "function" != typeof object.constructor || isPrototype(object) ? {} : baseCreate(getPrototype(object));
        }
        function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
            var type = typeof value;
            return !!(length = null == length ? 9007199254740991 : length) && ("number" == type || "symbol" != type && reIsUint.test(value)) && -1 < value && value % 1 == 0 && value < length;
        }
        function isIterateeCall(value, index, object) {
            if (!isObject(object)) return !1;
            var type = typeof index;
            return !!("number" == type ? isArrayLike(object) && isIndex(index, object.length) : "string" == type && index in object) && eq(object[index], value);
        }
        function isKey(value, object) {
            if (isArray(value)) return !1;
            var type = typeof value;
            return !("number" != type && "symbol" != type && "boolean" != type && null != value && !isSymbol(value)) || reIsPlainProp.test(value) || !reIsDeepProp.test(value) || null != object && value in Object(object);
        }
        function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if ("function" != typeof other || !(funcName in LazyWrapper.prototype)) return !1;
            if (func === other) return !0;
            var data = getData(other);
            return !!data && func === data[0];
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
            var Ctor = value && value.constructor;
            return value === ("function" == typeof Ctor && Ctor.prototype || objectProto);
        }
        function isStrictComparable(value) {
            return value == value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
            return function(object) {
                return null != object && object[key] === srcValue && (srcValue !== undefined || key in Object(object));
            };
        }
        function overRest(func, start, transform) {
            start = nativeMax(start === undefined ? func.length - 1 : start, 0);
            return function() {
                for (var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length); ++index < length; ) array[index] = args[start + index];
                index = -1;
                for (var otherArgs = Array(start + 1); ++index < start; ) otherArgs[index] = args[index];
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
            };
        }
        function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function safeGet(object, key) {
            if ("__proto__" != key) return object[key];
        }
        var setData = shortOut(baseSetData), setTimeout = ctxSetTimeout || function(func, wait) {
            return root.setTimeout(func, wait);
        }, setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + "";
            return setToString(wrapper, function(source, details) {
                var length = details.length;
                if (!length) return source;
                var lastIndex = length - 1;
                details[lastIndex] = (1 < length ? "& " : "") + details[lastIndex];
                details = details.join(2 < length ? ", " : " ");
                return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
            }(source, function(details, bitmask) {
                arrayEach(wrapFlags, function(pair) {
                    var value = "_." + pair[0];
                    bitmask & pair[1] && !arrayIncludes(details, value) && details.push(value);
                });
                return details.sort();
            }(function(source) {
                var match = source.match(reWrapDetails);
                return match ? match[1].split(reSplitDetails) : [];
            }(source), bitmask)));
        }
        function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
                var stamp = nativeNow(), remaining = 16 - (stamp - lastCalled);
                lastCalled = stamp;
                if (0 < remaining) {
                    if (800 <= ++count) return arguments[0];
                } else count = 0;
                return func.apply(undefined, arguments);
            };
        }
        function shuffleSelf(array, size) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size = size === undefined ? length : size;
            for (;++index < size; ) {
                var rand = baseRandom(index, lastIndex), value = array[rand];
                array[rand] = array[index];
                array[index] = value;
            }
            array.length = size;
            return array;
        }
        var stringToPath = function(func) {
            var result = memoize(func, function(key) {
                500 === cache.size && cache.clear();
                return key;
            }), cache = result.cache;
            return result;
        }(function(string) {
            var result = [];
            46 === string.charCodeAt(0) && result.push("");
            string.replace(rePropName, function(match, number, quote, subString) {
                result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
            });
            return result;
        });
        function toKey(value) {
            if ("string" == typeof value || isSymbol(value)) return value;
            var result = value + "";
            return "0" == result && 1 / value == -1 / 0 ? "-0" : result;
        }
        function toSource(func) {
            if (null != func) {
                try {
                    return funcToString.call(func);
                } catch (e) {}
                try {
                    return func + "";
                } catch (e) {}
            }
            return "";
        }
        function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) return wrapper.clone();
            var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result.__actions__ = copyArray(wrapper.__actions__);
            result.__index__ = wrapper.__index__;
            result.__values__ = wrapper.__values__;
            return result;
        }
        var difference = baseRest(function(array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, !0)) : [];
        }), differenceBy = baseRest(function(array, values) {
            var iteratee = last(values);
            isArrayLikeObject(iteratee) && (iteratee = undefined);
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, !0), getIteratee(iteratee, 2)) : [];
        }), differenceWith = baseRest(function(array, values) {
            var comparator = last(values);
            isArrayLikeObject(comparator) && (comparator = undefined);
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, !0), undefined, comparator) : [];
        });
        function findIndex(array, predicate, fromIndex) {
            var length = null == array ? 0 : array.length;
            if (!length) return -1;
            var index = null == fromIndex ? 0 : toInteger(fromIndex);
            index < 0 && (index = nativeMax(length + index, 0));
            return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
            var length = null == array ? 0 : array.length;
            if (!length) return -1;
            var index = length - 1;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, !0);
        }
        function flatten(array) {
            return null != array && array.length ? baseFlatten(array, 1) : [];
        }
        function head(array) {
            return array && array.length ? array[0] : undefined;
        }
        var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        }), intersectionBy = baseRest(function(arrays) {
            var iteratee = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            iteratee === last(mapped) ? iteratee = undefined : mapped.pop();
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
        }), intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            (comparator = "function" == typeof comparator ? comparator : undefined) && mapped.pop();
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
        });
        function last(array) {
            var length = null == array ? 0 : array.length;
            return length ? array[length - 1] : undefined;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values) {
            return array && array.length && values && values.length ? basePullAll(array, values) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
            var length = null == array ? 0 : array.length, result = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index) {
                return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result;
        });
        function reverse(array) {
            return null == array ? array : nativeReverse.call(array);
        }
        var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, !0));
        }), unionBy = baseRest(function(arrays) {
            var iteratee = last(arrays);
            isArrayLikeObject(iteratee) && (iteratee = undefined);
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, !0), getIteratee(iteratee, 2));
        }), unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = "function" == typeof comparator ? comparator : undefined;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, !0), undefined, comparator);
        });
        function unzip(array) {
            if (!array || !array.length) return [];
            var length = 0;
            array = arrayFilter(array, function(group) {
                if (isArrayLikeObject(group)) {
                    length = nativeMax(group.length, length);
                    return !0;
                }
            });
            return baseTimes(length, function(index) {
                return arrayMap(array, baseProperty(index));
            });
        }
        function unzipWith(array, iteratee) {
            if (!array || !array.length) return [];
            var result = unzip(array);
            return null == iteratee ? result : arrayMap(result, function(group) {
                return apply(iteratee, undefined, group);
            });
        }
        var without = baseRest(function(array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, values) : [];
        }), xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
        }), xorBy = baseRest(function(arrays) {
            var iteratee = last(arrays);
            isArrayLikeObject(iteratee) && (iteratee = undefined);
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
        }), xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = "function" == typeof comparator ? comparator : undefined;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
        }), zip = baseRest(unzip);
        var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee = 1 < length ? arrays[length - 1] : undefined;
            iteratee = "function" == typeof iteratee ? (arrays.pop(), iteratee) : undefined;
            return unzipWith(arrays, iteratee);
        });
        function chain(value) {
            var result = lodash(value);
            result.__chain__ = !0;
            return result;
        }
        function thru(value, interceptor) {
            return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
                return baseAt(object, paths);
            };
            if (1 < length || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) return this.thru(interceptor);
            (value = value.slice(start, +start + (length ? 1 : 0))).__actions__.push({
                func: thru,
                args: [ interceptor ],
                thisArg: undefined
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
                length && !array.length && array.push(undefined);
                return array;
            });
        });
        var countBy = createAggregator(function(result, value, key) {
            hasOwnProperty.call(result, key) ? ++result[key] : baseAssignValue(result, key, 1);
        });
        var find = createFind(findIndex), findLast = createFind(findLastIndex);
        function forEach(collection, iteratee) {
            return (isArray(collection) ? arrayEach : baseEach)(collection, getIteratee(iteratee, 3));
        }
        function forEachRight(collection, iteratee) {
            return (isArray(collection) ? arrayEachRight : baseEachRight)(collection, getIteratee(iteratee, 3));
        }
        var groupBy = createAggregator(function(result, value, key) {
            hasOwnProperty.call(result, key) ? result[key].push(value) : baseAssignValue(result, key, [ value ]);
        });
        var invokeMap = baseRest(function(collection, path, args) {
            var index = -1, isFunc = "function" == typeof path, result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, function(value) {
                result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result;
        }), keyBy = createAggregator(function(result, value, key) {
            baseAssignValue(result, key, value);
        });
        function map(collection, iteratee) {
            return (isArray(collection) ? arrayMap : baseMap)(collection, getIteratee(iteratee, 3));
        }
        var partition = createAggregator(function(result, value, key) {
            result[key ? 0 : 1].push(value);
        }, function() {
            return [ [], [] ];
        });
        var sortBy = baseRest(function(collection, iteratees) {
            if (null == collection) return [];
            var length = iteratees.length;
            1 < length && isIterateeCall(collection, iteratees[0], iteratees[1]) ? iteratees = [] : 2 < length && isIterateeCall(iteratees[0], iteratees[1], iteratees[2]) && (iteratees = [ iteratees[0] ]);
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        }), now = ctxNow || function() {
            return root.Date.now();
        };
        function ary(func, n, guard) {
            n = guard ? undefined : n;
            n = func && null == n ? func.length : n;
            return createWrap(func, 128, undefined, undefined, undefined, undefined, n);
        }
        function before(n, func) {
            var result;
            if ("function" != typeof func) throw new TypeError(FUNC_ERROR_TEXT);
            n = toInteger(n);
            return function() {
                0 < --n && (result = func.apply(this, arguments));
                n <= 1 && (func = undefined);
                return result;
            };
        }
        var bind = baseRest(function(func, thisArg, partials) {
            var bitmask = 1;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bind));
                bitmask |= 32;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
        }), bindKey = baseRest(function(object, key, partials) {
            var bitmask = 3;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bindKey));
                bitmask |= 32;
            }
            return createWrap(key, bitmask, object, partials, holders);
        });
        function debounce(func, wait, options) {
            var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = !1, maxing = !1, trailing = !0;
            if ("function" != typeof func) throw new TypeError(FUNC_ERROR_TEXT);
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
                leading = !!options.leading;
                maxWait = (maxing = "maxWait" in options) ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
                var args = lastArgs, thisArg = lastThis;
                lastArgs = lastThis = undefined;
                lastInvokeTime = time;
                return result = func.apply(thisArg, args);
            }
            function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime;
                return lastCallTime === undefined || wait <= timeSinceLastCall || timeSinceLastCall < 0 || maxing && maxWait <= time - lastInvokeTime;
            }
            function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) return trailingEdge(time);
                timerId = setTimeout(timerExpired, function(time) {
                    var timeWaiting = wait - (time - lastCallTime);
                    return maxing ? nativeMin(timeWaiting, maxWait - (time - lastInvokeTime)) : timeWaiting;
                }(time));
            }
            function trailingEdge(time) {
                timerId = undefined;
                if (trailing && lastArgs) return invokeFunc(time);
                lastArgs = lastThis = undefined;
                return result;
            }
            function debounced() {
                var time = now(), isInvoking = shouldInvoke(time);
                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;
                if (isInvoking) {
                    if (timerId === undefined) return function(time) {
                        lastInvokeTime = time;
                        timerId = setTimeout(timerExpired, wait);
                        return leading ? invokeFunc(time) : result;
                    }(lastCallTime);
                    if (maxing) {
                        timerId = setTimeout(timerExpired, wait);
                        return invokeFunc(lastCallTime);
                    }
                }
                timerId === undefined && (timerId = setTimeout(timerExpired, wait));
                return result;
            }
            debounced.cancel = function() {
                timerId !== undefined && clearTimeout(timerId);
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = undefined;
            };
            debounced.flush = function() {
                return timerId === undefined ? result : trailingEdge(now());
            };
            return debounced;
        }
        var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
        }), delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
        });
        function memoize(func, resolver) {
            if ("function" != typeof func || null != resolver && "function" != typeof resolver) throw new TypeError(FUNC_ERROR_TEXT);
            var memoized = function() {
                var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                if (cache.has(key)) return cache.get(key);
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
            };
            memoized.cache = new (memoize.Cache || MapCache)();
            return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
            if ("function" != typeof predicate) throw new TypeError(FUNC_ERROR_TEXT);
            return function() {
                var args = arguments;
                switch (args.length) {
                  case 0:
                    return !predicate.call(this);

                  case 1:
                    return !predicate.call(this, args[0]);

                  case 2:
                    return !predicate.call(this, args[0], args[1]);

                  case 3:
                    return !predicate.call(this, args[0], args[1], args[2]);
                }
                return !predicate.apply(this, args);
            };
        }
        var overArgs = castRest(function(func, transforms) {
            var funcsLength = (transforms = 1 == transforms.length && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()))).length;
            return baseRest(function(args) {
                for (var index = -1, length = nativeMin(args.length, funcsLength); ++index < length; ) args[index] = transforms[index].call(this, args[index]);
                return apply(func, this, args);
            });
        }), partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, 32, undefined, partials, holders);
        }), partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, 64, undefined, partials, holders);
        }), rearg = flatRest(function(func, indexes) {
            return createWrap(func, 256, undefined, undefined, undefined, indexes);
        });
        function eq(value, other) {
            return value === other || value != value && other != other;
        }
        var gt = createRelationalOperation(baseGt), gte = createRelationalOperation(function(value, other) {
            return other <= value;
        }), isArguments = baseIsArguments(function() {
            return arguments;
        }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        }, isArray = Array.isArray, isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : function(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        };
        function isArrayLike(value) {
            return null != value && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
        }
        var isBuffer = nativeIsBuffer || stubFalse, isDate = nodeIsDate ? baseUnary(nodeIsDate) : function(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
        };
        function isError(value) {
            if (!isObjectLike(value)) return !1;
            var tag = baseGetTag(value);
            return tag == errorTag || "[object DOMException]" == tag || "string" == typeof value.message && "string" == typeof value.name && !isPlainObject(value);
        }
        function isFunction(value) {
            if (!isObject(value)) return !1;
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || "[object AsyncFunction]" == tag || "[object Proxy]" == tag;
        }
        function isInteger(value) {
            return "number" == typeof value && value == toInteger(value);
        }
        function isLength(value) {
            return "number" == typeof value && -1 < value && value % 1 == 0 && value <= 9007199254740991;
        }
        function isObject(value) {
            var type = typeof value;
            return null != value && ("object" == type || "function" == type);
        }
        function isObjectLike(value) {
            return null != value && "object" == typeof value;
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : function(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
        };
        function isNumber(value) {
            return "number" == typeof value || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) return !1;
            var proto = getPrototype(value);
            if (null === proto) return !0;
            var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
            return "function" == typeof Ctor && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : function(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
        };
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : function(value) {
            return isObjectLike(value) && getTag(value) == setTag;
        };
        function isString(value) {
            return "string" == typeof value || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
            return "symbol" == typeof value || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : function(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        };
        var lt = createRelationalOperation(baseLt), lte = createRelationalOperation(function(value, other) {
            return value <= other;
        });
        function toArray(value) {
            if (!value) return [];
            if (isArrayLike(value)) return isString(value) ? stringToArray(value) : copyArray(value);
            if (symIterator && value[symIterator]) return function(iterator) {
                for (var data, result = []; !(data = iterator.next()).done; ) result.push(data.value);
                return result;
            }(value[symIterator]());
            var tag = getTag(value);
            return (tag == mapTag ? mapToArray : tag == setTag ? setToArray : values)(value);
        }
        function toFinite(value) {
            return value ? (value = toNumber(value)) !== 1 / 0 && value !== -1 / 0 ? value == value ? value : 0 : 17976931348623157e292 * (value < 0 ? -1 : 1) : 0 === value ? value : 0;
        }
        function toInteger(value) {
            var result = toFinite(value), remainder = result % 1;
            return result == result ? remainder ? result - remainder : result : 0;
        }
        function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, 4294967295) : 0;
        }
        function toNumber(value) {
            if ("number" == typeof value) return value;
            if (isSymbol(value)) return NAN;
            if (isObject(value)) {
                var other = "function" == typeof value.valueOf ? value.valueOf() : value;
                value = isObject(other) ? other + "" : other;
            }
            if ("string" != typeof value) return 0 === value ? value : +value;
            value = value.replace(reTrim, "");
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
            return copyObject(value, keysIn(value));
        }
        function toString(value) {
            return null == value ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike(source)) copyObject(source, keys(source), object); else for (var key in source) hasOwnProperty.call(source, key) && assignValue(object, key, source[key]);
        }), assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
        }), assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
        }), assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
        }), at = flatRest(baseAt);
        var defaults = baseRest(function(object, sources) {
            object = Object(object);
            var index = -1, length = sources.length, guard = 2 < length ? sources[2] : undefined;
            guard && isIterateeCall(sources[0], sources[1], guard) && (length = 1);
            for (;++index < length; ) for (var source = sources[index], props = keysIn(source), propsIndex = -1, propsLength = props.length; ++propsIndex < propsLength; ) {
                var key = props[propsIndex], value = object[key];
                (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) && (object[key] = source[key]);
            }
            return object;
        }), defaultsDeep = baseRest(function(args) {
            args.push(undefined, customDefaultsMerge);
            return apply(mergeWith, undefined, args);
        });
        function get(object, path, defaultValue) {
            var result = null == object ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
        }
        function hasIn(object, path) {
            return null != object && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function(result, value, key) {
            null != value && "function" != typeof value.toString && (value = nativeObjectToString.call(value));
            result[value] = key;
        }, constant(identity)), invertBy = createInverter(function(result, value, key) {
            null != value && "function" != typeof value.toString && (value = nativeObjectToString.call(value));
            hasOwnProperty.call(result, value) ? result[value].push(key) : result[value] = [ key ];
        }, getIteratee), invoke = baseRest(baseInvoke);
        function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, !0) : baseKeysIn(object);
        }
        var merge = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
        }), mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
        }), omit = flatRest(function(object, paths) {
            var result = {};
            if (null == object) return result;
            var isDeep = !1;
            paths = arrayMap(paths, function(path) {
                path = castPath(path, object);
                isDeep || (isDeep = 1 < path.length);
                return path;
            });
            copyObject(object, getAllKeysIn(object), result);
            isDeep && (result = baseClone(result, 7, customOmitClone));
            for (var length = paths.length; length--; ) baseUnset(result, paths[length]);
            return result;
        });
        var pick = flatRest(function(object, paths) {
            return null == object ? {} : function(object, paths) {
                return basePickBy(object, paths, function(value, path) {
                    return hasIn(object, path);
                });
            }(object, paths);
        });
        function pickBy(object, predicate) {
            if (null == object) return {};
            var props = arrayMap(getAllKeysIn(object), function(prop) {
                return [ prop ];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value, path) {
                return predicate(value, path[0]);
            });
        }
        var toPairs = createToPairs(keys), toPairsIn = createToPairs(keysIn);
        function values(object) {
            return null == object ? [] : baseValues(object, keys(object));
        }
        var camelCase = createCompounder(function(result, word, index) {
            word = word.toLowerCase();
            return result + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
            return (string = toString(string)) && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        var kebabCase = createCompounder(function(result, word, index) {
            return result + (index ? "-" : "") + word.toLowerCase();
        }), lowerCase = createCompounder(function(result, word, index) {
            return result + (index ? " " : "") + word.toLowerCase();
        }), lowerFirst = createCaseFirst("toLowerCase");
        var snakeCase = createCompounder(function(result, word, index) {
            return result + (index ? "_" : "") + word.toLowerCase();
        });
        var startCase = createCompounder(function(result, word, index) {
            return result + (index ? " " : "") + upperFirst(word);
        });
        var upperCase = createCompounder(function(result, word, index) {
            return result + (index ? " " : "") + word.toUpperCase();
        }), upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
            string = toString(string);
            return (pattern = guard ? undefined : pattern) === undefined ? function(string) {
                return reHasUnicodeWord.test(string);
            }(string) ? function(string) {
                return string.match(reUnicodeWord) || [];
            }(string) : function(string) {
                return string.match(reAsciiWord) || [];
            }(string) : string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
            try {
                return apply(func, undefined, args);
            } catch (e) {
                return isError(e) ? e : new Error(e);
            }
        }), bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
                key = toKey(key);
                baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
        });
        function constant(value) {
            return function() {
                return value;
            };
        }
        var flow = createFlow(), flowRight = createFlow(!0);
        function identity(value) {
            return value;
        }
        function iteratee(func) {
            return baseIteratee("function" == typeof func ? func : baseClone(func, 1));
        }
        var method = baseRest(function(path, args) {
            return function(object) {
                return baseInvoke(object, path, args);
            };
        }), methodOf = baseRest(function(object, args) {
            return function(path) {
                return baseInvoke(object, path, args);
            };
        });
        function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (null == options && (!isObject(source) || !methodNames.length && props.length)) {
                options = source;
                source = object;
                object = this;
                methodNames = baseFunctions(source, keys(source));
            }
            var chain = !(isObject(options) && "chain" in options && !options.chain), isFunc = isFunction(object);
            arrayEach(methodNames, function(methodName) {
                var func = source[methodName];
                object[methodName] = func;
                isFunc && (object.prototype[methodName] = function() {
                    var chainAll = this.__chain__;
                    if (chain || chainAll) {
                        var result = object(this.__wrapped__);
                        (result.__actions__ = copyArray(this.__actions__)).push({
                            func: func,
                            args: arguments,
                            thisArg: object
                        });
                        result.__chain__ = chainAll;
                        return result;
                    }
                    return func.apply(object, arrayPush([ this.value() ], arguments));
                });
            });
            return object;
        }
        function noop() {}
        var over = createOver(arrayMap), overEvery = createOver(arrayEvery), overSome = createOver(arraySome);
        function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : function(path) {
                return function(object) {
                    return baseGet(object, path);
                };
            }(path);
        }
        var range = createRange(), rangeRight = createRange(!0);
        function stubArray() {
            return [];
        }
        function stubFalse() {
            return !1;
        }
        var add = createMathOperation(function(augend, addend) {
            return augend + addend;
        }, 0), ceil = createRound("ceil"), divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
        }, 1), floor = createRound("floor");
        var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
        }, 1), round = createRound("round"), subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
        }, 0);
        lodash.after = function(n, func) {
            if ("function" != typeof func) throw new TypeError(FUNC_ERROR_TEXT);
            n = toInteger(n);
            return function() {
                if (--n < 1) return func.apply(this, arguments);
            };
        };
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = function() {
            if (!arguments.length) return [];
            var value = arguments[0];
            return isArray(value) ? value : [ value ];
        };
        lodash.chain = chain;
        lodash.chunk = function(array, size, guard) {
            size = (guard ? isIterateeCall(array, size, guard) : size === undefined) ? 1 : nativeMax(toInteger(size), 0);
            var length = null == array ? 0 : array.length;
            if (!length || size < 1) return [];
            for (var index = 0, resIndex = 0, result = Array(nativeCeil(length / size)); index < length; ) result[resIndex++] = baseSlice(array, index, index += size);
            return result;
        };
        lodash.compact = function(array) {
            for (var index = -1, length = null == array ? 0 : array.length, resIndex = 0, result = []; ++index < length; ) {
                var value = array[index];
                value && (result[resIndex++] = value);
            }
            return result;
        };
        lodash.concat = function() {
            var length = arguments.length;
            if (!length) return [];
            for (var args = Array(length - 1), array = arguments[0], index = length; index--; ) args[index - 1] = arguments[index];
            return arrayPush(isArray(array) ? copyArray(array) : [ array ], baseFlatten(args, 1));
        };
        lodash.cond = function(pairs) {
            var length = null == pairs ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = length ? arrayMap(pairs, function(pair) {
                if ("function" != typeof pair[1]) throw new TypeError(FUNC_ERROR_TEXT);
                return [ toIteratee(pair[0]), pair[1] ];
            }) : [];
            return baseRest(function(args) {
                for (var index = -1; ++index < length; ) {
                    var pair = pairs[index];
                    if (apply(pair[0], this, args)) return apply(pair[1], this, args);
                }
            });
        };
        lodash.conforms = function(source) {
            return function(source) {
                var props = keys(source);
                return function(object) {
                    return baseConformsTo(object, source, props);
                };
            }(baseClone(source, 1));
        };
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = function(prototype, properties) {
            var result = baseCreate(prototype);
            return null == properties ? result : baseAssign(result, properties);
        };
        lodash.curry = function curry(func, arity, guard) {
            var result = createWrap(func, 8, undefined, undefined, undefined, undefined, undefined, arity = guard ? undefined : arity);
            result.placeholder = curry.placeholder;
            return result;
        };
        lodash.curryRight = function curryRight(func, arity, guard) {
            var result = createWrap(func, 16, undefined, undefined, undefined, undefined, undefined, arity = guard ? undefined : arity);
            result.placeholder = curryRight.placeholder;
            return result;
        };
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = function(array, n, guard) {
            var length = null == array ? 0 : array.length;
            return length ? baseSlice(array, (n = guard || n === undefined ? 1 : toInteger(n)) < 0 ? 0 : n, length) : [];
        };
        lodash.dropRight = function(array, n, guard) {
            var length = null == array ? 0 : array.length;
            return length ? baseSlice(array, 0, (n = length - (n = guard || n === undefined ? 1 : toInteger(n))) < 0 ? 0 : n) : [];
        };
        lodash.dropRightWhile = function(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), !0, !0) : [];
        };
        lodash.dropWhile = function(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), !0) : [];
        };
        lodash.fill = function(array, value, start, end) {
            var length = null == array ? 0 : array.length;
            if (!length) return [];
            if (start && "number" != typeof start && isIterateeCall(array, value, start)) {
                start = 0;
                end = length;
            }
            return function(array, value, start, end) {
                var length = array.length;
                (start = toInteger(start)) < 0 && (start = length < -start ? 0 : length + start);
                (end = end === undefined || length < end ? length : toInteger(end)) < 0 && (end += length);
                end = end < start ? 0 : toLength(end);
                for (;start < end; ) array[start++] = value;
                return array;
            }(array, value, start, end);
        };
        lodash.filter = function(collection, predicate) {
            return (isArray(collection) ? arrayFilter : baseFilter)(collection, getIteratee(predicate, 3));
        };
        lodash.flatMap = function(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), 1);
        };
        lodash.flatMapDeep = function(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), 1 / 0);
        };
        lodash.flatMapDepth = function(collection, iteratee, depth) {
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(map(collection, iteratee), depth);
        };
        lodash.flatten = flatten;
        lodash.flattenDeep = function(array) {
            return null != array && array.length ? baseFlatten(array, 1 / 0) : [];
        };
        lodash.flattenDepth = function(array, depth) {
            return null != array && array.length ? baseFlatten(array, depth = depth === undefined ? 1 : toInteger(depth)) : [];
        };
        lodash.flip = function(func) {
            return createWrap(func, 512);
        };
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = function(pairs) {
            for (var index = -1, length = null == pairs ? 0 : pairs.length, result = {}; ++index < length; ) {
                var pair = pairs[index];
                result[pair[0]] = pair[1];
            }
            return result;
        };
        lodash.functions = function(object) {
            return null == object ? [] : baseFunctions(object, keys(object));
        };
        lodash.functionsIn = function(object) {
            return null == object ? [] : baseFunctions(object, keysIn(object));
        };
        lodash.groupBy = groupBy;
        lodash.initial = function(array) {
            return null != array && array.length ? baseSlice(array, 0, -1) : [];
        };
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = function(object, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object, function(value, key, object) {
                baseAssignValue(result, iteratee(value, key, object), value);
            });
            return result;
        };
        lodash.mapValues = function(object, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object, function(value, key, object) {
                baseAssignValue(result, key, iteratee(value, key, object));
            });
            return result;
        };
        lodash.matches = function(source) {
            return baseMatches(baseClone(source, 1));
        };
        lodash.matchesProperty = function(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, 1));
        };
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = function(n) {
            n = toInteger(n);
            return baseRest(function(args) {
                return baseNth(args, n);
            });
        };
        lodash.omit = omit;
        lodash.omitBy = function(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
        };
        lodash.once = function(func) {
            return before(2, func);
        };
        lodash.orderBy = function(collection, iteratees, orders, guard) {
            if (null == collection) return [];
            isArray(iteratees) || (iteratees = null == iteratees ? [] : [ iteratees ]);
            isArray(orders = guard ? undefined : orders) || (orders = null == orders ? [] : [ orders ]);
            return baseOrderBy(collection, iteratees, orders);
        };
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = function(object) {
            return function(path) {
                return null == object ? undefined : baseGet(object, path);
            };
        };
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = function(array, values, iteratee) {
            return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
        };
        lodash.pullAllWith = function(array, values, comparator) {
            return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
        };
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = function(collection, predicate) {
            return (isArray(collection) ? arrayFilter : baseFilter)(collection, negate(getIteratee(predicate, 3)));
        };
        lodash.remove = function(array, predicate) {
            var result = [];
            if (!array || !array.length) return result;
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            for (;++index < length; ) {
                var value = array[index];
                if (predicate(value, index, array)) {
                    result.push(value);
                    indexes.push(index);
                }
            }
            basePullAt(array, indexes);
            return result;
        };
        lodash.rest = function(func, start) {
            if ("function" != typeof func) throw new TypeError(FUNC_ERROR_TEXT);
            return baseRest(func, start = start === undefined ? start : toInteger(start));
        };
        lodash.reverse = reverse;
        lodash.sampleSize = function(collection, n, guard) {
            n = (guard ? isIterateeCall(collection, n, guard) : n === undefined) ? 1 : toInteger(n);
            return (isArray(collection) ? arraySampleSize : baseSampleSize)(collection, n);
        };
        lodash.set = function(object, path, value) {
            return null == object ? object : baseSet(object, path, value);
        };
        lodash.setWith = function(object, path, value, customizer) {
            customizer = "function" == typeof customizer ? customizer : undefined;
            return null == object ? object : baseSet(object, path, value, customizer);
        };
        lodash.shuffle = function(collection) {
            return (isArray(collection) ? arrayShuffle : baseShuffle)(collection);
        };
        lodash.slice = function(array, start, end) {
            var length = null == array ? 0 : array.length;
            if (!length) return [];
            if (end && "number" != typeof end && isIterateeCall(array, start, end)) {
                start = 0;
                end = length;
            } else {
                start = null == start ? 0 : toInteger(start);
                end = end === undefined ? length : toInteger(end);
            }
            return baseSlice(array, start, end);
        };
        lodash.sortBy = sortBy;
        lodash.sortedUniq = function(array) {
            return array && array.length ? baseSortedUniq(array) : [];
        };
        lodash.sortedUniqBy = function(array, iteratee) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
        };
        lodash.split = function(string, separator, limit) {
            limit && "number" != typeof limit && isIterateeCall(string, separator, limit) && (separator = limit = undefined);
            return (limit = limit === undefined ? 4294967295 : limit >>> 0) ? (string = toString(string)) && ("string" == typeof separator || null != separator && !isRegExp(separator)) && !(separator = baseToString(separator)) && hasUnicode(string) ? castSlice(stringToArray(string), 0, limit) : string.split(separator, limit) : [];
        };
        lodash.spread = function(func, start) {
            if ("function" != typeof func) throw new TypeError(FUNC_ERROR_TEXT);
            start = null == start ? 0 : nativeMax(toInteger(start), 0);
            return baseRest(function(args) {
                var array = args[start], otherArgs = castSlice(args, 0, start);
                array && arrayPush(otherArgs, array);
                return apply(func, this, otherArgs);
            });
        };
        lodash.tail = function(array) {
            var length = null == array ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
        };
        lodash.take = function(array, n, guard) {
            return array && array.length ? baseSlice(array, 0, (n = guard || n === undefined ? 1 : toInteger(n)) < 0 ? 0 : n) : [];
        };
        lodash.takeRight = function(array, n, guard) {
            var length = null == array ? 0 : array.length;
            return length ? baseSlice(array, (n = length - (n = guard || n === undefined ? 1 : toInteger(n))) < 0 ? 0 : n, length) : [];
        };
        lodash.takeRightWhile = function(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), !1, !0) : [];
        };
        lodash.takeWhile = function(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        };
        lodash.tap = function(value, interceptor) {
            interceptor(value);
            return value;
        };
        lodash.throttle = function(func, wait, options) {
            var leading = !0, trailing = !0;
            if ("function" != typeof func) throw new TypeError(FUNC_ERROR_TEXT);
            if (isObject(options)) {
                leading = "leading" in options ? !!options.leading : leading;
                trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce(func, wait, {
                leading: leading,
                maxWait: wait,
                trailing: trailing
            });
        };
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = function(value) {
            return isArray(value) ? arrayMap(value, toKey) : isSymbol(value) ? [ value ] : copyArray(stringToPath(toString(value)));
        };
        lodash.toPlainObject = toPlainObject;
        lodash.transform = function(object, iteratee, accumulator) {
            var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
            iteratee = getIteratee(iteratee, 4);
            if (null == accumulator) {
                var Ctor = object && object.constructor;
                accumulator = isArrLike ? isArr ? new Ctor() : [] : isObject(object) && isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            }
            (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
                return iteratee(accumulator, value, index, object);
            });
            return accumulator;
        };
        lodash.unary = function(func) {
            return ary(func, 1);
        };
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = function(array) {
            return array && array.length ? baseUniq(array) : [];
        };
        lodash.uniqBy = function(array, iteratee) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
        };
        lodash.uniqWith = function(array, comparator) {
            comparator = "function" == typeof comparator ? comparator : undefined;
            return array && array.length ? baseUniq(array, undefined, comparator) : [];
        };
        lodash.unset = function(object, path) {
            return null == object || baseUnset(object, path);
        };
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = function(object, path, updater) {
            return null == object ? object : baseUpdate(object, path, castFunction(updater));
        };
        lodash.updateWith = function(object, path, updater, customizer) {
            customizer = "function" == typeof customizer ? customizer : undefined;
            return null == object ? object : baseUpdate(object, path, castFunction(updater), customizer);
        };
        lodash.values = values;
        lodash.valuesIn = function(object) {
            return null == object ? [] : baseValues(object, keysIn(object));
        };
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = function(value, wrapper) {
            return partial(castFunction(wrapper), value);
        };
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = function(props, values) {
            return baseZipObject(props || [], values || [], assignValue);
        };
        lodash.zipObjectDeep = function(props, values) {
            return baseZipObject(props || [], values || [], baseSet);
        };
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = function(number, lower, upper) {
            if (upper === undefined) {
                upper = lower;
                lower = undefined;
            }
            upper !== undefined && (upper = (upper = toNumber(upper)) == upper ? upper : 0);
            lower !== undefined && (lower = (lower = toNumber(lower)) == lower ? lower : 0);
            return baseClamp(toNumber(number), lower, upper);
        };
        lodash.clone = function(value) {
            return baseClone(value, 4);
        };
        lodash.cloneDeep = function(value) {
            return baseClone(value, 5);
        };
        lodash.cloneDeepWith = function(value, customizer) {
            return baseClone(value, 5, customizer = "function" == typeof customizer ? customizer : undefined);
        };
        lodash.cloneWith = function(value, customizer) {
            return baseClone(value, 4, customizer = "function" == typeof customizer ? customizer : undefined);
        };
        lodash.conformsTo = function(object, source) {
            return null == source || baseConformsTo(object, source, keys(source));
        };
        lodash.deburr = deburr;
        lodash.defaultTo = function(value, defaultValue) {
            return null == value || value != value ? defaultValue : value;
        };
        lodash.divide = divide;
        lodash.endsWith = function(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length, end = position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
            return 0 <= (position -= target.length) && string.slice(position, end) == target;
        };
        lodash.eq = eq;
        lodash.escape = function(string) {
            return (string = toString(string)) && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        };
        lodash.escapeRegExp = function(string) {
            return (string = toString(string)) && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        };
        lodash.every = function(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            guard && isIterateeCall(collection, predicate, guard) && (predicate = undefined);
            return func(collection, getIteratee(predicate, 3));
        };
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = function(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        };
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = function(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        };
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = function(object, iteratee) {
            return null == object ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
        };
        lodash.forInRight = function(object, iteratee) {
            return null == object ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
        };
        lodash.forOwn = function(object, iteratee) {
            return object && baseForOwn(object, getIteratee(iteratee, 3));
        };
        lodash.forOwnRight = function(object, iteratee) {
            return object && baseForOwnRight(object, getIteratee(iteratee, 3));
        };
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = function(object, path) {
            return null != object && hasPath(object, path, baseHas);
        };
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = function(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            fromIndex < 0 && (fromIndex = nativeMax(length + fromIndex, 0));
            return isString(collection) ? fromIndex <= length && -1 < collection.indexOf(value, fromIndex) : !!length && -1 < baseIndexOf(collection, value, fromIndex);
        };
        lodash.indexOf = function(array, value, fromIndex) {
            var length = null == array ? 0 : array.length;
            if (!length) return -1;
            var index = null == fromIndex ? 0 : toInteger(fromIndex);
            index < 0 && (index = nativeMax(length + index, 0));
            return baseIndexOf(array, value, index);
        };
        lodash.inRange = function(number, start, end) {
            start = toFinite(start);
            if (end === undefined) {
                end = start;
                start = 0;
            } else end = toFinite(end);
            return function(number, start, end) {
                return number >= nativeMin(start, end) && number < nativeMax(start, end);
            }(number = toNumber(number), start, end);
        };
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = function(value) {
            return !0 === value || !1 === value || isObjectLike(value) && baseGetTag(value) == boolTag;
        };
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = function(value) {
            return isObjectLike(value) && 1 === value.nodeType && !isPlainObject(value);
        };
        lodash.isEmpty = function(value) {
            if (null == value) return !0;
            if (isArrayLike(value) && (isArray(value) || "string" == typeof value || "function" == typeof value.splice || isBuffer(value) || isTypedArray(value) || isArguments(value))) return !value.length;
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) return !value.size;
            if (isPrototype(value)) return !baseKeys(value).length;
            for (var key in value) if (hasOwnProperty.call(value, key)) return !1;
            return !0;
        };
        lodash.isEqual = function(value, other) {
            return baseIsEqual(value, other);
        };
        lodash.isEqualWith = function(value, other, customizer) {
            var result = (customizer = "function" == typeof customizer ? customizer : undefined) ? customizer(value, other) : undefined;
            return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
        };
        lodash.isError = isError;
        lodash.isFinite = function(value) {
            return "number" == typeof value && nativeIsFinite(value);
        };
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = function(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
        };
        lodash.isMatchWith = function(object, source, customizer) {
            customizer = "function" == typeof customizer ? customizer : undefined;
            return baseIsMatch(object, source, getMatchData(source), customizer);
        };
        lodash.isNaN = function(value) {
            return isNumber(value) && value != +value;
        };
        lodash.isNative = function(value) {
            if (isMaskable(value)) throw new Error("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");
            return baseIsNative(value);
        };
        lodash.isNil = function(value) {
            return null == value;
        };
        lodash.isNull = function(value) {
            return null === value;
        };
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = function(value) {
            return isInteger(value) && -9007199254740991 <= value && value <= 9007199254740991;
        };
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = function(value) {
            return value === undefined;
        };
        lodash.isWeakMap = function(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
        };
        lodash.isWeakSet = function(value) {
            return isObjectLike(value) && "[object WeakSet]" == baseGetTag(value);
        };
        lodash.join = function(array, separator) {
            return null == array ? "" : nativeJoin.call(array, separator);
        };
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = function(array, value, fromIndex) {
            var length = null == array ? 0 : array.length;
            if (!length) return -1;
            var index = length;
            fromIndex !== undefined && (index = (index = toInteger(fromIndex)) < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1));
            return value == value ? function(array, value, fromIndex) {
                for (var index = fromIndex + 1; index--; ) if (array[index] === value) return index;
                return index;
            }(array, value, index) : baseFindIndex(array, baseIsNaN, index, !0);
        };
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = function(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
        };
        lodash.maxBy = function(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
        };
        lodash.mean = function(array) {
            return baseMean(array, identity);
        };
        lodash.meanBy = function(array, iteratee) {
            return baseMean(array, getIteratee(iteratee, 2));
        };
        lodash.min = function(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
        };
        lodash.minBy = function(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
        };
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = function() {
            return {};
        };
        lodash.stubString = function() {
            return "";
        };
        lodash.stubTrue = function() {
            return !0;
        };
        lodash.multiply = multiply;
        lodash.nth = function(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined;
        };
        lodash.noConflict = function() {
            root._ === this && (root._ = oldDash);
            return this;
        };
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = function(string, length, chars) {
            string = toString(string);
            var strLength = (length = toInteger(length)) ? stringSize(string) : 0;
            if (!length || length <= strLength) return string;
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        };
        lodash.padEnd = function(string, length, chars) {
            string = toString(string);
            var strLength = (length = toInteger(length)) ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        };
        lodash.padStart = function(string, length, chars) {
            string = toString(string);
            var strLength = (length = toInteger(length)) ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        };
        lodash.parseInt = function(string, radix, guard) {
            guard || null == radix ? radix = 0 : radix && (radix = +radix);
            return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        };
        lodash.random = function(lower, upper, floating) {
            floating && "boolean" != typeof floating && isIterateeCall(lower, upper, floating) && (upper = floating = undefined);
            if (floating === undefined) if ("boolean" == typeof upper) {
                floating = upper;
                upper = undefined;
            } else if ("boolean" == typeof lower) {
                floating = lower;
                lower = undefined;
            }
            if (lower === undefined && upper === undefined) {
                lower = 0;
                upper = 1;
            } else {
                lower = toFinite(lower);
                if (upper === undefined) {
                    upper = lower;
                    lower = 0;
                } else upper = toFinite(upper);
            }
            if (upper < lower) {
                var temp = lower;
                lower = upper;
                upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
                var rand = nativeRandom();
                return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
            }
            return baseRandom(lower, upper);
        };
        lodash.reduce = function(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
        };
        lodash.reduceRight = function(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
        };
        lodash.repeat = function(string, n, guard) {
            n = (guard ? isIterateeCall(string, n, guard) : n === undefined) ? 1 : toInteger(n);
            return baseRepeat(toString(string), n);
        };
        lodash.replace = function() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
        };
        lodash.result = function(object, path, defaultValue) {
            var index = -1, length = (path = castPath(path, object)).length;
            if (!length) {
                length = 1;
                object = undefined;
            }
            for (;++index < length; ) {
                var value = null == object ? undefined : object[toKey(path[index])];
                if (value === undefined) {
                    index = length;
                    value = defaultValue;
                }
                object = isFunction(value) ? value.call(object) : value;
            }
            return object;
        };
        lodash.round = round;
        lodash.runInContext = runInContext;
        lodash.sample = function(collection) {
            return (isArray(collection) ? arraySample : baseSample)(collection);
        };
        lodash.size = function(collection) {
            if (null == collection) return 0;
            if (isArrayLike(collection)) return isString(collection) ? stringSize(collection) : collection.length;
            var tag = getTag(collection);
            return tag == mapTag || tag == setTag ? collection.size : baseKeys(collection).length;
        };
        lodash.snakeCase = snakeCase;
        lodash.some = function(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            guard && isIterateeCall(collection, predicate, guard) && (predicate = undefined);
            return func(collection, getIteratee(predicate, 3));
        };
        lodash.sortedIndex = function(array, value) {
            return baseSortedIndex(array, value);
        };
        lodash.sortedIndexBy = function(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
        };
        lodash.sortedIndexOf = function(array, value) {
            var length = null == array ? 0 : array.length;
            if (length) {
                var index = baseSortedIndex(array, value);
                if (index < length && eq(array[index], value)) return index;
            }
            return -1;
        };
        lodash.sortedLastIndex = function(array, value) {
            return baseSortedIndex(array, value, !0);
        };
        lodash.sortedLastIndexBy = function(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), !0);
        };
        lodash.sortedLastIndexOf = function(array, value) {
            if (null != array && array.length) {
                var index = baseSortedIndex(array, value, !0) - 1;
                if (eq(array[index], value)) return index;
            }
            return -1;
        };
        lodash.startCase = startCase;
        lodash.startsWith = function(string, target, position) {
            string = toString(string);
            position = null == position ? 0 : baseClamp(toInteger(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
        };
        lodash.subtract = subtract;
        lodash.sum = function(array) {
            return array && array.length ? baseSum(array, identity) : 0;
        };
        lodash.sumBy = function(array, iteratee) {
            return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
        };
        lodash.template = function(string, options, guard) {
            var settings = lodash.templateSettings;
            guard && isIterateeCall(string, options, guard) && (options = undefined);
            string = toString(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var isEscaping, isEvaluating, imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys), index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '", reDelimiters = RegExp((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g"), sourceURL = "//# sourceURL=" + ("sourceURL" in options ? options.sourceURL : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                interpolateValue || (interpolateValue = esTemplateValue);
                source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                if (escapeValue) {
                    isEscaping = !0;
                    source += "' +\n__e(" + escapeValue + ") +\n'";
                }
                if (evaluateValue) {
                    isEvaluating = !0;
                    source += "';\n" + evaluateValue + ";\n__p += '";
                }
                interpolateValue && (source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'");
                index = offset + match.length;
                return match;
            });
            source += "';\n";
            var variable = options.variable;
            variable || (source = "with (obj) {\n" + source + "\n}\n");
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result = attempt(function() {
                return Function(importsKeys, sourceURL + "return " + source).apply(undefined, importsValues);
            });
            result.source = source;
            if (isError(result)) throw result;
            return result;
        };
        lodash.times = function(n, iteratee) {
            if ((n = toInteger(n)) < 1 || 9007199254740991 < n) return [];
            var index = 4294967295, length = nativeMin(n, 4294967295);
            n -= 4294967295;
            for (var result = baseTimes(length, iteratee = getIteratee(iteratee)); ++index < n; ) iteratee(index);
            return result;
        };
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = function(value) {
            return toString(value).toLowerCase();
        };
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = function(value) {
            return value ? baseClamp(toInteger(value), -9007199254740991, 9007199254740991) : 0 === value ? value : 0;
        };
        lodash.toString = toString;
        lodash.toUpper = function(value) {
            return toString(value).toUpperCase();
        };
        lodash.trim = function(string, chars, guard) {
            if ((string = toString(string)) && (guard || chars === undefined)) return string.replace(reTrim, "");
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars);
            return castSlice(strSymbols, charsStartIndex(strSymbols, chrSymbols), charsEndIndex(strSymbols, chrSymbols) + 1).join("");
        };
        lodash.trimEnd = function(string, chars, guard) {
            if ((string = toString(string)) && (guard || chars === undefined)) return string.replace(reTrimEnd, "");
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string);
            return castSlice(strSymbols, 0, charsEndIndex(strSymbols, stringToArray(chars)) + 1).join("");
        };
        lodash.trimStart = function(string, chars, guard) {
            if ((string = toString(string)) && (guard || chars === undefined)) return string.replace(reTrimStart, "");
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string);
            return castSlice(strSymbols, charsStartIndex(strSymbols, stringToArray(chars))).join("");
        };
        lodash.truncate = function(string, options) {
            var length = 30, omission = "...";
            if (isObject(options)) {
                var separator = "separator" in options ? options.separator : separator;
                length = "length" in options ? toInteger(options.length) : length;
                omission = "omission" in options ? baseToString(options.omission) : omission;
            }
            var strLength = (string = toString(string)).length;
            if (hasUnicode(string)) {
                var strSymbols = stringToArray(string);
                strLength = strSymbols.length;
            }
            if (strLength <= length) return string;
            var end = length - stringSize(omission);
            if (end < 1) return omission;
            var result = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
            if (separator === undefined) return result + omission;
            strSymbols && (end += result.length - end);
            if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                    var match, substring = result;
                    separator.global || (separator = RegExp(separator.source, toString(reFlags.exec(separator)) + "g"));
                    separator.lastIndex = 0;
                    for (;match = separator.exec(substring); ) var newEnd = match.index;
                    result = result.slice(0, newEnd === undefined ? end : newEnd);
                }
            } else if (string.indexOf(baseToString(separator), end) != end) {
                var index = result.lastIndexOf(separator);
                -1 < index && (result = result.slice(0, index));
            }
            return result + omission;
        };
        lodash.unescape = function(string) {
            return (string = toString(string)) && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        };
        lodash.uniqueId = function(prefix) {
            var id = ++idCounter;
            return toString(prefix) + id;
        };
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
                hasOwnProperty.call(lodash.prototype, methodName) || (source[methodName] = func);
            });
            return source;
        }(), {
            chain: !1
        });
        lodash.VERSION = "4.17.11";
        arrayEach([ "bind", "bindKey", "curry", "curryRight", "partial", "partialRight" ], function(methodName) {
            lodash[methodName].placeholder = lodash;
        });
        arrayEach([ "drop", "take" ], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n) {
                n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
                var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
                result.__filtered__ ? result.__takeCount__ = nativeMin(n, result.__takeCount__) : result.__views__.push({
                    size: nativeMin(n, 4294967295),
                    type: methodName + (result.__dir__ < 0 ? "Right" : "")
                });
                return result;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n) {
                return this.reverse()[methodName](n).reverse();
            };
        });
        arrayEach([ "filter", "map", "takeWhile" ], function(methodName, index) {
            var type = index + 1, isFilter = 1 == type || 3 == type;
            LazyWrapper.prototype[methodName] = function(iteratee) {
                var result = this.clone();
                result.__iteratees__.push({
                    iteratee: getIteratee(iteratee, 3),
                    type: type
                });
                result.__filtered__ = result.__filtered__ || isFilter;
                return result;
            };
        });
        arrayEach([ "head", "last" ], function(methodName, index) {
            var takeName = "take" + (index ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
                return this[takeName](1).value()[0];
            };
        });
        arrayEach([ "initial", "tail" ], function(methodName, index) {
            var dropName = "drop" + (index ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
                return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
        });
        LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            return "function" == typeof path ? new LazyWrapper(this) : this.map(function(value) {
                return baseInvoke(value, path, args);
            });
        });
        LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
            start = toInteger(start);
            var result = this;
            if (result.__filtered__ && (0 < start || end < 0)) return new LazyWrapper(result);
            start < 0 ? result = result.takeRight(-start) : start && (result = result.drop(start));
            end !== undefined && (result = (end = toInteger(end)) < 0 ? result.dropRight(-end) : result.take(end - start));
            return result;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
            return this.take(4294967295);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + ("last" == methodName ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            lodashFunc && (lodash.prototype[methodName] = function() {
                var value = this.__wrapped__, args = isTaker ? [ 1 ] : arguments, isLazy = value instanceof LazyWrapper, iteratee = args[0], useLazy = isLazy || isArray(value), interceptor = function(value) {
                    var result = lodashFunc.apply(lodash, arrayPush([ value ], args));
                    return isTaker && chainAll ? result[0] : result;
                };
                useLazy && checkIteratee && "function" == typeof iteratee && 1 != iteratee.length && (isLazy = useLazy = !1);
                var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
                if (!retUnwrapped && useLazy) {
                    value = onlyLazy ? value : new LazyWrapper(this);
                    var result = func.apply(value, args);
                    result.__actions__.push({
                        func: thru,
                        args: [ interceptor ],
                        thisArg: undefined
                    });
                    return new LodashWrapper(result, chainAll);
                }
                if (isUnwrapped && onlyLazy) return func.apply(this, args);
                result = this.thru(interceptor);
                return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
            });
        });
        arrayEach([ "pop", "push", "shift", "sort", "splice", "unshift" ], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
                var args = arguments;
                if (!retUnwrapped || this.__chain__) return this[chainName](function(value) {
                    return func.apply(isArray(value) ? value : [], args);
                });
                var value = this.value();
                return func.apply(isArray(value) ? value : [], args);
            };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
                var key = lodashFunc.name + "";
                (realNames[key] || (realNames[key] = [])).push({
                    name: methodName,
                    func: lodashFunc
                });
            }
        });
        realNames[createHybrid(undefined, 2).name] = [ {
            name: "wrapper",
            func: undefined
        } ];
        LazyWrapper.prototype.clone = function() {
            var result = new LazyWrapper(this.__wrapped__);
            result.__actions__ = copyArray(this.__actions__);
            result.__dir__ = this.__dir__;
            result.__filtered__ = this.__filtered__;
            result.__iteratees__ = copyArray(this.__iteratees__);
            result.__takeCount__ = this.__takeCount__;
            result.__views__ = copyArray(this.__views__);
            return result;
        };
        LazyWrapper.prototype.reverse = function() {
            if (this.__filtered__) {
                var result = new LazyWrapper(this);
                result.__dir__ = -1;
                result.__filtered__ = !0;
            } else (result = this.clone()).__dir__ *= -1;
            return result;
        };
        LazyWrapper.prototype.value = function() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = function(start, end, transforms) {
                for (var index = -1, length = transforms.length; ++index < length; ) {
                    var data = transforms[index], size = data.size;
                    switch (data.type) {
                      case "drop":
                        start += size;
                        break;

                      case "dropRight":
                        end -= size;
                        break;

                      case "take":
                        end = nativeMin(end, start + size);
                        break;

                      case "takeRight":
                        start = nativeMax(start, end - size);
                    }
                }
                return {
                    start: start,
                    end: end
                };
            }(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) return baseWrapperValue(array, this.__actions__);
            var result = [];
            outer: for (;length-- && resIndex < takeCount; ) {
                for (var iterIndex = -1, value = array[index += dir]; ++iterIndex < iterLength; ) {
                    var data = iteratees[iterIndex], iteratee = data.iteratee, type = data.type, computed = iteratee(value);
                    if (2 == type) value = computed; else if (!computed) {
                        if (1 == type) continue outer;
                        break outer;
                    }
                }
                result[resIndex++] = value;
            }
            return result;
        };
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = function() {
            return chain(this);
        };
        lodash.prototype.commit = function() {
            return new LodashWrapper(this.value(), this.__chain__);
        };
        lodash.prototype.next = function() {
            this.__values__ === undefined && (this.__values__ = toArray(this.value()));
            var done = this.__index__ >= this.__values__.length;
            return {
                done: done,
                value: done ? undefined : this.__values__[this.__index__++]
            };
        };
        lodash.prototype.plant = function(value) {
            for (var result, parent = this; parent instanceof baseLodash; ) {
                var clone = wrapperClone(parent);
                clone.__index__ = 0;
                clone.__values__ = undefined;
                result ? previous.__wrapped__ = clone : result = clone;
                var previous = clone;
                parent = parent.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result;
        };
        lodash.prototype.reverse = function() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
                var wrapped = value;
                this.__actions__.length && (wrapped = new LazyWrapper(this));
                (wrapped = wrapped.reverse()).__actions__.push({
                    func: thru,
                    args: [ reverse ],
                    thisArg: undefined
                });
                return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
        };
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = function() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
        };
        lodash.prototype.first = lodash.prototype.head;
        symIterator && (lodash.prototype[symIterator] = function() {
            return this;
        });
        return lodash;
    }();
    if ("function" == typeof define && "object" == typeof define.amd && define.amd) {
        root._ = _;
        define(function() {
            return _;
        });
    } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
    } else root._ = _;
}).call(this);

!function(window) {
    "use strict";
    var minErrConfig = {
        objectMaxDepth: 5
    };
    function errorHandlingConfig(config) {
        if (!isObject(config)) return minErrConfig;
        isDefined(config.objectMaxDepth) && (minErrConfig.objectMaxDepth = isValidObjectMaxDepth(config.objectMaxDepth) ? config.objectMaxDepth : NaN);
    }
    function isValidObjectMaxDepth(maxDepth) {
        return isNumber(maxDepth) && 0 < maxDepth;
    }
    function minErr(module, ErrorConstructor) {
        ErrorConstructor = ErrorConstructor || Error;
        var url = "https://errors.angularjs.org/1.6.10/", regex = url.replace(".", "\\.") + "[\\s\\S]*", errRegExp = new RegExp(regex, "g");
        return function() {
            var paramPrefix, i, code = arguments[0], template = arguments[1], message = "[" + (module ? module + ":" : "") + code + "] ", templateArgs = sliceArgs(arguments, 2).map(function(arg) {
                return toDebugString(arg, minErrConfig.objectMaxDepth);
            });
            message += template.replace(/\{\d+\}/g, function(match) {
                var index = +match.slice(1, -1);
                return index < templateArgs.length ? templateArgs[index].replace(errRegExp, "") : match;
            });
            message += "\n" + url + (module ? module + "/" : "") + code;
            for (i = 0, paramPrefix = "?"; i < templateArgs.length; i++, paramPrefix = "&") message += paramPrefix + "p" + i + "=" + encodeURIComponent(templateArgs[i]);
            return new ErrorConstructor(message);
        };
    }
    var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/, VALIDITY_STATE_PROPERTY = "validity", hasOwnProperty = Object.prototype.hasOwnProperty, lowercase = function(string) {
        return isString(string) ? string.toLowerCase() : string;
    }, uppercase = function(string) {
        return isString(string) ? string.toUpperCase() : string;
    };
    if ("i" !== "I".toLowerCase()) {
        lowercase = function(s) {
            return isString(s) ? s.replace(/[A-Z]/g, function(ch) {
                return String.fromCharCode(32 | ch.charCodeAt(0));
            }) : s;
        };
        uppercase = function(s) {
            return isString(s) ? s.replace(/[a-z]/g, function(ch) {
                return String.fromCharCode(-33 & ch.charCodeAt(0));
            }) : s;
        };
    }
    var msie, jqLite, jQuery, angularModule, slice = [].slice, splice = [].splice, push = [].push, toString = Object.prototype.toString, getPrototypeOf = Object.getPrototypeOf, ngMinErr = minErr("ng"), angular = window.angular || (window.angular = {}), uid = 0;
    msie = window.document.documentMode;
    function isArrayLike(obj) {
        if (null == obj || isWindow(obj)) return !1;
        if (isArray(obj) || isString(obj) || jqLite && obj instanceof jqLite) return !0;
        var length = "length" in Object(obj) && obj.length;
        return isNumber(length) && (0 <= length && (length - 1 in obj || obj instanceof Array) || "function" == typeof obj.item);
    }
    function forEach(obj, iterator, context) {
        var key, length;
        if (obj) if (isFunction(obj)) for (key in obj) "prototype" !== key && "length" !== key && "name" !== key && obj.hasOwnProperty(key) && iterator.call(context, obj[key], key, obj); else if (isArray(obj) || isArrayLike(obj)) {
            var isPrimitive = "object" != typeof obj;
            for (key = 0, length = obj.length; key < length; key++) (isPrimitive || key in obj) && iterator.call(context, obj[key], key, obj);
        } else if (obj.forEach && obj.forEach !== forEach) obj.forEach(iterator, context, obj); else if (isBlankObject(obj)) for (key in obj) iterator.call(context, obj[key], key, obj); else if ("function" == typeof obj.hasOwnProperty) for (key in obj) obj.hasOwnProperty(key) && iterator.call(context, obj[key], key, obj); else for (key in obj) hasOwnProperty.call(obj, key) && iterator.call(context, obj[key], key, obj);
        return obj;
    }
    function forEachSorted(obj, iterator, context) {
        for (var keys = Object.keys(obj).sort(), i = 0; i < keys.length; i++) iterator.call(context, obj[keys[i]], keys[i]);
        return keys;
    }
    function reverseParams(iteratorFn) {
        return function(value, key) {
            iteratorFn(key, value);
        };
    }
    function nextUid() {
        return ++uid;
    }
    function setHashKey(obj, h) {
        h ? obj.$$hashKey = h : delete obj.$$hashKey;
    }
    function baseExtend(dst, objs, deep) {
        for (var h = dst.$$hashKey, i = 0, ii = objs.length; i < ii; ++i) {
            var obj = objs[i];
            if (isObject(obj) || isFunction(obj)) for (var keys = Object.keys(obj), j = 0, jj = keys.length; j < jj; j++) {
                var key = keys[j], src = obj[key];
                if (deep && isObject(src)) if (isDate(src)) dst[key] = new Date(src.valueOf()); else if (isRegExp(src)) dst[key] = new RegExp(src); else if (src.nodeName) dst[key] = src.cloneNode(!0); else if (isElement(src)) dst[key] = src.clone(); else {
                    isObject(dst[key]) || (dst[key] = isArray(src) ? [] : {});
                    baseExtend(dst[key], [ src ], !0);
                } else dst[key] = src;
            }
        }
        setHashKey(dst, h);
        return dst;
    }
    function extend(dst) {
        return baseExtend(dst, slice.call(arguments, 1), !1);
    }
    function merge(dst) {
        return baseExtend(dst, slice.call(arguments, 1), !0);
    }
    function toInt(str) {
        return parseInt(str, 10);
    }
    var isNumberNaN = Number.isNaN || function(num) {
        return num != num;
    };
    function inherit(parent, extra) {
        return extend(Object.create(parent), extra);
    }
    function noop() {}
    noop.$inject = [];
    function identity($) {
        return $;
    }
    identity.$inject = [];
    function valueFn(value) {
        return function() {
            return value;
        };
    }
    function hasCustomToString(obj) {
        return isFunction(obj.toString) && obj.toString !== toString;
    }
    function isUndefined(value) {
        return void 0 === value;
    }
    function isDefined(value) {
        return void 0 !== value;
    }
    function isObject(value) {
        return null !== value && "object" == typeof value;
    }
    function isBlankObject(value) {
        return null !== value && "object" == typeof value && !getPrototypeOf(value);
    }
    function isString(value) {
        return "string" == typeof value;
    }
    function isNumber(value) {
        return "number" == typeof value;
    }
    function isDate(value) {
        return "[object Date]" === toString.call(value);
    }
    var isArray = Array.isArray;
    function isError(value) {
        switch (toString.call(value)) {
          case "[object Error]":
          case "[object Exception]":
          case "[object DOMException]":
            return !0;

          default:
            return value instanceof Error;
        }
    }
    function isFunction(value) {
        return "function" == typeof value;
    }
    function isRegExp(value) {
        return "[object RegExp]" === toString.call(value);
    }
    function isWindow(obj) {
        return obj && obj.window === obj;
    }
    function isScope(obj) {
        return obj && obj.$evalAsync && obj.$watch;
    }
    function isBoolean(value) {
        return "boolean" == typeof value;
    }
    function isPromiseLike(obj) {
        return obj && isFunction(obj.then);
    }
    var TYPED_ARRAY_REGEXP = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/;
    var trim = function(value) {
        return isString(value) ? value.trim() : value;
    }, escapeForRegexp = function(s) {
        return s.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
    };
    function isElement(node) {
        return !(!node || !(node.nodeName || node.prop && node.attr && node.find));
    }
    function nodeName_(element) {
        return lowercase(element.nodeName || element[0] && element[0].nodeName);
    }
    function includes(array, obj) {
        return -1 !== Array.prototype.indexOf.call(array, obj);
    }
    function arrayRemove(array, value) {
        var index = array.indexOf(value);
        0 <= index && array.splice(index, 1);
        return index;
    }
    function copy(source, destination, maxDepth) {
        var obj, value, stackSource = [], stackDest = [];
        maxDepth = isValidObjectMaxDepth(maxDepth) ? maxDepth : NaN;
        if (destination) {
            if ((value = destination) && isNumber(value.length) && TYPED_ARRAY_REGEXP.test(toString.call(value)) || (obj = destination, 
            "[object ArrayBuffer]" === toString.call(obj))) throw ngMinErr("cpta", "Can't copy! TypedArray destination cannot be mutated.");
            if (source === destination) throw ngMinErr("cpi", "Can't copy! Source and destination are identical.");
            isArray(destination) ? destination.length = 0 : forEach(destination, function(value, key) {
                "$$hashKey" !== key && delete destination[key];
            });
            stackSource.push(source);
            stackDest.push(destination);
            return copyRecurse(source, destination, maxDepth);
        }
        return copyElement(source, maxDepth);
        function copyRecurse(source, destination, maxDepth) {
            if (--maxDepth < 0) return "...";
            var key, h = destination.$$hashKey;
            if (isArray(source)) for (var i = 0, ii = source.length; i < ii; i++) destination.push(copyElement(source[i], maxDepth)); else if (isBlankObject(source)) for (key in source) destination[key] = copyElement(source[key], maxDepth); else if (source && "function" == typeof source.hasOwnProperty) for (key in source) source.hasOwnProperty(key) && (destination[key] = copyElement(source[key], maxDepth)); else for (key in source) hasOwnProperty.call(source, key) && (destination[key] = copyElement(source[key], maxDepth));
            setHashKey(destination, h);
            return destination;
        }
        function copyElement(source, maxDepth) {
            if (!isObject(source)) return source;
            var index = stackSource.indexOf(source);
            if (-1 !== index) return stackDest[index];
            if (isWindow(source) || isScope(source)) throw ngMinErr("cpws", "Can't copy! Making copies of Window or Scope instances is not supported.");
            var needsRecurse = !1, destination = function(source) {
                switch (toString.call(source)) {
                  case "[object Int8Array]":
                  case "[object Int16Array]":
                  case "[object Int32Array]":
                  case "[object Float32Array]":
                  case "[object Float64Array]":
                  case "[object Uint8Array]":
                  case "[object Uint8ClampedArray]":
                  case "[object Uint16Array]":
                  case "[object Uint32Array]":
                    return new source.constructor(copyElement(source.buffer), source.byteOffset, source.length);

                  case "[object ArrayBuffer]":
                    if (source.slice) return source.slice(0);
                    var copied = new ArrayBuffer(source.byteLength);
                    new Uint8Array(copied).set(new Uint8Array(source));
                    return copied;

                  case "[object Boolean]":
                  case "[object Number]":
                  case "[object String]":
                  case "[object Date]":
                    return new source.constructor(source.valueOf());

                  case "[object RegExp]":
                    var re = new RegExp(source.source, source.toString().match(/[^/]*$/)[0]);
                    re.lastIndex = source.lastIndex;
                    return re;

                  case "[object Blob]":
                    return new source.constructor([ source ], {
                        type: source.type
                    });
                }
                if (isFunction(source.cloneNode)) return source.cloneNode(!0);
            }(source);
            if (void 0 === destination) {
                destination = isArray(source) ? [] : Object.create(getPrototypeOf(source));
                needsRecurse = !0;
            }
            stackSource.push(source);
            stackDest.push(destination);
            return needsRecurse ? copyRecurse(source, destination, maxDepth) : destination;
        }
    }
    function simpleCompare(a, b) {
        return a === b || a != a && b != b;
    }
    function equals(o1, o2) {
        if (o1 === o2) return !0;
        if (null === o1 || null === o2) return !1;
        if (o1 != o1 && o2 != o2) return !0;
        var length, key, keySet, t1 = typeof o1;
        if (t1 === typeof o2 && "object" === t1) {
            if (!isArray(o1)) {
                if (isDate(o1)) return !!isDate(o2) && simpleCompare(o1.getTime(), o2.getTime());
                if (isRegExp(o1)) return !!isRegExp(o2) && o1.toString() === o2.toString();
                if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2) || isDate(o2) || isRegExp(o2)) return !1;
                keySet = createMap();
                for (key in o1) if ("$" !== key.charAt(0) && !isFunction(o1[key])) {
                    if (!equals(o1[key], o2[key])) return !1;
                    keySet[key] = !0;
                }
                for (key in o2) if (!(key in keySet) && "$" !== key.charAt(0) && isDefined(o2[key]) && !isFunction(o2[key])) return !1;
                return !0;
            }
            if (!isArray(o2)) return !1;
            if ((length = o1.length) === o2.length) {
                for (key = 0; key < length; key++) if (!equals(o1[key], o2[key])) return !1;
                return !0;
            }
        }
        return !1;
    }
    var csp = function() {
        if (!isDefined(csp.rules)) {
            var ngCspElement = window.document.querySelector("[ng-csp]") || window.document.querySelector("[data-ng-csp]");
            if (ngCspElement) {
                var ngCspAttribute = ngCspElement.getAttribute("ng-csp") || ngCspElement.getAttribute("data-ng-csp");
                csp.rules = {
                    noUnsafeEval: !ngCspAttribute || -1 !== ngCspAttribute.indexOf("no-unsafe-eval"),
                    noInlineStyle: !ngCspAttribute || -1 !== ngCspAttribute.indexOf("no-inline-style")
                };
            } else csp.rules = {
                noUnsafeEval: function() {
                    try {
                        new Function("");
                        return !1;
                    } catch (e) {
                        return !0;
                    }
                }(),
                noInlineStyle: !1
            };
        }
        return csp.rules;
    }, jq = function() {
        if (isDefined(jq.name_)) return jq.name_;
        var el, i, prefix, name, ii = ngAttrPrefixes.length;
        for (i = 0; i < ii; ++i) {
            prefix = ngAttrPrefixes[i];
            if (el = window.document.querySelector("[" + prefix.replace(":", "\\:") + "jq]")) {
                name = el.getAttribute(prefix + "jq");
                break;
            }
        }
        return jq.name_ = name;
    };
    function concat(array1, array2, index) {
        return array1.concat(slice.call(array2, index));
    }
    function sliceArgs(args, startIndex) {
        return slice.call(args, startIndex || 0);
    }
    function bind(self, fn) {
        var curryArgs = 2 < arguments.length ? sliceArgs(arguments, 2) : [];
        return !isFunction(fn) || fn instanceof RegExp ? fn : curryArgs.length ? function() {
            return arguments.length ? fn.apply(self, concat(curryArgs, arguments, 0)) : fn.apply(self, curryArgs);
        } : function() {
            return arguments.length ? fn.apply(self, arguments) : fn.call(self);
        };
    }
    function toJsonReplacer(key, value) {
        var val = value;
        "string" == typeof key && "$" === key.charAt(0) && "$" === key.charAt(1) ? val = void 0 : isWindow(value) ? val = "$WINDOW" : value && window.document === value ? val = "$DOCUMENT" : isScope(value) && (val = "$SCOPE");
        return val;
    }
    function toJson(obj, pretty) {
        if (!isUndefined(obj)) {
            isNumber(pretty) || (pretty = pretty ? 2 : null);
            return JSON.stringify(obj, toJsonReplacer, pretty);
        }
    }
    function fromJson(json) {
        return isString(json) ? JSON.parse(json) : json;
    }
    var ALL_COLONS = /:/g;
    function timezoneToOffset(timezone, fallback) {
        timezone = timezone.replace(ALL_COLONS, "");
        var requestedTimezoneOffset = Date.parse("Jan 01, 1970 00:00:00 " + timezone) / 6e4;
        return isNumberNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
    }
    function addDateMinutes(date, minutes) {
        (date = new Date(date.getTime())).setMinutes(date.getMinutes() + minutes);
        return date;
    }
    function convertTimezoneToLocal(date, timezone, reverse) {
        reverse = reverse ? -1 : 1;
        var dateTimezoneOffset = date.getTimezoneOffset();
        return addDateMinutes(date, reverse * (timezoneToOffset(timezone, dateTimezoneOffset) - dateTimezoneOffset));
    }
    function startingTag(element) {
        element = jqLite(element).clone().empty();
        var elemHtml = jqLite("<div></div>").append(element).html();
        try {
            return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) : elemHtml.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/, function(match, nodeName) {
                return "<" + lowercase(nodeName);
            });
        } catch (e) {
            return lowercase(elemHtml);
        }
    }
    function tryDecodeURIComponent(value) {
        try {
            return decodeURIComponent(value);
        } catch (e) {}
    }
    function parseKeyValue(keyValue) {
        var obj = {};
        forEach((keyValue || "").split("&"), function(keyValue) {
            var splitPoint, key, val;
            if (keyValue) {
                key = keyValue = keyValue.replace(/\+/g, "%20");
                if (-1 !== (splitPoint = keyValue.indexOf("="))) {
                    key = keyValue.substring(0, splitPoint);
                    val = keyValue.substring(splitPoint + 1);
                }
                if (isDefined(key = tryDecodeURIComponent(key))) {
                    val = !isDefined(val) || tryDecodeURIComponent(val);
                    hasOwnProperty.call(obj, key) ? isArray(obj[key]) ? obj[key].push(val) : obj[key] = [ obj[key], val ] : obj[key] = val;
                }
            }
        });
        return obj;
    }
    function toKeyValue(obj) {
        var parts = [];
        forEach(obj, function(value, key) {
            isArray(value) ? forEach(value, function(arrayValue) {
                parts.push(encodeUriQuery(key, !0) + (!0 === arrayValue ? "" : "=" + encodeUriQuery(arrayValue, !0)));
            }) : parts.push(encodeUriQuery(key, !0) + (!0 === value ? "" : "=" + encodeUriQuery(value, !0)));
        });
        return parts.length ? parts.join("&") : "";
    }
    function encodeUriSegment(val) {
        return encodeUriQuery(val, !0).replace(/%26/gi, "&").replace(/%3D/gi, "=").replace(/%2B/gi, "+");
    }
    function encodeUriQuery(val, pctEncodeSpaces) {
        return encodeURIComponent(val).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%3B/gi, ";").replace(/%20/g, pctEncodeSpaces ? "%20" : "+");
    }
    var ngAttrPrefixes = [ "ng-", "data-ng-", "ng:", "x-ng-" ];
    var isAutoBootstrapAllowed = function(document) {
        var script = document.currentScript;
        if (!script) return !0;
        if (!(script instanceof window.HTMLScriptElement || script instanceof window.SVGScriptElement)) return !1;
        var attributes = script.attributes;
        return [ attributes.getNamedItem("src"), attributes.getNamedItem("href"), attributes.getNamedItem("xlink:href") ].every(function(src) {
            if (!src) return !0;
            if (!src.value) return !1;
            var link = document.createElement("a");
            link.href = src.value;
            if (document.location.origin === link.origin) return !0;
            switch (link.protocol) {
              case "http:":
              case "https:":
              case "ftp:":
              case "blob:":
              case "file:":
              case "data:":
                return !0;

              default:
                return !1;
            }
        });
    }(window.document);
    function angularInit(element, bootstrap) {
        var appElement, module, config = {};
        forEach(ngAttrPrefixes, function(prefix) {
            var name = prefix + "app";
            !appElement && element.hasAttribute && element.hasAttribute(name) && (module = (appElement = element).getAttribute(name));
        });
        forEach(ngAttrPrefixes, function(prefix) {
            var candidate, name = prefix + "app";
            !appElement && (candidate = element.querySelector("[" + name.replace(":", "\\:") + "]")) && (module = (appElement = candidate).getAttribute(name));
        });
        if (appElement) {
            if (!isAutoBootstrapAllowed) {
                window.console.error("AngularJS: disabling automatic bootstrap. <script> protocol indicates an extension, document.location.href does not match.");
                return;
            }
            config.strictDi = null !== function(element, ngAttr) {
                var attr, i, ii = ngAttrPrefixes.length;
                for (i = 0; i < ii; ++i) {
                    attr = ngAttrPrefixes[i] + ngAttr;
                    if (isString(attr = element.getAttribute(attr))) return attr;
                }
                return null;
            }(appElement, "strict-di");
            bootstrap(appElement, module ? [ module ] : [], config);
        }
    }
    function bootstrap(element, modules, config) {
        isObject(config) || (config = {});
        config = extend({
            strictDi: !1
        }, config);
        var doBootstrap = function() {
            if ((element = jqLite(element)).injector()) {
                var tag = element[0] === window.document ? "document" : startingTag(element);
                throw ngMinErr("btstrpd", "App already bootstrapped with this element '{0}'", tag.replace(/</, "&lt;").replace(/>/, "&gt;"));
            }
            (modules = modules || []).unshift([ "$provide", function($provide) {
                $provide.value("$rootElement", element);
            } ]);
            config.debugInfoEnabled && modules.push([ "$compileProvider", function($compileProvider) {
                $compileProvider.debugInfoEnabled(!0);
            } ]);
            modules.unshift("ng");
            var injector = createInjector(modules, config.strictDi);
            injector.invoke([ "$rootScope", "$rootElement", "$compile", "$injector", function(scope, element, compile, injector) {
                scope.$apply(function() {
                    element.data("$injector", injector);
                    compile(element)(scope);
                });
            } ]);
            return injector;
        }, NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/, NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;
        if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
            config.debugInfoEnabled = !0;
            window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, "");
        }
        if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) return doBootstrap();
        window.name = window.name.replace(NG_DEFER_BOOTSTRAP, "");
        angular.resumeBootstrap = function(extraModules) {
            forEach(extraModules, function(module) {
                modules.push(module);
            });
            return doBootstrap();
        };
        isFunction(angular.resumeDeferredBootstrap) && angular.resumeDeferredBootstrap();
    }
    function reloadWithDebugInfo() {
        window.name = "NG_ENABLE_DEBUG_INFO!" + window.name;
        window.location.reload();
    }
    function getTestability(rootElement) {
        var injector = angular.element(rootElement).injector();
        if (!injector) throw ngMinErr("test", "no injector found for element argument to getTestability");
        return injector.get("$$testability");
    }
    var SNAKE_CASE_REGEXP = /[A-Z]/g;
    function snake_case(name, separator) {
        separator = separator || "_";
        return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
            return (pos ? separator : "") + letter.toLowerCase();
        });
    }
    var bindJQueryFired = !1;
    function assertArg(arg, name, reason) {
        if (!arg) throw ngMinErr("areq", "Argument '{0}' is {1}", name || "?", reason || "required");
        return arg;
    }
    function assertArgFn(arg, name, acceptArrayAnnotation) {
        acceptArrayAnnotation && isArray(arg) && (arg = arg[arg.length - 1]);
        assertArg(isFunction(arg), name, "not a function, got " + (arg && "object" == typeof arg ? arg.constructor.name || "Object" : typeof arg));
        return arg;
    }
    function assertNotHasOwnProperty(name, context) {
        if ("hasOwnProperty" === name) throw ngMinErr("badname", "hasOwnProperty is not a valid {0} name", context);
    }
    function getter(obj, path, bindFnToScope) {
        if (!path) return obj;
        for (var key, keys = path.split("."), lastInstance = obj, len = keys.length, i = 0; i < len; i++) {
            key = keys[i];
            obj && (obj = (lastInstance = obj)[key]);
        }
        return !bindFnToScope && isFunction(obj) ? bind(lastInstance, obj) : obj;
    }
    function getBlockNodes(nodes) {
        for (var blockNodes, node = nodes[0], endNode = nodes[nodes.length - 1], i = 1; node !== endNode && (node = node.nextSibling); i++) if (blockNodes || nodes[i] !== node) {
            blockNodes || (blockNodes = jqLite(slice.call(nodes, 0, i)));
            blockNodes.push(node);
        }
        return blockNodes || nodes;
    }
    function createMap() {
        return Object.create(null);
    }
    function stringify(value) {
        if (null == value) return "";
        switch (typeof value) {
          case "string":
            break;

          case "number":
            value = "" + value;
            break;

          default:
            value = !hasCustomToString(value) || isArray(value) || isDate(value) ? toJson(value) : value.toString();
        }
        return value;
    }
    var NODE_TYPE_ELEMENT = 1, NODE_TYPE_TEXT = 3, NODE_TYPE_COMMENT = 8, NODE_TYPE_DOCUMENT = 9, NODE_TYPE_DOCUMENT_FRAGMENT = 11;
    function shallowCopy(src, dst) {
        if (isArray(src)) {
            dst = dst || [];
            for (var i = 0, ii = src.length; i < ii; i++) dst[i] = src[i];
        } else if (isObject(src)) {
            dst = dst || {};
            for (var key in src) "$" === key.charAt(0) && "$" === key.charAt(1) || (dst[key] = src[key]);
        }
        return dst || src;
    }
    function toDebugString(obj, maxDepth) {
        return "function" == typeof obj ? obj.toString().replace(/ \{[\s\S]*$/, "") : isUndefined(obj) ? "undefined" : "string" != typeof obj ? function(obj, maxDepth) {
            var seen = [];
            isValidObjectMaxDepth(maxDepth) && (obj = angular.copy(obj, null, maxDepth));
            return JSON.stringify(obj, function(key, val) {
                if (isObject(val = toJsonReplacer(key, val))) {
                    if (0 <= seen.indexOf(val)) return "...";
                    seen.push(val);
                }
                return val;
            });
        }(obj, maxDepth) : obj;
    }
    var version = {
        full: "1.6.10",
        major: 1,
        minor: 6,
        dot: 10,
        codeName: "crystalline-persuasion"
    };
    JQLite.expando = "ng339";
    var jqCache = JQLite.cache = {}, jqId = 1;
    JQLite._data = function(node) {
        return this.cache[node[this.expando]] || {};
    };
    var DASH_LOWERCASE_REGEXP = /-([a-z])/g, MS_HACK_REGEXP = /^-ms-/, MOUSE_EVENT_MAP = {
        mouseleave: "mouseout",
        mouseenter: "mouseover"
    }, jqLiteMinErr = minErr("jqLite");
    function fnCamelCaseReplace(all, letter) {
        return letter.toUpperCase();
    }
    function kebabToCamel(name) {
        return name.replace(DASH_LOWERCASE_REGEXP, fnCamelCaseReplace);
    }
    var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/, HTML_REGEXP = /<|&#?\w+;/, TAG_NAME_REGEXP = /<([\w:-]+)/, XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi, wrapMap = {
        option: [ 1, '<select multiple="multiple">', "</select>" ],
        thead: [ 1, "<table>", "</table>" ],
        col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: [ 0, "", "" ]
    };
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    function jqLiteIsTextNode(html) {
        return !HTML_REGEXP.test(html);
    }
    function jqLiteAcceptsData(node) {
        var nodeType = node.nodeType;
        return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
    }
    function jqLiteBuildFragment(html, context) {
        var tmp, tag, wrap, i, fragment = context.createDocumentFragment(), nodes = [];
        if (jqLiteIsTextNode(html)) nodes.push(context.createTextNode(html)); else {
            tmp = fragment.appendChild(context.createElement("div"));
            tag = (TAG_NAME_REGEXP.exec(html) || [ "", "" ])[1].toLowerCase();
            wrap = wrapMap[tag] || wrapMap._default;
            tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];
            i = wrap[0];
            for (;i--; ) tmp = tmp.lastChild;
            nodes = concat(nodes, tmp.childNodes);
            (tmp = fragment.firstChild).textContent = "";
        }
        fragment.textContent = "";
        fragment.innerHTML = "";
        forEach(nodes, function(node) {
            fragment.appendChild(node);
        });
        return fragment;
    }
    var jqLiteContains = window.Node.prototype.contains || function(arg) {
        return !!(16 & this.compareDocumentPosition(arg));
    };
    function JQLite(element) {
        if (element instanceof JQLite) return element;
        var argIsString;
        if (isString(element)) {
            element = trim(element);
            argIsString = !0;
        }
        if (!(this instanceof JQLite)) {
            if (argIsString && "<" !== element.charAt(0)) throw jqLiteMinErr("nosel", "Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");
            return new JQLite(element);
        }
        argIsString ? jqLiteAddNodes(this, function(html, context) {
            context = context || window.document;
            var parsed;
            return (parsed = SINGLE_TAG_REGEXP.exec(html)) ? [ context.createElement(parsed[1]) ] : (parsed = jqLiteBuildFragment(html, context)) ? parsed.childNodes : [];
        }(element)) : isFunction(element) ? jqLiteReady(element) : jqLiteAddNodes(this, element);
    }
    function jqLiteClone(element) {
        return element.cloneNode(!0);
    }
    function jqLiteDealoc(element, onlyDescendants) {
        !onlyDescendants && jqLiteAcceptsData(element) && jqLite.cleanData([ element ]);
        element.querySelectorAll && jqLite.cleanData(element.querySelectorAll("*"));
    }
    function jqLiteOff(element, type, fn, unsupported) {
        if (isDefined(unsupported)) throw jqLiteMinErr("offargs", "jqLite#off() does not support the `selector` argument");
        var expandoStore = jqLiteExpandoStore(element), events = expandoStore && expandoStore.events, handle = expandoStore && expandoStore.handle;
        if (handle) if (type) {
            var removeHandler = function(type) {
                var listenerFns = events[type];
                isDefined(fn) && arrayRemove(listenerFns || [], fn);
                if (!(isDefined(fn) && listenerFns && 0 < listenerFns.length)) {
                    element.removeEventListener(type, handle);
                    delete events[type];
                }
            };
            forEach(type.split(" "), function(type) {
                removeHandler(type);
                MOUSE_EVENT_MAP[type] && removeHandler(MOUSE_EVENT_MAP[type]);
            });
        } else for (type in events) {
            "$destroy" !== type && element.removeEventListener(type, handle);
            delete events[type];
        }
    }
    function jqLiteRemoveData(element, name) {
        var expandoId = element.ng339, expandoStore = expandoId && jqCache[expandoId];
        if (expandoStore) {
            if (name) {
                delete expandoStore.data[name];
                return;
            }
            if (expandoStore.handle) {
                expandoStore.events.$destroy && expandoStore.handle({}, "$destroy");
                jqLiteOff(element);
            }
            delete jqCache[expandoId];
            element.ng339 = void 0;
        }
    }
    function jqLiteExpandoStore(element, createIfNecessary) {
        var expandoId = element.ng339, expandoStore = expandoId && jqCache[expandoId];
        if (createIfNecessary && !expandoStore) {
            element.ng339 = expandoId = ++jqId;
            expandoStore = jqCache[expandoId] = {
                events: {},
                data: {},
                handle: void 0
            };
        }
        return expandoStore;
    }
    function jqLiteData(element, key, value) {
        if (jqLiteAcceptsData(element)) {
            var prop, isSimpleSetter = isDefined(value), isSimpleGetter = !isSimpleSetter && key && !isObject(key), massGetter = !key, expandoStore = jqLiteExpandoStore(element, !isSimpleGetter), data = expandoStore && expandoStore.data;
            if (isSimpleSetter) data[kebabToCamel(key)] = value; else {
                if (massGetter) return data;
                if (isSimpleGetter) return data && data[kebabToCamel(key)];
                for (prop in key) data[kebabToCamel(prop)] = key[prop];
            }
        }
    }
    function jqLiteHasClass(element, selector) {
        return !!element.getAttribute && -1 < (" " + (element.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").indexOf(" " + selector + " ");
    }
    function jqLiteRemoveClass(element, cssClasses) {
        if (cssClasses && element.setAttribute) {
            var existingClasses = (" " + (element.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " "), newClasses = existingClasses;
            forEach(cssClasses.split(" "), function(cssClass) {
                cssClass = trim(cssClass);
                newClasses = newClasses.replace(" " + cssClass + " ", " ");
            });
            newClasses !== existingClasses && element.setAttribute("class", trim(newClasses));
        }
    }
    function jqLiteAddClass(element, cssClasses) {
        if (cssClasses && element.setAttribute) {
            var existingClasses = (" " + (element.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " "), newClasses = existingClasses;
            forEach(cssClasses.split(" "), function(cssClass) {
                cssClass = trim(cssClass);
                -1 === newClasses.indexOf(" " + cssClass + " ") && (newClasses += cssClass + " ");
            });
            newClasses !== existingClasses && element.setAttribute("class", trim(newClasses));
        }
    }
    function jqLiteAddNodes(root, elements) {
        if (elements) if (elements.nodeType) root[root.length++] = elements; else {
            var length = elements.length;
            if ("number" == typeof length && elements.window !== elements) {
                if (length) for (var i = 0; i < length; i++) root[root.length++] = elements[i];
            } else root[root.length++] = elements;
        }
    }
    function jqLiteController(element, name) {
        return jqLiteInheritedData(element, "$" + (name || "ngController") + "Controller");
    }
    function jqLiteInheritedData(element, name, value) {
        element.nodeType === NODE_TYPE_DOCUMENT && (element = element.documentElement);
        for (var names = isArray(name) ? name : [ name ]; element; ) {
            for (var i = 0, ii = names.length; i < ii; i++) if (isDefined(value = jqLite.data(element, names[i]))) return value;
            element = element.parentNode || element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host;
        }
    }
    function jqLiteEmpty(element) {
        jqLiteDealoc(element, !0);
        for (;element.firstChild; ) element.removeChild(element.firstChild);
    }
    function jqLiteRemove(element, keepData) {
        keepData || jqLiteDealoc(element);
        var parent = element.parentNode;
        parent && parent.removeChild(element);
    }
    function jqLiteReady(fn) {
        function trigger() {
            window.document.removeEventListener("DOMContentLoaded", trigger);
            window.removeEventListener("load", trigger);
            fn();
        }
        if ("complete" === window.document.readyState) window.setTimeout(fn); else {
            window.document.addEventListener("DOMContentLoaded", trigger);
            window.addEventListener("load", trigger);
        }
    }
    var JQLitePrototype = JQLite.prototype = {
        ready: jqLiteReady,
        toString: function() {
            var value = [];
            forEach(this, function(e) {
                value.push("" + e);
            });
            return "[" + value.join(", ") + "]";
        },
        eq: function(index) {
            return jqLite(0 <= index ? this[index] : this[this.length + index]);
        },
        length: 0,
        push: push,
        sort: [].sort,
        splice: [].splice
    }, BOOLEAN_ATTR = {};
    forEach("multiple,selected,checked,disabled,readOnly,required,open".split(","), function(value) {
        BOOLEAN_ATTR[lowercase(value)] = value;
    });
    var BOOLEAN_ELEMENTS = {};
    forEach("input,select,option,textarea,button,form,details".split(","), function(value) {
        BOOLEAN_ELEMENTS[value] = !0;
    });
    var ALIASED_ATTR = {
        ngMinlength: "minlength",
        ngMaxlength: "maxlength",
        ngMin: "min",
        ngMax: "max",
        ngPattern: "pattern",
        ngStep: "step"
    };
    function getBooleanAttrName(element, name) {
        var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];
        return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
    }
    forEach({
        data: jqLiteData,
        removeData: jqLiteRemoveData,
        hasData: function(node) {
            for (var key in jqCache[node.ng339]) return !0;
            return !1;
        },
        cleanData: function(nodes) {
            for (var i = 0, ii = nodes.length; i < ii; i++) jqLiteRemoveData(nodes[i]);
        }
    }, function(fn, name) {
        JQLite[name] = fn;
    });
    forEach({
        data: jqLiteData,
        inheritedData: jqLiteInheritedData,
        scope: function(element) {
            return jqLite.data(element, "$scope") || jqLiteInheritedData(element.parentNode || element, [ "$isolateScope", "$scope" ]);
        },
        isolateScope: function(element) {
            return jqLite.data(element, "$isolateScope") || jqLite.data(element, "$isolateScopeNoTemplate");
        },
        controller: jqLiteController,
        injector: function(element) {
            return jqLiteInheritedData(element, "$injector");
        },
        removeAttr: function(element, name) {
            element.removeAttribute(name);
        },
        hasClass: jqLiteHasClass,
        css: function(element, name, value) {
            name = function(name) {
                return kebabToCamel(name.replace(MS_HACK_REGEXP, "ms-"));
            }(name);
            if (!isDefined(value)) return element.style[name];
            element.style[name] = value;
        },
        attr: function(element, name, value) {
            var ret, nodeType = element.nodeType;
            if (nodeType !== NODE_TYPE_TEXT && 2 !== nodeType && nodeType !== NODE_TYPE_COMMENT && element.getAttribute) {
                var lowercasedName = lowercase(name), isBooleanAttr = BOOLEAN_ATTR[lowercasedName];
                if (!isDefined(value)) {
                    ret = element.getAttribute(name);
                    isBooleanAttr && null !== ret && (ret = lowercasedName);
                    return null === ret ? void 0 : ret;
                }
                null === value || !1 === value && isBooleanAttr ? element.removeAttribute(name) : element.setAttribute(name, isBooleanAttr ? lowercasedName : value);
            }
        },
        prop: function(element, name, value) {
            if (!isDefined(value)) return element[name];
            element[name] = value;
        },
        text: function() {
            getText.$dv = "";
            return getText;
            function getText(element, value) {
                if (isUndefined(value)) {
                    var nodeType = element.nodeType;
                    return nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT ? element.textContent : "";
                }
                element.textContent = value;
            }
        }(),
        val: function(element, value) {
            if (isUndefined(value)) {
                if (element.multiple && "select" === nodeName_(element)) {
                    var result = [];
                    forEach(element.options, function(option) {
                        option.selected && result.push(option.value || option.text);
                    });
                    return result;
                }
                return element.value;
            }
            element.value = value;
        },
        html: function(element, value) {
            if (isUndefined(value)) return element.innerHTML;
            jqLiteDealoc(element, !0);
            element.innerHTML = value;
        },
        empty: jqLiteEmpty
    }, function(fn, name) {
        JQLite.prototype[name] = function(arg1, arg2) {
            var i, key, nodeCount = this.length;
            if (fn !== jqLiteEmpty && isUndefined(2 === fn.length && fn !== jqLiteHasClass && fn !== jqLiteController ? arg1 : arg2)) {
                if (isObject(arg1)) {
                    for (i = 0; i < nodeCount; i++) if (fn === jqLiteData) fn(this[i], arg1); else for (key in arg1) fn(this[i], key, arg1[key]);
                    return this;
                }
                for (var value = fn.$dv, jj = isUndefined(value) ? Math.min(nodeCount, 1) : nodeCount, j = 0; j < jj; j++) {
                    var nodeValue = fn(this[j], arg1, arg2);
                    value = value ? value + nodeValue : nodeValue;
                }
                return value;
            }
            for (i = 0; i < nodeCount; i++) fn(this[i], arg1, arg2);
            return this;
        };
    });
    function defaultHandlerWrapper(element, event, handler) {
        handler.call(element, event);
    }
    function specialMouseHandlerWrapper(target, event, handler) {
        var related = event.relatedTarget;
        related && (related === target || jqLiteContains.call(target, related)) || handler.call(target, event);
    }
    forEach({
        removeData: jqLiteRemoveData,
        on: function(element, type, fn, unsupported) {
            if (isDefined(unsupported)) throw jqLiteMinErr("onargs", "jqLite#on() does not support the `selector` or `eventData` parameters");
            if (jqLiteAcceptsData(element)) {
                var expandoStore = jqLiteExpandoStore(element, !0), events = expandoStore.events, handle = expandoStore.handle;
                handle || (handle = expandoStore.handle = function(element, events) {
                    var eventHandler = function(event, type) {
                        event.isDefaultPrevented = function() {
                            return event.defaultPrevented;
                        };
                        var eventFns = events[type || event.type], eventFnsLength = eventFns ? eventFns.length : 0;
                        if (eventFnsLength) {
                            if (isUndefined(event.immediatePropagationStopped)) {
                                var originalStopImmediatePropagation = event.stopImmediatePropagation;
                                event.stopImmediatePropagation = function() {
                                    event.immediatePropagationStopped = !0;
                                    event.stopPropagation && event.stopPropagation();
                                    originalStopImmediatePropagation && originalStopImmediatePropagation.call(event);
                                };
                            }
                            event.isImmediatePropagationStopped = function() {
                                return !0 === event.immediatePropagationStopped;
                            };
                            var handlerWrapper = eventFns.specialHandlerWrapper || defaultHandlerWrapper;
                            1 < eventFnsLength && (eventFns = shallowCopy(eventFns));
                            for (var i = 0; i < eventFnsLength; i++) event.isImmediatePropagationStopped() || handlerWrapper(element, event, eventFns[i]);
                        }
                    };
                    eventHandler.elem = element;
                    return eventHandler;
                }(element, events));
                for (var types = 0 <= type.indexOf(" ") ? type.split(" ") : [ type ], i = types.length, addHandler = function(type, specialHandlerWrapper, noEventListener) {
                    var eventFns = events[type];
                    if (!eventFns) {
                        (eventFns = events[type] = []).specialHandlerWrapper = specialHandlerWrapper;
                        "$destroy" === type || noEventListener || element.addEventListener(type, handle);
                    }
                    eventFns.push(fn);
                }; i--; ) {
                    type = types[i];
                    if (MOUSE_EVENT_MAP[type]) {
                        addHandler(MOUSE_EVENT_MAP[type], specialMouseHandlerWrapper);
                        addHandler(type, void 0, !0);
                    } else addHandler(type);
                }
            }
        },
        off: jqLiteOff,
        one: function(element, type, fn) {
            (element = jqLite(element)).on(type, function onFn() {
                element.off(type, fn);
                element.off(type, onFn);
            });
            element.on(type, fn);
        },
        replaceWith: function(element, replaceNode) {
            var index, parent = element.parentNode;
            jqLiteDealoc(element);
            forEach(new JQLite(replaceNode), function(node) {
                index ? parent.insertBefore(node, index.nextSibling) : parent.replaceChild(node, element);
                index = node;
            });
        },
        children: function(element) {
            var children = [];
            forEach(element.childNodes, function(element) {
                element.nodeType === NODE_TYPE_ELEMENT && children.push(element);
            });
            return children;
        },
        contents: function(element) {
            return element.contentDocument || element.childNodes || [];
        },
        append: function(element, node) {
            var nodeType = element.nodeType;
            if (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_DOCUMENT_FRAGMENT) for (var i = 0, ii = (node = new JQLite(node)).length; i < ii; i++) {
                var child = node[i];
                element.appendChild(child);
            }
        },
        prepend: function(element, node) {
            if (element.nodeType === NODE_TYPE_ELEMENT) {
                var index = element.firstChild;
                forEach(new JQLite(node), function(child) {
                    element.insertBefore(child, index);
                });
            }
        },
        wrap: function(element, wrapNode) {
            !function(node, wrapper) {
                var parent = node.parentNode;
                parent && parent.replaceChild(wrapper, node);
                wrapper.appendChild(node);
            }(element, jqLite(wrapNode).eq(0).clone()[0]);
        },
        remove: jqLiteRemove,
        detach: function(element) {
            jqLiteRemove(element, !0);
        },
        after: function(element, newElement) {
            var index = element, parent = element.parentNode;
            if (parent) for (var i = 0, ii = (newElement = new JQLite(newElement)).length; i < ii; i++) {
                var node = newElement[i];
                parent.insertBefore(node, index.nextSibling);
                index = node;
            }
        },
        addClass: jqLiteAddClass,
        removeClass: jqLiteRemoveClass,
        toggleClass: function(element, selector, condition) {
            selector && forEach(selector.split(" "), function(className) {
                var classCondition = condition;
                isUndefined(classCondition) && (classCondition = !jqLiteHasClass(element, className));
                (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
            });
        },
        parent: function(element) {
            var parent = element.parentNode;
            return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
        },
        next: function(element) {
            return element.nextElementSibling;
        },
        find: function(element, selector) {
            return element.getElementsByTagName ? element.getElementsByTagName(selector) : [];
        },
        clone: jqLiteClone,
        triggerHandler: function(element, event, extraParameters) {
            var dummyEvent, eventFnsCopy, handlerArgs, eventName = event.type || event, expandoStore = jqLiteExpandoStore(element), events = expandoStore && expandoStore.events, eventFns = events && events[eventName];
            if (eventFns) {
                dummyEvent = {
                    preventDefault: function() {
                        this.defaultPrevented = !0;
                    },
                    isDefaultPrevented: function() {
                        return !0 === this.defaultPrevented;
                    },
                    stopImmediatePropagation: function() {
                        this.immediatePropagationStopped = !0;
                    },
                    isImmediatePropagationStopped: function() {
                        return !0 === this.immediatePropagationStopped;
                    },
                    stopPropagation: noop,
                    type: eventName,
                    target: element
                };
                event.type && (dummyEvent = extend(dummyEvent, event));
                eventFnsCopy = shallowCopy(eventFns);
                handlerArgs = extraParameters ? [ dummyEvent ].concat(extraParameters) : [ dummyEvent ];
                forEach(eventFnsCopy, function(fn) {
                    dummyEvent.isImmediatePropagationStopped() || fn.apply(element, handlerArgs);
                });
            }
        }
    }, function(fn, name) {
        JQLite.prototype[name] = function(arg1, arg2, arg3) {
            for (var value, i = 0, ii = this.length; i < ii; i++) isUndefined(value) ? isDefined(value = fn(this[i], arg1, arg2, arg3)) && (value = jqLite(value)) : jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
            return isDefined(value) ? value : this;
        };
    });
    JQLite.prototype.bind = JQLite.prototype.on;
    JQLite.prototype.unbind = JQLite.prototype.off;
    function $$jqLiteProvider() {
        this.$get = function() {
            return extend(JQLite, {
                hasClass: function(node, classes) {
                    node.attr && (node = node[0]);
                    return jqLiteHasClass(node, classes);
                },
                addClass: function(node, classes) {
                    node.attr && (node = node[0]);
                    return jqLiteAddClass(node, classes);
                },
                removeClass: function(node, classes) {
                    node.attr && (node = node[0]);
                    return jqLiteRemoveClass(node, classes);
                }
            });
        };
    }
    function hashKey(obj, nextUidFn) {
        var key = obj && obj.$$hashKey;
        if (key) {
            "function" == typeof key && (key = obj.$$hashKey());
            return key;
        }
        var objType = typeof obj;
        return key = "function" === objType || "object" === objType && null !== obj ? obj.$$hashKey = objType + ":" + (nextUidFn || nextUid)() : objType + ":" + obj;
    }
    var nanKey = Object.create(null);
    function NgMapShim() {
        this._keys = [];
        this._values = [];
        this._lastKey = NaN;
        this._lastIndex = -1;
    }
    NgMapShim.prototype = {
        _idx: function(key) {
            if (key === this._lastKey) return this._lastIndex;
            this._lastKey = key;
            this._lastIndex = this._keys.indexOf(key);
            return this._lastIndex;
        },
        _transformKey: function(key) {
            return isNumberNaN(key) ? nanKey : key;
        },
        get: function(key) {
            key = this._transformKey(key);
            var idx = this._idx(key);
            if (-1 !== idx) return this._values[idx];
        },
        set: function(key, value) {
            key = this._transformKey(key);
            var idx = this._idx(key);
            -1 === idx && (idx = this._lastIndex = this._keys.length);
            this._keys[idx] = key;
            this._values[idx] = value;
        },
        delete: function(key) {
            key = this._transformKey(key);
            var idx = this._idx(key);
            if (-1 === idx) return !1;
            this._keys.splice(idx, 1);
            this._values.splice(idx, 1);
            this._lastKey = NaN;
            this._lastIndex = -1;
            return !0;
        }
    };
    var NgMap = NgMapShim, $$MapProvider = [ function() {
        this.$get = [ function() {
            return NgMap;
        } ];
    } ], ARROW_ARG = /^([^(]+?)=>/, FN_ARGS = /^[^(]*\(\s*([^)]*)\)/m, FN_ARG_SPLIT = /,/, FN_ARG = /^\s*(_?)(\S+?)\1\s*$/, STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm, $injectorMinErr = minErr("$injector");
    function stringifyFn(fn) {
        return Function.prototype.toString.call(fn);
    }
    function extractArgs(fn) {
        var fnText = stringifyFn(fn).replace(STRIP_COMMENTS, "");
        return fnText.match(ARROW_ARG) || fnText.match(FN_ARGS);
    }
    function createInjector(modulesToLoad, strictDi) {
        strictDi = !0 === strictDi;
        var INSTANTIATING = {}, providerSuffix = "Provider", path = [], loadedModules = new NgMap(), providerCache = {
            $provide: {
                provider: supportObject(provider),
                factory: supportObject(factory),
                service: supportObject(function(name, constructor) {
                    return factory(name, [ "$injector", function($injector) {
                        return $injector.instantiate(constructor);
                    } ]);
                }),
                value: supportObject(function(name, val) {
                    return factory(name, valueFn(val), !1);
                }),
                constant: supportObject(function(name, value) {
                    assertNotHasOwnProperty(name, "constant");
                    providerCache[name] = value;
                    instanceCache[name] = value;
                }),
                decorator: function(serviceName, decorFn) {
                    var origProvider = providerInjector.get(serviceName + providerSuffix), orig$get = origProvider.$get;
                    origProvider.$get = function() {
                        var origInstance = instanceInjector.invoke(orig$get, origProvider);
                        return instanceInjector.invoke(decorFn, null, {
                            $delegate: origInstance
                        });
                    };
                }
            }
        }, providerInjector = providerCache.$injector = createInternalInjector(providerCache, function(serviceName, caller) {
            angular.isString(caller) && path.push(caller);
            throw $injectorMinErr("unpr", "Unknown provider: {0}", path.join(" <- "));
        }), instanceCache = {}, protoInstanceInjector = createInternalInjector(instanceCache, function(serviceName, caller) {
            var provider = providerInjector.get(serviceName + providerSuffix, caller);
            return instanceInjector.invoke(provider.$get, provider, void 0, serviceName);
        }), instanceInjector = protoInstanceInjector;
        providerCache["$injector" + providerSuffix] = {
            $get: valueFn(protoInstanceInjector)
        };
        instanceInjector.modules = providerInjector.modules = createMap();
        var runBlocks = loadModules(modulesToLoad);
        (instanceInjector = protoInstanceInjector.get("$injector")).strictDi = strictDi;
        forEach(runBlocks, function(fn) {
            fn && instanceInjector.invoke(fn);
        });
        instanceInjector.loadNewModules = function(mods) {
            forEach(loadModules(mods), function(fn) {
                fn && instanceInjector.invoke(fn);
            });
        };
        return instanceInjector;
        function supportObject(delegate) {
            return function(key, value) {
                if (!isObject(key)) return delegate(key, value);
                forEach(key, reverseParams(delegate));
            };
        }
        function provider(name, provider_) {
            assertNotHasOwnProperty(name, "service");
            (isFunction(provider_) || isArray(provider_)) && (provider_ = providerInjector.instantiate(provider_));
            if (!provider_.$get) throw $injectorMinErr("pget", "Provider '{0}' must define $get factory method.", name);
            return providerCache[name + providerSuffix] = provider_;
        }
        function factory(name, factoryFn, enforce) {
            return provider(name, {
                $get: !1 !== enforce ? function(name, factory) {
                    return function() {
                        var result = instanceInjector.invoke(factory, this);
                        if (isUndefined(result)) throw $injectorMinErr("undef", "Provider '{0}' must return a value from $get factory method.", name);
                        return result;
                    };
                }(name, factoryFn) : factoryFn
            });
        }
        function loadModules(modulesToLoad) {
            assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), "modulesToLoad", "not an array");
            var moduleFn, runBlocks = [];
            forEach(modulesToLoad, function(module) {
                if (!loadedModules.get(module)) {
                    loadedModules.set(module, !0);
                    try {
                        if (isString(module)) {
                            moduleFn = angularModule(module);
                            instanceInjector.modules[module] = moduleFn;
                            runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
                            runInvokeQueue(moduleFn._invokeQueue);
                            runInvokeQueue(moduleFn._configBlocks);
                        } else isFunction(module) ? runBlocks.push(providerInjector.invoke(module)) : isArray(module) ? runBlocks.push(providerInjector.invoke(module)) : assertArgFn(module, "module");
                    } catch (e) {
                        isArray(module) && (module = module[module.length - 1]);
                        e.message && e.stack && -1 === e.stack.indexOf(e.message) && (e = e.message + "\n" + e.stack);
                        throw $injectorMinErr("modulerr", "Failed to instantiate module {0} due to:\n{1}", module, e.stack || e.message || e);
                    }
                }
                function runInvokeQueue(queue) {
                    var i, ii;
                    for (i = 0, ii = queue.length; i < ii; i++) {
                        var invokeArgs = queue[i], provider = providerInjector.get(invokeArgs[0]);
                        provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
                    }
                }
            });
            return runBlocks;
        }
        function createInternalInjector(cache, factory) {
            function getService(serviceName, caller) {
                if (cache.hasOwnProperty(serviceName)) {
                    if (cache[serviceName] === INSTANTIATING) throw $injectorMinErr("cdep", "Circular dependency found: {0}", serviceName + " <- " + path.join(" <- "));
                    return cache[serviceName];
                }
                try {
                    path.unshift(serviceName);
                    cache[serviceName] = INSTANTIATING;
                    cache[serviceName] = factory(serviceName, caller);
                    return cache[serviceName];
                } catch (err) {
                    cache[serviceName] === INSTANTIATING && delete cache[serviceName];
                    throw err;
                } finally {
                    path.shift();
                }
            }
            function injectionArgs(fn, locals, serviceName) {
                for (var args = [], $inject = createInjector.$$annotate(fn, strictDi, serviceName), i = 0, length = $inject.length; i < length; i++) {
                    var key = $inject[i];
                    if ("string" != typeof key) throw $injectorMinErr("itkn", "Incorrect injection token! Expected service name as string, got {0}", key);
                    args.push(locals && locals.hasOwnProperty(key) ? locals[key] : getService(key, serviceName));
                }
                return args;
            }
            return {
                invoke: function(fn, self, locals, serviceName) {
                    if ("string" == typeof locals) {
                        serviceName = locals;
                        locals = null;
                    }
                    var args = injectionArgs(fn, locals, serviceName);
                    isArray(fn) && (fn = fn[fn.length - 1]);
                    if (function(func) {
                        if (msie || "function" != typeof func) return !1;
                        var result = func.$$ngIsClass;
                        isBoolean(result) || (result = func.$$ngIsClass = /^(?:class\b|constructor\()/.test(stringifyFn(func)));
                        return result;
                    }(fn)) {
                        args.unshift(null);
                        return new (Function.prototype.bind.apply(fn, args))();
                    }
                    return fn.apply(self, args);
                },
                instantiate: function(Type, locals, serviceName) {
                    var ctor = isArray(Type) ? Type[Type.length - 1] : Type, args = injectionArgs(Type, locals, serviceName);
                    args.unshift(null);
                    return new (Function.prototype.bind.apply(ctor, args))();
                },
                get: getService,
                annotate: createInjector.$$annotate,
                has: function(name) {
                    return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
                }
            };
        }
    }
    createInjector.$$annotate = function(fn, strictDi, name) {
        var $inject, last;
        if ("function" == typeof fn) {
            if (!($inject = fn.$inject)) {
                $inject = [];
                if (fn.length) {
                    if (strictDi) {
                        isString(name) && name || (name = fn.name || function(fn) {
                            var args = extractArgs(fn);
                            return args ? "function(" + (args[1] || "").replace(/[\s\r\n]+/, " ") + ")" : "fn";
                        }(fn));
                        throw $injectorMinErr("strictdi", "{0} is not using explicit annotation and cannot be invoked in strict mode", name);
                    }
                    forEach(extractArgs(fn)[1].split(FN_ARG_SPLIT), function(arg) {
                        arg.replace(FN_ARG, function(all, underscore, name) {
                            $inject.push(name);
                        });
                    });
                }
                fn.$inject = $inject;
            }
        } else if (isArray(fn)) {
            assertArgFn(fn[last = fn.length - 1], "fn");
            $inject = fn.slice(0, last);
        } else assertArgFn(fn, "fn", !0);
        return $inject;
    };
    function $AnchorScrollProvider() {
        var autoScrollingEnabled = !0;
        this.disableAutoScrolling = function() {
            autoScrollingEnabled = !1;
        };
        this.$get = [ "$window", "$location", "$rootScope", function($window, $location, $rootScope) {
            var document = $window.document;
            function scrollTo(elem) {
                if (elem) {
                    elem.scrollIntoView();
                    var offset = function() {
                        var offset = scroll.yOffset;
                        if (isFunction(offset)) offset = offset(); else if (isElement(offset)) {
                            var elem = offset[0];
                            offset = "fixed" !== $window.getComputedStyle(elem).position ? 0 : elem.getBoundingClientRect().bottom;
                        } else isNumber(offset) || (offset = 0);
                        return offset;
                    }();
                    if (offset) {
                        var elemTop = elem.getBoundingClientRect().top;
                        $window.scrollBy(0, elemTop - offset);
                    }
                } else $window.scrollTo(0, 0);
            }
            function scroll(hash) {
                var elm;
                (hash = isString(hash) ? hash : isNumber(hash) ? hash.toString() : $location.hash()) ? (elm = document.getElementById(hash)) ? scrollTo(elm) : (elm = function(list) {
                    var result = null;
                    Array.prototype.some.call(list, function(element) {
                        if ("a" === nodeName_(element)) {
                            result = element;
                            return !0;
                        }
                    });
                    return result;
                }(document.getElementsByName(hash))) ? scrollTo(elm) : "top" === hash && scrollTo(null) : scrollTo(null);
            }
            autoScrollingEnabled && $rootScope.$watch(function() {
                return $location.hash();
            }, function(newVal, oldVal) {
                if (newVal !== oldVal || "" !== newVal) {
                    action = function() {
                        $rootScope.$evalAsync(scroll);
                    }, "complete" === (win = win || window).document.readyState ? win.setTimeout(action) : jqLite(win).on("load", action);
                    var action, win;
                }
            });
            return scroll;
        } ];
    }
    var $animateMinErr = minErr("$animate"), ELEMENT_NODE = 1;
    function mergeClasses(a, b) {
        if (!a && !b) return "";
        if (!a) return b;
        if (!b) return a;
        isArray(a) && (a = a.join(" "));
        isArray(b) && (b = b.join(" "));
        return a + " " + b;
    }
    function prepareAnimateOptions(options) {
        return isObject(options) ? options : {};
    }
    var $$CoreAnimateJsProvider = function() {
        this.$get = noop;
    }, $$CoreAnimateQueueProvider = function() {
        var postDigestQueue = new NgMap(), postDigestElements = [];
        this.$get = [ "$$AnimateRunner", "$rootScope", function($$AnimateRunner, $rootScope) {
            return {
                enabled: noop,
                on: noop,
                off: noop,
                pin: noop,
                push: function(element, event, options, domOperation) {
                    domOperation && domOperation();
                    (options = options || {}).from && element.css(options.from);
                    options.to && element.css(options.to);
                    (options.addClass || options.removeClass) && function(element, add, remove) {
                        var data = postDigestQueue.get(element) || {}, classesAdded = updateData(data, add, !0), classesRemoved = updateData(data, remove, !1);
                        if (classesAdded || classesRemoved) {
                            postDigestQueue.set(element, data);
                            postDigestElements.push(element);
                            1 === postDigestElements.length && $rootScope.$$postDigest(handleCSSClassChanges);
                        }
                    }(element, options.addClass, options.removeClass);
                    var runner = new $$AnimateRunner();
                    runner.complete();
                    return runner;
                }
            };
            function updateData(data, classes, value) {
                var changed = !1;
                classes && forEach(classes = isString(classes) ? classes.split(" ") : isArray(classes) ? classes : [], function(className) {
                    if (className) {
                        changed = !0;
                        data[className] = value;
                    }
                });
                return changed;
            }
            function handleCSSClassChanges() {
                forEach(postDigestElements, function(element) {
                    var data = postDigestQueue.get(element);
                    if (data) {
                        var existing = function(classes) {
                            isString(classes) && (classes = classes.split(" "));
                            var obj = createMap();
                            forEach(classes, function(klass) {
                                klass.length && (obj[klass] = !0);
                            });
                            return obj;
                        }(element.attr("class")), toAdd = "", toRemove = "";
                        forEach(data, function(status, className) {
                            status !== !!existing[className] && (status ? toAdd += (toAdd.length ? " " : "") + className : toRemove += (toRemove.length ? " " : "") + className);
                        });
                        forEach(element, function(elm) {
                            toAdd && jqLiteAddClass(elm, toAdd);
                            toRemove && jqLiteRemoveClass(elm, toRemove);
                        });
                        postDigestQueue.delete(element);
                    }
                });
                postDigestElements.length = 0;
            }
        } ];
    }, $AnimateProvider = [ "$provide", function($provide) {
        var provider = this, classNameFilter = null, customFilter = null;
        this.$$registeredAnimations = Object.create(null);
        this.register = function(name, factory) {
            if (name && "." !== name.charAt(0)) throw $animateMinErr("notcsel", "Expecting class selector starting with '.' got '{0}'.", name);
            var key = name + "-animation";
            provider.$$registeredAnimations[name.substr(1)] = key;
            $provide.factory(key, factory);
        };
        this.customFilter = function(filterFn) {
            1 === arguments.length && (customFilter = isFunction(filterFn) ? filterFn : null);
            return customFilter;
        };
        this.classNameFilter = function(expression) {
            if (1 === arguments.length && (classNameFilter = expression instanceof RegExp ? expression : null)) {
                if (new RegExp("[(\\s|\\/)]ng-animate[(\\s|\\/)]").test(classNameFilter.toString())) {
                    classNameFilter = null;
                    throw $animateMinErr("nongcls", '$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', "ng-animate");
                }
            }
            return classNameFilter;
        };
        this.$get = [ "$$animateQueue", function($$animateQueue) {
            function domInsert(element, parentElement, afterElement) {
                if (afterElement) {
                    var afterNode = function(element) {
                        for (var i = 0; i < element.length; i++) {
                            var elm = element[i];
                            if (elm.nodeType === ELEMENT_NODE) return elm;
                        }
                    }(afterElement);
                    !afterNode || afterNode.parentNode || afterNode.previousElementSibling || (afterElement = null);
                }
                afterElement ? afterElement.after(element) : parentElement.prepend(element);
            }
            return {
                on: $$animateQueue.on,
                off: $$animateQueue.off,
                pin: $$animateQueue.pin,
                enabled: $$animateQueue.enabled,
                cancel: function(runner) {
                    runner.end && runner.end();
                },
                enter: function(element, parent, after, options) {
                    parent = parent && jqLite(parent);
                    after = after && jqLite(after);
                    domInsert(element, parent = parent || after.parent(), after);
                    return $$animateQueue.push(element, "enter", prepareAnimateOptions(options));
                },
                move: function(element, parent, after, options) {
                    parent = parent && jqLite(parent);
                    after = after && jqLite(after);
                    domInsert(element, parent = parent || after.parent(), after);
                    return $$animateQueue.push(element, "move", prepareAnimateOptions(options));
                },
                leave: function(element, options) {
                    return $$animateQueue.push(element, "leave", prepareAnimateOptions(options), function() {
                        element.remove();
                    });
                },
                addClass: function(element, className, options) {
                    (options = prepareAnimateOptions(options)).addClass = mergeClasses(options.addclass, className);
                    return $$animateQueue.push(element, "addClass", options);
                },
                removeClass: function(element, className, options) {
                    (options = prepareAnimateOptions(options)).removeClass = mergeClasses(options.removeClass, className);
                    return $$animateQueue.push(element, "removeClass", options);
                },
                setClass: function(element, add, remove, options) {
                    (options = prepareAnimateOptions(options)).addClass = mergeClasses(options.addClass, add);
                    options.removeClass = mergeClasses(options.removeClass, remove);
                    return $$animateQueue.push(element, "setClass", options);
                },
                animate: function(element, from, to, className, options) {
                    (options = prepareAnimateOptions(options)).from = options.from ? extend(options.from, from) : from;
                    options.to = options.to ? extend(options.to, to) : to;
                    className = className || "ng-inline-animate";
                    options.tempClasses = mergeClasses(options.tempClasses, className);
                    return $$animateQueue.push(element, "animate", options);
                }
            };
        } ];
    } ], $$AnimateAsyncRunFactoryProvider = function() {
        this.$get = [ "$$rAF", function($$rAF) {
            var waitQueue = [];
            function waitForTick(fn) {
                waitQueue.push(fn);
                1 < waitQueue.length || $$rAF(function() {
                    for (var i = 0; i < waitQueue.length; i++) waitQueue[i]();
                    waitQueue = [];
                });
            }
            return function() {
                var passed = !1;
                waitForTick(function() {
                    passed = !0;
                });
                return function(callback) {
                    passed ? callback() : waitForTick(callback);
                };
            };
        } ];
    }, $$AnimateRunnerFactoryProvider = function() {
        this.$get = [ "$q", "$sniffer", "$$animateAsyncRun", "$$isDocumentHidden", "$timeout", function($q, $sniffer, $$animateAsyncRun, $$isDocumentHidden, $timeout) {
            AnimateRunner.chain = function(chain, callback) {
                var index = 0;
                !function next() {
                    if (index === chain.length) {
                        callback(!0);
                        return;
                    }
                    chain[index](function(response) {
                        if (!1 !== response) {
                            index++;
                            next();
                        } else callback(!1);
                    });
                }();
            };
            AnimateRunner.all = function(runners, callback) {
                var count = 0, status = !0;
                forEach(runners, function(runner) {
                    runner.done(onProgress);
                });
                function onProgress(response) {
                    status = status && response;
                    ++count === runners.length && callback(status);
                }
            };
            function AnimateRunner(host) {
                this.setHost(host);
                var rafTick = $$animateAsyncRun();
                this._doneCallbacks = [];
                this._tick = function(fn) {
                    $$isDocumentHidden() ? function(fn) {
                        $timeout(fn, 0, !1);
                    }(fn) : rafTick(fn);
                };
                this._state = 0;
            }
            AnimateRunner.prototype = {
                setHost: function(host) {
                    this.host = host || {};
                },
                done: function(fn) {
                    2 === this._state ? fn() : this._doneCallbacks.push(fn);
                },
                progress: noop,
                getPromise: function() {
                    if (!this.promise) {
                        var self = this;
                        this.promise = $q(function(resolve, reject) {
                            self.done(function(status) {
                                !1 === status ? reject() : resolve();
                            });
                        });
                    }
                    return this.promise;
                },
                then: function(resolveHandler, rejectHandler) {
                    return this.getPromise().then(resolveHandler, rejectHandler);
                },
                catch: function(handler) {
                    return this.getPromise().catch(handler);
                },
                finally: function(handler) {
                    return this.getPromise().finally(handler);
                },
                pause: function() {
                    this.host.pause && this.host.pause();
                },
                resume: function() {
                    this.host.resume && this.host.resume();
                },
                end: function() {
                    this.host.end && this.host.end();
                    this._resolve(!0);
                },
                cancel: function() {
                    this.host.cancel && this.host.cancel();
                    this._resolve(!1);
                },
                complete: function(response) {
                    var self = this;
                    if (0 === self._state) {
                        self._state = 1;
                        self._tick(function() {
                            self._resolve(response);
                        });
                    }
                },
                _resolve: function(response) {
                    if (2 !== this._state) {
                        forEach(this._doneCallbacks, function(fn) {
                            fn(response);
                        });
                        this._doneCallbacks.length = 0;
                        this._state = 2;
                    }
                }
            };
            return AnimateRunner;
        } ];
    }, $CoreAnimateCssProvider = function() {
        this.$get = [ "$$rAF", "$q", "$$AnimateRunner", function($$rAF, $q, $$AnimateRunner) {
            return function(element, initialOptions) {
                var options = initialOptions || {};
                options.$$prepared || (options = copy(options));
                options.cleanupStyles && (options.from = options.to = null);
                if (options.from) {
                    element.css(options.from);
                    options.from = null;
                }
                var closed, runner = new $$AnimateRunner();
                return {
                    start: run,
                    end: run
                };
                function run() {
                    $$rAF(function() {
                        !function() {
                            if (options.addClass) {
                                element.addClass(options.addClass);
                                options.addClass = null;
                            }
                            if (options.removeClass) {
                                element.removeClass(options.removeClass);
                                options.removeClass = null;
                            }
                            if (options.to) {
                                element.css(options.to);
                                options.to = null;
                            }
                        }();
                        closed || runner.complete();
                        closed = !0;
                    });
                    return runner;
                }
            };
        } ];
    };
    function Browser(window, document, $log, $sniffer) {
        var self = this, location = window.location, history = window.history, setTimeout = window.setTimeout, clearTimeout = window.clearTimeout, pendingDeferIds = {};
        self.isMock = !1;
        var outstandingRequestCount = 0, outstandingRequestCallbacks = [];
        self.$$completeOutstandingRequest = completeOutstandingRequest;
        self.$$incOutstandingRequestCount = function() {
            outstandingRequestCount++;
        };
        function completeOutstandingRequest(fn) {
            try {
                fn.apply(null, sliceArgs(arguments, 1));
            } finally {
                if (0 === --outstandingRequestCount) for (;outstandingRequestCallbacks.length; ) try {
                    outstandingRequestCallbacks.pop()();
                } catch (e) {
                    $log.error(e);
                }
            }
        }
        self.notifyWhenNoOutstandingRequests = function(callback) {
            0 === outstandingRequestCount ? callback() : outstandingRequestCallbacks.push(callback);
        };
        var cachedState, lastHistoryState, lastBrowserUrl = location.href, baseElement = document.find("base"), pendingLocation = null, getCurrentState = $sniffer.history ? function() {
            try {
                return history.state;
            } catch (e) {}
        } : noop;
        cacheState();
        self.url = function(url, replace, state) {
            isUndefined(state) && (state = null);
            location !== window.location && (location = window.location);
            history !== window.history && (history = window.history);
            if (url) {
                var sameState = lastHistoryState === state;
                if (lastBrowserUrl === url && (!$sniffer.history || sameState)) return self;
                var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
                lastBrowserUrl = url;
                lastHistoryState = state;
                if (!$sniffer.history || sameBase && sameState) {
                    sameBase || (pendingLocation = url);
                    replace ? location.replace(url) : sameBase ? location.hash = function(url) {
                        var index = url.indexOf("#");
                        return -1 === index ? "" : url.substr(index);
                    }(url) : location.href = url;
                    location.href !== url && (pendingLocation = url);
                } else {
                    history[replace ? "replaceState" : "pushState"](state, "", url);
                    cacheState();
                }
                pendingLocation && (pendingLocation = url);
                return self;
            }
            return pendingLocation || location.href.replace(/%27/g, "'");
        };
        self.state = function() {
            return cachedState;
        };
        var urlChangeListeners = [], urlChangeInit = !1;
        function cacheStateAndFireUrlChange() {
            pendingLocation = null;
            fireStateOrUrlChange();
        }
        var lastCachedState = null;
        function cacheState() {
            equals(cachedState = isUndefined(cachedState = getCurrentState()) ? null : cachedState, lastCachedState) && (cachedState = lastCachedState);
            lastHistoryState = lastCachedState = cachedState;
        }
        function fireStateOrUrlChange() {
            var prevLastHistoryState = lastHistoryState;
            cacheState();
            if (lastBrowserUrl !== self.url() || prevLastHistoryState !== cachedState) {
                lastBrowserUrl = self.url();
                lastHistoryState = cachedState;
                forEach(urlChangeListeners, function(listener) {
                    listener(self.url(), cachedState);
                });
            }
        }
        self.onUrlChange = function(callback) {
            if (!urlChangeInit) {
                $sniffer.history && jqLite(window).on("popstate", cacheStateAndFireUrlChange);
                jqLite(window).on("hashchange", cacheStateAndFireUrlChange);
                urlChangeInit = !0;
            }
            urlChangeListeners.push(callback);
            return callback;
        };
        self.$$applicationDestroyed = function() {
            jqLite(window).off("hashchange popstate", cacheStateAndFireUrlChange);
        };
        self.$$checkUrlChange = fireStateOrUrlChange;
        self.baseHref = function() {
            var href = baseElement.attr("href");
            return href ? href.replace(/^(https?:)?\/\/[^/]*/, "") : "";
        };
        self.defer = function(fn, delay) {
            var timeoutId;
            outstandingRequestCount++;
            timeoutId = setTimeout(function() {
                delete pendingDeferIds[timeoutId];
                completeOutstandingRequest(fn);
            }, delay || 0);
            pendingDeferIds[timeoutId] = !0;
            return timeoutId;
        };
        self.defer.cancel = function(deferId) {
            if (pendingDeferIds[deferId]) {
                delete pendingDeferIds[deferId];
                clearTimeout(deferId);
                completeOutstandingRequest(noop);
                return !0;
            }
            return !1;
        };
    }
    function $BrowserProvider() {
        this.$get = [ "$window", "$log", "$sniffer", "$document", function($window, $log, $sniffer, $document) {
            return new Browser($window, $document, $log, $sniffer);
        } ];
    }
    function $CacheFactoryProvider() {
        this.$get = function() {
            var caches = {};
            function cacheFactory(cacheId, options) {
                if (cacheId in caches) throw minErr("$cacheFactory")("iid", "CacheId '{0}' is already taken!", cacheId);
                var size = 0, stats = extend({}, options, {
                    id: cacheId
                }), data = createMap(), capacity = options && options.capacity || Number.MAX_VALUE, lruHash = createMap(), freshEnd = null, staleEnd = null;
                return caches[cacheId] = {
                    put: function(key, value) {
                        if (!isUndefined(value)) {
                            if (capacity < Number.MAX_VALUE) {
                                refresh(lruHash[key] || (lruHash[key] = {
                                    key: key
                                }));
                            }
                            key in data || size++;
                            data[key] = value;
                            capacity < size && this.remove(staleEnd.key);
                            return value;
                        }
                    },
                    get: function(key) {
                        if (capacity < Number.MAX_VALUE) {
                            var lruEntry = lruHash[key];
                            if (!lruEntry) return;
                            refresh(lruEntry);
                        }
                        return data[key];
                    },
                    remove: function(key) {
                        if (capacity < Number.MAX_VALUE) {
                            var lruEntry = lruHash[key];
                            if (!lruEntry) return;
                            lruEntry === freshEnd && (freshEnd = lruEntry.p);
                            lruEntry === staleEnd && (staleEnd = lruEntry.n);
                            link(lruEntry.n, lruEntry.p);
                            delete lruHash[key];
                        }
                        if (key in data) {
                            delete data[key];
                            size--;
                        }
                    },
                    removeAll: function() {
                        data = createMap();
                        size = 0;
                        lruHash = createMap();
                        freshEnd = staleEnd = null;
                    },
                    destroy: function() {
                        lruHash = stats = data = null;
                        delete caches[cacheId];
                    },
                    info: function() {
                        return extend({}, stats, {
                            size: size
                        });
                    }
                };
                function refresh(entry) {
                    if (entry !== freshEnd) {
                        staleEnd ? staleEnd === entry && (staleEnd = entry.n) : staleEnd = entry;
                        link(entry.n, entry.p);
                        link(entry, freshEnd);
                        (freshEnd = entry).n = null;
                    }
                }
                function link(nextEntry, prevEntry) {
                    if (nextEntry !== prevEntry) {
                        nextEntry && (nextEntry.p = prevEntry);
                        prevEntry && (prevEntry.n = nextEntry);
                    }
                }
            }
            cacheFactory.info = function() {
                var info = {};
                forEach(caches, function(cache, cacheId) {
                    info[cacheId] = cache.info();
                });
                return info;
            };
            cacheFactory.get = function(cacheId) {
                return caches[cacheId];
            };
            return cacheFactory;
        };
    }
    function $TemplateCacheProvider() {
        this.$get = [ "$cacheFactory", function($cacheFactory) {
            return $cacheFactory("templates");
        } ];
    }
    var $compileMinErr = minErr("$compile");
    var _UNINITIALIZED_VALUE = new function() {}();
    $CompileProvider.$inject = [ "$provide", "$$sanitizeUriProvider" ];
    function $CompileProvider($provide, $$sanitizeUriProvider) {
        var hasDirectives = {}, COMMENT_DIRECTIVE_REGEXP = /^\s*directive:\s*([\w-]+)\s+(.*)$/, CLASS_DIRECTIVE_REGEXP = /(([\w-]+)(?::([^;]+))?;?)/, ALL_OR_NOTHING_ATTRS = function(str) {
            var i, obj = {}, items = str.split(",");
            for (i = 0; i < items.length; i++) obj[items[i]] = !0;
            return obj;
        }("ngSrc,ngSrcset,src,srcset"), REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/, EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/, bindingCache = createMap();
        function parseIsolateBindings(scope, directiveName, isController) {
            var LOCAL_REGEXP = /^([@&<]|=(\*?))(\??)\s*([\w$]*)$/, bindings = createMap();
            forEach(scope, function(definition, scopeName) {
                if ((definition = definition.trim()) in bindingCache) bindings[scopeName] = bindingCache[definition]; else {
                    var match = definition.match(LOCAL_REGEXP);
                    if (!match) throw $compileMinErr("iscp", "Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}", directiveName, scopeName, definition, isController ? "controller bindings definition" : "isolate scope definition");
                    bindings[scopeName] = {
                        mode: match[1][0],
                        collection: "*" === match[2],
                        optional: "?" === match[3],
                        attrName: match[4] || scopeName
                    };
                    match[4] && (bindingCache[definition] = bindings[scopeName]);
                }
            });
            return bindings;
        }
        function parseDirectiveBindings(directive, directiveName) {
            var bindings = {
                isolateScope: null,
                bindToController: null
            };
            if (isObject(directive.scope)) if (!0 === directive.bindToController) {
                bindings.bindToController = parseIsolateBindings(directive.scope, directiveName, !0);
                bindings.isolateScope = {};
            } else bindings.isolateScope = parseIsolateBindings(directive.scope, directiveName, !1);
            isObject(directive.bindToController) && (bindings.bindToController = parseIsolateBindings(directive.bindToController, directiveName, !0));
            if (bindings.bindToController && !directive.controller) throw $compileMinErr("noctrl", "Cannot bind to controller without directive '{0}'s controller.", directiveName);
            return bindings;
        }
        this.directive = function registerDirective(name, directiveFactory) {
            assertArg(name, "name");
            assertNotHasOwnProperty(name, "directive");
            if (isString(name)) {
                !function(name) {
                    var letter = name.charAt(0);
                    if (!letter || letter !== lowercase(letter)) throw $compileMinErr("baddir", "Directive/Component name '{0}' is invalid. The first character must be a lowercase letter", name);
                    if (name !== name.trim()) throw $compileMinErr("baddir", "Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces", name);
                }(name);
                assertArg(directiveFactory, "directiveFactory");
                if (!hasDirectives.hasOwnProperty(name)) {
                    hasDirectives[name] = [];
                    $provide.factory(name + "Directive", [ "$injector", "$exceptionHandler", function($injector, $exceptionHandler) {
                        var directives = [];
                        forEach(hasDirectives[name], function(directiveFactory, index) {
                            try {
                                var directive = $injector.invoke(directiveFactory);
                                isFunction(directive) ? directive = {
                                    compile: valueFn(directive)
                                } : !directive.compile && directive.link && (directive.compile = valueFn(directive.link));
                                directive.priority = directive.priority || 0;
                                directive.index = index;
                                directive.name = directive.name || name;
                                directive.require = function(directive) {
                                    var require = directive.require || directive.controller && directive.name;
                                    !isArray(require) && isObject(require) && forEach(require, function(value, key) {
                                        var match = value.match(REQUIRE_PREFIX_REGEXP);
                                        value.substring(match[0].length) || (require[key] = match[0] + key);
                                    });
                                    return require;
                                }(directive);
                                directive.restrict = function(restrict, name) {
                                    if (restrict && (!isString(restrict) || !/[EACM]/.test(restrict))) throw $compileMinErr("badrestrict", "Restrict property '{0}' of directive '{1}' is invalid", restrict, name);
                                    return restrict || "EA";
                                }(directive.restrict, name);
                                directive.$$moduleName = directiveFactory.$$moduleName;
                                directives.push(directive);
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                        });
                        return directives;
                    } ]);
                }
                hasDirectives[name].push(directiveFactory);
            } else forEach(name, reverseParams(registerDirective));
            return this;
        };
        this.component = function registerComponent(name, options) {
            if (!isString(name)) {
                forEach(name, reverseParams(bind(this, registerComponent)));
                return this;
            }
            var controller = options.controller || function() {};
            function factory($injector) {
                function makeInjectable(fn) {
                    return isFunction(fn) || isArray(fn) ? function(tElement, tAttrs) {
                        return $injector.invoke(fn, this, {
                            $element: tElement,
                            $attrs: tAttrs
                        });
                    } : fn;
                }
                var template = options.template || options.templateUrl ? options.template : "", ddo = {
                    controller: controller,
                    controllerAs: function(controller, ident) {
                        if (ident && isString(ident)) return ident;
                        if (isString(controller)) {
                            var match = CNTRL_REG.exec(controller);
                            if (match) return match[3];
                        }
                    }(options.controller) || options.controllerAs || "$ctrl",
                    template: makeInjectable(template),
                    templateUrl: makeInjectable(options.templateUrl),
                    transclude: options.transclude,
                    scope: {},
                    bindToController: options.bindings || {},
                    restrict: "E",
                    require: options.require
                };
                forEach(options, function(val, key) {
                    "$" === key.charAt(0) && (ddo[key] = val);
                });
                return ddo;
            }
            forEach(options, function(val, key) {
                if ("$" === key.charAt(0)) {
                    factory[key] = val;
                    isFunction(controller) && (controller[key] = val);
                }
            });
            factory.$inject = [ "$injector" ];
            return this.directive(name, factory);
        };
        this.aHrefSanitizationWhitelist = function(regexp) {
            if (isDefined(regexp)) {
                $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
                return this;
            }
            return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
        };
        this.imgSrcSanitizationWhitelist = function(regexp) {
            if (isDefined(regexp)) {
                $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
                return this;
            }
            return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
        };
        var debugInfoEnabled = !0, preAssignBindingsEnabled = !(this.debugInfoEnabled = function(enabled) {
            if (isDefined(enabled)) {
                debugInfoEnabled = enabled;
                return this;
            }
            return debugInfoEnabled;
        }), strictComponentBindingsEnabled = !(this.preAssignBindingsEnabled = function(enabled) {
            if (isDefined(enabled)) {
                preAssignBindingsEnabled = enabled;
                return this;
            }
            return preAssignBindingsEnabled;
        });
        this.strictComponentBindingsEnabled = function(enabled) {
            if (isDefined(enabled)) {
                strictComponentBindingsEnabled = enabled;
                return this;
            }
            return strictComponentBindingsEnabled;
        };
        var TTL = 10;
        this.onChangesTtl = function(value) {
            if (arguments.length) {
                TTL = value;
                return this;
            }
            return TTL;
        };
        var commentDirectivesEnabledConfig = !0;
        this.commentDirectivesEnabled = function(value) {
            if (arguments.length) {
                commentDirectivesEnabledConfig = value;
                return this;
            }
            return commentDirectivesEnabledConfig;
        };
        var cssClassDirectivesEnabledConfig = !0;
        this.cssClassDirectivesEnabled = function(value) {
            if (arguments.length) {
                cssClassDirectivesEnabledConfig = value;
                return this;
            }
            return cssClassDirectivesEnabledConfig;
        };
        this.$get = [ "$injector", "$interpolate", "$exceptionHandler", "$templateRequest", "$parse", "$controller", "$rootScope", "$sce", "$animate", "$$sanitizeUri", function($injector, $interpolate, $exceptionHandler, $templateRequest, $parse, $controller, $rootScope, $sce, $animate, $$sanitizeUri) {
            var onChangesQueue, SIMPLE_ATTR_NAME = /^\w/, specialAttrHolder = window.document.createElement("div"), commentDirectivesEnabled = commentDirectivesEnabledConfig, cssClassDirectivesEnabled = cssClassDirectivesEnabledConfig, onChangesTtl = TTL;
            function flushOnChangesQueue() {
                try {
                    if (!--onChangesTtl) {
                        onChangesQueue = void 0;
                        throw $compileMinErr("infchng", "{0} $onChanges() iterations reached. Aborting!\n", TTL);
                    }
                    $rootScope.$apply(function() {
                        for (var i = 0, ii = onChangesQueue.length; i < ii; ++i) try {
                            onChangesQueue[i]();
                        } catch (e) {
                            $exceptionHandler(e);
                        }
                        onChangesQueue = void 0;
                    });
                } finally {
                    onChangesTtl++;
                }
            }
            function Attributes(element, attributesToCopy) {
                if (attributesToCopy) {
                    var i, l, key, keys = Object.keys(attributesToCopy);
                    for (i = 0, l = keys.length; i < l; i++) this[key = keys[i]] = attributesToCopy[key];
                } else this.$attr = {};
                this.$$element = element;
            }
            Attributes.prototype = {
                $normalize: directiveNormalize,
                $addClass: function(classVal) {
                    classVal && 0 < classVal.length && $animate.addClass(this.$$element, classVal);
                },
                $removeClass: function(classVal) {
                    classVal && 0 < classVal.length && $animate.removeClass(this.$$element, classVal);
                },
                $updateClass: function(newClasses, oldClasses) {
                    var toAdd = tokenDifference(newClasses, oldClasses);
                    toAdd && toAdd.length && $animate.addClass(this.$$element, toAdd);
                    var toRemove = tokenDifference(oldClasses, newClasses);
                    toRemove && toRemove.length && $animate.removeClass(this.$$element, toRemove);
                },
                $set: function(key, value, writeAttr, attrName) {
                    var nodeName, booleanKey = getBooleanAttrName(this.$$element[0], key), aliasedKey = ALIASED_ATTR[key], observer = key;
                    if (booleanKey) {
                        this.$$element.prop(key, value);
                        attrName = booleanKey;
                    } else if (aliasedKey) {
                        this[aliasedKey] = value;
                        observer = aliasedKey;
                    }
                    this[key] = value;
                    attrName ? this.$attr[key] = attrName : (attrName = this.$attr[key]) || (this.$attr[key] = attrName = snake_case(key, "-"));
                    if ("a" === (nodeName = nodeName_(this.$$element)) && ("href" === key || "xlinkHref" === key) || "img" === nodeName && "src" === key) this[key] = value = null == value ? value : $$sanitizeUri(value, "src" === key); else if ("img" === nodeName && "srcset" === key && isDefined(value)) {
                        for (var result = "", trimmedSrcset = trim(value), pattern = /\s/.test(trimmedSrcset) ? /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/ : /(,)/, rawUris = trimmedSrcset.split(pattern), nbrUrisWith2parts = Math.floor(rawUris.length / 2), i = 0; i < nbrUrisWith2parts; i++) {
                            var innerIdx = 2 * i;
                            result += $$sanitizeUri(trim(rawUris[innerIdx]), !0);
                            result += " " + trim(rawUris[innerIdx + 1]);
                        }
                        var lastTuple = trim(rawUris[2 * i]).split(/\s/);
                        result += $$sanitizeUri(trim(lastTuple[0]), !0);
                        2 === lastTuple.length && (result += " " + trim(lastTuple[1]));
                        this[key] = value = result;
                    }
                    !1 !== writeAttr && (null == value ? this.$$element.removeAttr(attrName) : SIMPLE_ATTR_NAME.test(attrName) ? this.$$element.attr(attrName, value) : function(element, attrName, value) {
                        specialAttrHolder.innerHTML = "<span " + attrName + ">";
                        var attributes = specialAttrHolder.firstChild.attributes, attribute = attributes[0];
                        attributes.removeNamedItem(attribute.name);
                        attribute.value = value;
                        element.attributes.setNamedItem(attribute);
                    }(this.$$element[0], attrName, value));
                    var $$observers = this.$$observers;
                    $$observers && forEach($$observers[observer], function(fn) {
                        try {
                            fn(value);
                        } catch (e) {
                            $exceptionHandler(e);
                        }
                    });
                },
                $observe: function(key, fn) {
                    var attrs = this, $$observers = attrs.$$observers || (attrs.$$observers = createMap()), listeners = $$observers[key] || ($$observers[key] = []);
                    listeners.push(fn);
                    $rootScope.$evalAsync(function() {
                        listeners.$$inter || !attrs.hasOwnProperty(key) || isUndefined(attrs[key]) || fn(attrs[key]);
                    });
                    return function() {
                        arrayRemove(listeners, fn);
                    };
                }
            };
            function safeAddClass($element, className) {
                try {
                    $element.addClass(className);
                } catch (e) {}
            }
            var startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), denormalizeTemplate = "{{" === startSymbol && "}}" === endSymbol ? identity : function(template) {
                return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
            }, NG_ATTR_BINDING = /^ngAttr[A-Z]/, MULTI_ELEMENT_DIR_RE = /^(.+)Start$/;
            compile.$$addBindingInfo = debugInfoEnabled ? function($element, binding) {
                var bindings = $element.data("$binding") || [];
                isArray(binding) ? bindings = bindings.concat(binding) : bindings.push(binding);
                $element.data("$binding", bindings);
            } : noop;
            compile.$$addBindingClass = debugInfoEnabled ? function($element) {
                safeAddClass($element, "ng-binding");
            } : noop;
            compile.$$addScopeInfo = debugInfoEnabled ? function($element, scope, isolated, noTemplate) {
                var dataName = isolated ? noTemplate ? "$isolateScopeNoTemplate" : "$isolateScope" : "$scope";
                $element.data(dataName, scope);
            } : noop;
            compile.$$addScopeClass = debugInfoEnabled ? function($element, isolated) {
                safeAddClass($element, isolated ? "ng-isolate-scope" : "ng-scope");
            } : noop;
            compile.$$createComment = function(directiveName, comment) {
                var content = "";
                if (debugInfoEnabled) {
                    content = " " + (directiveName || "") + ": ";
                    comment && (content += comment + " ");
                }
                return window.document.createComment(content);
            };
            return compile;
            function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
                $compileNodes instanceof jqLite || ($compileNodes = jqLite($compileNodes));
                var compositeLinkFn = compileNodes($compileNodes, transcludeFn, $compileNodes, maxPriority, ignoreDirective, previousCompileContext);
                compile.$$addScopeClass($compileNodes);
                var namespace = null;
                return function(scope, cloneConnectFn, options) {
                    if (!$compileNodes) throw $compileMinErr("multilink", "This element has already been linked.");
                    assertArg(scope, "scope");
                    previousCompileContext && previousCompileContext.needsNewScope && (scope = scope.$parent.$new());
                    var parentElement, node, $linkNode, parentBoundTranscludeFn = (options = options || {}).parentBoundTranscludeFn, transcludeControllers = options.transcludeControllers, futureParentElement = options.futureParentElement;
                    parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude && (parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude);
                    namespace || (namespace = (node = (parentElement = futureParentElement) && parentElement[0]) && "foreignobject" !== nodeName_(node) && toString.call(node).match(/SVG/) ? "svg" : "html");
                    $linkNode = "html" !== namespace ? jqLite(wrapTemplate(namespace, jqLite("<div></div>").append($compileNodes).html())) : cloneConnectFn ? JQLitePrototype.clone.call($compileNodes) : $compileNodes;
                    if (transcludeControllers) for (var controllerName in transcludeControllers) $linkNode.data("$" + controllerName + "Controller", transcludeControllers[controllerName].instance);
                    compile.$$addScopeInfo($linkNode, scope);
                    cloneConnectFn && cloneConnectFn($linkNode, scope);
                    compositeLinkFn && compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
                    cloneConnectFn || ($compileNodes = compositeLinkFn = null);
                    return $linkNode;
                };
            }
            function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective, previousCompileContext) {
                for (var attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound, linkFns = [], notLiveList = isArray(nodeList) || nodeList instanceof jqLite, i = 0; i < nodeList.length; i++) {
                    attrs = new Attributes();
                    11 === msie && mergeConsecutiveTextNodes(nodeList, i, notLiveList);
                    (nodeLinkFn = (directives = collectDirectives(nodeList[i], [], attrs, 0 === i ? maxPriority : void 0, ignoreDirective)).length ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement, null, [], [], previousCompileContext) : null) && nodeLinkFn.scope && compile.$$addScopeClass(attrs.$$element);
                    childLinkFn = nodeLinkFn && nodeLinkFn.terminal || !(childNodes = nodeList[i].childNodes) || !childNodes.length ? null : compileNodes(childNodes, nodeLinkFn ? (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement) && nodeLinkFn.transclude : transcludeFn);
                    if (nodeLinkFn || childLinkFn) {
                        linkFns.push(i, nodeLinkFn, childLinkFn);
                        linkFnFound = !0;
                        nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
                    }
                    previousCompileContext = null;
                }
                return linkFnFound ? function(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
                    var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn, stableNodeList;
                    if (nodeLinkFnFound) {
                        var nodeListLength = nodeList.length;
                        stableNodeList = new Array(nodeListLength);
                        for (i = 0; i < linkFns.length; i += 3) {
                            idx = linkFns[i];
                            stableNodeList[idx] = nodeList[idx];
                        }
                    } else stableNodeList = nodeList;
                    for (i = 0, ii = linkFns.length; i < ii; ) {
                        node = stableNodeList[linkFns[i++]];
                        nodeLinkFn = linkFns[i++];
                        childLinkFn = linkFns[i++];
                        if (nodeLinkFn) {
                            if (nodeLinkFn.scope) {
                                childScope = scope.$new();
                                compile.$$addScopeInfo(jqLite(node), childScope);
                            } else childScope = scope;
                            childBoundTranscludeFn = nodeLinkFn.transcludeOnThisElement ? createBoundTranscludeFn(scope, nodeLinkFn.transclude, parentBoundTranscludeFn) : !nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn ? parentBoundTranscludeFn : !parentBoundTranscludeFn && transcludeFn ? createBoundTranscludeFn(scope, transcludeFn) : null;
                            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);
                        } else childLinkFn && childLinkFn(scope, node.childNodes, void 0, parentBoundTranscludeFn);
                    }
                } : null;
            }
            function mergeConsecutiveTextNodes(nodeList, idx, notLiveList) {
                var sibling, node = nodeList[idx], parent = node.parentNode;
                if (node.nodeType === NODE_TYPE_TEXT) for (;(sibling = parent ? node.nextSibling : nodeList[idx + 1]) && sibling.nodeType === NODE_TYPE_TEXT; ) {
                    node.nodeValue = node.nodeValue + sibling.nodeValue;
                    sibling.parentNode && sibling.parentNode.removeChild(sibling);
                    notLiveList && sibling === nodeList[idx + 1] && nodeList.splice(idx + 1, 1);
                }
            }
            function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {
                function boundTranscludeFn(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {
                    transcludedScope || ((transcludedScope = scope.$new(!1, containingScope)).$$transcluded = !0);
                    return transcludeFn(transcludedScope, cloneFn, {
                        parentBoundTranscludeFn: previousBoundTranscludeFn,
                        transcludeControllers: controllers,
                        futureParentElement: futureParentElement
                    });
                }
                var boundSlots = boundTranscludeFn.$$slots = createMap();
                for (var slotName in transcludeFn.$$slots) transcludeFn.$$slots[slotName] ? boundSlots[slotName] = createBoundTranscludeFn(scope, transcludeFn.$$slots[slotName], previousBoundTranscludeFn) : boundSlots[slotName] = null;
                return boundTranscludeFn;
            }
            function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
                var match, nodeName, className, nodeType = node.nodeType, attrsMap = attrs.$attr;
                switch (nodeType) {
                  case NODE_TYPE_ELEMENT:
                    addDirective(directives, directiveNormalize(nodeName = nodeName_(node)), "E", maxPriority, ignoreDirective);
                    for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes, j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
                        var attrStartName = !1, attrEndName = !1;
                        name = (attr = nAttrs[j]).name;
                        value = attr.value;
                        ngAttrName = directiveNormalize(name);
                        (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) && (name = name.replace(PREFIX_REGEXP, "").substr(8).replace(/_(.)/g, function(match, letter) {
                            return letter.toUpperCase();
                        }));
                        var multiElementMatch = ngAttrName.match(MULTI_ELEMENT_DIR_RE);
                        if (multiElementMatch && directiveIsMultiElement(multiElementMatch[1])) {
                            attrEndName = (attrStartName = name).substr(0, name.length - 5) + "end";
                            name = name.substr(0, name.length - 6);
                        }
                        attrsMap[nName = directiveNormalize(name.toLowerCase())] = name;
                        if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                            attrs[nName] = value;
                            getBooleanAttrName(node, nName) && (attrs[nName] = !0);
                        }
                        addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
                        addDirective(directives, nName, "A", maxPriority, ignoreDirective, attrStartName, attrEndName);
                    }
                    "input" === nodeName && "hidden" === node.getAttribute("type") && node.setAttribute("autocomplete", "off");
                    if (!cssClassDirectivesEnabled) break;
                    isObject(className = node.className) && (className = className.animVal);
                    if (isString(className) && "" !== className) for (;match = CLASS_DIRECTIVE_REGEXP.exec(className); ) {
                        addDirective(directives, nName = directiveNormalize(match[2]), "C", maxPriority, ignoreDirective) && (attrs[nName] = trim(match[3]));
                        className = className.substr(match.index + match[0].length);
                    }
                    break;

                  case NODE_TYPE_TEXT:
                    !function(directives, text) {
                        var interpolateFn = $interpolate(text, !0);
                        interpolateFn && directives.push({
                            priority: 0,
                            compile: function(templateNode) {
                                var templateNodeParent = templateNode.parent(), hasCompileParent = !!templateNodeParent.length;
                                hasCompileParent && compile.$$addBindingClass(templateNodeParent);
                                return function(scope, node) {
                                    var parent = node.parent();
                                    hasCompileParent || compile.$$addBindingClass(parent);
                                    compile.$$addBindingInfo(parent, interpolateFn.expressions);
                                    scope.$watch(interpolateFn, function(value) {
                                        node[0].nodeValue = value;
                                    });
                                };
                            }
                        });
                    }(directives, node.nodeValue);
                    break;

                  case NODE_TYPE_COMMENT:
                    if (!commentDirectivesEnabled) break;
                    !function(node, directives, attrs, maxPriority, ignoreDirective) {
                        try {
                            var match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
                            if (match) {
                                var nName = directiveNormalize(match[1]);
                                addDirective(directives, nName, "M", maxPriority, ignoreDirective) && (attrs[nName] = trim(match[2]));
                            }
                        } catch (e) {}
                    }(node, directives, attrs, maxPriority, ignoreDirective);
                }
                directives.sort(byPriority);
                return directives;
            }
            function groupScan(node, attrStart, attrEnd) {
                var nodes = [], depth = 0;
                if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) do {
                    if (!node) throw $compileMinErr("uterdir", "Unterminated attribute, found '{0}' but no matching '{1}' found.", attrStart, attrEnd);
                    if (node.nodeType === NODE_TYPE_ELEMENT) {
                        node.hasAttribute(attrStart) && depth++;
                        node.hasAttribute(attrEnd) && depth--;
                    }
                    nodes.push(node);
                    node = node.nextSibling;
                } while (0 < depth); else nodes.push(node);
                return jqLite(nodes);
            }
            function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
                return function(scope, element, attrs, controllers, transcludeFn) {
                    element = groupScan(element[0], attrStart, attrEnd);
                    return linkFn(scope, element, attrs, controllers, transcludeFn);
                };
            }
            function compilationGenerator(eager, $compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
                var compiled;
                return eager ? compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) : function() {
                    if (!compiled) {
                        compiled = compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);
                        $compileNodes = transcludeFn = previousCompileContext = null;
                    }
                    return compiled.apply(this, arguments);
                };
            }
            function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn, jqCollection, originalReplaceDirective, preLinkFns, postLinkFns, previousCompileContext) {
                previousCompileContext = previousCompileContext || {};
                for (var directive, directiveName, $template, linkFn, directiveValue, terminalPriority = -Number.MAX_VALUE, newScopeDirective = previousCompileContext.newScopeDirective, controllerDirectives = previousCompileContext.controllerDirectives, newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective, templateDirective = previousCompileContext.templateDirective, nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective, hasTranscludeDirective = !1, hasTemplate = !1, hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective, $compileNode = templateAttrs.$$element = jqLite(compileNode), replaceDirective = originalReplaceDirective, childTranscludeFn = transcludeFn, didScanForMultipleTransclusion = !1, mightHaveMultipleTransclusionError = !1, i = 0, ii = directives.length; i < ii; i++) {
                    var attrStart = (directive = directives[i]).$$start, attrEnd = directive.$$end;
                    attrStart && ($compileNode = groupScan(compileNode, attrStart, attrEnd));
                    $template = void 0;
                    if (terminalPriority > directive.priority) break;
                    if (directiveValue = directive.scope) {
                        if (!directive.templateUrl) if (isObject(directiveValue)) {
                            assertNoDuplicate("new/isolated scope", newIsolateScopeDirective || newScopeDirective, directive, $compileNode);
                            newIsolateScopeDirective = directive;
                        } else assertNoDuplicate("new/isolated scope", newIsolateScopeDirective, directive, $compileNode);
                        newScopeDirective = newScopeDirective || directive;
                    }
                    directiveName = directive.name;
                    if (!didScanForMultipleTransclusion && (directive.replace && (directive.templateUrl || directive.template) || directive.transclude && !directive.$$tlb)) {
                        for (var candidateDirective, scanningIndex = i + 1; candidateDirective = directives[scanningIndex++]; ) if (candidateDirective.transclude && !candidateDirective.$$tlb || candidateDirective.replace && (candidateDirective.templateUrl || candidateDirective.template)) {
                            mightHaveMultipleTransclusionError = !0;
                            break;
                        }
                        didScanForMultipleTransclusion = !0;
                    }
                    if (!directive.templateUrl && directive.controller) {
                        controllerDirectives = controllerDirectives || createMap();
                        assertNoDuplicate("'" + directiveName + "' controller", controllerDirectives[directiveName], directive, $compileNode);
                        controllerDirectives[directiveName] = directive;
                    }
                    if (directiveValue = directive.transclude) {
                        hasTranscludeDirective = !0;
                        if (!directive.$$tlb) {
                            assertNoDuplicate("transclusion", nonTlbTranscludeDirective, directive, $compileNode);
                            nonTlbTranscludeDirective = directive;
                        }
                        if ("element" === directiveValue) {
                            hasElementTranscludeDirective = !0;
                            terminalPriority = directive.priority;
                            $template = $compileNode;
                            $compileNode = templateAttrs.$$element = jqLite(compile.$$createComment(directiveName, templateAttrs[directiveName]));
                            compileNode = $compileNode[0];
                            replaceWith(jqCollection, sliceArgs($template), compileNode);
                            $template[0].$$parentNode = $template[0].parentNode;
                            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, terminalPriority, replaceDirective && replaceDirective.name, {
                                nonTlbTranscludeDirective: nonTlbTranscludeDirective
                            });
                        } else {
                            var slots = createMap();
                            if (isObject(directiveValue)) {
                                $template = [];
                                var slotMap = createMap(), filledSlots = createMap();
                                forEach(directiveValue, function(elementSelector, slotName) {
                                    var optional = "?" === elementSelector.charAt(0);
                                    elementSelector = optional ? elementSelector.substring(1) : elementSelector;
                                    slotMap[elementSelector] = slotName;
                                    slots[slotName] = null;
                                    filledSlots[slotName] = optional;
                                });
                                forEach($compileNode.contents(), function(node) {
                                    var slotName = slotMap[directiveNormalize(nodeName_(node))];
                                    if (slotName) {
                                        filledSlots[slotName] = !0;
                                        slots[slotName] = slots[slotName] || [];
                                        slots[slotName].push(node);
                                    } else $template.push(node);
                                });
                                forEach(filledSlots, function(filled, slotName) {
                                    if (!filled) throw $compileMinErr("reqslot", "Required transclusion slot `{0}` was not filled.", slotName);
                                });
                                for (var slotName in slots) slots[slotName] && (slots[slotName] = compilationGenerator(mightHaveMultipleTransclusionError, slots[slotName], transcludeFn));
                            } else $template = jqLite(jqLiteClone(compileNode)).contents();
                            $compileNode.empty();
                            (childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, void 0, void 0, {
                                needsNewScope: directive.$$isolateScope || directive.$$newScope
                            })).$$slots = slots;
                        }
                    }
                    if (directive.template) {
                        hasTemplate = !0;
                        assertNoDuplicate("template", templateDirective, directive, $compileNode);
                        directiveValue = isFunction((templateDirective = directive).template) ? directive.template($compileNode, templateAttrs) : directive.template;
                        directiveValue = denormalizeTemplate(directiveValue);
                        if (directive.replace) {
                            replaceDirective = directive;
                            $template = jqLiteIsTextNode(directiveValue) ? [] : removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
                            compileNode = $template[0];
                            if (1 !== $template.length || compileNode.nodeType !== NODE_TYPE_ELEMENT) throw $compileMinErr("tplrt", "Template for directive '{0}' must have exactly one root element. {1}", directiveName, "");
                            replaceWith(jqCollection, $compileNode, compileNode);
                            var newTemplateAttrs = {
                                $attr: {}
                            }, templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs), unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));
                            (newIsolateScopeDirective || newScopeDirective) && markDirectiveScope(templateDirectives, newIsolateScopeDirective, newScopeDirective);
                            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
                            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);
                            ii = directives.length;
                        } else $compileNode.html(directiveValue);
                    }
                    if (directive.templateUrl) {
                        hasTemplate = !0;
                        assertNoDuplicate("template", templateDirective, directive, $compileNode);
                        (templateDirective = directive).replace && (replaceDirective = directive);
                        nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode, templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
                            controllerDirectives: controllerDirectives,
                            newScopeDirective: newScopeDirective !== directive && newScopeDirective,
                            newIsolateScopeDirective: newIsolateScopeDirective,
                            templateDirective: templateDirective,
                            nonTlbTranscludeDirective: nonTlbTranscludeDirective
                        });
                        ii = directives.length;
                    } else if (directive.compile) try {
                        linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
                        var context = directive.$$originalDirective || directive;
                        isFunction(linkFn) ? addLinkFns(null, bind(context, linkFn), attrStart, attrEnd) : linkFn && addLinkFns(bind(context, linkFn.pre), bind(context, linkFn.post), attrStart, attrEnd);
                    } catch (e) {
                        $exceptionHandler(e, startingTag($compileNode));
                    }
                    if (directive.terminal) {
                        nodeLinkFn.terminal = !0;
                        terminalPriority = Math.max(terminalPriority, directive.priority);
                    }
                }
                nodeLinkFn.scope = newScopeDirective && !0 === newScopeDirective.scope;
                nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
                nodeLinkFn.templateOnThisElement = hasTemplate;
                nodeLinkFn.transclude = childTranscludeFn;
                previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;
                return nodeLinkFn;
                function addLinkFns(pre, post, attrStart, attrEnd) {
                    if (pre) {
                        attrStart && (pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd));
                        pre.require = directive.require;
                        pre.directiveName = directiveName;
                        (newIsolateScopeDirective === directive || directive.$$isolateScope) && (pre = cloneAndAnnotateFn(pre, {
                            isolateScope: !0
                        }));
                        preLinkFns.push(pre);
                    }
                    if (post) {
                        attrStart && (post = groupElementsLinkFnWrapper(post, attrStart, attrEnd));
                        post.require = directive.require;
                        post.directiveName = directiveName;
                        (newIsolateScopeDirective === directive || directive.$$isolateScope) && (post = cloneAndAnnotateFn(post, {
                            isolateScope: !0
                        }));
                        postLinkFns.push(post);
                    }
                }
                function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
                    var i, ii, linkFn, isolateScope, controllerScope, elementControllers, transcludeFn, $element, attrs, scopeBindingInfo;
                    compileNode === linkNode ? $element = (attrs = templateAttrs).$$element : attrs = new Attributes($element = jqLite(linkNode), templateAttrs);
                    controllerScope = scope;
                    newIsolateScopeDirective ? isolateScope = scope.$new(!0) : newScopeDirective && (controllerScope = scope.$parent);
                    if (boundTranscludeFn) {
                        (transcludeFn = function(scope, cloneAttachFn, futureParentElement, slotName) {
                            var transcludeControllers;
                            if (!isScope(scope)) {
                                slotName = futureParentElement;
                                futureParentElement = cloneAttachFn;
                                cloneAttachFn = scope;
                                scope = void 0;
                            }
                            hasElementTranscludeDirective && (transcludeControllers = elementControllers);
                            futureParentElement || (futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element);
                            {
                                if (!slotName) return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
                                var slotTranscludeFn = boundTranscludeFn.$$slots[slotName];
                                if (slotTranscludeFn) return slotTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
                                if (isUndefined(slotTranscludeFn)) throw $compileMinErr("noslot", 'No parent directive that requires a transclusion with slot name "{0}". Element: {1}', slotName, startingTag($element));
                            }
                        }).$$boundTransclude = boundTranscludeFn;
                        transcludeFn.isSlotFilled = function(slotName) {
                            return !!boundTranscludeFn.$$slots[slotName];
                        };
                    }
                    controllerDirectives && (elementControllers = function($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective) {
                        var elementControllers = createMap();
                        for (var controllerKey in controllerDirectives) {
                            var directive = controllerDirectives[controllerKey], locals = {
                                $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
                                $element: $element,
                                $attrs: attrs,
                                $transclude: transcludeFn
                            }, controller = directive.controller;
                            "@" === controller && (controller = attrs[directive.name]);
                            var controllerInstance = $controller(controller, locals, !0, directive.controllerAs);
                            elementControllers[directive.name] = controllerInstance;
                            $element.data("$" + directive.name + "Controller", controllerInstance.instance);
                        }
                        return elementControllers;
                    }($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective));
                    if (newIsolateScopeDirective) {
                        compile.$$addScopeInfo($element, isolateScope, !0, !(templateDirective && (templateDirective === newIsolateScopeDirective || templateDirective === newIsolateScopeDirective.$$originalDirective)));
                        compile.$$addScopeClass($element, !0);
                        isolateScope.$$isolateBindings = newIsolateScopeDirective.$$isolateBindings;
                        (scopeBindingInfo = initializeDirectiveBindings(scope, attrs, isolateScope, isolateScope.$$isolateBindings, newIsolateScopeDirective)).removeWatches && isolateScope.$on("$destroy", scopeBindingInfo.removeWatches);
                    }
                    for (var name in elementControllers) {
                        var controllerDirective = controllerDirectives[name], controller = elementControllers[name], bindings = controllerDirective.$$bindings.bindToController;
                        if (preAssignBindingsEnabled) {
                            controller.bindingInfo = bindings ? initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective) : {};
                            var controllerResult = controller();
                            if (controllerResult !== controller.instance) {
                                controller.instance = controllerResult;
                                $element.data("$" + controllerDirective.name + "Controller", controllerResult);
                                controller.bindingInfo.removeWatches && controller.bindingInfo.removeWatches();
                                controller.bindingInfo = initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
                            }
                        } else {
                            controller.instance = controller();
                            $element.data("$" + controllerDirective.name + "Controller", controller.instance);
                            controller.bindingInfo = initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
                        }
                    }
                    forEach(controllerDirectives, function(controllerDirective, name) {
                        var require = controllerDirective.require;
                        controllerDirective.bindToController && !isArray(require) && isObject(require) && extend(elementControllers[name].instance, getControllers(name, require, $element, elementControllers));
                    });
                    forEach(elementControllers, function(controller) {
                        var controllerInstance = controller.instance;
                        if (isFunction(controllerInstance.$onChanges)) try {
                            controllerInstance.$onChanges(controller.bindingInfo.initialChanges);
                        } catch (e) {
                            $exceptionHandler(e);
                        }
                        if (isFunction(controllerInstance.$onInit)) try {
                            controllerInstance.$onInit();
                        } catch (e) {
                            $exceptionHandler(e);
                        }
                        if (isFunction(controllerInstance.$doCheck)) {
                            controllerScope.$watch(function() {
                                controllerInstance.$doCheck();
                            });
                            controllerInstance.$doCheck();
                        }
                        isFunction(controllerInstance.$onDestroy) && controllerScope.$on("$destroy", function() {
                            controllerInstance.$onDestroy();
                        });
                    });
                    for (i = 0, ii = preLinkFns.length; i < ii; i++) invokeLinkFn(linkFn = preLinkFns[i], linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
                    var scopeToChild = scope;
                    newIsolateScopeDirective && (newIsolateScopeDirective.template || null === newIsolateScopeDirective.templateUrl) && (scopeToChild = isolateScope);
                    childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, void 0, boundTranscludeFn);
                    for (i = postLinkFns.length - 1; 0 <= i; i--) invokeLinkFn(linkFn = postLinkFns[i], linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
                    forEach(elementControllers, function(controller) {
                        var controllerInstance = controller.instance;
                        isFunction(controllerInstance.$postLink) && controllerInstance.$postLink();
                    });
                }
            }
            function getControllers(directiveName, require, $element, elementControllers) {
                var value;
                if (isString(require)) {
                    var match = require.match(REQUIRE_PREFIX_REGEXP), name = require.substring(match[0].length), inheritType = match[1] || match[3], optional = "?" === match[2];
                    "^^" === inheritType ? $element = $element.parent() : value = (value = elementControllers && elementControllers[name]) && value.instance;
                    if (!value) {
                        var dataName = "$" + name + "Controller";
                        value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
                    }
                    if (!value && !optional) throw $compileMinErr("ctreq", "Controller '{0}', required by directive '{1}', can't be found!", name, directiveName);
                } else if (isArray(require)) {
                    value = [];
                    for (var i = 0, ii = require.length; i < ii; i++) value[i] = getControllers(directiveName, require[i], $element, elementControllers);
                } else if (isObject(require)) {
                    value = {};
                    forEach(require, function(controller, property) {
                        value[property] = getControllers(directiveName, controller, $element, elementControllers);
                    });
                }
                return value || null;
            }
            function markDirectiveScope(directives, isolateScope, newScope) {
                for (var j = 0, jj = directives.length; j < jj; j++) directives[j] = inherit(directives[j], {
                    $$isolateScope: isolateScope,
                    $$newScope: newScope
                });
            }
            function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName, endAttrName) {
                if (name === ignoreDirective) return null;
                var match = null;
                if (hasDirectives.hasOwnProperty(name)) for (var directive, directives = $injector.get(name + "Directive"), i = 0, ii = directives.length; i < ii; i++) {
                    directive = directives[i];
                    if ((isUndefined(maxPriority) || maxPriority > directive.priority) && -1 !== directive.restrict.indexOf(location)) {
                        startAttrName && (directive = inherit(directive, {
                            $$start: startAttrName,
                            $$end: endAttrName
                        }));
                        if (!directive.$$bindings) {
                            var bindings = directive.$$bindings = parseDirectiveBindings(directive, directive.name);
                            isObject(bindings.isolateScope) && (directive.$$isolateBindings = bindings.isolateScope);
                        }
                        tDirectives.push(directive);
                        match = directive;
                    }
                }
                return match;
            }
            function directiveIsMultiElement(name) {
                if (hasDirectives.hasOwnProperty(name)) for (var directives = $injector.get(name + "Directive"), i = 0, ii = directives.length; i < ii; i++) if (directives[i].multiElement) return !0;
                return !1;
            }
            function mergeTemplateAttributes(dst, src) {
                var srcAttr = src.$attr, dstAttr = dst.$attr;
                forEach(dst, function(value, key) {
                    if ("$" !== key.charAt(0)) {
                        src[key] && src[key] !== value && (value.length ? value += ("style" === key ? ";" : " ") + src[key] : value = src[key]);
                        dst.$set(key, value, !0, srcAttr[key]);
                    }
                });
                forEach(src, function(value, key) {
                    if (!dst.hasOwnProperty(key) && "$" !== key.charAt(0)) {
                        dst[key] = value;
                        "class" !== key && "style" !== key && (dstAttr[key] = srcAttr[key]);
                    }
                });
            }
            function compileTemplateUrl(directives, $compileNode, tAttrs, $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
                var afterTemplateNodeLinkFn, afterTemplateChildLinkFn, linkQueue = [], beforeTemplateCompileNode = $compileNode[0], origAsyncDirective = directives.shift(), derivedSyncDirective = inherit(origAsyncDirective, {
                    templateUrl: null,
                    transclude: null,
                    replace: null,
                    $$originalDirective: origAsyncDirective
                }), templateUrl = isFunction(origAsyncDirective.templateUrl) ? origAsyncDirective.templateUrl($compileNode, tAttrs) : origAsyncDirective.templateUrl, templateNamespace = origAsyncDirective.templateNamespace;
                $compileNode.empty();
                $templateRequest(templateUrl).then(function(content) {
                    var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;
                    content = denormalizeTemplate(content);
                    if (origAsyncDirective.replace) {
                        $template = jqLiteIsTextNode(content) ? [] : removeComments(wrapTemplate(templateNamespace, trim(content)));
                        compileNode = $template[0];
                        if (1 !== $template.length || compileNode.nodeType !== NODE_TYPE_ELEMENT) throw $compileMinErr("tplrt", "Template for directive '{0}' must have exactly one root element. {1}", origAsyncDirective.name, templateUrl);
                        tempTemplateAttrs = {
                            $attr: {}
                        };
                        replaceWith($rootElement, $compileNode, compileNode);
                        var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);
                        isObject(origAsyncDirective.scope) && markDirectiveScope(templateDirectives, !0);
                        directives = templateDirectives.concat(directives);
                        mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
                    } else {
                        compileNode = beforeTemplateCompileNode;
                        $compileNode.html(content);
                    }
                    directives.unshift(derivedSyncDirective);
                    afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs, childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns, previousCompileContext);
                    forEach($rootElement, function(node, i) {
                        node === compileNode && ($rootElement[i] = $compileNode[0]);
                    });
                    afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);
                    for (;linkQueue.length; ) {
                        var scope = linkQueue.shift(), beforeTemplateLinkNode = linkQueue.shift(), linkRootElement = linkQueue.shift(), boundTranscludeFn = linkQueue.shift(), linkNode = $compileNode[0];
                        if (!scope.$$destroyed) {
                            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
                                var oldClasses = beforeTemplateLinkNode.className;
                                previousCompileContext.hasElementTranscludeDirective && origAsyncDirective.replace || (linkNode = jqLiteClone(compileNode));
                                replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);
                                safeAddClass(jqLite(linkNode), oldClasses);
                            }
                            childBoundTranscludeFn = afterTemplateNodeLinkFn.transcludeOnThisElement ? createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn) : boundTranscludeFn;
                            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement, childBoundTranscludeFn);
                        }
                    }
                    linkQueue = null;
                }).catch(function(error) {
                    isError(error) && $exceptionHandler(error);
                });
                return function(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
                    var childBoundTranscludeFn = boundTranscludeFn;
                    if (!scope.$$destroyed) if (linkQueue) linkQueue.push(scope, node, rootElement, childBoundTranscludeFn); else {
                        afterTemplateNodeLinkFn.transcludeOnThisElement && (childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn));
                        afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
                    }
                };
            }
            function byPriority(a, b) {
                var diff = b.priority - a.priority;
                return 0 !== diff ? diff : a.name !== b.name ? a.name < b.name ? -1 : 1 : a.index - b.index;
            }
            function assertNoDuplicate(what, previousDirective, directive, element) {
                function wrapModuleNameIfDefined(moduleName) {
                    return moduleName ? " (module: " + moduleName + ")" : "";
                }
                if (previousDirective) throw $compileMinErr("multidir", "Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}", previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName), directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));
            }
            function wrapTemplate(type, template) {
                switch (type = lowercase(type || "html")) {
                  case "svg":
                  case "math":
                    var wrapper = window.document.createElement("div");
                    wrapper.innerHTML = "<" + type + ">" + template + "</" + type + ">";
                    return wrapper.childNodes[0].childNodes;

                  default:
                    return template;
                }
            }
            function addAttrInterpolateDirective(node, directives, value, name, isNgAttr) {
                var trustedContext = function(node, attrNormalizedName) {
                    if ("srcdoc" === attrNormalizedName) return $sce.HTML;
                    var tag = nodeName_(node);
                    if ("src" === attrNormalizedName || "ngSrc" === attrNormalizedName) {
                        if (-1 === [ "img", "video", "audio", "source", "track" ].indexOf(tag)) return $sce.RESOURCE_URL;
                    } else if ("xlinkHref" === attrNormalizedName || "form" === tag && "action" === attrNormalizedName || "link" === tag && "href" === attrNormalizedName) return $sce.RESOURCE_URL;
                }(node, name), mustHaveExpression = !isNgAttr, allOrNothing = ALL_OR_NOTHING_ATTRS[name] || isNgAttr, interpolateFn = $interpolate(value, mustHaveExpression, trustedContext, allOrNothing);
                if (interpolateFn) {
                    if ("multiple" === name && "select" === nodeName_(node)) throw $compileMinErr("selmulti", "Binding to the 'multiple' attribute is not supported. Element: {0}", startingTag(node));
                    if (EVENT_HANDLER_ATTR_REGEXP.test(name)) throw $compileMinErr("nodomevents", "Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");
                    directives.push({
                        priority: 100,
                        compile: function() {
                            return {
                                pre: function(scope, element, attr) {
                                    var $$observers = attr.$$observers || (attr.$$observers = createMap()), newValue = attr[name];
                                    if (newValue !== value) {
                                        interpolateFn = newValue && $interpolate(newValue, !0, trustedContext, allOrNothing);
                                        value = newValue;
                                    }
                                    if (interpolateFn) {
                                        attr[name] = interpolateFn(scope);
                                        ($$observers[name] || ($$observers[name] = [])).$$inter = !0;
                                        (attr.$$observers && attr.$$observers[name].$$scope || scope).$watch(interpolateFn, function(newValue, oldValue) {
                                            "class" === name && newValue !== oldValue ? attr.$updateClass(newValue, oldValue) : attr.$set(name, newValue);
                                        });
                                    }
                                }
                            };
                        }
                    });
                }
            }
            function replaceWith($rootElement, elementsToRemove, newNode) {
                var i, ii, firstElementToRemove = elementsToRemove[0], removeCount = elementsToRemove.length, parent = firstElementToRemove.parentNode;
                if ($rootElement) for (i = 0, ii = $rootElement.length; i < ii; i++) if ($rootElement[i] === firstElementToRemove) {
                    $rootElement[i++] = newNode;
                    for (var j = i, j2 = j + removeCount - 1, jj = $rootElement.length; j < jj; j++, 
                    j2++) j2 < jj ? $rootElement[j] = $rootElement[j2] : delete $rootElement[j];
                    $rootElement.length -= removeCount - 1;
                    $rootElement.context === firstElementToRemove && ($rootElement.context = newNode);
                    break;
                }
                parent && parent.replaceChild(newNode, firstElementToRemove);
                var fragment = window.document.createDocumentFragment();
                for (i = 0; i < removeCount; i++) fragment.appendChild(elementsToRemove[i]);
                if (jqLite.hasData(firstElementToRemove)) {
                    jqLite.data(newNode, jqLite.data(firstElementToRemove));
                    jqLite(firstElementToRemove).off("$destroy");
                }
                jqLite.cleanData(fragment.querySelectorAll("*"));
                for (i = 1; i < removeCount; i++) delete elementsToRemove[i];
                elementsToRemove[0] = newNode;
                elementsToRemove.length = 1;
            }
            function cloneAndAnnotateFn(fn, annotation) {
                return extend(function() {
                    return fn.apply(null, arguments);
                }, fn, annotation);
            }
            function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
                try {
                    linkFn(scope, $element, attrs, controllers, transcludeFn);
                } catch (e) {
                    $exceptionHandler(e, startingTag($element));
                }
            }
            function strictBindingsCheck(attrName, directiveName) {
                if (strictComponentBindingsEnabled) throw $compileMinErr("missingattr", "Attribute '{0}' of '{1}' is non-optional and must be set!", attrName, directiveName);
            }
            function initializeDirectiveBindings(scope, attrs, destination, bindings, directive) {
                var changes, removeWatchCollection = [], initialChanges = {};
                forEach(bindings, function(definition, scopeName) {
                    var lastValue, parentGet, parentSet, compare, removeWatch, attrName = definition.attrName, optional = definition.optional;
                    switch (definition.mode) {
                      case "@":
                        if (!optional && !hasOwnProperty.call(attrs, attrName)) {
                            strictBindingsCheck(attrName, directive.name);
                            destination[scopeName] = attrs[attrName] = void 0;
                        }
                        removeWatch = attrs.$observe(attrName, function(value) {
                            if (isString(value) || isBoolean(value)) {
                                var oldValue = destination[scopeName];
                                recordChanges(scopeName, value, oldValue);
                                destination[scopeName] = value;
                            }
                        });
                        attrs.$$observers[attrName].$$scope = scope;
                        isString(lastValue = attrs[attrName]) ? destination[scopeName] = $interpolate(lastValue)(scope) : isBoolean(lastValue) && (destination[scopeName] = lastValue);
                        initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);
                        removeWatchCollection.push(removeWatch);
                        break;

                      case "=":
                        if (!hasOwnProperty.call(attrs, attrName)) {
                            if (optional) break;
                            strictBindingsCheck(attrName, directive.name);
                            attrs[attrName] = void 0;
                        }
                        if (optional && !attrs[attrName]) break;
                        parentGet = $parse(attrs[attrName]);
                        compare = parentGet.literal ? equals : simpleCompare;
                        parentSet = parentGet.assign || function() {
                            lastValue = destination[scopeName] = parentGet(scope);
                            throw $compileMinErr("nonassign", "Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!", attrs[attrName], attrName, directive.name);
                        };
                        lastValue = destination[scopeName] = parentGet(scope);
                        var parentValueWatch = function(parentValue) {
                            compare(parentValue, destination[scopeName]) || (compare(parentValue, lastValue) ? parentSet(scope, parentValue = destination[scopeName]) : destination[scopeName] = parentValue);
                            return lastValue = parentValue;
                        };
                        parentValueWatch.$stateful = !0;
                        removeWatch = definition.collection ? scope.$watchCollection(attrs[attrName], parentValueWatch) : scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
                        removeWatchCollection.push(removeWatch);
                        break;

                      case "<":
                        if (!hasOwnProperty.call(attrs, attrName)) {
                            if (optional) break;
                            strictBindingsCheck(attrName, directive.name);
                            attrs[attrName] = void 0;
                        }
                        if (optional && !attrs[attrName]) break;
                        var deepWatch = (parentGet = $parse(attrs[attrName])).literal, initialValue = destination[scopeName] = parentGet(scope);
                        initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);
                        removeWatch = scope.$watch(parentGet, function(newValue, oldValue) {
                            if (oldValue === newValue) {
                                if (oldValue === initialValue || deepWatch && equals(oldValue, initialValue)) return;
                                oldValue = initialValue;
                            }
                            recordChanges(scopeName, newValue, oldValue);
                            destination[scopeName] = newValue;
                        }, deepWatch);
                        removeWatchCollection.push(removeWatch);
                        break;

                      case "&":
                        optional || hasOwnProperty.call(attrs, attrName) || strictBindingsCheck(attrName, directive.name);
                        if ((parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop) === noop && optional) break;
                        destination[scopeName] = function(locals) {
                            return parentGet(scope, locals);
                        };
                    }
                });
                function recordChanges(key, currentValue, previousValue) {
                    if (isFunction(destination.$onChanges) && !simpleCompare(currentValue, previousValue)) {
                        if (!onChangesQueue) {
                            scope.$$postDigest(flushOnChangesQueue);
                            onChangesQueue = [];
                        }
                        if (!changes) {
                            changes = {};
                            onChangesQueue.push(triggerOnChangesHook);
                        }
                        changes[key] && (previousValue = changes[key].previousValue);
                        changes[key] = new SimpleChange(previousValue, currentValue);
                    }
                }
                function triggerOnChangesHook() {
                    destination.$onChanges(changes);
                    changes = void 0;
                }
                return {
                    initialChanges: initialChanges,
                    removeWatches: removeWatchCollection.length && function() {
                        for (var i = 0, ii = removeWatchCollection.length; i < ii; ++i) removeWatchCollection[i]();
                    }
                };
            }
        } ];
    }
    function SimpleChange(previous, current) {
        this.previousValue = previous;
        this.currentValue = current;
    }
    SimpleChange.prototype.isFirstChange = function() {
        return this.previousValue === _UNINITIALIZED_VALUE;
    };
    var PREFIX_REGEXP = /^((?:x|data)[:\-_])/i, SPECIAL_CHARS_REGEXP = /[:\-_]+(.)/g;
    function directiveNormalize(name) {
        return name.replace(PREFIX_REGEXP, "").replace(SPECIAL_CHARS_REGEXP, function(_, letter, offset) {
            return offset ? letter.toUpperCase() : letter;
        });
    }
    function tokenDifference(str1, str2) {
        var values = "", tokens1 = str1.split(/\s+/), tokens2 = str2.split(/\s+/);
        outer: for (var i = 0; i < tokens1.length; i++) {
            for (var token = tokens1[i], j = 0; j < tokens2.length; j++) if (token === tokens2[j]) continue outer;
            values += (0 < values.length ? " " : "") + token;
        }
        return values;
    }
    function removeComments(jqNodes) {
        var i = (jqNodes = jqLite(jqNodes)).length;
        if (i <= 1) return jqNodes;
        for (;i--; ) {
            var node = jqNodes[i];
            (node.nodeType === NODE_TYPE_COMMENT || node.nodeType === NODE_TYPE_TEXT && "" === node.nodeValue.trim()) && splice.call(jqNodes, i, 1);
        }
        return jqNodes;
    }
    var $controllerMinErr = minErr("$controller"), CNTRL_REG = /^(\S+)(\s+as\s+([\w$]+))?$/;
    function $ControllerProvider() {
        var controllers = {}, globals = !1;
        this.has = function(name) {
            return controllers.hasOwnProperty(name);
        };
        this.register = function(name, constructor) {
            assertNotHasOwnProperty(name, "controller");
            isObject(name) ? extend(controllers, name) : controllers[name] = constructor;
        };
        this.allowGlobals = function() {
            globals = !0;
        };
        this.$get = [ "$injector", "$window", function($injector, $window) {
            return function(expression, locals, later, ident) {
                var instance, match, constructor, identifier;
                later = !0 === later;
                ident && isString(ident) && (identifier = ident);
                if (isString(expression)) {
                    if (!(match = expression.match(CNTRL_REG))) throw $controllerMinErr("ctrlfmt", "Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.", expression);
                    constructor = match[1];
                    identifier = identifier || match[3];
                    if (!(expression = controllers.hasOwnProperty(constructor) ? controllers[constructor] : getter(locals.$scope, constructor, !0) || (globals ? getter($window, constructor, !0) : void 0))) throw $controllerMinErr("ctrlreg", "The controller with the name '{0}' is not registered.", constructor);
                    assertArgFn(expression, constructor, !0);
                }
                if (later) {
                    var controllerPrototype = (isArray(expression) ? expression[expression.length - 1] : expression).prototype;
                    instance = Object.create(controllerPrototype || null);
                    identifier && addIdentifier(locals, identifier, instance, constructor || expression.name);
                    return extend(function() {
                        var result = $injector.invoke(expression, instance, locals, constructor);
                        if (result !== instance && (isObject(result) || isFunction(result))) {
                            instance = result;
                            identifier && addIdentifier(locals, identifier, instance, constructor || expression.name);
                        }
                        return instance;
                    }, {
                        instance: instance,
                        identifier: identifier
                    });
                }
                instance = $injector.instantiate(expression, locals, constructor);
                identifier && addIdentifier(locals, identifier, instance, constructor || expression.name);
                return instance;
            };
            function addIdentifier(locals, identifier, instance, name) {
                if (!locals || !isObject(locals.$scope)) throw minErr("$controller")("noscp", "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.", name, identifier);
                locals.$scope[identifier] = instance;
            }
        } ];
    }
    function $DocumentProvider() {
        this.$get = [ "$window", function(window) {
            return jqLite(window.document);
        } ];
    }
    function $$IsDocumentHiddenProvider() {
        this.$get = [ "$document", "$rootScope", function($document, $rootScope) {
            var doc = $document[0], hidden = doc && doc.hidden;
            $document.on("visibilitychange", changeListener);
            $rootScope.$on("$destroy", function() {
                $document.off("visibilitychange", changeListener);
            });
            function changeListener() {
                hidden = doc.hidden;
            }
            return function() {
                return hidden;
            };
        } ];
    }
    function $ExceptionHandlerProvider() {
        this.$get = [ "$log", function($log) {
            return function(exception, cause) {
                $log.error.apply($log, arguments);
            };
        } ];
    }
    var $$ForceReflowProvider = function() {
        this.$get = [ "$document", function($document) {
            return function(domNode) {
                domNode ? !domNode.nodeType && domNode instanceof jqLite && (domNode = domNode[0]) : domNode = $document[0].body;
                return domNode.offsetWidth + 1;
            };
        } ];
    }, APPLICATION_JSON = "application/json", CONTENT_TYPE_APPLICATION_JSON = {
        "Content-Type": APPLICATION_JSON + ";charset=utf-8"
    }, JSON_START = /^\[|^\{(?!\{)/, JSON_ENDS = {
        "[": /]$/,
        "{": /}$/
    }, JSON_PROTECTION_PREFIX = /^\)]\}',?\n/, $httpMinErr = minErr("$http");
    function serializeValue(v) {
        return isObject(v) ? isDate(v) ? v.toISOString() : toJson(v) : v;
    }
    function $HttpParamSerializerProvider() {
        this.$get = function() {
            return function(params) {
                if (!params) return "";
                var parts = [];
                forEachSorted(params, function(value, key) {
                    null === value || isUndefined(value) || isFunction(value) || (isArray(value) ? forEach(value, function(v) {
                        parts.push(encodeUriQuery(key) + "=" + encodeUriQuery(serializeValue(v)));
                    }) : parts.push(encodeUriQuery(key) + "=" + encodeUriQuery(serializeValue(value))));
                });
                return parts.join("&");
            };
        };
    }
    function $HttpParamSerializerJQLikeProvider() {
        this.$get = function() {
            return function(params) {
                if (!params) return "";
                var parts = [];
                !function serialize(toSerialize, prefix, topLevel) {
                    if (null === toSerialize || isUndefined(toSerialize)) return;
                    isArray(toSerialize) ? forEach(toSerialize, function(value, index) {
                        serialize(value, prefix + "[" + (isObject(value) ? index : "") + "]");
                    }) : isObject(toSerialize) && !isDate(toSerialize) ? forEachSorted(toSerialize, function(value, key) {
                        serialize(value, prefix + (topLevel ? "" : "[") + key + (topLevel ? "" : "]"));
                    }) : parts.push(encodeUriQuery(prefix) + "=" + encodeUriQuery(serializeValue(toSerialize)));
                }(params, "", !0);
                return parts.join("&");
            };
        };
    }
    function defaultHttpResponseTransform(data, headers) {
        if (isString(data)) {
            var tempData = data.replace(JSON_PROTECTION_PREFIX, "").trim();
            if (tempData) {
                var contentType = headers("Content-Type"), hasJsonContentType = contentType && 0 === contentType.indexOf(APPLICATION_JSON);
                if (hasJsonContentType || (jsonStart = (str = tempData).match(JSON_START)) && JSON_ENDS[jsonStart[0]].test(str)) try {
                    data = fromJson(tempData);
                } catch (e) {
                    if (!hasJsonContentType) return data;
                    throw $httpMinErr("baddata", 'Data must be a valid JSON object. Received: "{0}". Parse error: "{1}"', data, e);
                }
            }
        }
        var str, jsonStart;
        return data;
    }
    function parseHeaders(headers) {
        var i, parsed = createMap();
        function fillInParsed(key, val) {
            key && (parsed[key] = parsed[key] ? parsed[key] + ", " + val : val);
        }
        isString(headers) ? forEach(headers.split("\n"), function(line) {
            i = line.indexOf(":");
            fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
        }) : isObject(headers) && forEach(headers, function(headerVal, headerKey) {
            fillInParsed(lowercase(headerKey), trim(headerVal));
        });
        return parsed;
    }
    function headersGetter(headers) {
        var headersObj;
        return function(name) {
            headersObj || (headersObj = parseHeaders(headers));
            if (name) {
                var value = headersObj[lowercase(name)];
                void 0 === value && (value = null);
                return value;
            }
            return headersObj;
        };
    }
    function transformData(data, headers, status, fns) {
        if (isFunction(fns)) return fns(data, headers, status);
        forEach(fns, function(fn) {
            data = fn(data, headers, status);
        });
        return data;
    }
    function isSuccess(status) {
        return 200 <= status && status < 300;
    }
    function $HttpProvider() {
        var defaults = this.defaults = {
            transformResponse: [ defaultHttpResponseTransform ],
            transformRequest: [ function(d) {
                return !isObject(d) || (obj = d, "[object File]" === toString.call(obj)) || function(obj) {
                    return "[object Blob]" === toString.call(obj);
                }(d) || function(obj) {
                    return "[object FormData]" === toString.call(obj);
                }(d) ? d : toJson(d);
                var obj;
            } ],
            headers: {
                common: {
                    Accept: "application/json, text/plain, */*"
                },
                post: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
                put: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
                patch: shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
            },
            xsrfCookieName: "XSRF-TOKEN",
            xsrfHeaderName: "X-XSRF-TOKEN",
            paramSerializer: "$httpParamSerializer",
            jsonpCallbackParam: "callback"
        }, useApplyAsync = !1;
        this.useApplyAsync = function(value) {
            if (isDefined(value)) {
                useApplyAsync = !!value;
                return this;
            }
            return useApplyAsync;
        };
        var interceptorFactories = this.interceptors = [], xsrfWhitelistedOrigins = this.xsrfWhitelistedOrigins = [];
        this.$get = [ "$browser", "$httpBackend", "$$cookieReader", "$cacheFactory", "$rootScope", "$q", "$injector", "$sce", function($browser, $httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector, $sce) {
            var defaultCache = $cacheFactory("$http");
            defaults.paramSerializer = isString(defaults.paramSerializer) ? $injector.get(defaults.paramSerializer) : defaults.paramSerializer;
            var reversedInterceptors = [];
            forEach(interceptorFactories, function(interceptorFactory) {
                reversedInterceptors.unshift(isString(interceptorFactory) ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
            });
            var parsedAllowedOriginUrls, urlIsAllowedOrigin = (parsedAllowedOriginUrls = [ originUrl ].concat(xsrfWhitelistedOrigins.map(urlResolve)), 
            function(requestUrl) {
                var parsedUrl = urlResolve(requestUrl);
                return parsedAllowedOriginUrls.some(urlsAreSameOrigin.bind(null, parsedUrl));
            });
            function $http(requestConfig) {
                if (!isObject(requestConfig)) throw minErr("$http")("badreq", "Http request configuration must be an object.  Received: {0}", requestConfig);
                if (!isString($sce.valueOf(requestConfig.url))) throw minErr("$http")("badreq", "Http request configuration url must be a string or a $sce trusted object.  Received: {0}", requestConfig.url);
                var config = extend({
                    method: "get",
                    transformRequest: defaults.transformRequest,
                    transformResponse: defaults.transformResponse,
                    paramSerializer: defaults.paramSerializer,
                    jsonpCallbackParam: defaults.jsonpCallbackParam
                }, requestConfig);
                config.headers = function(config) {
                    var defHeaderName, lowercaseDefHeaderName, reqHeaderName, defHeaders = defaults.headers, reqHeaders = extend({}, config.headers);
                    defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);
                    defaultHeadersIteration: for (defHeaderName in defHeaders) {
                        lowercaseDefHeaderName = lowercase(defHeaderName);
                        for (reqHeaderName in reqHeaders) if (lowercase(reqHeaderName) === lowercaseDefHeaderName) continue defaultHeadersIteration;
                        reqHeaders[defHeaderName] = defHeaders[defHeaderName];
                    }
                    return function(headers, config) {
                        var headerContent, processedHeaders = {};
                        forEach(headers, function(headerFn, header) {
                            isFunction(headerFn) ? null != (headerContent = headerFn(config)) && (processedHeaders[header] = headerContent) : processedHeaders[header] = headerFn;
                        });
                        return processedHeaders;
                    }(reqHeaders, shallowCopy(config));
                }(requestConfig);
                config.method = uppercase(config.method);
                config.paramSerializer = isString(config.paramSerializer) ? $injector.get(config.paramSerializer) : config.paramSerializer;
                $browser.$$incOutstandingRequestCount();
                var requestInterceptors = [], responseInterceptors = [], promise = $q.resolve(config);
                forEach(reversedInterceptors, function(interceptor) {
                    (interceptor.request || interceptor.requestError) && requestInterceptors.unshift(interceptor.request, interceptor.requestError);
                    (interceptor.response || interceptor.responseError) && responseInterceptors.push(interceptor.response, interceptor.responseError);
                });
                return promise = (promise = chainInterceptors(promise = (promise = chainInterceptors(promise, requestInterceptors)).then(function(config) {
                    var headers = config.headers, reqData = transformData(config.data, headersGetter(headers), void 0, config.transformRequest);
                    isUndefined(reqData) && forEach(headers, function(value, header) {
                        "content-type" === lowercase(header) && delete headers[header];
                    });
                    isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials) && (config.withCredentials = defaults.withCredentials);
                    return function(config, reqData) {
                        var cache, cachedResp, deferred = $q.defer(), promise = deferred.promise, reqHeaders = config.headers, isJsonp = "jsonp" === lowercase(config.method), url = config.url;
                        isJsonp ? url = $sce.getTrustedResourceUrl(url) : isString(url) || (url = $sce.valueOf(url));
                        url = function(url, serializedParams) {
                            0 < serializedParams.length && (url += (-1 === url.indexOf("?") ? "?" : "&") + serializedParams);
                            return url;
                        }(url, config.paramSerializer(config.params));
                        isJsonp && (url = function(url, cbKey) {
                            var parts = url.split("?");
                            if (2 < parts.length) throw $httpMinErr("badjsonp", 'Illegal use more than one "?", in url, "{1}"', url);
                            forEach(parseKeyValue(parts[1]), function(value, key) {
                                if ("JSON_CALLBACK" === value) throw $httpMinErr("badjsonp", 'Illegal use of JSON_CALLBACK in url, "{0}"', url);
                                if (key === cbKey) throw $httpMinErr("badjsonp", 'Illegal use of callback param, "{0}", in url, "{1}"', cbKey, url);
                            });
                            return url += (-1 === url.indexOf("?") ? "?" : "&") + cbKey + "=JSON_CALLBACK";
                        }(url, config.jsonpCallbackParam));
                        $http.pendingRequests.push(config);
                        promise.then(removePendingReq, removePendingReq);
                        !config.cache && !defaults.cache || !1 === config.cache || "GET" !== config.method && "JSONP" !== config.method || (cache = isObject(config.cache) ? config.cache : isObject(defaults.cache) ? defaults.cache : defaultCache);
                        cache && (isDefined(cachedResp = cache.get(url)) ? isPromiseLike(cachedResp) ? cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult) : isArray(cachedResp) ? resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3], cachedResp[4]) : resolvePromise(cachedResp, 200, {}, "OK", "complete") : cache.put(url, promise));
                        if (isUndefined(cachedResp)) {
                            var xsrfValue = urlIsAllowedOrigin(config.url) ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName] : void 0;
                            xsrfValue && (reqHeaders[config.xsrfHeaderName || defaults.xsrfHeaderName] = xsrfValue);
                            $httpBackend(config.method, url, reqData, function(status, response, headersString, statusText, xhrStatus) {
                                cache && (isSuccess(status) ? cache.put(url, [ status, response, parseHeaders(headersString), statusText, xhrStatus ]) : cache.remove(url));
                                function resolveHttpPromise() {
                                    resolvePromise(response, status, headersString, statusText, xhrStatus);
                                }
                                if (useApplyAsync) $rootScope.$applyAsync(resolveHttpPromise); else {
                                    resolveHttpPromise();
                                    $rootScope.$$phase || $rootScope.$apply();
                                }
                            }, reqHeaders, config.timeout, config.withCredentials, config.responseType, createApplyHandlers(config.eventHandlers), createApplyHandlers(config.uploadEventHandlers));
                        }
                        return promise;
                        function createApplyHandlers(eventHandlers) {
                            if (eventHandlers) {
                                var applyHandlers = {};
                                forEach(eventHandlers, function(eventHandler, key) {
                                    applyHandlers[key] = function(event) {
                                        useApplyAsync ? $rootScope.$applyAsync(callEventHandler) : $rootScope.$$phase ? callEventHandler() : $rootScope.$apply(callEventHandler);
                                        function callEventHandler() {
                                            eventHandler(event);
                                        }
                                    };
                                });
                                return applyHandlers;
                            }
                        }
                        function resolvePromise(response, status, headers, statusText, xhrStatus) {
                            (isSuccess(status = -1 <= status ? status : 0) ? deferred.resolve : deferred.reject)({
                                data: response,
                                status: status,
                                headers: headersGetter(headers),
                                config: config,
                                statusText: statusText,
                                xhrStatus: xhrStatus
                            });
                        }
                        function resolvePromiseWithResult(result) {
                            resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText, result.xhrStatus);
                        }
                        function removePendingReq() {
                            var idx = $http.pendingRequests.indexOf(config);
                            -1 !== idx && $http.pendingRequests.splice(idx, 1);
                        }
                    }(config, reqData).then(transformResponse, transformResponse);
                }), responseInterceptors)).finally(function() {
                    $browser.$$completeOutstandingRequest(noop);
                });
                function chainInterceptors(promise, interceptors) {
                    for (var i = 0, ii = interceptors.length; i < ii; ) {
                        var thenFn = interceptors[i++], rejectFn = interceptors[i++];
                        promise = promise.then(thenFn, rejectFn);
                    }
                    interceptors.length = 0;
                    return promise;
                }
                function transformResponse(response) {
                    var resp = extend({}, response);
                    resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);
                    return isSuccess(response.status) ? resp : $q.reject(resp);
                }
            }
            $http.pendingRequests = [];
            !function(names) {
                forEach(arguments, function(name) {
                    $http[name] = function(url, config) {
                        return $http(extend({}, config || {}, {
                            method: name,
                            url: url
                        }));
                    };
                });
            }("get", "delete", "head", "jsonp");
            !function(name) {
                forEach(arguments, function(name) {
                    $http[name] = function(url, data, config) {
                        return $http(extend({}, config || {}, {
                            method: name,
                            url: url,
                            data: data
                        }));
                    };
                });
            }("post", "put", "patch");
            $http.defaults = defaults;
            return $http;
        } ];
    }
    function $xhrFactoryProvider() {
        this.$get = function() {
            return function() {
                return new window.XMLHttpRequest();
            };
        };
    }
    function $HttpBackendProvider() {
        this.$get = [ "$browser", "$jsonpCallbacks", "$document", "$xhrFactory", function($browser, $jsonpCallbacks, $document, $xhrFactory) {
            return function($browser, createXhr, $browserDefer, callbacks, rawDocument) {
                return function(method, url, post, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers) {
                    url = url || $browser.url();
                    if ("jsonp" === lowercase(method)) var callbackPath = callbacks.createCallback(url), jsonpDone = function(url, callbackPath, done) {
                        url = url.replace("JSON_CALLBACK", callbackPath);
                        var script = rawDocument.createElement("script"), callback = null;
                        script.type = "text/javascript";
                        script.src = url;
                        script.async = !0;
                        callback = function(event) {
                            script.removeEventListener("load", callback);
                            script.removeEventListener("error", callback);
                            rawDocument.body.removeChild(script);
                            script = null;
                            var status = -1, text = "unknown";
                            if (event) {
                                "load" !== event.type || callbacks.wasCalled(callbackPath) || (event = {
                                    type: "error"
                                });
                                text = event.type;
                                status = "error" === event.type ? 404 : 200;
                            }
                            done && done(status, text);
                        };
                        script.addEventListener("load", callback);
                        script.addEventListener("error", callback);
                        rawDocument.body.appendChild(script);
                        return callback;
                    }(url, callbackPath, function(status, text) {
                        var response = 200 === status && callbacks.getResponse(callbackPath);
                        completeRequest(callback, status, response, "", text, "complete");
                        callbacks.removeCallback(callbackPath);
                    }); else {
                        var xhr = createXhr(method, url), abortedByTimeout = !1;
                        xhr.open(method, url, !0);
                        forEach(headers, function(value, key) {
                            isDefined(value) && xhr.setRequestHeader(key, value);
                        });
                        xhr.onload = function() {
                            var statusText = xhr.statusText || "", response = "response" in xhr ? xhr.response : xhr.responseText, status = 1223 === xhr.status ? 204 : xhr.status;
                            0 === status && (status = response ? 200 : "file" === urlResolve(url).protocol ? 404 : 0);
                            completeRequest(callback, status, response, xhr.getAllResponseHeaders(), statusText, "complete");
                        };
                        xhr.onerror = function() {
                            completeRequest(callback, -1, null, null, "", "error");
                        };
                        xhr.ontimeout = function() {
                            completeRequest(callback, -1, null, null, "", "timeout");
                        };
                        xhr.onabort = function() {
                            completeRequest(callback, -1, null, null, "", abortedByTimeout ? "timeout" : "abort");
                        };
                        forEach(eventHandlers, function(value, key) {
                            xhr.addEventListener(key, value);
                        });
                        forEach(uploadEventHandlers, function(value, key) {
                            xhr.upload.addEventListener(key, value);
                        });
                        withCredentials && (xhr.withCredentials = !0);
                        if (responseType) try {
                            xhr.responseType = responseType;
                        } catch (e) {
                            if ("json" !== responseType) throw e;
                        }
                        xhr.send(isUndefined(post) ? null : post);
                    }
                    if (0 < timeout) var timeoutId = $browserDefer(function() {
                        timeoutRequest("timeout");
                    }, timeout); else isPromiseLike(timeout) && timeout.then(function() {
                        timeoutRequest(isDefined(timeout.$$timeoutId) ? "timeout" : "abort");
                    });
                    function timeoutRequest(reason) {
                        abortedByTimeout = "timeout" === reason;
                        jsonpDone && jsonpDone();
                        xhr && xhr.abort();
                    }
                    function completeRequest(callback, status, response, headersString, statusText, xhrStatus) {
                        isDefined(timeoutId) && $browserDefer.cancel(timeoutId);
                        jsonpDone = xhr = null;
                        callback(status, response, headersString, statusText, xhrStatus);
                    }
                };
            }($browser, $xhrFactory, $browser.defer, $jsonpCallbacks, $document[0]);
        } ];
    }
    var $interpolateMinErr = angular.$interpolateMinErr = minErr("$interpolate");
    $interpolateMinErr.throwNoconcat = function(text) {
        throw $interpolateMinErr("noconcat", "Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce", text);
    };
    $interpolateMinErr.interr = function(text, err) {
        return $interpolateMinErr("interr", "Can't interpolate: {0}\n{1}", text, err.toString());
    };
    function $InterpolateProvider() {
        var startSymbol = "{{", endSymbol = "}}";
        this.startSymbol = function(value) {
            if (value) {
                startSymbol = value;
                return this;
            }
            return startSymbol;
        };
        this.endSymbol = function(value) {
            if (value) {
                endSymbol = value;
                return this;
            }
            return endSymbol;
        };
        this.$get = [ "$parse", "$exceptionHandler", "$sce", function($parse, $exceptionHandler, $sce) {
            var startSymbolLength = startSymbol.length, endSymbolLength = endSymbol.length, escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), "g"), escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), "g");
            function escape(ch) {
                return "\\\\\\" + ch;
            }
            function unescapeText(text) {
                return text.replace(escapedStartRegexp, startSymbol).replace(escapedEndRegexp, endSymbol);
            }
            function constantWatchDelegate(scope, listener, objectEquality, constantInterp) {
                var unwatch = scope.$watch(function(scope) {
                    unwatch();
                    return constantInterp(scope);
                }, listener, objectEquality);
                return unwatch;
            }
            function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
                if (!text.length || -1 === text.indexOf(startSymbol)) {
                    var constantInterp;
                    if (!mustHaveExpression) {
                        (constantInterp = valueFn(unescapeText(text))).exp = text;
                        constantInterp.expressions = [];
                        constantInterp.$$watchDelegate = constantWatchDelegate;
                    }
                    return constantInterp;
                }
                allOrNothing = !!allOrNothing;
                for (var startIndex, endIndex, exp, index = 0, expressions = [], parseFns = [], textLength = text.length, concat = [], expressionPositions = []; index < textLength; ) {
                    if (-1 === (startIndex = text.indexOf(startSymbol, index)) || -1 === (endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength))) {
                        index !== textLength && concat.push(unescapeText(text.substring(index)));
                        break;
                    }
                    index !== startIndex && concat.push(unescapeText(text.substring(index, startIndex)));
                    exp = text.substring(startIndex + startSymbolLength, endIndex);
                    expressions.push(exp);
                    parseFns.push($parse(exp, parseStringifyInterceptor));
                    index = endIndex + endSymbolLength;
                    expressionPositions.push(concat.length);
                    concat.push("");
                }
                trustedContext && 1 < concat.length && $interpolateMinErr.throwNoconcat(text);
                if (!mustHaveExpression || expressions.length) {
                    var compute = function(values) {
                        for (var i = 0, ii = expressions.length; i < ii; i++) {
                            if (allOrNothing && isUndefined(values[i])) return;
                            concat[expressionPositions[i]] = values[i];
                        }
                        return concat.join("");
                    }, getValue = function(value) {
                        return trustedContext ? $sce.getTrusted(trustedContext, value) : $sce.valueOf(value);
                    };
                    return extend(function(context) {
                        var i = 0, ii = expressions.length, values = new Array(ii);
                        try {
                            for (;i < ii; i++) values[i] = parseFns[i](context);
                            return compute(values);
                        } catch (err) {
                            $exceptionHandler($interpolateMinErr.interr(text, err));
                        }
                    }, {
                        exp: text,
                        expressions: expressions,
                        $$watchDelegate: function(scope, listener) {
                            var lastValue;
                            return scope.$watchGroup(parseFns, function(values, oldValues) {
                                var currValue = compute(values);
                                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
                                lastValue = currValue;
                            });
                        }
                    });
                }
                function parseStringifyInterceptor(value) {
                    try {
                        value = getValue(value);
                        return allOrNothing && !isDefined(value) ? value : stringify(value);
                    } catch (err) {
                        $exceptionHandler($interpolateMinErr.interr(text, err));
                    }
                }
            }
            $interpolate.startSymbol = function() {
                return startSymbol;
            };
            $interpolate.endSymbol = function() {
                return endSymbol;
            };
            return $interpolate;
        } ];
    }
    function $IntervalProvider() {
        this.$get = [ "$rootScope", "$window", "$q", "$$q", "$browser", function($rootScope, $window, $q, $$q, $browser) {
            var intervals = {};
            function interval(fn, delay, count, invokeApply) {
                var hasParams = 4 < arguments.length, args = hasParams ? sliceArgs(arguments, 4) : [], setInterval = $window.setInterval, clearInterval = $window.clearInterval, iteration = 0, skipApply = isDefined(invokeApply) && !invokeApply, deferred = (skipApply ? $$q : $q).defer(), promise = deferred.promise;
                count = isDefined(count) ? count : 0;
                promise.$$intervalId = setInterval(function() {
                    skipApply ? $browser.defer(callback) : $rootScope.$evalAsync(callback);
                    deferred.notify(iteration++);
                    if (0 < count && count <= iteration) {
                        deferred.resolve(iteration);
                        clearInterval(promise.$$intervalId);
                        delete intervals[promise.$$intervalId];
                    }
                    skipApply || $rootScope.$apply();
                }, delay);
                intervals[promise.$$intervalId] = deferred;
                return promise;
                function callback() {
                    hasParams ? fn.apply(null, args) : fn(iteration);
                }
            }
            interval.cancel = function(promise) {
                if (promise && promise.$$intervalId in intervals) {
                    markQExceptionHandled(intervals[promise.$$intervalId].promise);
                    intervals[promise.$$intervalId].reject("canceled");
                    $window.clearInterval(promise.$$intervalId);
                    delete intervals[promise.$$intervalId];
                    return !0;
                }
                return !1;
            };
            return interval;
        } ];
    }
    var $jsonpCallbacksProvider = function() {
        this.$get = function() {
            var callbacks = angular.callbacks, callbackMap = {};
            return {
                createCallback: function(url) {
                    var callbackId = "_" + (callbacks.$$counter++).toString(36), callbackPath = "angular.callbacks." + callbackId, callback = function(callbackId) {
                        var callback = function(data) {
                            callback.data = data;
                            callback.called = !0;
                        };
                        callback.id = callbackId;
                        return callback;
                    }(callbackId);
                    callbackMap[callbackPath] = callbacks[callbackId] = callback;
                    return callbackPath;
                },
                wasCalled: function(callbackPath) {
                    return callbackMap[callbackPath].called;
                },
                getResponse: function(callbackPath) {
                    return callbackMap[callbackPath].data;
                },
                removeCallback: function(callbackPath) {
                    var callback = callbackMap[callbackPath];
                    delete callbacks[callback.id];
                    delete callbackMap[callbackPath];
                }
            };
        };
    }, PATH_MATCH = /^([^?#]*)(\?([^#]*))?(#(.*))?$/, DEFAULT_PORTS = {
        http: 80,
        https: 443,
        ftp: 21
    }, $locationMinErr = minErr("$location");
    function encodePath(path) {
        for (var segments = path.split("/"), i = segments.length; i--; ) segments[i] = encodeUriSegment(segments[i].replace(/%2F/g, "/"));
        return segments.join("/");
    }
    function parseAbsoluteUrl(absoluteUrl, locationObj) {
        var parsedUrl = urlResolve(absoluteUrl);
        locationObj.$$protocol = parsedUrl.protocol;
        locationObj.$$host = parsedUrl.hostname;
        locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
    }
    var DOUBLE_SLASH_REGEX = /^\s*[\\/]{2,}/;
    function parseAppUrl(url, locationObj, html5Mode) {
        if (DOUBLE_SLASH_REGEX.test(url)) throw $locationMinErr("badpath", 'Invalid url "{0}".', url);
        var prefixed = "/" !== url.charAt(0);
        prefixed && (url = "/" + url);
        var match = urlResolve(url), path = prefixed && "/" === match.pathname.charAt(0) ? match.pathname.substring(1) : match.pathname;
        locationObj.$$path = function(path, html5Mode) {
            for (var segments = path.split("/"), i = segments.length; i--; ) {
                segments[i] = decodeURIComponent(segments[i]);
                html5Mode && (segments[i] = segments[i].replace(/\//g, "%2F"));
            }
            return segments.join("/");
        }(path, html5Mode);
        locationObj.$$search = parseKeyValue(match.search);
        locationObj.$$hash = decodeURIComponent(match.hash);
        locationObj.$$path && "/" !== locationObj.$$path.charAt(0) && (locationObj.$$path = "/" + locationObj.$$path);
    }
    function startsWith(str, search) {
        return str.slice(0, search.length) === search;
    }
    function stripBaseUrl(base, url) {
        if (startsWith(url, base)) return url.substr(base.length);
    }
    function stripHash(url) {
        var index = url.indexOf("#");
        return -1 === index ? url : url.substr(0, index);
    }
    function trimEmptyHash(url) {
        return url.replace(/(#.+)|#$/, "$1");
    }
    function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {
        this.$$html5 = !0;
        basePrefix = basePrefix || "";
        parseAbsoluteUrl(appBase, this);
        this.$$parse = function(url) {
            var pathUrl = stripBaseUrl(appBaseNoFile, url);
            if (!isString(pathUrl)) throw $locationMinErr("ipthprfx", 'Invalid url "{0}", missing path prefix "{1}".', url, appBaseNoFile);
            parseAppUrl(pathUrl, this, !0);
            this.$$path || (this.$$path = "/");
            this.$$compose();
        };
        this.$$compose = function() {
            var search = toKeyValue(this.$$search), hash = this.$$hash ? "#" + encodeUriSegment(this.$$hash) : "";
            this.$$url = encodePath(this.$$path) + (search ? "?" + search : "") + hash;
            this.$$absUrl = appBaseNoFile + this.$$url.substr(1);
            this.$$urlUpdatedByLocation = !0;
        };
        this.$$parseLinkUrl = function(url, relHref) {
            if (relHref && "#" === relHref[0]) {
                this.hash(relHref.slice(1));
                return !0;
            }
            var appUrl, prevAppUrl, rewrittenUrl;
            if (isDefined(appUrl = stripBaseUrl(appBase, url))) {
                prevAppUrl = appUrl;
                rewrittenUrl = basePrefix && isDefined(appUrl = stripBaseUrl(basePrefix, appUrl)) ? appBaseNoFile + (stripBaseUrl("/", appUrl) || appUrl) : appBase + prevAppUrl;
            } else isDefined(appUrl = stripBaseUrl(appBaseNoFile, url)) ? rewrittenUrl = appBaseNoFile + appUrl : appBaseNoFile === url + "/" && (rewrittenUrl = appBaseNoFile);
            rewrittenUrl && this.$$parse(rewrittenUrl);
            return !!rewrittenUrl;
        };
    }
    function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {
        parseAbsoluteUrl(appBase, this);
        this.$$parse = function(url) {
            var withoutHashUrl, withoutBaseUrl = stripBaseUrl(appBase, url) || stripBaseUrl(appBaseNoFile, url);
            if (isUndefined(withoutBaseUrl) || "#" !== withoutBaseUrl.charAt(0)) if (this.$$html5) withoutHashUrl = withoutBaseUrl; else {
                withoutHashUrl = "";
                if (isUndefined(withoutBaseUrl)) {
                    appBase = url;
                    this.replace();
                }
            } else isUndefined(withoutHashUrl = stripBaseUrl(hashPrefix, withoutBaseUrl)) && (withoutHashUrl = withoutBaseUrl);
            parseAppUrl(withoutHashUrl, this, !1);
            this.$$path = function(path, url, base) {
                var firstPathSegmentMatch, windowsFilePathExp = /^\/[A-Z]:(\/.*)/;
                startsWith(url, base) && (url = url.replace(base, ""));
                if (windowsFilePathExp.exec(url)) return path;
                return (firstPathSegmentMatch = windowsFilePathExp.exec(path)) ? firstPathSegmentMatch[1] : path;
            }(this.$$path, withoutHashUrl, appBase);
            this.$$compose();
        };
        this.$$compose = function() {
            var search = toKeyValue(this.$$search), hash = this.$$hash ? "#" + encodeUriSegment(this.$$hash) : "";
            this.$$url = encodePath(this.$$path) + (search ? "?" + search : "") + hash;
            this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : "");
            this.$$urlUpdatedByLocation = !0;
        };
        this.$$parseLinkUrl = function(url, relHref) {
            if (stripHash(appBase) !== stripHash(url)) return !1;
            this.$$parse(url);
            return !0;
        };
    }
    function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {
        this.$$html5 = !0;
        LocationHashbangUrl.apply(this, arguments);
        this.$$parseLinkUrl = function(url, relHref) {
            if (relHref && "#" === relHref[0]) {
                this.hash(relHref.slice(1));
                return !0;
            }
            var rewrittenUrl, appUrl;
            appBase === stripHash(url) ? rewrittenUrl = url : (appUrl = stripBaseUrl(appBaseNoFile, url)) ? rewrittenUrl = appBase + hashPrefix + appUrl : appBaseNoFile === url + "/" && (rewrittenUrl = appBaseNoFile);
            rewrittenUrl && this.$$parse(rewrittenUrl);
            return !!rewrittenUrl;
        };
        this.$$compose = function() {
            var search = toKeyValue(this.$$search), hash = this.$$hash ? "#" + encodeUriSegment(this.$$hash) : "";
            this.$$url = encodePath(this.$$path) + (search ? "?" + search : "") + hash;
            this.$$absUrl = appBase + hashPrefix + this.$$url;
            this.$$urlUpdatedByLocation = !0;
        };
    }
    var locationPrototype = {
        $$absUrl: "",
        $$html5: !1,
        $$replace: !1,
        absUrl: locationGetter("$$absUrl"),
        url: function(url) {
            if (isUndefined(url)) return this.$$url;
            var match = PATH_MATCH.exec(url);
            (match[1] || "" === url) && this.path(decodeURIComponent(match[1]));
            (match[2] || match[1] || "" === url) && this.search(match[3] || "");
            this.hash(match[5] || "");
            return this;
        },
        protocol: locationGetter("$$protocol"),
        host: locationGetter("$$host"),
        port: locationGetter("$$port"),
        path: locationGetterSetter("$$path", function(path) {
            return "/" === (path = null !== path ? path.toString() : "").charAt(0) ? path : "/" + path;
        }),
        search: function(search, paramValue) {
            switch (arguments.length) {
              case 0:
                return this.$$search;

              case 1:
                if (isString(search) || isNumber(search)) {
                    search = search.toString();
                    this.$$search = parseKeyValue(search);
                } else {
                    if (!isObject(search)) throw $locationMinErr("isrcharg", "The first argument of the `$location#search()` call must be a string or an object.");
                    forEach(search = copy(search, {}), function(value, key) {
                        null == value && delete search[key];
                    });
                    this.$$search = search;
                }
                break;

              default:
                isUndefined(paramValue) || null === paramValue ? delete this.$$search[search] : this.$$search[search] = paramValue;
            }
            this.$$compose();
            return this;
        },
        hash: locationGetterSetter("$$hash", function(hash) {
            return null !== hash ? hash.toString() : "";
        }),
        replace: function() {
            this.$$replace = !0;
            return this;
        }
    };
    forEach([ LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url ], function(Location) {
        Location.prototype = Object.create(locationPrototype);
        Location.prototype.state = function(state) {
            if (!arguments.length) return this.$$state;
            if (Location !== LocationHtml5Url || !this.$$html5) throw $locationMinErr("nostate", "History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");
            this.$$state = isUndefined(state) ? null : state;
            this.$$urlUpdatedByLocation = !0;
            return this;
        };
    });
    function locationGetter(property) {
        return function() {
            return this[property];
        };
    }
    function locationGetterSetter(property, preprocess) {
        return function(value) {
            if (isUndefined(value)) return this[property];
            this[property] = preprocess(value);
            this.$$compose();
            return this;
        };
    }
    function $LocationProvider() {
        var hashPrefix = "!", html5Mode = {
            enabled: !1,
            requireBase: !0,
            rewriteLinks: !0
        };
        this.hashPrefix = function(prefix) {
            if (isDefined(prefix)) {
                hashPrefix = prefix;
                return this;
            }
            return hashPrefix;
        };
        this.html5Mode = function(mode) {
            if (isBoolean(mode)) {
                html5Mode.enabled = mode;
                return this;
            }
            if (isObject(mode)) {
                isBoolean(mode.enabled) && (html5Mode.enabled = mode.enabled);
                isBoolean(mode.requireBase) && (html5Mode.requireBase = mode.requireBase);
                (isBoolean(mode.rewriteLinks) || isString(mode.rewriteLinks)) && (html5Mode.rewriteLinks = mode.rewriteLinks);
                return this;
            }
            return html5Mode;
        };
        this.$get = [ "$rootScope", "$browser", "$sniffer", "$rootElement", "$window", function($rootScope, $browser, $sniffer, $rootElement, $window) {
            var $location, LocationMode, appBase, url, baseHref = $browser.baseHref(), initialUrl = $browser.url();
            if (html5Mode.enabled) {
                if (!baseHref && html5Mode.requireBase) throw $locationMinErr("nobase", "$location in HTML5 mode requires a <base> tag to be present!");
                appBase = (url = initialUrl).substring(0, url.indexOf("/", url.indexOf("//") + 2)) + (baseHref || "/");
                LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
            } else {
                appBase = stripHash(initialUrl);
                LocationMode = LocationHashbangUrl;
            }
            var appBaseNoFile = function(url) {
                return url.substr(0, stripHash(url).lastIndexOf("/") + 1);
            }(appBase);
            ($location = new LocationMode(appBase, appBaseNoFile, "#" + hashPrefix)).$$parseLinkUrl(initialUrl, initialUrl);
            $location.$$state = $browser.state();
            var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;
            function setBrowserUrlWithFallback(url, replace, state) {
                var oldUrl = $location.url(), oldState = $location.$$state;
                try {
                    $browser.url(url, replace, state);
                    $location.$$state = $browser.state();
                } catch (e) {
                    $location.url(oldUrl);
                    $location.$$state = oldState;
                    throw e;
                }
            }
            $rootElement.on("click", function(event) {
                var rewriteLinks = html5Mode.rewriteLinks;
                if (rewriteLinks && !event.ctrlKey && !event.metaKey && !event.shiftKey && 2 !== event.which && 2 !== event.button) {
                    for (var elm = jqLite(event.target); "a" !== nodeName_(elm[0]); ) if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
                    if (!isString(rewriteLinks) || !isUndefined(elm.attr(rewriteLinks))) {
                        var absHref = elm.prop("href"), relHref = elm.attr("href") || elm.attr("xlink:href");
                        isObject(absHref) && "[object SVGAnimatedString]" === absHref.toString() && (absHref = urlResolve(absHref.animVal).href);
                        if (!IGNORE_URI_REGEXP.test(absHref) && absHref && !elm.attr("target") && !event.isDefaultPrevented() && $location.$$parseLinkUrl(absHref, relHref)) {
                            event.preventDefault();
                            if ($location.absUrl() !== $browser.url()) {
                                $rootScope.$apply();
                                $window.angular["ff-684208-preventDefault"] = !0;
                            }
                        }
                    }
                }
            });
            trimEmptyHash($location.absUrl()) !== trimEmptyHash(initialUrl) && $browser.url($location.absUrl(), !0);
            var initializing = !0;
            $browser.onUrlChange(function(newUrl, newState) {
                if (startsWith(newUrl, appBaseNoFile)) {
                    $rootScope.$evalAsync(function() {
                        var defaultPrevented, oldUrl = $location.absUrl(), oldState = $location.$$state;
                        newUrl = trimEmptyHash(newUrl);
                        $location.$$parse(newUrl);
                        $location.$$state = newState;
                        defaultPrevented = $rootScope.$broadcast("$locationChangeStart", newUrl, oldUrl, newState, oldState).defaultPrevented;
                        if ($location.absUrl() === newUrl) if (defaultPrevented) {
                            $location.$$parse(oldUrl);
                            setBrowserUrlWithFallback(oldUrl, !1, $location.$$state = oldState);
                        } else {
                            initializing = !1;
                            afterLocationChange(oldUrl, oldState);
                        }
                    });
                    $rootScope.$$phase || $rootScope.$digest();
                } else $window.location.href = newUrl;
            });
            $rootScope.$watch(function() {
                if (initializing || $location.$$urlUpdatedByLocation) {
                    $location.$$urlUpdatedByLocation = !1;
                    var oldUrl = trimEmptyHash($browser.url()), newUrl = trimEmptyHash($location.absUrl()), oldState = $browser.state(), currentReplace = $location.$$replace, urlOrStateChanged = oldUrl !== newUrl || $location.$$html5 && $sniffer.history && oldState !== $location.$$state;
                    if (initializing || urlOrStateChanged) {
                        initializing = !1;
                        $rootScope.$evalAsync(function() {
                            var newUrl = $location.absUrl(), defaultPrevented = $rootScope.$broadcast("$locationChangeStart", newUrl, oldUrl, $location.$$state, oldState).defaultPrevented;
                            if ($location.absUrl() === newUrl) if (defaultPrevented) {
                                $location.$$parse(oldUrl);
                                $location.$$state = oldState;
                            } else {
                                urlOrStateChanged && setBrowserUrlWithFallback(newUrl, currentReplace, oldState === $location.$$state ? null : $location.$$state);
                                afterLocationChange(oldUrl, oldState);
                            }
                        });
                    }
                }
                $location.$$replace = !1;
            });
            return $location;
            function afterLocationChange(oldUrl, oldState) {
                $rootScope.$broadcast("$locationChangeSuccess", $location.absUrl(), oldUrl, $location.$$state, oldState);
            }
        } ];
    }
    function $LogProvider() {
        var debug = !0, self = this;
        this.debugEnabled = function(flag) {
            if (isDefined(flag)) {
                debug = flag;
                return this;
            }
            return debug;
        };
        this.$get = [ "$window", function($window) {
            var fn, formatStackTrace = msie || /\bEdge\//.test($window.navigator && $window.navigator.userAgent);
            return {
                log: consoleLog("log"),
                info: consoleLog("info"),
                warn: consoleLog("warn"),
                error: consoleLog("error"),
                debug: (fn = consoleLog("debug"), function() {
                    debug && fn.apply(self, arguments);
                })
            };
            function consoleLog(type) {
                var console = $window.console || {}, logFn = console[type] || console.log || noop;
                return function() {
                    var args = [];
                    forEach(arguments, function(arg) {
                        args.push(function(arg) {
                            isError(arg) && (arg.stack && formatStackTrace ? arg = arg.message && -1 === arg.stack.indexOf(arg.message) ? "Error: " + arg.message + "\n" + arg.stack : arg.stack : arg.sourceURL && (arg = arg.message + "\n" + arg.sourceURL + ":" + arg.line));
                            return arg;
                        }(arg));
                    });
                    return Function.prototype.apply.call(logFn, console, args);
                };
            }
        } ];
    }
    var $parseMinErr = minErr("$parse"), objectValueOf = {}.constructor.prototype.valueOf;
    function getStringValue(name) {
        return name + "";
    }
    var OPERATORS = createMap();
    forEach("+ - * / % === !== == != < > <= >= && || ! = |".split(" "), function(operator) {
        OPERATORS[operator] = !0;
    });
    var ESCAPE = {
        n: "\n",
        f: "\f",
        r: "\r",
        t: "\t",
        v: "\v",
        "'": "'",
        '"': '"'
    }, Lexer = function(options) {
        this.options = options;
    };
    Lexer.prototype = {
        constructor: Lexer,
        lex: function(text) {
            this.text = text;
            this.index = 0;
            this.tokens = [];
            for (;this.index < this.text.length; ) {
                var ch = this.text.charAt(this.index);
                if ('"' === ch || "'" === ch) this.readString(ch); else if (this.isNumber(ch) || "." === ch && this.isNumber(this.peek())) this.readNumber(); else if (this.isIdentifierStart(this.peekMultichar())) this.readIdent(); else if (this.is(ch, "(){}[].,;:?")) {
                    this.tokens.push({
                        index: this.index,
                        text: ch
                    });
                    this.index++;
                } else if (this.isWhitespace(ch)) this.index++; else {
                    var ch2 = ch + this.peek(), ch3 = ch2 + this.peek(2), op1 = OPERATORS[ch], op2 = OPERATORS[ch2], op3 = OPERATORS[ch3];
                    if (op1 || op2 || op3) {
                        var token = op3 ? ch3 : op2 ? ch2 : ch;
                        this.tokens.push({
                            index: this.index,
                            text: token,
                            operator: !0
                        });
                        this.index += token.length;
                    } else this.throwError("Unexpected next character ", this.index, this.index + 1);
                }
            }
            return this.tokens;
        },
        is: function(ch, chars) {
            return -1 !== chars.indexOf(ch);
        },
        peek: function(i) {
            var num = i || 1;
            return this.index + num < this.text.length && this.text.charAt(this.index + num);
        },
        isNumber: function(ch) {
            return "0" <= ch && ch <= "9" && "string" == typeof ch;
        },
        isWhitespace: function(ch) {
            return " " === ch || "\r" === ch || "\t" === ch || "\n" === ch || "\v" === ch || " " === ch;
        },
        isIdentifierStart: function(ch) {
            return this.options.isIdentifierStart ? this.options.isIdentifierStart(ch, this.codePointAt(ch)) : this.isValidIdentifierStart(ch);
        },
        isValidIdentifierStart: function(ch) {
            return "a" <= ch && ch <= "z" || "A" <= ch && ch <= "Z" || "_" === ch || "$" === ch;
        },
        isIdentifierContinue: function(ch) {
            return this.options.isIdentifierContinue ? this.options.isIdentifierContinue(ch, this.codePointAt(ch)) : this.isValidIdentifierContinue(ch);
        },
        isValidIdentifierContinue: function(ch, cp) {
            return this.isValidIdentifierStart(ch, cp) || this.isNumber(ch);
        },
        codePointAt: function(ch) {
            return 1 === ch.length ? ch.charCodeAt(0) : (ch.charCodeAt(0) << 10) + ch.charCodeAt(1) - 56613888;
        },
        peekMultichar: function() {
            var ch = this.text.charAt(this.index), peek = this.peek();
            if (!peek) return ch;
            var cp1 = ch.charCodeAt(0), cp2 = peek.charCodeAt(0);
            return 55296 <= cp1 && cp1 <= 56319 && 56320 <= cp2 && cp2 <= 57343 ? ch + peek : ch;
        },
        isExpOperator: function(ch) {
            return "-" === ch || "+" === ch || this.isNumber(ch);
        },
        throwError: function(error, start, end) {
            end = end || this.index;
            var colStr = isDefined(start) ? "s " + start + "-" + this.index + " [" + this.text.substring(start, end) + "]" : " " + end;
            throw $parseMinErr("lexerr", "Lexer Error: {0} at column{1} in expression [{2}].", error, colStr, this.text);
        },
        readNumber: function() {
            for (var number = "", start = this.index; this.index < this.text.length; ) {
                var ch = lowercase(this.text.charAt(this.index));
                if ("." === ch || this.isNumber(ch)) number += ch; else {
                    var peekCh = this.peek();
                    if ("e" === ch && this.isExpOperator(peekCh)) number += ch; else if (this.isExpOperator(ch) && peekCh && this.isNumber(peekCh) && "e" === number.charAt(number.length - 1)) number += ch; else {
                        if (!this.isExpOperator(ch) || peekCh && this.isNumber(peekCh) || "e" !== number.charAt(number.length - 1)) break;
                        this.throwError("Invalid exponent");
                    }
                }
                this.index++;
            }
            this.tokens.push({
                index: start,
                text: number,
                constant: !0,
                value: Number(number)
            });
        },
        readIdent: function() {
            var start = this.index;
            this.index += this.peekMultichar().length;
            for (;this.index < this.text.length; ) {
                var ch = this.peekMultichar();
                if (!this.isIdentifierContinue(ch)) break;
                this.index += ch.length;
            }
            this.tokens.push({
                index: start,
                text: this.text.slice(start, this.index),
                identifier: !0
            });
        },
        readString: function(quote) {
            var start = this.index;
            this.index++;
            for (var string = "", rawString = quote, escape = !1; this.index < this.text.length; ) {
                var ch = this.text.charAt(this.index);
                rawString += ch;
                if (escape) {
                    if ("u" === ch) {
                        var hex = this.text.substring(this.index + 1, this.index + 5);
                        hex.match(/[\da-f]{4}/i) || this.throwError("Invalid unicode escape [\\u" + hex + "]");
                        this.index += 4;
                        string += String.fromCharCode(parseInt(hex, 16));
                    } else {
                        string += ESCAPE[ch] || ch;
                    }
                    escape = !1;
                } else if ("\\" === ch) escape = !0; else {
                    if (ch === quote) {
                        this.index++;
                        this.tokens.push({
                            index: start,
                            text: rawString,
                            constant: !0,
                            value: string
                        });
                        return;
                    }
                    string += ch;
                }
                this.index++;
            }
            this.throwError("Unterminated quote", start);
        }
    };
    var AST = function(lexer, options) {
        this.lexer = lexer;
        this.options = options;
    };
    AST.Program = "Program";
    AST.ExpressionStatement = "ExpressionStatement";
    AST.AssignmentExpression = "AssignmentExpression";
    AST.ConditionalExpression = "ConditionalExpression";
    AST.LogicalExpression = "LogicalExpression";
    AST.BinaryExpression = "BinaryExpression";
    AST.UnaryExpression = "UnaryExpression";
    AST.CallExpression = "CallExpression";
    AST.MemberExpression = "MemberExpression";
    AST.Identifier = "Identifier";
    AST.Literal = "Literal";
    AST.ArrayExpression = "ArrayExpression";
    AST.Property = "Property";
    AST.ObjectExpression = "ObjectExpression";
    AST.ThisExpression = "ThisExpression";
    AST.LocalsExpression = "LocalsExpression";
    AST.NGValueParameter = "NGValueParameter";
    AST.prototype = {
        ast: function(text) {
            this.text = text;
            this.tokens = this.lexer.lex(text);
            var value = this.program();
            0 !== this.tokens.length && this.throwError("is an unexpected token", this.tokens[0]);
            return value;
        },
        program: function() {
            for (var body = []; ;) {
                0 < this.tokens.length && !this.peek("}", ")", ";", "]") && body.push(this.expressionStatement());
                if (!this.expect(";")) return {
                    type: AST.Program,
                    body: body
                };
            }
        },
        expressionStatement: function() {
            return {
                type: AST.ExpressionStatement,
                expression: this.filterChain()
            };
        },
        filterChain: function() {
            for (var left = this.expression(); this.expect("|"); ) left = this.filter(left);
            return left;
        },
        expression: function() {
            return this.assignment();
        },
        assignment: function() {
            var result = this.ternary();
            if (this.expect("=")) {
                if (!isAssignable(result)) throw $parseMinErr("lval", "Trying to assign a value to a non l-value");
                result = {
                    type: AST.AssignmentExpression,
                    left: result,
                    right: this.assignment(),
                    operator: "="
                };
            }
            return result;
        },
        ternary: function() {
            var alternate, consequent, test = this.logicalOR();
            if (this.expect("?")) {
                alternate = this.expression();
                if (this.consume(":")) {
                    consequent = this.expression();
                    return {
                        type: AST.ConditionalExpression,
                        test: test,
                        alternate: alternate,
                        consequent: consequent
                    };
                }
            }
            return test;
        },
        logicalOR: function() {
            for (var left = this.logicalAND(); this.expect("||"); ) left = {
                type: AST.LogicalExpression,
                operator: "||",
                left: left,
                right: this.logicalAND()
            };
            return left;
        },
        logicalAND: function() {
            for (var left = this.equality(); this.expect("&&"); ) left = {
                type: AST.LogicalExpression,
                operator: "&&",
                left: left,
                right: this.equality()
            };
            return left;
        },
        equality: function() {
            for (var token, left = this.relational(); token = this.expect("==", "!=", "===", "!=="); ) left = {
                type: AST.BinaryExpression,
                operator: token.text,
                left: left,
                right: this.relational()
            };
            return left;
        },
        relational: function() {
            for (var token, left = this.additive(); token = this.expect("<", ">", "<=", ">="); ) left = {
                type: AST.BinaryExpression,
                operator: token.text,
                left: left,
                right: this.additive()
            };
            return left;
        },
        additive: function() {
            for (var token, left = this.multiplicative(); token = this.expect("+", "-"); ) left = {
                type: AST.BinaryExpression,
                operator: token.text,
                left: left,
                right: this.multiplicative()
            };
            return left;
        },
        multiplicative: function() {
            for (var token, left = this.unary(); token = this.expect("*", "/", "%"); ) left = {
                type: AST.BinaryExpression,
                operator: token.text,
                left: left,
                right: this.unary()
            };
            return left;
        },
        unary: function() {
            var token;
            return (token = this.expect("+", "-", "!")) ? {
                type: AST.UnaryExpression,
                operator: token.text,
                prefix: !0,
                argument: this.unary()
            } : this.primary();
        },
        primary: function() {
            var primary, next;
            if (this.expect("(")) {
                primary = this.filterChain();
                this.consume(")");
            } else this.expect("[") ? primary = this.arrayDeclaration() : this.expect("{") ? primary = this.object() : this.selfReferential.hasOwnProperty(this.peek().text) ? primary = copy(this.selfReferential[this.consume().text]) : this.options.literals.hasOwnProperty(this.peek().text) ? primary = {
                type: AST.Literal,
                value: this.options.literals[this.consume().text]
            } : this.peek().identifier ? primary = this.identifier() : this.peek().constant ? primary = this.constant() : this.throwError("not a primary expression", this.peek());
            for (;next = this.expect("(", "[", "."); ) if ("(" === next.text) {
                primary = {
                    type: AST.CallExpression,
                    callee: primary,
                    arguments: this.parseArguments()
                };
                this.consume(")");
            } else if ("[" === next.text) {
                primary = {
                    type: AST.MemberExpression,
                    object: primary,
                    property: this.expression(),
                    computed: !0
                };
                this.consume("]");
            } else "." === next.text ? primary = {
                type: AST.MemberExpression,
                object: primary,
                property: this.identifier(),
                computed: !1
            } : this.throwError("IMPOSSIBLE");
            return primary;
        },
        filter: function(baseExpression) {
            for (var args = [ baseExpression ], result = {
                type: AST.CallExpression,
                callee: this.identifier(),
                arguments: args,
                filter: !0
            }; this.expect(":"); ) args.push(this.expression());
            return result;
        },
        parseArguments: function() {
            var args = [];
            if (")" !== this.peekToken().text) for (;args.push(this.filterChain()), this.expect(","); ) ;
            return args;
        },
        identifier: function() {
            var token = this.consume();
            token.identifier || this.throwError("is not a valid identifier", token);
            return {
                type: AST.Identifier,
                name: token.text
            };
        },
        constant: function() {
            return {
                type: AST.Literal,
                value: this.consume().value
            };
        },
        arrayDeclaration: function() {
            var elements = [];
            if ("]" !== this.peekToken().text) do {
                if (this.peek("]")) break;
                elements.push(this.expression());
            } while (this.expect(","));
            this.consume("]");
            return {
                type: AST.ArrayExpression,
                elements: elements
            };
        },
        object: function() {
            var property, properties = [];
            if ("}" !== this.peekToken().text) do {
                if (this.peek("}")) break;
                property = {
                    type: AST.Property,
                    kind: "init"
                };
                if (this.peek().constant) {
                    property.key = this.constant();
                    property.computed = !1;
                    this.consume(":");
                    property.value = this.expression();
                } else if (this.peek().identifier) {
                    property.key = this.identifier();
                    property.computed = !1;
                    if (this.peek(":")) {
                        this.consume(":");
                        property.value = this.expression();
                    } else property.value = property.key;
                } else if (this.peek("[")) {
                    this.consume("[");
                    property.key = this.expression();
                    this.consume("]");
                    property.computed = !0;
                    this.consume(":");
                    property.value = this.expression();
                } else this.throwError("invalid key", this.peek());
                properties.push(property);
            } while (this.expect(","));
            this.consume("}");
            return {
                type: AST.ObjectExpression,
                properties: properties
            };
        },
        throwError: function(msg, token) {
            throw $parseMinErr("syntax", "Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].", token.text, msg, token.index + 1, this.text, this.text.substring(token.index));
        },
        consume: function(e1) {
            if (0 === this.tokens.length) throw $parseMinErr("ueoe", "Unexpected end of expression: {0}", this.text);
            var token = this.expect(e1);
            token || this.throwError("is unexpected, expecting [" + e1 + "]", this.peek());
            return token;
        },
        peekToken: function() {
            if (0 === this.tokens.length) throw $parseMinErr("ueoe", "Unexpected end of expression: {0}", this.text);
            return this.tokens[0];
        },
        peek: function(e1, e2, e3, e4) {
            return this.peekAhead(0, e1, e2, e3, e4);
        },
        peekAhead: function(i, e1, e2, e3, e4) {
            if (this.tokens.length > i) {
                var token = this.tokens[i], t = token.text;
                if (t === e1 || t === e2 || t === e3 || t === e4 || !e1 && !e2 && !e3 && !e4) return token;
            }
            return !1;
        },
        expect: function(e1, e2, e3, e4) {
            var token = this.peek(e1, e2, e3, e4);
            if (token) {
                this.tokens.shift();
                return token;
            }
            return !1;
        },
        selfReferential: {
            this: {
                type: AST.ThisExpression
            },
            $locals: {
                type: AST.LocalsExpression
            }
        }
    };
    function ifDefined(v, d) {
        return void 0 !== v ? v : d;
    }
    function plusFn(l, r) {
        return void 0 === l ? r : void 0 === r ? l : l + r;
    }
    var PURITY_ABSOLUTE = 1, PURITY_RELATIVE = 2;
    function findConstantAndWatchExpressions(ast, $filter, parentIsPure) {
        var allConstants, argsToWatch, isStatelessFilter, astIsPure = ast.isPure = function(node, parentIsPure) {
            switch (node.type) {
              case AST.MemberExpression:
                if (node.computed) return !1;
                break;

              case AST.UnaryExpression:
                return PURITY_ABSOLUTE;

              case AST.BinaryExpression:
                return "+" !== node.operator && PURITY_ABSOLUTE;

              case AST.CallExpression:
                return !1;
            }
            return void 0 === parentIsPure ? PURITY_RELATIVE : parentIsPure;
        }(ast, parentIsPure);
        switch (ast.type) {
          case AST.Program:
            allConstants = !0;
            forEach(ast.body, function(expr) {
                findConstantAndWatchExpressions(expr.expression, $filter, astIsPure);
                allConstants = allConstants && expr.expression.constant;
            });
            ast.constant = allConstants;
            break;

          case AST.Literal:
            ast.constant = !0;
            ast.toWatch = [];
            break;

          case AST.UnaryExpression:
            findConstantAndWatchExpressions(ast.argument, $filter, astIsPure);
            ast.constant = ast.argument.constant;
            ast.toWatch = ast.argument.toWatch;
            break;

          case AST.BinaryExpression:
            findConstantAndWatchExpressions(ast.left, $filter, astIsPure);
            findConstantAndWatchExpressions(ast.right, $filter, astIsPure);
            ast.constant = ast.left.constant && ast.right.constant;
            ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
            break;

          case AST.LogicalExpression:
            findConstantAndWatchExpressions(ast.left, $filter, astIsPure);
            findConstantAndWatchExpressions(ast.right, $filter, astIsPure);
            ast.constant = ast.left.constant && ast.right.constant;
            ast.toWatch = ast.constant ? [] : [ ast ];
            break;

          case AST.ConditionalExpression:
            findConstantAndWatchExpressions(ast.test, $filter, astIsPure);
            findConstantAndWatchExpressions(ast.alternate, $filter, astIsPure);
            findConstantAndWatchExpressions(ast.consequent, $filter, astIsPure);
            ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
            ast.toWatch = ast.constant ? [] : [ ast ];
            break;

          case AST.Identifier:
            ast.constant = !1;
            ast.toWatch = [ ast ];
            break;

          case AST.MemberExpression:
            findConstantAndWatchExpressions(ast.object, $filter, astIsPure);
            ast.computed && findConstantAndWatchExpressions(ast.property, $filter, astIsPure);
            ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
            ast.toWatch = ast.constant ? [] : [ ast ];
            break;

          case AST.CallExpression:
            isStatelessFilter = !!ast.filter && function($filter, filterName) {
                return !$filter(filterName).$stateful;
            }($filter, ast.callee.name);
            allConstants = isStatelessFilter;
            argsToWatch = [];
            forEach(ast.arguments, function(expr) {
                findConstantAndWatchExpressions(expr, $filter, astIsPure);
                allConstants = allConstants && expr.constant;
                argsToWatch.push.apply(argsToWatch, expr.toWatch);
            });
            ast.constant = allConstants;
            ast.toWatch = isStatelessFilter ? argsToWatch : [ ast ];
            break;

          case AST.AssignmentExpression:
            findConstantAndWatchExpressions(ast.left, $filter, astIsPure);
            findConstantAndWatchExpressions(ast.right, $filter, astIsPure);
            ast.constant = ast.left.constant && ast.right.constant;
            ast.toWatch = [ ast ];
            break;

          case AST.ArrayExpression:
            allConstants = !0;
            argsToWatch = [];
            forEach(ast.elements, function(expr) {
                findConstantAndWatchExpressions(expr, $filter, astIsPure);
                allConstants = allConstants && expr.constant;
                argsToWatch.push.apply(argsToWatch, expr.toWatch);
            });
            ast.constant = allConstants;
            ast.toWatch = argsToWatch;
            break;

          case AST.ObjectExpression:
            allConstants = !0;
            argsToWatch = [];
            forEach(ast.properties, function(property) {
                findConstantAndWatchExpressions(property.value, $filter, astIsPure);
                allConstants = allConstants && property.value.constant;
                argsToWatch.push.apply(argsToWatch, property.value.toWatch);
                if (property.computed) {
                    findConstantAndWatchExpressions(property.key, $filter, !1);
                    allConstants = allConstants && property.key.constant;
                    argsToWatch.push.apply(argsToWatch, property.key.toWatch);
                }
            });
            ast.constant = allConstants;
            ast.toWatch = argsToWatch;
            break;

          case AST.ThisExpression:
          case AST.LocalsExpression:
            ast.constant = !1;
            ast.toWatch = [];
        }
    }
    function getInputs(body) {
        if (1 === body.length) {
            var lastExpression = body[0].expression, candidate = lastExpression.toWatch;
            return 1 !== candidate.length ? candidate : candidate[0] !== lastExpression ? candidate : void 0;
        }
    }
    function isAssignable(ast) {
        return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
    }
    function assignableAST(ast) {
        if (1 === ast.body.length && isAssignable(ast.body[0].expression)) return {
            type: AST.AssignmentExpression,
            left: ast.body[0].expression,
            right: {
                type: AST.NGValueParameter
            },
            operator: "="
        };
    }
    function ASTCompiler($filter) {
        this.$filter = $filter;
    }
    ASTCompiler.prototype = {
        compile: function(ast) {
            var self = this;
            this.state = {
                nextId: 0,
                filters: {},
                fn: {
                    vars: [],
                    body: [],
                    own: {}
                },
                assign: {
                    vars: [],
                    body: [],
                    own: {}
                },
                inputs: []
            };
            findConstantAndWatchExpressions(ast, self.$filter);
            var assignable, extra = "";
            this.stage = "assign";
            if (assignable = assignableAST(ast)) {
                this.state.computing = "assign";
                var result = this.nextId();
                this.recurse(assignable, result);
                this.return_(result);
                extra = "fn.assign=" + this.generateFunction("assign", "s,v,l");
            }
            var toWatch = getInputs(ast.body);
            self.stage = "inputs";
            forEach(toWatch, function(watch, key) {
                var fnKey = "fn" + key;
                self.state[fnKey] = {
                    vars: [],
                    body: [],
                    own: {}
                };
                self.state.computing = fnKey;
                var intoId = self.nextId();
                self.recurse(watch, intoId);
                self.return_(intoId);
                self.state.inputs.push({
                    name: fnKey,
                    isPure: watch.isPure
                });
                watch.watchId = key;
            });
            this.state.computing = "fn";
            this.stage = "main";
            this.recurse(ast);
            var fnString = '"' + this.USE + " " + this.STRICT + '";\n' + this.filterPrefix() + "var fn=" + this.generateFunction("fn", "s,l,a,i") + extra + this.watchFns() + "return fn;", fn = new Function("$filter", "getStringValue", "ifDefined", "plus", fnString)(this.$filter, getStringValue, ifDefined, plusFn);
            this.state = this.stage = void 0;
            return fn;
        },
        USE: "use",
        STRICT: "strict",
        watchFns: function() {
            var result = [], inputs = this.state.inputs, self = this;
            forEach(inputs, function(input) {
                result.push("var " + input.name + "=" + self.generateFunction(input.name, "s"));
                input.isPure && result.push(input.name, ".isPure=" + JSON.stringify(input.isPure) + ";");
            });
            inputs.length && result.push("fn.inputs=[" + inputs.map(function(i) {
                return i.name;
            }).join(",") + "];");
            return result.join("");
        },
        generateFunction: function(name, params) {
            return "function(" + params + "){" + this.varsPrefix(name) + this.body(name) + "};";
        },
        filterPrefix: function() {
            var parts = [], self = this;
            forEach(this.state.filters, function(id, filter) {
                parts.push(id + "=$filter(" + self.escape(filter) + ")");
            });
            return parts.length ? "var " + parts.join(",") + ";" : "";
        },
        varsPrefix: function(section) {
            return this.state[section].vars.length ? "var " + this.state[section].vars.join(",") + ";" : "";
        },
        body: function(section) {
            return this.state[section].body.join("");
        },
        recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
            var left, right, args, expression, computed, self = this;
            recursionFn = recursionFn || noop;
            if (skipWatchIdCheck || !isDefined(ast.watchId)) switch (ast.type) {
              case AST.Program:
                forEach(ast.body, function(expression, pos) {
                    self.recurse(expression.expression, void 0, void 0, function(expr) {
                        right = expr;
                    });
                    pos !== ast.body.length - 1 ? self.current().body.push(right, ";") : self.return_(right);
                });
                break;

              case AST.Literal:
                expression = this.escape(ast.value);
                this.assign(intoId, expression);
                recursionFn(intoId || expression);
                break;

              case AST.UnaryExpression:
                this.recurse(ast.argument, void 0, void 0, function(expr) {
                    right = expr;
                });
                expression = ast.operator + "(" + this.ifDefined(right, 0) + ")";
                this.assign(intoId, expression);
                recursionFn(expression);
                break;

              case AST.BinaryExpression:
                this.recurse(ast.left, void 0, void 0, function(expr) {
                    left = expr;
                });
                this.recurse(ast.right, void 0, void 0, function(expr) {
                    right = expr;
                });
                expression = "+" === ast.operator ? this.plus(left, right) : "-" === ast.operator ? this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0) : "(" + left + ")" + ast.operator + "(" + right + ")";
                this.assign(intoId, expression);
                recursionFn(expression);
                break;

              case AST.LogicalExpression:
                intoId = intoId || this.nextId();
                self.recurse(ast.left, intoId);
                self.if_("&&" === ast.operator ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
                recursionFn(intoId);
                break;

              case AST.ConditionalExpression:
                intoId = intoId || this.nextId();
                self.recurse(ast.test, intoId);
                self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
                recursionFn(intoId);
                break;

              case AST.Identifier:
                intoId = intoId || this.nextId();
                if (nameId) {
                    nameId.context = "inputs" === self.stage ? "s" : this.assign(this.nextId(), this.getHasOwnProperty("l", ast.name) + "?l:s");
                    nameId.computed = !1;
                    nameId.name = ast.name;
                }
                self.if_("inputs" === self.stage || self.not(self.getHasOwnProperty("l", ast.name)), function() {
                    self.if_("inputs" === self.stage || "s", function() {
                        create && 1 !== create && self.if_(self.isNull(self.nonComputedMember("s", ast.name)), self.lazyAssign(self.nonComputedMember("s", ast.name), "{}"));
                        self.assign(intoId, self.nonComputedMember("s", ast.name));
                    });
                }, intoId && self.lazyAssign(intoId, self.nonComputedMember("l", ast.name)));
                recursionFn(intoId);
                break;

              case AST.MemberExpression:
                left = nameId && (nameId.context = this.nextId()) || this.nextId();
                intoId = intoId || this.nextId();
                self.recurse(ast.object, left, void 0, function() {
                    self.if_(self.notNull(left), function() {
                        if (ast.computed) {
                            right = self.nextId();
                            self.recurse(ast.property, right);
                            self.getStringValue(right);
                            create && 1 !== create && self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), "{}"));
                            expression = self.computedMember(left, right);
                            self.assign(intoId, expression);
                            if (nameId) {
                                nameId.computed = !0;
                                nameId.name = right;
                            }
                        } else {
                            create && 1 !== create && self.if_(self.isNull(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), "{}"));
                            expression = self.nonComputedMember(left, ast.property.name);
                            self.assign(intoId, expression);
                            if (nameId) {
                                nameId.computed = !1;
                                nameId.name = ast.property.name;
                            }
                        }
                    }, function() {
                        self.assign(intoId, "undefined");
                    });
                    recursionFn(intoId);
                }, !!create);
                break;

              case AST.CallExpression:
                intoId = intoId || this.nextId();
                if (ast.filter) {
                    right = self.filter(ast.callee.name);
                    args = [];
                    forEach(ast.arguments, function(expr) {
                        var argument = self.nextId();
                        self.recurse(expr, argument);
                        args.push(argument);
                    });
                    expression = right + "(" + args.join(",") + ")";
                    self.assign(intoId, expression);
                    recursionFn(intoId);
                } else {
                    right = self.nextId();
                    left = {};
                    args = [];
                    self.recurse(ast.callee, right, left, function() {
                        self.if_(self.notNull(right), function() {
                            forEach(ast.arguments, function(expr) {
                                self.recurse(expr, ast.constant ? void 0 : self.nextId(), void 0, function(argument) {
                                    args.push(argument);
                                });
                            });
                            expression = left.name ? self.member(left.context, left.name, left.computed) + "(" + args.join(",") + ")" : right + "(" + args.join(",") + ")";
                            self.assign(intoId, expression);
                        }, function() {
                            self.assign(intoId, "undefined");
                        });
                        recursionFn(intoId);
                    });
                }
                break;

              case AST.AssignmentExpression:
                right = this.nextId();
                left = {};
                this.recurse(ast.left, void 0, left, function() {
                    self.if_(self.notNull(left.context), function() {
                        self.recurse(ast.right, right);
                        expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
                        self.assign(intoId, expression);
                        recursionFn(intoId || expression);
                    });
                }, 1);
                break;

              case AST.ArrayExpression:
                args = [];
                forEach(ast.elements, function(expr) {
                    self.recurse(expr, ast.constant ? void 0 : self.nextId(), void 0, function(argument) {
                        args.push(argument);
                    });
                });
                expression = "[" + args.join(",") + "]";
                this.assign(intoId, expression);
                recursionFn(intoId || expression);
                break;

              case AST.ObjectExpression:
                computed = !(args = []);
                forEach(ast.properties, function(property) {
                    property.computed && (computed = !0);
                });
                if (computed) {
                    intoId = intoId || this.nextId();
                    this.assign(intoId, "{}");
                    forEach(ast.properties, function(property) {
                        if (property.computed) {
                            left = self.nextId();
                            self.recurse(property.key, left);
                        } else left = property.key.type === AST.Identifier ? property.key.name : "" + property.key.value;
                        right = self.nextId();
                        self.recurse(property.value, right);
                        self.assign(self.member(intoId, left, property.computed), right);
                    });
                } else {
                    forEach(ast.properties, function(property) {
                        self.recurse(property.value, ast.constant ? void 0 : self.nextId(), void 0, function(expr) {
                            args.push(self.escape(property.key.type === AST.Identifier ? property.key.name : "" + property.key.value) + ":" + expr);
                        });
                    });
                    expression = "{" + args.join(",") + "}";
                    this.assign(intoId, expression);
                }
                recursionFn(intoId || expression);
                break;

              case AST.ThisExpression:
                this.assign(intoId, "s");
                recursionFn(intoId || "s");
                break;

              case AST.LocalsExpression:
                this.assign(intoId, "l");
                recursionFn(intoId || "l");
                break;

              case AST.NGValueParameter:
                this.assign(intoId, "v");
                recursionFn(intoId || "v");
            } else {
                intoId = intoId || this.nextId();
                this.if_("i", this.lazyAssign(intoId, this.computedMember("i", ast.watchId)), this.lazyRecurse(ast, intoId, nameId, recursionFn, create, !0));
            }
        },
        getHasOwnProperty: function(element, property) {
            var key = element + "." + property, own = this.current().own;
            own.hasOwnProperty(key) || (own[key] = this.nextId(!1, element + "&&(" + this.escape(property) + " in " + element + ")"));
            return own[key];
        },
        assign: function(id, value) {
            if (id) {
                this.current().body.push(id, "=", value, ";");
                return id;
            }
        },
        filter: function(filterName) {
            this.state.filters.hasOwnProperty(filterName) || (this.state.filters[filterName] = this.nextId(!0));
            return this.state.filters[filterName];
        },
        ifDefined: function(id, defaultValue) {
            return "ifDefined(" + id + "," + this.escape(defaultValue) + ")";
        },
        plus: function(left, right) {
            return "plus(" + left + "," + right + ")";
        },
        return_: function(id) {
            this.current().body.push("return ", id, ";");
        },
        if_: function(test, alternate, consequent) {
            if (!0 === test) alternate(); else {
                var body = this.current().body;
                body.push("if(", test, "){");
                alternate();
                body.push("}");
                if (consequent) {
                    body.push("else{");
                    consequent();
                    body.push("}");
                }
            }
        },
        not: function(expression) {
            return "!(" + expression + ")";
        },
        isNull: function(expression) {
            return expression + "==null";
        },
        notNull: function(expression) {
            return expression + "!=null";
        },
        nonComputedMember: function(left, right) {
            return /^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(right) ? left + "." + right : left + '["' + right.replace(/[^$_a-zA-Z0-9]/g, this.stringEscapeFn) + '"]';
        },
        computedMember: function(left, right) {
            return left + "[" + right + "]";
        },
        member: function(left, right, computed) {
            return computed ? this.computedMember(left, right) : this.nonComputedMember(left, right);
        },
        getStringValue: function(item) {
            this.assign(item, "getStringValue(" + item + ")");
        },
        lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
            var self = this;
            return function() {
                self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
            };
        },
        lazyAssign: function(id, value) {
            var self = this;
            return function() {
                self.assign(id, value);
            };
        },
        stringEscapeRegex: /[^ a-zA-Z0-9]/g,
        stringEscapeFn: function(c) {
            return "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4);
        },
        escape: function(value) {
            if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
            if (isNumber(value)) return value.toString();
            if (!0 === value) return "true";
            if (!1 === value) return "false";
            if (null === value) return "null";
            if (void 0 === value) return "undefined";
            throw $parseMinErr("esc", "IMPOSSIBLE");
        },
        nextId: function(skip, init) {
            var id = "v" + this.state.nextId++;
            skip || this.current().vars.push(id + (init ? "=" + init : ""));
            return id;
        },
        current: function() {
            return this.state[this.state.computing];
        }
    };
    function ASTInterpreter($filter) {
        this.$filter = $filter;
    }
    ASTInterpreter.prototype = {
        compile: function(ast) {
            var assignable, assign, self = this;
            findConstantAndWatchExpressions(ast, self.$filter);
            (assignable = assignableAST(ast)) && (assign = this.recurse(assignable));
            var inputs, toWatch = getInputs(ast.body);
            if (toWatch) {
                inputs = [];
                forEach(toWatch, function(watch, key) {
                    var input = self.recurse(watch);
                    input.isPure = watch.isPure;
                    watch.input = input;
                    inputs.push(input);
                    watch.watchId = key;
                });
            }
            var expressions = [];
            forEach(ast.body, function(expression) {
                expressions.push(self.recurse(expression.expression));
            });
            var fn = 0 === ast.body.length ? noop : 1 === ast.body.length ? expressions[0] : function(scope, locals) {
                var lastValue;
                forEach(expressions, function(exp) {
                    lastValue = exp(scope, locals);
                });
                return lastValue;
            };
            assign && (fn.assign = function(scope, value, locals) {
                return assign(scope, locals, value);
            });
            inputs && (fn.inputs = inputs);
            return fn;
        },
        recurse: function(ast, context, create) {
            var left, right, args, self = this;
            if (ast.input) return this.inputs(ast.input, ast.watchId);
            switch (ast.type) {
              case AST.Literal:
                return this.value(ast.value, context);

              case AST.UnaryExpression:
                right = this.recurse(ast.argument);
                return this["unary" + ast.operator](right, context);

              case AST.BinaryExpression:
              case AST.LogicalExpression:
                left = this.recurse(ast.left);
                right = this.recurse(ast.right);
                return this["binary" + ast.operator](left, right, context);

              case AST.ConditionalExpression:
                return this["ternary?:"](this.recurse(ast.test), this.recurse(ast.alternate), this.recurse(ast.consequent), context);

              case AST.Identifier:
                return self.identifier(ast.name, context, create);

              case AST.MemberExpression:
                left = this.recurse(ast.object, !1, !!create);
                ast.computed || (right = ast.property.name);
                ast.computed && (right = this.recurse(ast.property));
                return ast.computed ? this.computedMember(left, right, context, create) : this.nonComputedMember(left, right, context, create);

              case AST.CallExpression:
                args = [];
                forEach(ast.arguments, function(expr) {
                    args.push(self.recurse(expr));
                });
                ast.filter && (right = this.$filter(ast.callee.name));
                ast.filter || (right = this.recurse(ast.callee, !0));
                return ast.filter ? function(scope, locals, assign, inputs) {
                    for (var values = [], i = 0; i < args.length; ++i) values.push(args[i](scope, locals, assign, inputs));
                    var value = right.apply(void 0, values, inputs);
                    return context ? {
                        context: void 0,
                        name: void 0,
                        value: value
                    } : value;
                } : function(scope, locals, assign, inputs) {
                    var value, rhs = right(scope, locals, assign, inputs);
                    if (null != rhs.value) {
                        for (var values = [], i = 0; i < args.length; ++i) values.push(args[i](scope, locals, assign, inputs));
                        value = rhs.value.apply(rhs.context, values);
                    }
                    return context ? {
                        value: value
                    } : value;
                };

              case AST.AssignmentExpression:
                left = this.recurse(ast.left, !0, 1);
                right = this.recurse(ast.right);
                return function(scope, locals, assign, inputs) {
                    var lhs = left(scope, locals, assign, inputs), rhs = right(scope, locals, assign, inputs);
                    lhs.context[lhs.name] = rhs;
                    return context ? {
                        value: rhs
                    } : rhs;
                };

              case AST.ArrayExpression:
                args = [];
                forEach(ast.elements, function(expr) {
                    args.push(self.recurse(expr));
                });
                return function(scope, locals, assign, inputs) {
                    for (var value = [], i = 0; i < args.length; ++i) value.push(args[i](scope, locals, assign, inputs));
                    return context ? {
                        value: value
                    } : value;
                };

              case AST.ObjectExpression:
                args = [];
                forEach(ast.properties, function(property) {
                    property.computed ? args.push({
                        key: self.recurse(property.key),
                        computed: !0,
                        value: self.recurse(property.value)
                    }) : args.push({
                        key: property.key.type === AST.Identifier ? property.key.name : "" + property.key.value,
                        computed: !1,
                        value: self.recurse(property.value)
                    });
                });
                return function(scope, locals, assign, inputs) {
                    for (var value = {}, i = 0; i < args.length; ++i) args[i].computed ? value[args[i].key(scope, locals, assign, inputs)] = args[i].value(scope, locals, assign, inputs) : value[args[i].key] = args[i].value(scope, locals, assign, inputs);
                    return context ? {
                        value: value
                    } : value;
                };

              case AST.ThisExpression:
                return function(scope) {
                    return context ? {
                        value: scope
                    } : scope;
                };

              case AST.LocalsExpression:
                return function(scope, locals) {
                    return context ? {
                        value: locals
                    } : locals;
                };

              case AST.NGValueParameter:
                return function(scope, locals, assign) {
                    return context ? {
                        value: assign
                    } : assign;
                };
            }
        },
        "unary+": function(argument, context) {
            return function(scope, locals, assign, inputs) {
                var arg = argument(scope, locals, assign, inputs);
                arg = isDefined(arg) ? +arg : 0;
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "unary-": function(argument, context) {
            return function(scope, locals, assign, inputs) {
                var arg = argument(scope, locals, assign, inputs);
                arg = isDefined(arg) ? -arg : -0;
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "unary!": function(argument, context) {
            return function(scope, locals, assign, inputs) {
                var arg = !argument(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary+": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = plusFn(left(scope, locals, assign, inputs), right(scope, locals, assign, inputs));
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary-": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var lhs = left(scope, locals, assign, inputs), rhs = right(scope, locals, assign, inputs), arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary*": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary/": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary%": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary===": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary!==": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary==": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary!=": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary<": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary>": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary<=": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary>=": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary&&": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary||": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "ternary?:": function(test, alternate, consequent, context) {
            return function(scope, locals, assign, inputs) {
                var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        value: function(value, context) {
            return function() {
                return context ? {
                    context: void 0,
                    name: void 0,
                    value: value
                } : value;
            };
        },
        identifier: function(name, context, create) {
            return function(scope, locals, assign, inputs) {
                var base = locals && name in locals ? locals : scope;
                create && 1 !== create && base && null == base[name] && (base[name] = {});
                var value = base ? base[name] : void 0;
                return context ? {
                    context: base,
                    name: name,
                    value: value
                } : value;
            };
        },
        computedMember: function(left, right, context, create) {
            return function(scope, locals, assign, inputs) {
                var rhs, value, lhs = left(scope, locals, assign, inputs);
                if (null != lhs) {
                    rhs = getStringValue(rhs = right(scope, locals, assign, inputs));
                    create && 1 !== create && lhs && !lhs[rhs] && (lhs[rhs] = {});
                    value = lhs[rhs];
                }
                return context ? {
                    context: lhs,
                    name: rhs,
                    value: value
                } : value;
            };
        },
        nonComputedMember: function(left, right, context, create) {
            return function(scope, locals, assign, inputs) {
                var lhs = left(scope, locals, assign, inputs);
                create && 1 !== create && lhs && null == lhs[right] && (lhs[right] = {});
                var value = null != lhs ? lhs[right] : void 0;
                return context ? {
                    context: lhs,
                    name: right,
                    value: value
                } : value;
            };
        },
        inputs: function(input, watchId) {
            return function(scope, value, locals, inputs) {
                return inputs ? inputs[watchId] : input(scope, value, locals);
            };
        }
    };
    function Parser(lexer, $filter, options) {
        this.ast = new AST(lexer, options);
        this.astCompiler = options.csp ? new ASTInterpreter($filter) : new ASTCompiler($filter);
    }
    Parser.prototype = {
        constructor: Parser,
        parse: function(text) {
            var ast = this.getAst(text), fn = this.astCompiler.compile(ast.ast);
            fn.literal = function(ast) {
                return 0 === ast.body.length || 1 === ast.body.length && (ast.body[0].expression.type === AST.Literal || ast.body[0].expression.type === AST.ArrayExpression || ast.body[0].expression.type === AST.ObjectExpression);
            }(ast.ast);
            fn.constant = function(ast) {
                return ast.constant;
            }(ast.ast);
            fn.oneTime = ast.oneTime;
            return fn;
        },
        getAst: function(exp) {
            var oneTime = !1;
            if (":" === (exp = exp.trim()).charAt(0) && ":" === exp.charAt(1)) {
                oneTime = !0;
                exp = exp.substring(2);
            }
            return {
                ast: this.ast.ast(exp),
                oneTime: oneTime
            };
        }
    };
    function getValueOf(value) {
        return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
    }
    function $ParseProvider() {
        var identStart, identContinue, cache = createMap(), literals = {
            true: !0,
            false: !1,
            null: null,
            undefined: void 0
        };
        this.addLiteral = function(literalName, literalValue) {
            literals[literalName] = literalValue;
        };
        this.setIdentifierFns = function(identifierStart, identifierContinue) {
            identStart = identifierStart;
            identContinue = identifierContinue;
            return this;
        };
        this.$get = [ "$filter", function($filter) {
            var $parseOptions = {
                csp: csp().noUnsafeEval,
                literals: copy(literals),
                isIdentifierStart: isFunction(identStart) && identStart,
                isIdentifierContinue: isFunction(identContinue) && identContinue
            };
            $parse.$$getAst = function(exp) {
                return new Parser(new Lexer($parseOptions), $filter, $parseOptions).getAst(exp).ast;
            };
            return $parse;
            function $parse(exp, interceptorFn) {
                var parsedExpression, cacheKey;
                switch (typeof exp) {
                  case "string":
                    exp = exp.trim();
                    if (!(parsedExpression = cache[cacheKey = exp])) {
                        (parsedExpression = new Parser(new Lexer($parseOptions), $filter, $parseOptions).parse(exp)).constant ? parsedExpression.$$watchDelegate = constantWatchDelegate : parsedExpression.oneTime ? parsedExpression.$$watchDelegate = parsedExpression.literal ? oneTimeLiteralWatchDelegate : oneTimeWatchDelegate : parsedExpression.inputs && (parsedExpression.$$watchDelegate = inputsWatchDelegate);
                        cache[cacheKey] = parsedExpression;
                    }
                    return addInterceptor(parsedExpression, interceptorFn);

                  case "function":
                    return addInterceptor(exp, interceptorFn);

                  default:
                    return addInterceptor(noop, interceptorFn);
                }
            }
            function expressionInputDirtyCheck(newValue, oldValueOfValue, compareObjectIdentity) {
                return null == newValue || null == oldValueOfValue ? newValue === oldValueOfValue : !("object" == typeof newValue && "object" == typeof (newValue = getValueOf(newValue)) && !compareObjectIdentity) && (newValue === oldValueOfValue || newValue != newValue && oldValueOfValue != oldValueOfValue);
            }
            function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
                var lastResult, inputExpressions = parsedExpression.inputs;
                if (1 === inputExpressions.length) {
                    var oldInputValueOf = expressionInputDirtyCheck;
                    inputExpressions = inputExpressions[0];
                    return scope.$watch(function(scope) {
                        var newInputValue = inputExpressions(scope);
                        if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf, inputExpressions.isPure)) {
                            lastResult = parsedExpression(scope, void 0, void 0, [ newInputValue ]);
                            oldInputValueOf = newInputValue && getValueOf(newInputValue);
                        }
                        return lastResult;
                    }, listener, objectEquality, prettyPrintExpression);
                }
                for (var oldInputValueOfValues = [], oldInputValues = [], i = 0, ii = inputExpressions.length; i < ii; i++) {
                    oldInputValueOfValues[i] = expressionInputDirtyCheck;
                    oldInputValues[i] = null;
                }
                return scope.$watch(function(scope) {
                    for (var changed = !1, i = 0, ii = inputExpressions.length; i < ii; i++) {
                        var newInputValue = inputExpressions[i](scope);
                        if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i], inputExpressions[i].isPure))) {
                            oldInputValues[i] = newInputValue;
                            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
                        }
                    }
                    changed && (lastResult = parsedExpression(scope, void 0, void 0, oldInputValues));
                    return lastResult;
                }, listener, objectEquality, prettyPrintExpression);
            }
            function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
                var unwatch, lastValue;
                return unwatch = parsedExpression.inputs ? inputsWatchDelegate(scope, oneTimeListener, objectEquality, parsedExpression, prettyPrintExpression) : scope.$watch(function(scope) {
                    return parsedExpression(scope);
                }, oneTimeListener, objectEquality);
                function oneTimeListener(value, old, scope) {
                    lastValue = value;
                    isFunction(listener) && listener(value, old, scope);
                    isDefined(value) && scope.$$postDigest(function() {
                        isDefined(lastValue) && unwatch();
                    });
                }
            }
            function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
                var unwatch, lastValue;
                return unwatch = scope.$watch(function(scope) {
                    return parsedExpression(scope);
                }, function(value, old, scope) {
                    lastValue = value;
                    isFunction(listener) && listener(value, old, scope);
                    isAllDefined(value) && scope.$$postDigest(function() {
                        isAllDefined(lastValue) && unwatch();
                    });
                }, objectEquality);
                function isAllDefined(value) {
                    var allDefined = !0;
                    forEach(value, function(val) {
                        isDefined(val) || (allDefined = !1);
                    });
                    return allDefined;
                }
            }
            function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
                var unwatch = scope.$watch(function(scope) {
                    unwatch();
                    return parsedExpression(scope);
                }, listener, objectEquality);
                return unwatch;
            }
            function addInterceptor(parsedExpression, interceptorFn) {
                if (!interceptorFn) return parsedExpression;
                var watchDelegate = parsedExpression.$$watchDelegate, useInputs = !1, fn = watchDelegate !== oneTimeLiteralWatchDelegate && watchDelegate !== oneTimeWatchDelegate ? function(scope, locals, assign, inputs) {
                    var value = useInputs && inputs ? inputs[0] : parsedExpression(scope, locals, assign, inputs);
                    return interceptorFn(value, scope, locals);
                } : function(scope, locals, assign, inputs) {
                    var value = parsedExpression(scope, locals, assign, inputs), result = interceptorFn(value, scope, locals);
                    return isDefined(value) ? result : value;
                };
                useInputs = !parsedExpression.inputs;
                if (watchDelegate && watchDelegate !== inputsWatchDelegate) {
                    fn.$$watchDelegate = watchDelegate;
                    fn.inputs = parsedExpression.inputs;
                } else if (!interceptorFn.$stateful) {
                    fn.$$watchDelegate = inputsWatchDelegate;
                    fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [ parsedExpression ];
                }
                fn.inputs && (fn.inputs = fn.inputs.map(function(e) {
                    return e.isPure === PURITY_RELATIVE ? function(s) {
                        return e(s);
                    } : e;
                }));
                return fn;
            }
        } ];
    }
    function $QProvider() {
        var errorOnUnhandledRejections = !0;
        this.$get = [ "$rootScope", "$exceptionHandler", function($rootScope, $exceptionHandler) {
            return qFactory(function(callback) {
                $rootScope.$evalAsync(callback);
            }, $exceptionHandler, errorOnUnhandledRejections);
        } ];
        this.errorOnUnhandledRejections = function(value) {
            if (isDefined(value)) {
                errorOnUnhandledRejections = value;
                return this;
            }
            return errorOnUnhandledRejections;
        };
    }
    function $$QProvider() {
        var errorOnUnhandledRejections = !0;
        this.$get = [ "$browser", "$exceptionHandler", function($browser, $exceptionHandler) {
            return qFactory(function(callback) {
                $browser.defer(callback);
            }, $exceptionHandler, errorOnUnhandledRejections);
        } ];
        this.errorOnUnhandledRejections = function(value) {
            if (isDefined(value)) {
                errorOnUnhandledRejections = value;
                return this;
            }
            return errorOnUnhandledRejections;
        };
    }
    function qFactory(nextTick, exceptionHandler, errorOnUnhandledRejections) {
        var $qMinErr = minErr("$q", TypeError), queueSize = 0, checkQueue = [];
        function defer() {
            return new Deferred();
        }
        function Deferred() {
            var promise = this.promise = new Promise();
            this.resolve = function(val) {
                resolvePromise(promise, val);
            };
            this.reject = function(reason) {
                rejectPromise(promise, reason);
            };
            this.notify = function(progress) {
                notifyPromise(promise, progress);
            };
        }
        function Promise() {
            this.$$state = {
                status: 0
            };
        }
        extend(Promise.prototype, {
            then: function(onFulfilled, onRejected, progressBack) {
                if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) return this;
                var result = new Promise();
                this.$$state.pending = this.$$state.pending || [];
                this.$$state.pending.push([ result, onFulfilled, onRejected, progressBack ]);
                0 < this.$$state.status && scheduleProcessQueue(this.$$state);
                return result;
            },
            catch: function(callback) {
                return this.then(null, callback);
            },
            finally: function(callback, progressBack) {
                return this.then(function(value) {
                    return handleCallback(value, resolve, callback);
                }, function(error) {
                    return handleCallback(error, reject, callback);
                }, progressBack);
            }
        });
        function processChecks() {
            for (;!queueSize && checkQueue.length; ) {
                var toCheck = checkQueue.shift();
                if (!isStateExceptionHandled(toCheck)) {
                    markQStateExceptionHandled(toCheck);
                    var errorMessage = "Possibly unhandled rejection: " + toDebugString(toCheck.value);
                    isError(toCheck.value) ? exceptionHandler(toCheck.value, errorMessage) : exceptionHandler(errorMessage);
                }
            }
        }
        function scheduleProcessQueue(state) {
            if (errorOnUnhandledRejections && !state.pending && 2 === state.status && !isStateExceptionHandled(state)) {
                0 === queueSize && 0 === checkQueue.length && nextTick(processChecks);
                checkQueue.push(state);
            }
            if (!state.processScheduled && state.pending) {
                state.processScheduled = !0;
                ++queueSize;
                nextTick(function() {
                    !function(state) {
                        var fn, promise, pending;
                        pending = state.pending;
                        state.processScheduled = !1;
                        state.pending = void 0;
                        try {
                            for (var i = 0, ii = pending.length; i < ii; ++i) {
                                markQStateExceptionHandled(state);
                                promise = pending[i][0];
                                fn = pending[i][state.status];
                                try {
                                    isFunction(fn) ? resolvePromise(promise, fn(state.value)) : 1 === state.status ? resolvePromise(promise, state.value) : rejectPromise(promise, state.value);
                                } catch (e) {
                                    rejectPromise(promise, e);
                                    e && !0 === e.$$passToExceptionHandler && exceptionHandler(e);
                                }
                            }
                        } finally {
                            --queueSize;
                            errorOnUnhandledRejections && 0 === queueSize && nextTick(processChecks);
                        }
                    }(state);
                });
            }
        }
        function resolvePromise(promise, val) {
            promise.$$state.status || (val === promise ? $$reject(promise, $qMinErr("qcycle", "Expected promise to be resolved with value other than itself '{0}'", val)) : function $$resolve(promise, val) {
                var then;
                var done = !1;
                try {
                    (isObject(val) || isFunction(val)) && (then = val.then);
                    if (isFunction(then)) {
                        promise.$$state.status = -1;
                        then.call(val, doResolve, doReject, doNotify);
                    } else {
                        promise.$$state.value = val;
                        promise.$$state.status = 1;
                        scheduleProcessQueue(promise.$$state);
                    }
                } catch (e) {
                    doReject(e);
                }
                function doResolve(val) {
                    if (!done) {
                        done = !0;
                        $$resolve(promise, val);
                    }
                }
                function doReject(val) {
                    if (!done) {
                        done = !0;
                        $$reject(promise, val);
                    }
                }
                function doNotify(progress) {
                    notifyPromise(promise, progress);
                }
            }(promise, val));
        }
        function rejectPromise(promise, reason) {
            promise.$$state.status || $$reject(promise, reason);
        }
        function $$reject(promise, reason) {
            promise.$$state.value = reason;
            promise.$$state.status = 2;
            scheduleProcessQueue(promise.$$state);
        }
        function notifyPromise(promise, progress) {
            var callbacks = promise.$$state.pending;
            promise.$$state.status <= 0 && callbacks && callbacks.length && nextTick(function() {
                for (var callback, result, i = 0, ii = callbacks.length; i < ii; i++) {
                    result = callbacks[i][0];
                    callback = callbacks[i][3];
                    try {
                        notifyPromise(result, isFunction(callback) ? callback(progress) : progress);
                    } catch (e) {
                        exceptionHandler(e);
                    }
                }
            });
        }
        function reject(reason) {
            var result = new Promise();
            rejectPromise(result, reason);
            return result;
        }
        function handleCallback(value, resolver, callback) {
            var callbackOutput = null;
            try {
                isFunction(callback) && (callbackOutput = callback());
            } catch (e) {
                return reject(e);
            }
            return isPromiseLike(callbackOutput) ? callbackOutput.then(function() {
                return resolver(value);
            }, reject) : resolver(value);
        }
        function when(value, callback, errback, progressBack) {
            var result = new Promise();
            resolvePromise(result, value);
            return result.then(callback, errback, progressBack);
        }
        var resolve = when;
        function $Q(resolver) {
            if (!isFunction(resolver)) throw $qMinErr("norslvr", "Expected resolverFn, got '{0}'", resolver);
            var promise = new Promise();
            resolver(function(value) {
                resolvePromise(promise, value);
            }, function(reason) {
                rejectPromise(promise, reason);
            });
            return promise;
        }
        $Q.prototype = Promise.prototype;
        $Q.defer = defer;
        $Q.reject = reject;
        $Q.when = when;
        $Q.resolve = resolve;
        $Q.all = function(promises) {
            var result = new Promise(), counter = 0, results = isArray(promises) ? [] : {};
            forEach(promises, function(promise, key) {
                counter++;
                when(promise).then(function(value) {
                    results[key] = value;
                    --counter || resolvePromise(result, results);
                }, function(reason) {
                    rejectPromise(result, reason);
                });
            });
            0 === counter && resolvePromise(result, results);
            return result;
        };
        $Q.race = function(promises) {
            var deferred = defer();
            forEach(promises, function(promise) {
                when(promise).then(deferred.resolve, deferred.reject);
            });
            return deferred.promise;
        };
        return $Q;
    }
    function isStateExceptionHandled(state) {
        return !!state.pur;
    }
    function markQStateExceptionHandled(state) {
        state.pur = !0;
    }
    function markQExceptionHandled(q) {
        markQStateExceptionHandled(q.$$state);
    }
    function $$RAFProvider() {
        this.$get = [ "$window", "$timeout", function($window, $timeout) {
            var requestAnimationFrame = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame, cancelAnimationFrame = $window.cancelAnimationFrame || $window.webkitCancelAnimationFrame || $window.webkitCancelRequestAnimationFrame, rafSupported = !!requestAnimationFrame, raf = rafSupported ? function(fn) {
                var id = requestAnimationFrame(fn);
                return function() {
                    cancelAnimationFrame(id);
                };
            } : function(fn) {
                var timer = $timeout(fn, 16.66, !1);
                return function() {
                    $timeout.cancel(timer);
                };
            };
            raf.supported = rafSupported;
            return raf;
        } ];
    }
    function $RootScopeProvider() {
        var TTL = 10, $rootScopeMinErr = minErr("$rootScope"), lastDirtyWatch = null, applyAsyncId = null;
        this.digestTtl = function(value) {
            arguments.length && (TTL = value);
            return TTL;
        };
        this.$get = [ "$exceptionHandler", "$parse", "$browser", function($exceptionHandler, $parse, $browser) {
            function destroyChildScope($event) {
                $event.currentScope.$$destroyed = !0;
            }
            function Scope() {
                this.$id = nextUid();
                this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null;
                (this.$root = this).$$destroyed = !1;
                this.$$suspended = !1;
                this.$$listeners = {};
                this.$$listenerCount = {};
                this.$$watchersCount = 0;
                this.$$isolateBindings = null;
            }
            Scope.prototype = {
                constructor: Scope,
                $new: function(isolate, parent) {
                    var child;
                    parent = parent || this;
                    if (isolate) (child = new Scope()).$root = this.$root; else {
                        this.$$ChildScope || (this.$$ChildScope = function(parent) {
                            function ChildScope() {
                                this.$$watchers = this.$$nextSibling = this.$$childHead = this.$$childTail = null;
                                this.$$listeners = {};
                                this.$$listenerCount = {};
                                this.$$watchersCount = 0;
                                this.$id = nextUid();
                                this.$$ChildScope = null;
                                this.$$suspended = !1;
                            }
                            ChildScope.prototype = parent;
                            return ChildScope;
                        }(this));
                        child = new this.$$ChildScope();
                    }
                    child.$parent = parent;
                    child.$$prevSibling = parent.$$childTail;
                    if (parent.$$childHead) {
                        parent.$$childTail.$$nextSibling = child;
                        parent.$$childTail = child;
                    } else parent.$$childHead = parent.$$childTail = child;
                    (isolate || parent !== this) && child.$on("$destroy", destroyChildScope);
                    return child;
                },
                $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {
                    var get = $parse(watchExp), fn = isFunction(listener) ? listener : noop;
                    if (get.$$watchDelegate) return get.$$watchDelegate(this, fn, objectEquality, get, watchExp);
                    var scope = this, array = scope.$$watchers, watcher = {
                        fn: fn,
                        last: initWatchVal,
                        get: get,
                        exp: prettyPrintExpression || watchExp,
                        eq: !!objectEquality
                    };
                    lastDirtyWatch = null;
                    array || ((array = scope.$$watchers = []).$$digestWatchIndex = -1);
                    array.unshift(watcher);
                    array.$$digestWatchIndex++;
                    incrementWatchersCount(this, 1);
                    return function() {
                        var index = arrayRemove(array, watcher);
                        if (0 <= index) {
                            incrementWatchersCount(scope, -1);
                            index < array.$$digestWatchIndex && array.$$digestWatchIndex--;
                        }
                        lastDirtyWatch = null;
                    };
                },
                $watchGroup: function(watchExpressions, listener) {
                    var oldValues = new Array(watchExpressions.length), newValues = new Array(watchExpressions.length), deregisterFns = [], self = this, changeReactionScheduled = !1, firstRun = !0;
                    if (!watchExpressions.length) {
                        var shouldCall = !0;
                        self.$evalAsync(function() {
                            shouldCall && listener(newValues, newValues, self);
                        });
                        return function() {
                            shouldCall = !1;
                        };
                    }
                    if (1 === watchExpressions.length) return this.$watch(watchExpressions[0], function(value, oldValue, scope) {
                        newValues[0] = value;
                        oldValues[0] = oldValue;
                        listener(newValues, value === oldValue ? newValues : oldValues, scope);
                    });
                    forEach(watchExpressions, function(expr, i) {
                        var unwatchFn = self.$watch(expr, function(value, oldValue) {
                            newValues[i] = value;
                            oldValues[i] = oldValue;
                            if (!changeReactionScheduled) {
                                changeReactionScheduled = !0;
                                self.$evalAsync(watchGroupAction);
                            }
                        });
                        deregisterFns.push(unwatchFn);
                    });
                    function watchGroupAction() {
                        changeReactionScheduled = !1;
                        if (firstRun) {
                            firstRun = !1;
                            listener(newValues, newValues, self);
                        } else listener(newValues, oldValues, self);
                    }
                    return function() {
                        for (;deregisterFns.length; ) deregisterFns.shift()();
                    };
                },
                $watchCollection: function(obj, listener) {
                    $watchCollectionInterceptor.$stateful = !0;
                    var newValue, oldValue, veryOldValue, self = this, trackVeryOldValue = 1 < listener.length, changeDetected = 0, changeDetector = $parse(obj, $watchCollectionInterceptor), internalArray = [], internalObject = {}, initRun = !0, oldLength = 0;
                    function $watchCollectionInterceptor(_value) {
                        var newLength, key, newItem, oldItem;
                        if (!isUndefined(newValue = _value)) {
                            if (isObject(newValue)) if (isArrayLike(newValue)) {
                                if (oldValue !== internalArray) {
                                    oldLength = (oldValue = internalArray).length = 0;
                                    changeDetected++;
                                }
                                newLength = newValue.length;
                                if (oldLength !== newLength) {
                                    changeDetected++;
                                    oldValue.length = oldLength = newLength;
                                }
                                for (var i = 0; i < newLength; i++) {
                                    oldItem = oldValue[i];
                                    newItem = newValue[i];
                                    if (!(oldItem != oldItem && newItem != newItem) && oldItem !== newItem) {
                                        changeDetected++;
                                        oldValue[i] = newItem;
                                    }
                                }
                            } else {
                                if (oldValue !== internalObject) {
                                    oldValue = internalObject = {};
                                    oldLength = 0;
                                    changeDetected++;
                                }
                                newLength = 0;
                                for (key in newValue) if (hasOwnProperty.call(newValue, key)) {
                                    newLength++;
                                    newItem = newValue[key];
                                    oldItem = oldValue[key];
                                    if (key in oldValue) {
                                        if (!(oldItem != oldItem && newItem != newItem) && oldItem !== newItem) {
                                            changeDetected++;
                                            oldValue[key] = newItem;
                                        }
                                    } else {
                                        oldLength++;
                                        oldValue[key] = newItem;
                                        changeDetected++;
                                    }
                                }
                                if (newLength < oldLength) {
                                    changeDetected++;
                                    for (key in oldValue) if (!hasOwnProperty.call(newValue, key)) {
                                        oldLength--;
                                        delete oldValue[key];
                                    }
                                }
                            } else if (oldValue !== newValue) {
                                oldValue = newValue;
                                changeDetected++;
                            }
                            return changeDetected;
                        }
                    }
                    return this.$watch(changeDetector, function() {
                        if (initRun) {
                            initRun = !1;
                            listener(newValue, newValue, self);
                        } else listener(newValue, veryOldValue, self);
                        if (trackVeryOldValue) if (isObject(newValue)) if (isArrayLike(newValue)) {
                            veryOldValue = new Array(newValue.length);
                            for (var i = 0; i < newValue.length; i++) veryOldValue[i] = newValue[i];
                        } else {
                            veryOldValue = {};
                            for (var key in newValue) hasOwnProperty.call(newValue, key) && (veryOldValue[key] = newValue[key]);
                        } else veryOldValue = newValue;
                    });
                },
                $digest: function() {
                    var watch, value, last, watchers, dirty, next, current, logIdx, asyncTask, ttl = TTL, watchLog = [];
                    beginPhase("$digest");
                    $browser.$$checkUrlChange();
                    if (this === $rootScope && null !== applyAsyncId) {
                        $browser.defer.cancel(applyAsyncId);
                        flushApplyAsync();
                    }
                    lastDirtyWatch = null;
                    do {
                        dirty = !1;
                        current = this;
                        for (var asyncQueuePosition = 0; asyncQueuePosition < asyncQueue.length; asyncQueuePosition++) {
                            try {
                                (0, (asyncTask = asyncQueue[asyncQueuePosition]).fn)(asyncTask.scope, asyncTask.locals);
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                            lastDirtyWatch = null;
                        }
                        asyncQueue.length = 0;
                        traverseScopesLoop: do {
                            if (watchers = !current.$$suspended && current.$$watchers) {
                                watchers.$$digestWatchIndex = watchers.length;
                                for (;watchers.$$digestWatchIndex--; ) try {
                                    if (watch = watchers[watchers.$$digestWatchIndex]) if ((value = (0, watch.get)(current)) === (last = watch.last) || (watch.eq ? equals(value, last) : isNumberNaN(value) && isNumberNaN(last))) {
                                        if (watch === lastDirtyWatch) {
                                            dirty = !1;
                                            break traverseScopesLoop;
                                        }
                                    } else {
                                        dirty = !0;
                                        (lastDirtyWatch = watch).last = watch.eq ? copy(value, null) : value;
                                        (0, watch.fn)(value, last === initWatchVal ? value : last, current);
                                        if (ttl < 5) {
                                            watchLog[logIdx = 4 - ttl] || (watchLog[logIdx] = []);
                                            watchLog[logIdx].push({
                                                msg: isFunction(watch.exp) ? "fn: " + (watch.exp.name || watch.exp.toString()) : watch.exp,
                                                newVal: value,
                                                oldVal: last
                                            });
                                        }
                                    }
                                } catch (e) {
                                    $exceptionHandler(e);
                                }
                            }
                            if (!(next = !current.$$suspended && current.$$watchersCount && current.$$childHead || current !== this && current.$$nextSibling)) for (;current !== this && !(next = current.$$nextSibling); ) current = current.$parent;
                        } while (current = next);
                        if ((dirty || asyncQueue.length) && !ttl--) {
                            clearPhase();
                            throw $rootScopeMinErr("infdig", "{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}", TTL, watchLog);
                        }
                    } while (dirty || asyncQueue.length);
                    clearPhase();
                    for (;postDigestQueuePosition < postDigestQueue.length; ) try {
                        postDigestQueue[postDigestQueuePosition++]();
                    } catch (e) {
                        $exceptionHandler(e);
                    }
                    postDigestQueue.length = postDigestQueuePosition = 0;
                    $browser.$$checkUrlChange();
                },
                $suspend: function() {
                    this.$$suspended = !0;
                },
                $isSuspended: function() {
                    return this.$$suspended;
                },
                $resume: function() {
                    this.$$suspended = !1;
                },
                $destroy: function() {
                    if (!this.$$destroyed) {
                        var parent = this.$parent;
                        this.$broadcast("$destroy");
                        this.$$destroyed = !0;
                        this === $rootScope && $browser.$$applicationDestroyed();
                        incrementWatchersCount(this, -this.$$watchersCount);
                        for (var eventName in this.$$listenerCount) decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
                        parent && parent.$$childHead === this && (parent.$$childHead = this.$$nextSibling);
                        parent && parent.$$childTail === this && (parent.$$childTail = this.$$prevSibling);
                        this.$$prevSibling && (this.$$prevSibling.$$nextSibling = this.$$nextSibling);
                        this.$$nextSibling && (this.$$nextSibling.$$prevSibling = this.$$prevSibling);
                        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
                        this.$on = this.$watch = this.$watchGroup = function() {
                            return noop;
                        };
                        this.$$listeners = {};
                        this.$$nextSibling = null;
                        !function cleanUpScope($scope) {
                            if (9 === msie) {
                                $scope.$$childHead && cleanUpScope($scope.$$childHead);
                                $scope.$$nextSibling && cleanUpScope($scope.$$nextSibling);
                            }
                            $scope.$parent = $scope.$$nextSibling = $scope.$$prevSibling = $scope.$$childHead = $scope.$$childTail = $scope.$root = $scope.$$watchers = null;
                        }(this);
                    }
                },
                $eval: function(expr, locals) {
                    return $parse(expr)(this, locals);
                },
                $evalAsync: function(expr, locals) {
                    $rootScope.$$phase || asyncQueue.length || $browser.defer(function() {
                        asyncQueue.length && $rootScope.$digest();
                    });
                    asyncQueue.push({
                        scope: this,
                        fn: $parse(expr),
                        locals: locals
                    });
                },
                $$postDigest: function(fn) {
                    postDigestQueue.push(fn);
                },
                $apply: function(expr) {
                    try {
                        beginPhase("$apply");
                        try {
                            return this.$eval(expr);
                        } finally {
                            clearPhase();
                        }
                    } catch (e) {
                        $exceptionHandler(e);
                    } finally {
                        try {
                            $rootScope.$digest();
                        } catch (e) {
                            $exceptionHandler(e);
                            throw e;
                        }
                    }
                },
                $applyAsync: function(expr) {
                    var scope = this;
                    expr && applyAsyncQueue.push(function() {
                        scope.$eval(expr);
                    });
                    expr = $parse(expr);
                    null === applyAsyncId && (applyAsyncId = $browser.defer(function() {
                        $rootScope.$apply(flushApplyAsync);
                    }));
                },
                $on: function(name, listener) {
                    var namedListeners = this.$$listeners[name];
                    namedListeners || (this.$$listeners[name] = namedListeners = []);
                    namedListeners.push(listener);
                    var current = this;
                    do {
                        current.$$listenerCount[name] || (current.$$listenerCount[name] = 0);
                        current.$$listenerCount[name]++;
                    } while (current = current.$parent);
                    var self = this;
                    return function() {
                        var indexOfListener = namedListeners.indexOf(listener);
                        if (-1 !== indexOfListener) {
                            delete namedListeners[indexOfListener];
                            decrementListenerCount(self, 1, name);
                        }
                    };
                },
                $emit: function(name, args) {
                    var namedListeners, i, length, empty = [], scope = this, stopPropagation = !1, event = {
                        name: name,
                        targetScope: scope,
                        stopPropagation: function() {
                            stopPropagation = !0;
                        },
                        preventDefault: function() {
                            event.defaultPrevented = !0;
                        },
                        defaultPrevented: !1
                    }, listenerArgs = concat([ event ], arguments, 1);
                    do {
                        namedListeners = scope.$$listeners[name] || empty;
                        event.currentScope = scope;
                        for (i = 0, length = namedListeners.length; i < length; i++) if (namedListeners[i]) try {
                            namedListeners[i].apply(null, listenerArgs);
                        } catch (e) {
                            $exceptionHandler(e);
                        } else {
                            namedListeners.splice(i, 1);
                            i--;
                            length--;
                        }
                        if (stopPropagation) break;
                        scope = scope.$parent;
                    } while (scope);
                    event.currentScope = null;
                    return event;
                },
                $broadcast: function(name, args) {
                    var current = this, next = this, event = {
                        name: name,
                        targetScope: this,
                        preventDefault: function() {
                            event.defaultPrevented = !0;
                        },
                        defaultPrevented: !1
                    };
                    if (!this.$$listenerCount[name]) return event;
                    for (var listeners, i, length, listenerArgs = concat([ event ], arguments, 1); current = next; ) {
                        for (i = 0, length = (listeners = (event.currentScope = current).$$listeners[name] || []).length; i < length; i++) if (listeners[i]) try {
                            listeners[i].apply(null, listenerArgs);
                        } catch (e) {
                            $exceptionHandler(e);
                        } else {
                            listeners.splice(i, 1);
                            i--;
                            length--;
                        }
                        if (!(next = current.$$listenerCount[name] && current.$$childHead || current !== this && current.$$nextSibling)) for (;current !== this && !(next = current.$$nextSibling); ) current = current.$parent;
                    }
                    event.currentScope = null;
                    return event;
                }
            };
            var $rootScope = new Scope(), asyncQueue = $rootScope.$$asyncQueue = [], postDigestQueue = $rootScope.$$postDigestQueue = [], applyAsyncQueue = $rootScope.$$applyAsyncQueue = [], postDigestQueuePosition = 0;
            return $rootScope;
            function beginPhase(phase) {
                if ($rootScope.$$phase) throw $rootScopeMinErr("inprog", "{0} already in progress", $rootScope.$$phase);
                $rootScope.$$phase = phase;
            }
            function clearPhase() {
                $rootScope.$$phase = null;
            }
            function incrementWatchersCount(current, count) {
                for (;current.$$watchersCount += count, current = current.$parent; ) ;
            }
            function decrementListenerCount(current, count, name) {
                do {
                    current.$$listenerCount[name] -= count;
                    0 === current.$$listenerCount[name] && delete current.$$listenerCount[name];
                } while (current = current.$parent);
            }
            function initWatchVal() {}
            function flushApplyAsync() {
                for (;applyAsyncQueue.length; ) try {
                    applyAsyncQueue.shift()();
                } catch (e) {
                    $exceptionHandler(e);
                }
                applyAsyncId = null;
            }
        } ];
    }
    function $$SanitizeUriProvider() {
        var aHrefSanitizationWhitelist = /^\s*(https?|s?ftp|mailto|tel|file):/, imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;
        this.aHrefSanitizationWhitelist = function(regexp) {
            if (isDefined(regexp)) {
                aHrefSanitizationWhitelist = regexp;
                return this;
            }
            return aHrefSanitizationWhitelist;
        };
        this.imgSrcSanitizationWhitelist = function(regexp) {
            if (isDefined(regexp)) {
                imgSrcSanitizationWhitelist = regexp;
                return this;
            }
            return imgSrcSanitizationWhitelist;
        };
        this.$get = function() {
            return function(uri, isImage) {
                var normalizedVal, regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
                return "" === (normalizedVal = urlResolve(uri && uri.trim()).href) || normalizedVal.match(regex) ? uri : "unsafe:" + normalizedVal;
            };
        };
    }
    var $sceMinErr = minErr("$sce"), SCE_CONTEXTS = {
        HTML: "html",
        CSS: "css",
        URL: "url",
        RESOURCE_URL: "resourceUrl",
        JS: "js"
    }, UNDERSCORE_LOWERCASE_REGEXP = /_([a-z])/g;
    function snakeToCamel(name) {
        return name.replace(UNDERSCORE_LOWERCASE_REGEXP, fnCamelCaseReplace);
    }
    function adjustMatchers(matchers) {
        var adjustedMatchers = [];
        isDefined(matchers) && forEach(matchers, function(matcher) {
            adjustedMatchers.push(function(matcher) {
                if ("self" === matcher) return matcher;
                if (isString(matcher)) {
                    if (-1 < matcher.indexOf("***")) throw $sceMinErr("iwcard", "Illegal sequence *** in string matcher.  String: {0}", matcher);
                    matcher = escapeForRegexp(matcher).replace(/\\\*\\\*/g, ".*").replace(/\\\*/g, "[^:/.?&;]*");
                    return new RegExp("^" + matcher + "$");
                }
                if (isRegExp(matcher)) return new RegExp("^" + matcher.source + "$");
                throw $sceMinErr("imatcher", 'Matchers may only be "self", string patterns or RegExp objects');
            }(matcher));
        });
        return adjustedMatchers;
    }
    function $SceDelegateProvider() {
        this.SCE_CONTEXTS = SCE_CONTEXTS;
        var resourceUrlWhitelist = [ "self" ], resourceUrlBlacklist = [];
        this.resourceUrlWhitelist = function(value) {
            arguments.length && (resourceUrlWhitelist = adjustMatchers(value));
            return resourceUrlWhitelist;
        };
        this.resourceUrlBlacklist = function(value) {
            arguments.length && (resourceUrlBlacklist = adjustMatchers(value));
            return resourceUrlBlacklist;
        };
        this.$get = [ "$injector", function($injector) {
            var htmlSanitizer = function(html) {
                throw $sceMinErr("unsafe", "Attempting to use an unsafe value in a safe context.");
            };
            $injector.has("$sanitize") && (htmlSanitizer = $injector.get("$sanitize"));
            function matchUrl(matcher, parsedUrl) {
                return "self" === matcher ? urlsAreSameOrigin(parsedUrl, originUrl) : !!matcher.exec(parsedUrl.href);
            }
            function generateHolderType(Base) {
                var holderType = function(trustedValue) {
                    this.$$unwrapTrustedValue = function() {
                        return trustedValue;
                    };
                };
                Base && (holderType.prototype = new Base());
                holderType.prototype.valueOf = function() {
                    return this.$$unwrapTrustedValue();
                };
                holderType.prototype.toString = function() {
                    return this.$$unwrapTrustedValue().toString();
                };
                return holderType;
            }
            var trustedValueHolderBase = generateHolderType(), byType = {};
            byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);
            return {
                trustAs: function(type, trustedValue) {
                    var Constructor = byType.hasOwnProperty(type) ? byType[type] : null;
                    if (!Constructor) throw $sceMinErr("icontext", "Attempted to trust a value in invalid context. Context: {0}; Value: {1}", type, trustedValue);
                    if (null === trustedValue || isUndefined(trustedValue) || "" === trustedValue) return trustedValue;
                    if ("string" != typeof trustedValue) throw $sceMinErr("itype", "Attempted to trust a non-string value in a content requiring a string: Context: {0}", type);
                    return new Constructor(trustedValue);
                },
                getTrusted: function(type, maybeTrusted) {
                    if (null === maybeTrusted || isUndefined(maybeTrusted) || "" === maybeTrusted) return maybeTrusted;
                    var constructor = byType.hasOwnProperty(type) ? byType[type] : null;
                    if (constructor && maybeTrusted instanceof constructor) return maybeTrusted.$$unwrapTrustedValue();
                    if (type === SCE_CONTEXTS.RESOURCE_URL) {
                        if (function(url) {
                            var i, n, parsedUrl = urlResolve(url.toString()), allowed = !1;
                            for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
                                allowed = !0;
                                break;
                            }
                            if (allowed) for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
                                allowed = !1;
                                break;
                            }
                            return allowed;
                        }(maybeTrusted)) return maybeTrusted;
                        throw $sceMinErr("insecurl", "Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}", maybeTrusted.toString());
                    }
                    if (type === SCE_CONTEXTS.HTML) return htmlSanitizer(maybeTrusted);
                    throw $sceMinErr("unsafe", "Attempting to use an unsafe value in a safe context.");
                },
                valueOf: function(maybeTrusted) {
                    return maybeTrusted instanceof trustedValueHolderBase ? maybeTrusted.$$unwrapTrustedValue() : maybeTrusted;
                }
            };
        } ];
    }
    function $SceProvider() {
        var enabled = !0;
        this.enabled = function(value) {
            arguments.length && (enabled = !!value);
            return enabled;
        };
        this.$get = [ "$parse", "$sceDelegate", function($parse, $sceDelegate) {
            if (enabled && msie < 8) throw $sceMinErr("iequirks", "Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");
            var sce = shallowCopy(SCE_CONTEXTS);
            sce.isEnabled = function() {
                return enabled;
            };
            sce.trustAs = $sceDelegate.trustAs;
            sce.getTrusted = $sceDelegate.getTrusted;
            sce.valueOf = $sceDelegate.valueOf;
            if (!enabled) {
                sce.trustAs = sce.getTrusted = function(type, value) {
                    return value;
                };
                sce.valueOf = identity;
            }
            sce.parseAs = function(type, expr) {
                var parsed = $parse(expr);
                return parsed.literal && parsed.constant ? parsed : $parse(expr, function(value) {
                    return sce.getTrusted(type, value);
                });
            };
            var parse = sce.parseAs, getTrusted = sce.getTrusted, trustAs = sce.trustAs;
            forEach(SCE_CONTEXTS, function(enumValue, name) {
                var lName = lowercase(name);
                sce[snakeToCamel("parse_as_" + lName)] = function(expr) {
                    return parse(enumValue, expr);
                };
                sce[snakeToCamel("get_trusted_" + lName)] = function(value) {
                    return getTrusted(enumValue, value);
                };
                sce[snakeToCamel("trust_as_" + lName)] = function(value) {
                    return trustAs(enumValue, value);
                };
            });
            return sce;
        } ];
    }
    function $SnifferProvider() {
        this.$get = [ "$window", "$document", function($window, $document) {
            var eventSupport = {}, hasHistoryPushState = !(!($window.nw && $window.nw.process) && $window.chrome && ($window.chrome.app && $window.chrome.app.runtime || !$window.chrome.app && $window.chrome.runtime && $window.chrome.runtime.id)) && $window.history && $window.history.pushState, android = toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]), boxee = /Boxee/i.test(($window.navigator || {}).userAgent), document = $document[0] || {}, bodyStyle = document.body && document.body.style, transitions = !1, animations = !1;
            if (bodyStyle) {
                transitions = !!("transition" in bodyStyle || "webkitTransition" in bodyStyle);
                animations = !!("animation" in bodyStyle || "webkitAnimation" in bodyStyle);
            }
            return {
                history: !(!hasHistoryPushState || android < 4 || boxee),
                hasEvent: function(event) {
                    if ("input" === event && msie) return !1;
                    if (isUndefined(eventSupport[event])) {
                        var divElm = document.createElement("div");
                        eventSupport[event] = "on" + event in divElm;
                    }
                    return eventSupport[event];
                },
                csp: csp(),
                transitions: transitions,
                animations: animations,
                android: android
            };
        } ];
    }
    var $templateRequestMinErr = minErr("$compile");
    function $TemplateRequestProvider() {
        var httpOptions;
        this.httpOptions = function(val) {
            if (val) {
                httpOptions = val;
                return this;
            }
            return httpOptions;
        };
        this.$get = [ "$exceptionHandler", "$templateCache", "$http", "$q", "$sce", function($exceptionHandler, $templateCache, $http, $q, $sce) {
            function handleRequestFn(tpl, ignoreRequestError) {
                handleRequestFn.totalPendingRequests++;
                isString(tpl) && !isUndefined($templateCache.get(tpl)) || (tpl = $sce.getTrustedResourceUrl(tpl));
                var transformResponse = $http.defaults && $http.defaults.transformResponse;
                isArray(transformResponse) ? transformResponse = transformResponse.filter(function(transformer) {
                    return transformer !== defaultHttpResponseTransform;
                }) : transformResponse === defaultHttpResponseTransform && (transformResponse = null);
                return $http.get(tpl, extend({
                    cache: $templateCache,
                    transformResponse: transformResponse
                }, httpOptions)).finally(function() {
                    handleRequestFn.totalPendingRequests--;
                }).then(function(response) {
                    $templateCache.put(tpl, response.data);
                    return response.data;
                }, function(resp) {
                    if (!ignoreRequestError) {
                        resp = $templateRequestMinErr("tpload", "Failed to load template: {0} (HTTP status: {1} {2})", tpl, resp.status, resp.statusText);
                        $exceptionHandler(resp);
                    }
                    return $q.reject(resp);
                });
            }
            handleRequestFn.totalPendingRequests = 0;
            return handleRequestFn;
        } ];
    }
    function $$TestabilityProvider() {
        this.$get = [ "$rootScope", "$browser", "$location", function($rootScope, $browser, $location) {
            var testability = {
                findBindings: function(element, expression, opt_exactMatch) {
                    var bindings = element.getElementsByClassName("ng-binding"), matches = [];
                    forEach(bindings, function(binding) {
                        var dataBinding = angular.element(binding).data("$binding");
                        dataBinding && forEach(dataBinding, function(bindingName) {
                            if (opt_exactMatch) {
                                new RegExp("(^|\\s)" + escapeForRegexp(expression) + "(\\s|\\||$)").test(bindingName) && matches.push(binding);
                            } else -1 !== bindingName.indexOf(expression) && matches.push(binding);
                        });
                    });
                    return matches;
                },
                findModels: function(element, expression, opt_exactMatch) {
                    for (var prefixes = [ "ng-", "data-ng-", "ng\\:" ], p = 0; p < prefixes.length; ++p) {
                        var selector = "[" + prefixes[p] + "model" + (opt_exactMatch ? "=" : "*=") + '"' + expression + '"]', elements = element.querySelectorAll(selector);
                        if (elements.length) return elements;
                    }
                },
                getLocation: function() {
                    return $location.url();
                },
                setLocation: function(url) {
                    if (url !== $location.url()) {
                        $location.url(url);
                        $rootScope.$digest();
                    }
                },
                whenStable: function(callback) {
                    $browser.notifyWhenNoOutstandingRequests(callback);
                }
            };
            return testability;
        } ];
    }
    function $TimeoutProvider() {
        this.$get = [ "$rootScope", "$browser", "$q", "$$q", "$exceptionHandler", function($rootScope, $browser, $q, $$q, $exceptionHandler) {
            var deferreds = {};
            function timeout(fn, delay, invokeApply) {
                if (!isFunction(fn)) {
                    invokeApply = delay;
                    delay = fn;
                    fn = noop;
                }
                var timeoutId, args = sliceArgs(arguments, 3), skipApply = isDefined(invokeApply) && !invokeApply, deferred = (skipApply ? $$q : $q).defer(), promise = deferred.promise;
                timeoutId = $browser.defer(function() {
                    try {
                        deferred.resolve(fn.apply(null, args));
                    } catch (e) {
                        deferred.reject(e);
                        $exceptionHandler(e);
                    } finally {
                        delete deferreds[promise.$$timeoutId];
                    }
                    skipApply || $rootScope.$apply();
                }, delay);
                promise.$$timeoutId = timeoutId;
                deferreds[timeoutId] = deferred;
                return promise;
            }
            timeout.cancel = function(promise) {
                if (promise && promise.$$timeoutId in deferreds) {
                    markQExceptionHandled(deferreds[promise.$$timeoutId].promise);
                    deferreds[promise.$$timeoutId].reject("canceled");
                    delete deferreds[promise.$$timeoutId];
                    return $browser.defer.cancel(promise.$$timeoutId);
                }
                return !1;
            };
            return timeout;
        } ];
    }
    var urlParsingNode = window.document.createElement("a"), originUrl = urlResolve(window.location.href);
    function urlResolve(url) {
        if (!isString(url)) return url;
        var href = url;
        if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: "/" === urlParsingNode.pathname.charAt(0) ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
    }
    function urlsAreSameOrigin(url1, url2) {
        url1 = urlResolve(url1);
        url2 = urlResolve(url2);
        return url1.protocol === url2.protocol && url1.host === url2.host;
    }
    function $WindowProvider() {
        this.$get = valueFn(window);
    }
    function $$CookieReader($document) {
        var rawDocument = $document[0] || {}, lastCookies = {}, lastCookieString = "";
        function safeDecodeURIComponent(str) {
            try {
                return decodeURIComponent(str);
            } catch (e) {
                return str;
            }
        }
        return function() {
            var cookieArray, cookie, i, index, name, currentCookieString = function(rawDocument) {
                try {
                    return rawDocument.cookie || "";
                } catch (e) {
                    return "";
                }
            }(rawDocument);
            if (currentCookieString !== lastCookieString) {
                cookieArray = (lastCookieString = currentCookieString).split("; ");
                lastCookies = {};
                for (i = 0; i < cookieArray.length; i++) if (0 < (index = (cookie = cookieArray[i]).indexOf("="))) {
                    name = safeDecodeURIComponent(cookie.substring(0, index));
                    isUndefined(lastCookies[name]) && (lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1)));
                }
            }
            return lastCookies;
        };
    }
    $$CookieReader.$inject = [ "$document" ];
    function $$CookieReaderProvider() {
        this.$get = $$CookieReader;
    }
    $FilterProvider.$inject = [ "$provide" ];
    function $FilterProvider($provide) {
        var suffix = "Filter";
        function register(name, factory) {
            if (isObject(name)) {
                var filters = {};
                forEach(name, function(filter, key) {
                    filters[key] = register(key, filter);
                });
                return filters;
            }
            return $provide.factory(name + suffix, factory);
        }
        this.register = register;
        this.$get = [ "$injector", function($injector) {
            return function(name) {
                return $injector.get(name + suffix);
            };
        } ];
        register("currency", currencyFilter);
        register("date", dateFilter);
        register("filter", filterFilter);
        register("json", jsonFilter);
        register("limitTo", limitToFilter);
        register("lowercase", lowercaseFilter);
        register("number", numberFilter);
        register("orderBy", orderByFilter);
        register("uppercase", uppercaseFilter);
    }
    function filterFilter() {
        return function(array, expression, comparator, anyPropertyKey) {
            if (!isArrayLike(array)) {
                if (null == array) return array;
                throw minErr("filter")("notarray", "Expected array but received: {0}", array);
            }
            anyPropertyKey = anyPropertyKey || "$";
            var predicateFn, matchAgainstAnyProp;
            switch (getTypeForFilter(expression)) {
              case "function":
                predicateFn = expression;
                break;

              case "boolean":
              case "null":
              case "number":
              case "string":
                matchAgainstAnyProp = !0;

              case "object":
                predicateFn = function(expression, comparator, anyPropertyKey, matchAgainstAnyProp) {
                    var shouldMatchPrimitives = isObject(expression) && anyPropertyKey in expression;
                    !0 === comparator ? comparator = equals : isFunction(comparator) || (comparator = function(actual, expected) {
                        if (isUndefined(actual)) return !1;
                        if (null === actual || null === expected) return actual === expected;
                        if (isObject(expected) || isObject(actual) && !hasCustomToString(actual)) return !1;
                        actual = lowercase("" + actual);
                        expected = lowercase("" + expected);
                        return -1 !== actual.indexOf(expected);
                    });
                    return function(item) {
                        return shouldMatchPrimitives && !isObject(item) ? deepCompare(item, expression[anyPropertyKey], comparator, anyPropertyKey, !1) : deepCompare(item, expression, comparator, anyPropertyKey, matchAgainstAnyProp);
                    };
                }(expression, comparator, anyPropertyKey, matchAgainstAnyProp);
                break;

              default:
                return array;
            }
            return Array.prototype.filter.call(array, predicateFn);
        };
    }
    function deepCompare(actual, expected, comparator, anyPropertyKey, matchAgainstAnyProp, dontMatchWholeObject) {
        var actualType = getTypeForFilter(actual), expectedType = getTypeForFilter(expected);
        if ("string" === expectedType && "!" === expected.charAt(0)) return !deepCompare(actual, expected.substring(1), comparator, anyPropertyKey, matchAgainstAnyProp);
        if (isArray(actual)) return actual.some(function(item) {
            return deepCompare(item, expected, comparator, anyPropertyKey, matchAgainstAnyProp);
        });
        switch (actualType) {
          case "object":
            var key;
            if (matchAgainstAnyProp) {
                for (key in actual) if (key.charAt && "$" !== key.charAt(0) && deepCompare(actual[key], expected, comparator, anyPropertyKey, !0)) return !0;
                return !dontMatchWholeObject && deepCompare(actual, expected, comparator, anyPropertyKey, !1);
            }
            if ("object" !== expectedType) return comparator(actual, expected);
            for (key in expected) {
                var expectedVal = expected[key];
                if (!isFunction(expectedVal) && !isUndefined(expectedVal)) {
                    var matchAnyProperty = key === anyPropertyKey;
                    if (!deepCompare(matchAnyProperty ? actual : actual[key], expectedVal, comparator, anyPropertyKey, matchAnyProperty, matchAnyProperty)) return !1;
                }
            }
            return !0;

          case "function":
            return !1;

          default:
            return comparator(actual, expected);
        }
    }
    function getTypeForFilter(val) {
        return null === val ? "null" : typeof val;
    }
    var MAX_DIGITS = 22, DECIMAL_SEP = ".", ZERO_CHAR = "0";
    currencyFilter.$inject = [ "$locale" ];
    function currencyFilter($locale) {
        var formats = $locale.NUMBER_FORMATS;
        return function(amount, currencySymbol, fractionSize) {
            isUndefined(currencySymbol) && (currencySymbol = formats.CURRENCY_SYM);
            isUndefined(fractionSize) && (fractionSize = formats.PATTERNS[1].maxFrac);
            var currencySymbolRe = currencySymbol ? /\u00A4/g : /\s*\u00A4\s*/g;
            return null == amount ? amount : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).replace(currencySymbolRe, currencySymbol);
        };
    }
    function numberFilter($locale) {
        var formats = $locale.NUMBER_FORMATS;
        return function(number, fractionSize) {
            return null == number ? number : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize);
        };
    }
    function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
        if (!isString(number) && !isNumber(number) || isNaN(number)) return "";
        var parsedNumber, isInfinity = !isFinite(number), isZero = !1, numStr = Math.abs(number) + "", formattedText = "";
        if (isInfinity) formattedText = "∞"; else {
            !function(parsedNumber, fractionSize, minFrac, maxFrac) {
                var digits = parsedNumber.d, fractionLen = digits.length - parsedNumber.i, roundAt = (fractionSize = isUndefined(fractionSize) ? Math.min(Math.max(minFrac, fractionLen), maxFrac) : +fractionSize) + parsedNumber.i, digit = digits[roundAt];
                if (0 < roundAt) {
                    digits.splice(Math.max(parsedNumber.i, roundAt));
                    for (var j = roundAt; j < digits.length; j++) digits[j] = 0;
                } else {
                    fractionLen = Math.max(0, fractionLen);
                    parsedNumber.i = 1;
                    digits.length = Math.max(1, roundAt = fractionSize + 1);
                    digits[0] = 0;
                    for (var i = 1; i < roundAt; i++) digits[i] = 0;
                }
                if (5 <= digit) if (roundAt - 1 < 0) {
                    for (var k = 0; roundAt < k; k--) {
                        digits.unshift(0);
                        parsedNumber.i++;
                    }
                    digits.unshift(1);
                    parsedNumber.i++;
                } else digits[roundAt - 1]++;
                for (;fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);
                var carry = digits.reduceRight(function(carry, d, i, digits) {
                    d += carry;
                    digits[i] = d % 10;
                    return Math.floor(d / 10);
                }, 0);
                if (carry) {
                    digits.unshift(carry);
                    parsedNumber.i++;
                }
            }(parsedNumber = function(numStr) {
                var digits, numberOfIntegerDigits, i, j, zeros, exponent = 0;
                -1 < (numberOfIntegerDigits = numStr.indexOf(DECIMAL_SEP)) && (numStr = numStr.replace(DECIMAL_SEP, ""));
                if (0 < (i = numStr.search(/e/i))) {
                    numberOfIntegerDigits < 0 && (numberOfIntegerDigits = i);
                    numberOfIntegerDigits += +numStr.slice(i + 1);
                    numStr = numStr.substring(0, i);
                } else numberOfIntegerDigits < 0 && (numberOfIntegerDigits = numStr.length);
                for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) ;
                if (i === (zeros = numStr.length)) {
                    digits = [ 0 ];
                    numberOfIntegerDigits = 1;
                } else {
                    zeros--;
                    for (;numStr.charAt(zeros) === ZERO_CHAR; ) zeros--;
                    numberOfIntegerDigits -= i;
                    digits = [];
                    for (j = 0; i <= zeros; i++, j++) digits[j] = +numStr.charAt(i);
                }
                if (MAX_DIGITS < numberOfIntegerDigits) {
                    digits = digits.splice(0, MAX_DIGITS - 1);
                    exponent = numberOfIntegerDigits - 1;
                    numberOfIntegerDigits = 1;
                }
                return {
                    d: digits,
                    e: exponent,
                    i: numberOfIntegerDigits
                };
            }(numStr), fractionSize, pattern.minFrac, pattern.maxFrac);
            var digits = parsedNumber.d, integerLen = parsedNumber.i, exponent = parsedNumber.e, decimals = [];
            isZero = digits.reduce(function(isZero, d) {
                return isZero && !d;
            }, !0);
            for (;integerLen < 0; ) {
                digits.unshift(0);
                integerLen++;
            }
            if (0 < integerLen) decimals = digits.splice(integerLen, digits.length); else {
                decimals = digits;
                digits = [ 0 ];
            }
            var groups = [];
            digits.length >= pattern.lgSize && groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(""));
            for (;digits.length > pattern.gSize; ) groups.unshift(digits.splice(-pattern.gSize, digits.length).join(""));
            digits.length && groups.unshift(digits.join(""));
            formattedText = groups.join(groupSep);
            decimals.length && (formattedText += decimalSep + decimals.join(""));
            exponent && (formattedText += "e+" + exponent);
        }
        return number < 0 && !isZero ? pattern.negPre + formattedText + pattern.negSuf : pattern.posPre + formattedText + pattern.posSuf;
    }
    function padNumber(num, digits, trim, negWrap) {
        var neg = "";
        if (num < 0 || negWrap && num <= 0) if (negWrap) num = 1 - num; else {
            num = -num;
            neg = "-";
        }
        num = "" + num;
        for (;num.length < digits; ) num = ZERO_CHAR + num;
        trim && (num = num.substr(num.length - digits));
        return neg + num;
    }
    function dateGetter(name, size, offset, trim, negWrap) {
        offset = offset || 0;
        return function(date) {
            var value = date["get" + name]();
            (0 < offset || -offset < value) && (value += offset);
            0 === value && -12 === offset && (value = 12);
            return padNumber(value, size, trim, negWrap);
        };
    }
    function dateStrGetter(name, shortForm, standAlone) {
        return function(date, formats) {
            var value = date["get" + name]();
            return formats[uppercase((standAlone ? "STANDALONE" : "") + (shortForm ? "SHORT" : "") + name)][value];
        };
    }
    function getFirstThursdayOfYear(year) {
        var dayOfWeekOnFirst = new Date(year, 0, 1).getDay();
        return new Date(year, 0, (dayOfWeekOnFirst <= 4 ? 5 : 12) - dayOfWeekOnFirst);
    }
    function weekGetter(size) {
        return function(date) {
            var datetime, firstThurs = getFirstThursdayOfYear(date.getFullYear()), diff = +(datetime = date, 
            new Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (4 - datetime.getDay()))) - +firstThurs;
            return padNumber(1 + Math.round(diff / 6048e5), size);
        };
    }
    function eraGetter(date, formats) {
        return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
    }
    var DATE_FORMATS = {
        yyyy: dateGetter("FullYear", 4, 0, !(numberFilter.$inject = [ "$locale" ]), !0),
        yy: dateGetter("FullYear", 2, 0, !0, !0),
        y: dateGetter("FullYear", 1, 0, !1, !0),
        MMMM: dateStrGetter("Month"),
        MMM: dateStrGetter("Month", !0),
        MM: dateGetter("Month", 2, 1),
        M: dateGetter("Month", 1, 1),
        LLLL: dateStrGetter("Month", !1, !0),
        dd: dateGetter("Date", 2),
        d: dateGetter("Date", 1),
        HH: dateGetter("Hours", 2),
        H: dateGetter("Hours", 1),
        hh: dateGetter("Hours", 2, -12),
        h: dateGetter("Hours", 1, -12),
        mm: dateGetter("Minutes", 2),
        m: dateGetter("Minutes", 1),
        ss: dateGetter("Seconds", 2),
        s: dateGetter("Seconds", 1),
        sss: dateGetter("Milliseconds", 3),
        EEEE: dateStrGetter("Day"),
        EEE: dateStrGetter("Day", !0),
        a: function(date, formats) {
            return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
        },
        Z: function(date, formats, offset) {
            var zone = -1 * offset, paddedZone = 0 <= zone ? "+" : "";
            return paddedZone += padNumber(Math[0 < zone ? "floor" : "ceil"](zone / 60), 2) + padNumber(Math.abs(zone % 60), 2);
        },
        ww: weekGetter(2),
        w: weekGetter(1),
        G: eraGetter,
        GG: eraGetter,
        GGG: eraGetter,
        GGGG: function(date, formats) {
            return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
        }
    }, DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/, NUMBER_STRING = /^-?\d+$/;
    dateFilter.$inject = [ "$locale" ];
    function dateFilter($locale) {
        var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
        return function(date, format, timezone) {
            var fn, match, text = "", parts = [];
            format = format || "mediumDate";
            format = $locale.DATETIME_FORMATS[format] || format;
            isString(date) && (date = NUMBER_STRING.test(date) ? toInt(date) : function(string) {
                var match;
                if (match = string.match(R_ISO8601_STR)) {
                    var date = new Date(0), tzHour = 0, tzMin = 0, dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear, timeSetter = match[8] ? date.setUTCHours : date.setHours;
                    if (match[9]) {
                        tzHour = toInt(match[9] + match[10]);
                        tzMin = toInt(match[9] + match[11]);
                    }
                    dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
                    var h = toInt(match[4] || 0) - tzHour, m = toInt(match[5] || 0) - tzMin, s = toInt(match[6] || 0), ms = Math.round(1e3 * parseFloat("0." + (match[7] || 0)));
                    timeSetter.call(date, h, m, s, ms);
                    return date;
                }
                return string;
            }(date));
            isNumber(date) && (date = new Date(date));
            if (!isDate(date) || !isFinite(date.getTime())) return date;
            for (;format; ) if (match = DATE_FORMATS_SPLIT.exec(format)) format = (parts = concat(parts, match, 1)).pop(); else {
                parts.push(format);
                format = null;
            }
            var dateTimezoneOffset = date.getTimezoneOffset();
            if (timezone) {
                dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
                date = convertTimezoneToLocal(date, timezone, !0);
            }
            forEach(parts, function(value) {
                fn = DATE_FORMATS[value];
                text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset) : "''" === value ? "'" : value.replace(/(^'|'$)/g, "").replace(/''/g, "'");
            });
            return text;
        };
    }
    function jsonFilter() {
        return function(object, spacing) {
            isUndefined(spacing) && (spacing = 2);
            return toJson(object, spacing);
        };
    }
    var lowercaseFilter = valueFn(lowercase), uppercaseFilter = valueFn(uppercase);
    function limitToFilter() {
        return function(input, limit, begin) {
            limit = Math.abs(Number(limit)) === 1 / 0 ? Number(limit) : toInt(limit);
            if (isNumberNaN(limit)) return input;
            isNumber(input) && (input = input.toString());
            if (!isArrayLike(input)) return input;
            begin = (begin = !begin || isNaN(begin) ? 0 : toInt(begin)) < 0 ? Math.max(0, input.length + begin) : begin;
            return 0 <= limit ? sliceFn(input, begin, begin + limit) : 0 === begin ? sliceFn(input, limit, input.length) : sliceFn(input, Math.max(0, begin + limit), begin);
        };
    }
    function sliceFn(input, begin, end) {
        return isString(input) ? input.slice(begin, end) : slice.call(input, begin, end);
    }
    orderByFilter.$inject = [ "$parse" ];
    function orderByFilter($parse) {
        return function(array, sortPredicate, reverseOrder, compareFn) {
            if (null == array) return array;
            if (!isArrayLike(array)) throw minErr("orderBy")("notarray", "Expected array but received: {0}", array);
            isArray(sortPredicate) || (sortPredicate = [ sortPredicate ]);
            0 === sortPredicate.length && (sortPredicate = [ "+" ]);
            var predicates = sortPredicate.map(function(predicate) {
                var descending = 1, get = identity;
                if (isFunction(predicate)) get = predicate; else if (isString(predicate)) {
                    if ("+" === predicate.charAt(0) || "-" === predicate.charAt(0)) {
                        descending = "-" === predicate.charAt(0) ? -1 : 1;
                        predicate = predicate.substring(1);
                    }
                    if ("" !== predicate && (get = $parse(predicate)).constant) {
                        var key = get();
                        get = function(value) {
                            return value[key];
                        };
                    }
                }
                return {
                    get: get,
                    descending: descending
                };
            }), descending = reverseOrder ? -1 : 1, compare = isFunction(compareFn) ? compareFn : defaultCompare, compareValues = Array.prototype.map.call(array, function(value, index) {
                return {
                    value: value,
                    tieBreaker: {
                        value: index,
                        type: "number",
                        index: index
                    },
                    predicateValues: predicates.map(function(predicate) {
                        return function(value, index) {
                            var type = typeof value;
                            if (null === value) {
                                type = "string";
                                value = "null";
                            } else "object" === type && (value = function(value) {
                                if (isFunction(value.valueOf) && isPrimitive(value = value.valueOf())) return value;
                                if (hasCustomToString(value) && isPrimitive(value = value.toString())) return value;
                                return value;
                            }(value));
                            return {
                                value: value,
                                type: type,
                                index: index
                            };
                        }(predicate.get(value), index);
                    })
                };
            });
            compareValues.sort(function(v1, v2) {
                for (var i = 0, ii = predicates.length; i < ii; i++) {
                    var result = compare(v1.predicateValues[i], v2.predicateValues[i]);
                    if (result) return result * predicates[i].descending * descending;
                }
                return (compare(v1.tieBreaker, v2.tieBreaker) || defaultCompare(v1.tieBreaker, v2.tieBreaker)) * descending;
            });
            return array = compareValues.map(function(item) {
                return item.value;
            });
        };
        function isPrimitive(value) {
            switch (typeof value) {
              case "number":
              case "boolean":
              case "string":
                return !0;

              default:
                return !1;
            }
        }
        function defaultCompare(v1, v2) {
            var result = 0, type1 = v1.type, type2 = v2.type;
            if (type1 === type2) {
                var value1 = v1.value, value2 = v2.value;
                if ("string" === type1) {
                    value1 = value1.toLowerCase();
                    value2 = value2.toLowerCase();
                } else if ("object" === type1) {
                    isObject(value1) && (value1 = v1.index);
                    isObject(value2) && (value2 = v2.index);
                }
                value1 !== value2 && (result = value1 < value2 ? -1 : 1);
            } else result = type1 < type2 ? -1 : 1;
            return result;
        }
    }
    function ngDirective(directive) {
        isFunction(directive) && (directive = {
            link: directive
        });
        directive.restrict = directive.restrict || "AC";
        return valueFn(directive);
    }
    var htmlAnchorDirective = valueFn({
        restrict: "E",
        compile: function(element, attr) {
            if (!attr.href && !attr.xlinkHref) return function(scope, element) {
                if ("a" === element[0].nodeName.toLowerCase()) {
                    var href = "[object SVGAnimatedString]" === toString.call(element.prop("href")) ? "xlink:href" : "href";
                    element.on("click", function(event) {
                        element.attr(href) || event.preventDefault();
                    });
                }
            };
        }
    }), ngAttributeAliasDirectives = {};
    forEach(BOOLEAN_ATTR, function(propName, attrName) {
        if ("multiple" !== propName) {
            var normalized = directiveNormalize("ng-" + attrName), linkFn = defaultLinkFn;
            "checked" === propName && (linkFn = function(scope, element, attr) {
                attr.ngModel !== attr[normalized] && defaultLinkFn(scope, 0, attr);
            });
            ngAttributeAliasDirectives[normalized] = function() {
                return {
                    restrict: "A",
                    priority: 100,
                    link: linkFn
                };
            };
        }
        function defaultLinkFn(scope, element, attr) {
            scope.$watch(attr[normalized], function(value) {
                attr.$set(attrName, !!value);
            });
        }
    });
    forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
        ngAttributeAliasDirectives[ngAttr] = function() {
            return {
                priority: 100,
                link: function(scope, element, attr) {
                    if ("ngPattern" === ngAttr && "/" === attr.ngPattern.charAt(0)) {
                        var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
                        if (match) {
                            attr.$set("ngPattern", new RegExp(match[1], match[2]));
                            return;
                        }
                    }
                    scope.$watch(attr[ngAttr], function(value) {
                        attr.$set(ngAttr, value);
                    });
                }
            };
        };
    });
    forEach([ "src", "srcset", "href" ], function(attrName) {
        var normalized = directiveNormalize("ng-" + attrName);
        ngAttributeAliasDirectives[normalized] = function() {
            return {
                priority: 99,
                link: function(scope, element, attr) {
                    var propName = attrName, name = attrName;
                    if ("href" === attrName && "[object SVGAnimatedString]" === toString.call(element.prop("href"))) {
                        name = "xlinkHref";
                        attr.$attr[name] = "xlink:href";
                        propName = null;
                    }
                    attr.$observe(normalized, function(value) {
                        if (value) {
                            attr.$set(name, value);
                            msie && propName && element.prop(propName, attr[name]);
                        } else "href" === attrName && attr.$set(name, null);
                    });
                }
            };
        };
    });
    var nullFormCtrl = {
        $addControl: noop,
        $$renameControl: function(control, name) {
            control.$name = name;
        },
        $removeControl: noop,
        $setValidity: noop,
        $setDirty: noop,
        $setPristine: noop,
        $setSubmitted: noop
    };
    FormController.$inject = [ "$element", "$attrs", "$scope", "$animate", "$interpolate" ];
    function FormController($element, $attrs, $scope, $animate, $interpolate) {
        this.$$controls = [];
        this.$error = {};
        this.$$success = {};
        this.$pending = void 0;
        this.$name = $interpolate($attrs.name || $attrs.ngForm || "")($scope);
        this.$dirty = !1;
        this.$pristine = !0;
        this.$valid = !0;
        this.$invalid = !1;
        this.$submitted = !1;
        this.$$parentForm = nullFormCtrl;
        this.$$element = $element;
        this.$$animate = $animate;
        setupValidity(this);
    }
    FormController.prototype = {
        $rollbackViewValue: function() {
            forEach(this.$$controls, function(control) {
                control.$rollbackViewValue();
            });
        },
        $commitViewValue: function() {
            forEach(this.$$controls, function(control) {
                control.$commitViewValue();
            });
        },
        $addControl: function(control) {
            assertNotHasOwnProperty(control.$name, "input");
            this.$$controls.push(control);
            control.$name && (this[control.$name] = control);
            control.$$parentForm = this;
        },
        $$renameControl: function(control, newName) {
            var oldName = control.$name;
            this[oldName] === control && delete this[oldName];
            (this[newName] = control).$name = newName;
        },
        $removeControl: function(control) {
            control.$name && this[control.$name] === control && delete this[control.$name];
            forEach(this.$pending, function(value, name) {
                this.$setValidity(name, null, control);
            }, this);
            forEach(this.$error, function(value, name) {
                this.$setValidity(name, null, control);
            }, this);
            forEach(this.$$success, function(value, name) {
                this.$setValidity(name, null, control);
            }, this);
            arrayRemove(this.$$controls, control);
            control.$$parentForm = nullFormCtrl;
        },
        $setDirty: function() {
            this.$$animate.removeClass(this.$$element, PRISTINE_CLASS);
            this.$$animate.addClass(this.$$element, DIRTY_CLASS);
            this.$dirty = !0;
            this.$pristine = !1;
            this.$$parentForm.$setDirty();
        },
        $setPristine: function() {
            this.$$animate.setClass(this.$$element, PRISTINE_CLASS, DIRTY_CLASS + " ng-submitted");
            this.$dirty = !1;
            this.$pristine = !0;
            this.$submitted = !1;
            forEach(this.$$controls, function(control) {
                control.$setPristine();
            });
        },
        $setUntouched: function() {
            forEach(this.$$controls, function(control) {
                control.$setUntouched();
            });
        },
        $setSubmitted: function() {
            this.$$animate.addClass(this.$$element, "ng-submitted");
            this.$submitted = !0;
            this.$$parentForm.$setSubmitted();
        }
    };
    addSetValidityMethod({
        clazz: FormController,
        set: function(object, property, controller) {
            var list = object[property];
            if (list) {
                -1 === list.indexOf(controller) && list.push(controller);
            } else object[property] = [ controller ];
        },
        unset: function(object, property, controller) {
            var list = object[property];
            if (list) {
                arrayRemove(list, controller);
                0 === list.length && delete object[property];
            }
        }
    });
    var formDirectiveFactory = function(isNgForm) {
        return [ "$timeout", "$parse", function($timeout, $parse) {
            return {
                name: "form",
                restrict: isNgForm ? "EAC" : "E",
                require: [ "form", "^^?form" ],
                controller: FormController,
                compile: function(formElement, attr) {
                    formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);
                    var nameAttr = attr.name ? "name" : !(!isNgForm || !attr.ngForm) && "ngForm";
                    return {
                        pre: function(scope, formElement, attr, ctrls) {
                            var controller = ctrls[0];
                            if (!("action" in attr)) {
                                var handleFormSubmission = function(event) {
                                    scope.$apply(function() {
                                        controller.$commitViewValue();
                                        controller.$setSubmitted();
                                    });
                                    event.preventDefault();
                                };
                                formElement[0].addEventListener("submit", handleFormSubmission);
                                formElement.on("$destroy", function() {
                                    $timeout(function() {
                                        formElement[0].removeEventListener("submit", handleFormSubmission);
                                    }, 0, !1);
                                });
                            }
                            (ctrls[1] || controller.$$parentForm).$addControl(controller);
                            var setter = nameAttr ? getSetter(controller.$name) : noop;
                            if (nameAttr) {
                                setter(scope, controller);
                                attr.$observe(nameAttr, function(newValue) {
                                    if (controller.$name !== newValue) {
                                        setter(scope, void 0);
                                        controller.$$parentForm.$$renameControl(controller, newValue);
                                        (setter = getSetter(controller.$name))(scope, controller);
                                    }
                                });
                            }
                            formElement.on("$destroy", function() {
                                controller.$$parentForm.$removeControl(controller);
                                setter(scope, void 0);
                                extend(controller, nullFormCtrl);
                            });
                        }
                    };
                }
            };
            function getSetter(expression) {
                return "" === expression ? $parse('this[""]').assign : $parse(expression).assign || noop;
            }
        } ];
    }, formDirective = formDirectiveFactory(), ngFormDirective = formDirectiveFactory(!0);
    function setupValidity(instance) {
        instance.$$classCache = {};
        instance.$$classCache[INVALID_CLASS] = !(instance.$$classCache[VALID_CLASS] = instance.$$element.hasClass(VALID_CLASS));
    }
    function addSetValidityMethod(context) {
        var clazz = context.clazz, set = context.set, unset = context.unset;
        clazz.prototype.$setValidity = function(validationErrorKey, state, controller) {
            isUndefined(state) ? function(ctrl, name, value, controller) {
                ctrl[name] || (ctrl[name] = {});
                set(ctrl[name], value, controller);
            }(this, "$pending", validationErrorKey, controller) : function(ctrl, name, value, controller) {
                ctrl[name] && unset(ctrl[name], value, controller);
                isObjectEmpty(ctrl[name]) && (ctrl[name] = void 0);
            }(this, "$pending", validationErrorKey, controller);
            if (isBoolean(state)) if (state) {
                unset(this.$error, validationErrorKey, controller);
                set(this.$$success, validationErrorKey, controller);
            } else {
                set(this.$error, validationErrorKey, controller);
                unset(this.$$success, validationErrorKey, controller);
            } else {
                unset(this.$error, validationErrorKey, controller);
                unset(this.$$success, validationErrorKey, controller);
            }
            if (this.$pending) {
                cachedToggleClass(this, "ng-pending", !0);
                this.$valid = this.$invalid = void 0;
                toggleValidationCss(this, "", null);
            } else {
                cachedToggleClass(this, "ng-pending", !1);
                this.$valid = isObjectEmpty(this.$error);
                this.$invalid = !this.$valid;
                toggleValidationCss(this, "", this.$valid);
            }
            var combinedState;
            toggleValidationCss(this, validationErrorKey, combinedState = this.$pending && this.$pending[validationErrorKey] ? void 0 : !this.$error[validationErrorKey] && (!!this.$$success[validationErrorKey] || null));
            this.$$parentForm.$setValidity(validationErrorKey, combinedState, this);
        };
        function cachedToggleClass(ctrl, className, switchValue) {
            if (switchValue && !ctrl.$$classCache[className]) {
                ctrl.$$animate.addClass(ctrl.$$element, className);
                ctrl.$$classCache[className] = !0;
            } else if (!switchValue && ctrl.$$classCache[className]) {
                ctrl.$$animate.removeClass(ctrl.$$element, className);
                ctrl.$$classCache[className] = !1;
            }
        }
        function toggleValidationCss(ctrl, validationErrorKey, isValid) {
            validationErrorKey = validationErrorKey ? "-" + snake_case(validationErrorKey, "-") : "";
            cachedToggleClass(ctrl, VALID_CLASS + validationErrorKey, !0 === isValid);
            cachedToggleClass(ctrl, INVALID_CLASS + validationErrorKey, !1 === isValid);
        }
    }
    function isObjectEmpty(obj) {
        if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop)) return !1;
        return !0;
    }
    var ISO_DATE_REGEXP = /^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/, URL_REGEXP = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i, EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/, NUMBER_REGEXP = /^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/, DATE_REGEXP = /^(\d{4,})-(\d{2})-(\d{2})$/, DATETIMELOCAL_REGEXP = /^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/, WEEK_REGEXP = /^(\d{4,})-W(\d\d)$/, MONTH_REGEXP = /^(\d{4,})-(\d\d)$/, TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/, PARTIAL_VALIDATION_EVENTS = "keydown wheel mousedown", PARTIAL_VALIDATION_TYPES = createMap();
    forEach("date,datetime-local,month,time,week".split(","), function(type) {
        PARTIAL_VALIDATION_TYPES[type] = !0;
    });
    var inputType = {
        text: function(scope, element, attr, ctrl, $sniffer, $browser) {
            baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
            stringBasedInputType(ctrl);
        },
        date: createDateInputType("date", DATE_REGEXP, createDateParser(DATE_REGEXP, [ "yyyy", "MM", "dd" ]), "yyyy-MM-dd"),
        "datetime-local": createDateInputType("datetimelocal", DATETIMELOCAL_REGEXP, createDateParser(DATETIMELOCAL_REGEXP, [ "yyyy", "MM", "dd", "HH", "mm", "ss", "sss" ]), "yyyy-MM-ddTHH:mm:ss.sss"),
        time: createDateInputType("time", TIME_REGEXP, createDateParser(TIME_REGEXP, [ "HH", "mm", "ss", "sss" ]), "HH:mm:ss.sss"),
        week: createDateInputType("week", WEEK_REGEXP, function(isoWeek, existingDate) {
            if (isDate(isoWeek)) return isoWeek;
            if (isString(isoWeek)) {
                WEEK_REGEXP.lastIndex = 0;
                var parts = WEEK_REGEXP.exec(isoWeek);
                if (parts) {
                    var year = +parts[1], week = +parts[2], hours = 0, minutes = 0, seconds = 0, milliseconds = 0, firstThurs = getFirstThursdayOfYear(year), addDays = 7 * (week - 1);
                    if (existingDate) {
                        hours = existingDate.getHours();
                        minutes = existingDate.getMinutes();
                        seconds = existingDate.getSeconds();
                        milliseconds = existingDate.getMilliseconds();
                    }
                    return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
                }
            }
            return NaN;
        }, "yyyy-Www"),
        month: createDateInputType("month", MONTH_REGEXP, createDateParser(MONTH_REGEXP, [ "yyyy", "MM" ]), "yyyy-MM"),
        number: function(scope, element, attr, ctrl, $sniffer, $browser) {
            badInputChecker(scope, element, attr, ctrl);
            numberFormatterParser(ctrl);
            baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
            var minVal, maxVal;
            if (isDefined(attr.min) || attr.ngMin) {
                ctrl.$validators.min = function(value) {
                    return ctrl.$isEmpty(value) || isUndefined(minVal) || minVal <= value;
                };
                attr.$observe("min", function(val) {
                    minVal = parseNumberAttrVal(val);
                    ctrl.$validate();
                });
            }
            if (isDefined(attr.max) || attr.ngMax) {
                ctrl.$validators.max = function(value) {
                    return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
                };
                attr.$observe("max", function(val) {
                    maxVal = parseNumberAttrVal(val);
                    ctrl.$validate();
                });
            }
            if (isDefined(attr.step) || attr.ngStep) {
                var stepVal;
                ctrl.$validators.step = function(modelValue, viewValue) {
                    return ctrl.$isEmpty(viewValue) || isUndefined(stepVal) || isValidForStep(viewValue, minVal || 0, stepVal);
                };
                attr.$observe("step", function(val) {
                    stepVal = parseNumberAttrVal(val);
                    ctrl.$validate();
                });
            }
        },
        url: function(scope, element, attr, ctrl, $sniffer, $browser) {
            baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
            stringBasedInputType(ctrl);
            ctrl.$$parserName = "url";
            ctrl.$validators.url = function(modelValue, viewValue) {
                var value = modelValue || viewValue;
                return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
            };
        },
        email: function(scope, element, attr, ctrl, $sniffer, $browser) {
            baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
            stringBasedInputType(ctrl);
            ctrl.$$parserName = "email";
            ctrl.$validators.email = function(modelValue, viewValue) {
                var value = modelValue || viewValue;
                return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
            };
        },
        radio: function(scope, element, attr, ctrl) {
            var doTrim = !attr.ngTrim || "false" !== trim(attr.ngTrim);
            isUndefined(attr.name) && element.attr("name", nextUid());
            element.on("click", function(ev) {
                var value;
                if (element[0].checked) {
                    value = attr.value;
                    doTrim && (value = trim(value));
                    ctrl.$setViewValue(value, ev && ev.type);
                }
            });
            ctrl.$render = function() {
                var value = attr.value;
                doTrim && (value = trim(value));
                element[0].checked = value === ctrl.$viewValue;
            };
            attr.$observe("value", ctrl.$render);
        },
        range: function(scope, element, attr, ctrl, $sniffer, $browser) {
            badInputChecker(scope, element, attr, ctrl);
            numberFormatterParser(ctrl);
            baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
            var supportsRange = ctrl.$$hasNativeValidators && "range" === element[0].type, minVal = supportsRange ? 0 : void 0, maxVal = supportsRange ? 100 : void 0, stepVal = supportsRange ? 1 : void 0, validity = element[0].validity, hasMinAttr = isDefined(attr.min), hasMaxAttr = isDefined(attr.max), hasStepAttr = isDefined(attr.step), originalRender = ctrl.$render;
            ctrl.$render = supportsRange && isDefined(validity.rangeUnderflow) && isDefined(validity.rangeOverflow) ? function() {
                originalRender();
                ctrl.$setViewValue(element.val());
            } : originalRender;
            if (hasMinAttr) {
                ctrl.$validators.min = supportsRange ? function() {
                    return !0;
                } : function(modelValue, viewValue) {
                    return ctrl.$isEmpty(viewValue) || isUndefined(minVal) || minVal <= viewValue;
                };
                setInitialValueAndObserver("min", function(val) {
                    minVal = parseNumberAttrVal(val);
                    if (isNumberNaN(ctrl.$modelValue)) return;
                    if (supportsRange) {
                        var elVal = element.val();
                        if (elVal < minVal) {
                            elVal = minVal;
                            element.val(elVal);
                        }
                        ctrl.$setViewValue(elVal);
                    } else ctrl.$validate();
                });
            }
            if (hasMaxAttr) {
                ctrl.$validators.max = supportsRange ? function() {
                    return !0;
                } : function(modelValue, viewValue) {
                    return ctrl.$isEmpty(viewValue) || isUndefined(maxVal) || viewValue <= maxVal;
                };
                setInitialValueAndObserver("max", function(val) {
                    maxVal = parseNumberAttrVal(val);
                    if (isNumberNaN(ctrl.$modelValue)) return;
                    if (supportsRange) {
                        var elVal = element.val();
                        if (maxVal < elVal) {
                            element.val(maxVal);
                            elVal = maxVal < minVal ? minVal : maxVal;
                        }
                        ctrl.$setViewValue(elVal);
                    } else ctrl.$validate();
                });
            }
            if (hasStepAttr) {
                ctrl.$validators.step = supportsRange ? function() {
                    return !validity.stepMismatch;
                } : function(modelValue, viewValue) {
                    return ctrl.$isEmpty(viewValue) || isUndefined(stepVal) || isValidForStep(viewValue, minVal || 0, stepVal);
                };
                setInitialValueAndObserver("step", function(val) {
                    stepVal = parseNumberAttrVal(val);
                    if (isNumberNaN(ctrl.$modelValue)) return;
                    supportsRange && ctrl.$viewValue !== element.val() ? ctrl.$setViewValue(element.val()) : ctrl.$validate();
                });
            }
            function setInitialValueAndObserver(htmlAttrName, changeFn) {
                element.attr(htmlAttrName, attr[htmlAttrName]);
                attr.$observe(htmlAttrName, changeFn);
            }
        },
        checkbox: function(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
            var trueValue = parseConstantExpr($parse, scope, "ngTrueValue", attr.ngTrueValue, !0), falseValue = parseConstantExpr($parse, scope, "ngFalseValue", attr.ngFalseValue, !1);
            element.on("click", function(ev) {
                ctrl.$setViewValue(element[0].checked, ev && ev.type);
            });
            ctrl.$render = function() {
                element[0].checked = ctrl.$viewValue;
            };
            ctrl.$isEmpty = function(value) {
                return !1 === value;
            };
            ctrl.$formatters.push(function(value) {
                return equals(value, trueValue);
            });
            ctrl.$parsers.push(function(value) {
                return value ? trueValue : falseValue;
            });
        },
        hidden: noop,
        button: noop,
        submit: noop,
        reset: noop,
        file: noop
    };
    function stringBasedInputType(ctrl) {
        ctrl.$formatters.push(function(value) {
            return ctrl.$isEmpty(value) ? value : value.toString();
        });
    }
    function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        var timeout, type = lowercase(element[0].type);
        if (!$sniffer.android) {
            var composing = !1;
            element.on("compositionstart", function() {
                composing = !0;
            });
            element.on("compositionupdate", function(ev) {
                (isUndefined(ev.data) || "" === ev.data) && (composing = !1);
            });
            element.on("compositionend", function() {
                composing = !1;
                listener();
            });
        }
        var listener = function(ev) {
            if (timeout) {
                $browser.defer.cancel(timeout);
                timeout = null;
            }
            if (!composing) {
                var value = element.val(), event = ev && ev.type;
                "password" === type || attr.ngTrim && "false" === attr.ngTrim || (value = trim(value));
                (ctrl.$viewValue !== value || "" === value && ctrl.$$hasNativeValidators) && ctrl.$setViewValue(value, event);
            }
        };
        if ($sniffer.hasEvent("input")) element.on("input", listener); else {
            var deferListener = function(ev, input, origValue) {
                timeout || (timeout = $browser.defer(function() {
                    timeout = null;
                    input && input.value === origValue || listener(ev);
                }));
            };
            element.on("keydown", function(event) {
                var key = event.keyCode;
                91 === key || 15 < key && key < 19 || 37 <= key && key <= 40 || deferListener(event, this, this.value);
            });
            $sniffer.hasEvent("paste") && element.on("paste cut drop", deferListener);
        }
        element.on("change", listener);
        PARTIAL_VALIDATION_TYPES[type] && ctrl.$$hasNativeValidators && type === attr.type && element.on(PARTIAL_VALIDATION_EVENTS, function(ev) {
            if (!timeout) {
                var validity = this[VALIDITY_STATE_PROPERTY], origBadInput = validity.badInput, origTypeMismatch = validity.typeMismatch;
                timeout = $browser.defer(function() {
                    timeout = null;
                    validity.badInput === origBadInput && validity.typeMismatch === origTypeMismatch || listener(ev);
                });
            }
        });
        ctrl.$render = function() {
            var value = ctrl.$isEmpty(ctrl.$viewValue) ? "" : ctrl.$viewValue;
            element.val() !== value && element.val(value);
        };
    }
    function createDateParser(regexp, mapping) {
        return function(iso, date) {
            var parts, map;
            if (isDate(iso)) return iso;
            if (isString(iso)) {
                '"' === iso.charAt(0) && '"' === iso.charAt(iso.length - 1) && (iso = iso.substring(1, iso.length - 1));
                if (ISO_DATE_REGEXP.test(iso)) return new Date(iso);
                regexp.lastIndex = 0;
                if (parts = regexp.exec(iso)) {
                    parts.shift();
                    map = date ? {
                        yyyy: date.getFullYear(),
                        MM: date.getMonth() + 1,
                        dd: date.getDate(),
                        HH: date.getHours(),
                        mm: date.getMinutes(),
                        ss: date.getSeconds(),
                        sss: date.getMilliseconds() / 1e3
                    } : {
                        yyyy: 1970,
                        MM: 1,
                        dd: 1,
                        HH: 0,
                        mm: 0,
                        ss: 0,
                        sss: 0
                    };
                    forEach(parts, function(part, index) {
                        index < mapping.length && (map[mapping[index]] = +part);
                    });
                    return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, 1e3 * map.sss || 0);
                }
            }
            return NaN;
        };
    }
    function createDateInputType(type, regexp, parseDate, format) {
        return function(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
            badInputChecker(scope, element, attr, ctrl);
            baseInputType(0, element, attr, ctrl, $sniffer, $browser);
            var previousDate, previousTimezone;
            ctrl.$$parserName = type;
            ctrl.$parsers.push(function(value) {
                return ctrl.$isEmpty(value) ? null : regexp.test(value) ? parseDateAndConvertTimeZoneToLocal(value, previousDate) : void 0;
            });
            ctrl.$formatters.push(function(value) {
                if (value && !isDate(value)) throw ngModelMinErr("datefmt", "Expected `{0}` to be a date", value);
                if (isValidDate(value)) {
                    previousDate = value;
                    var timezone = ctrl.$options.getOption("timezone");
                    timezone && (previousDate = convertTimezoneToLocal(previousDate, previousTimezone = timezone, !0));
                    return $filter("date")(value, format, timezone);
                }
                previousTimezone = previousDate = null;
                return "";
            });
            if (isDefined(attr.min) || attr.ngMin) {
                var minVal;
                ctrl.$validators.min = function(value) {
                    return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
                };
                attr.$observe("min", function(val) {
                    minVal = parseObservedDateValue(val);
                    ctrl.$validate();
                });
            }
            if (isDefined(attr.max) || attr.ngMax) {
                var maxVal;
                ctrl.$validators.max = function(value) {
                    return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
                };
                attr.$observe("max", function(val) {
                    maxVal = parseObservedDateValue(val);
                    ctrl.$validate();
                });
            }
            function isValidDate(value) {
                return value && !(value.getTime && value.getTime() != value.getTime());
            }
            function parseObservedDateValue(val) {
                return isDefined(val) && !isDate(val) ? parseDateAndConvertTimeZoneToLocal(val) || void 0 : val;
            }
            function parseDateAndConvertTimeZoneToLocal(value, previousDate) {
                var timezone = ctrl.$options.getOption("timezone");
                previousTimezone && previousTimezone !== timezone && (previousDate = addDateMinutes(previousDate, timezoneToOffset(previousTimezone)));
                var parsedDate = parseDate(value, previousDate);
                !isNaN(parsedDate) && timezone && (parsedDate = convertTimezoneToLocal(parsedDate, timezone));
                return parsedDate;
            }
        };
    }
    function badInputChecker(scope, element, attr, ctrl) {
        var node = element[0];
        (ctrl.$$hasNativeValidators = isObject(node.validity)) && ctrl.$parsers.push(function(value) {
            var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
            return validity.badInput || validity.typeMismatch ? void 0 : value;
        });
    }
    function numberFormatterParser(ctrl) {
        ctrl.$$parserName = "number";
        ctrl.$parsers.push(function(value) {
            return ctrl.$isEmpty(value) ? null : NUMBER_REGEXP.test(value) ? parseFloat(value) : void 0;
        });
        ctrl.$formatters.push(function(value) {
            if (!ctrl.$isEmpty(value)) {
                if (!isNumber(value)) throw ngModelMinErr("numfmt", "Expected `{0}` to be a number", value);
                value = value.toString();
            }
            return value;
        });
    }
    function parseNumberAttrVal(val) {
        isDefined(val) && !isNumber(val) && (val = parseFloat(val));
        return isNumberNaN(val) ? void 0 : val;
    }
    function isNumberInteger(num) {
        return (0 | num) === num;
    }
    function countDecimals(num) {
        var numString = num.toString(), decimalSymbolIndex = numString.indexOf(".");
        if (-1 !== decimalSymbolIndex) return numString.length - decimalSymbolIndex - 1;
        if (-1 < num && num < 1) {
            var match = /e-(\d+)$/.exec(numString);
            if (match) return Number(match[1]);
        }
        return 0;
    }
    function isValidForStep(viewValue, stepBase, step) {
        var value = Number(viewValue), isNonIntegerValue = !isNumberInteger(value), isNonIntegerStepBase = !isNumberInteger(stepBase), isNonIntegerStep = !isNumberInteger(step);
        if (isNonIntegerValue || isNonIntegerStepBase || isNonIntegerStep) {
            var valueDecimals = isNonIntegerValue ? countDecimals(value) : 0, stepBaseDecimals = isNonIntegerStepBase ? countDecimals(stepBase) : 0, stepDecimals = isNonIntegerStep ? countDecimals(step) : 0, decimalCount = Math.max(valueDecimals, stepBaseDecimals, stepDecimals), multiplier = Math.pow(10, decimalCount);
            value *= multiplier;
            stepBase *= multiplier;
            step *= multiplier;
            isNonIntegerValue && (value = Math.round(value));
            isNonIntegerStepBase && (stepBase = Math.round(stepBase));
            isNonIntegerStep && (step = Math.round(step));
        }
        return (value - stepBase) % step == 0;
    }
    function parseConstantExpr($parse, context, name, expression, fallback) {
        var parseFn;
        if (isDefined(expression)) {
            if (!(parseFn = $parse(expression)).constant) throw ngModelMinErr("constexpr", "Expected constant expression for `{0}`, but saw `{1}`.", name, expression);
            return parseFn(context);
        }
        return fallback;
    }
    var inputDirective = [ "$browser", "$sniffer", "$filter", "$parse", function($browser, $sniffer, $filter, $parse) {
        return {
            restrict: "E",
            require: [ "?ngModel" ],
            link: {
                pre: function(scope, element, attr, ctrls) {
                    ctrls[0] && (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer, $browser, $filter, $parse);
                }
            }
        };
    } ], CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/, ngValueDirective = function() {
        function updateElementValue(element, attr, value) {
            var propValue = isDefined(value) ? value : 9 === msie ? "" : null;
            element.prop("value", propValue);
            attr.$set("value", value);
        }
        return {
            restrict: "A",
            priority: 100,
            compile: function(tpl, tplAttr) {
                return CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue) ? function(scope, elm, attr) {
                    updateElementValue(elm, attr, scope.$eval(attr.ngValue));
                } : function(scope, elm, attr) {
                    scope.$watch(attr.ngValue, function(value) {
                        updateElementValue(elm, attr, value);
                    });
                };
            }
        };
    }, ngBindDirective = [ "$compile", function($compile) {
        return {
            restrict: "AC",
            compile: function(templateElement) {
                $compile.$$addBindingClass(templateElement);
                return function(scope, element, attr) {
                    $compile.$$addBindingInfo(element, attr.ngBind);
                    element = element[0];
                    scope.$watch(attr.ngBind, function(value) {
                        element.textContent = stringify(value);
                    });
                };
            }
        };
    } ], ngBindTemplateDirective = [ "$interpolate", "$compile", function($interpolate, $compile) {
        return {
            compile: function(templateElement) {
                $compile.$$addBindingClass(templateElement);
                return function(scope, element, attr) {
                    var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
                    $compile.$$addBindingInfo(element, interpolateFn.expressions);
                    element = element[0];
                    attr.$observe("ngBindTemplate", function(value) {
                        element.textContent = isUndefined(value) ? "" : value;
                    });
                };
            }
        };
    } ], ngBindHtmlDirective = [ "$sce", "$parse", "$compile", function($sce, $parse, $compile) {
        return {
            restrict: "A",
            compile: function(tElement, tAttrs) {
                var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml), ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function(val) {
                    return $sce.valueOf(val);
                });
                $compile.$$addBindingClass(tElement);
                return function(scope, element, attr) {
                    $compile.$$addBindingInfo(element, attr.ngBindHtml);
                    scope.$watch(ngBindHtmlWatch, function() {
                        var value = ngBindHtmlGetter(scope);
                        element.html($sce.getTrustedHtml(value) || "");
                    });
                };
            }
        };
    } ], ngChangeDirective = valueFn({
        restrict: "A",
        require: "ngModel",
        link: function(scope, element, attr, ctrl) {
            ctrl.$viewChangeListeners.push(function() {
                scope.$eval(attr.ngChange);
            });
        }
    });
    function classDirective(name, selector) {
        name = "ngClass" + name;
        var indexWatchExpression;
        return [ "$parse", function($parse) {
            return {
                restrict: "AC",
                link: function(scope, element, attr) {
                    var oldClassString, expression = attr[name].trim(), isOneTime = ":" === expression.charAt(0) && ":" === expression.charAt(1), watchExpression = $parse(expression, isOneTime ? toFlatValue : toClassString), watchAction = isOneTime ? function(newClassValue) {
                        var newClassString = toClassString(newClassValue);
                        newClassString !== oldClassString && ngClassWatchAction(newClassString);
                    } : ngClassWatchAction, classCounts = element.data("$classCounts"), oldModulo = !0;
                    if (!classCounts) {
                        classCounts = createMap();
                        element.data("$classCounts", classCounts);
                    }
                    if ("ngClass" !== name) {
                        indexWatchExpression || (indexWatchExpression = $parse("$index", function($index) {
                            return 1 & $index;
                        }));
                        scope.$watch(indexWatchExpression, function(newModulo) {
                            newModulo === selector ? function(classString) {
                                classString = digestClassCounts(split(classString), 1);
                                attr.$addClass(classString);
                            }(oldClassString) : function(classString) {
                                classString = digestClassCounts(split(classString), -1);
                                attr.$removeClass(classString);
                            }(oldClassString);
                            oldModulo = newModulo;
                        });
                    }
                    scope.$watch(watchExpression, watchAction, isOneTime);
                    function digestClassCounts(classArray, count) {
                        var classesToUpdate = [];
                        forEach(classArray, function(className) {
                            if (0 < count || classCounts[className]) {
                                classCounts[className] = (classCounts[className] || 0) + count;
                                classCounts[className] === +(0 < count) && classesToUpdate.push(className);
                            }
                        });
                        return classesToUpdate.join(" ");
                    }
                    function ngClassWatchAction(newClassString) {
                        oldModulo === selector && function(oldClassString, newClassString) {
                            var oldClassArray = split(oldClassString), newClassArray = split(newClassString), toRemoveArray = arrayDifference(oldClassArray, newClassArray), toAddArray = arrayDifference(newClassArray, oldClassArray), toRemoveString = digestClassCounts(toRemoveArray, -1), toAddString = digestClassCounts(toAddArray, 1);
                            attr.$addClass(toAddString);
                            attr.$removeClass(toRemoveString);
                        }(oldClassString, newClassString);
                        oldClassString = newClassString;
                    }
                }
            };
        } ];
        function arrayDifference(tokens1, tokens2) {
            if (!tokens1 || !tokens1.length) return [];
            if (!tokens2 || !tokens2.length) return tokens1;
            var values = [];
            outer: for (var i = 0; i < tokens1.length; i++) {
                for (var token = tokens1[i], j = 0; j < tokens2.length; j++) if (token === tokens2[j]) continue outer;
                values.push(token);
            }
            return values;
        }
        function split(classString) {
            return classString && classString.split(" ");
        }
        function toClassString(classValue) {
            var classString = classValue;
            isArray(classValue) ? classString = classValue.map(toClassString).join(" ") : isObject(classValue) && (classString = Object.keys(classValue).filter(function(key) {
                return classValue[key];
            }).join(" "));
            return classString;
        }
        function toFlatValue(classValue) {
            var flatValue = classValue;
            if (isArray(classValue)) flatValue = classValue.map(toFlatValue); else if (isObject(classValue)) {
                var hasUndefined = !1;
                flatValue = Object.keys(classValue).filter(function(key) {
                    var value = classValue[key];
                    !hasUndefined && isUndefined(value) && (hasUndefined = !0);
                    return value;
                });
                hasUndefined && flatValue.push(void 0);
            }
            return flatValue;
        }
    }
    var ngClassDirective = classDirective("", !0), ngClassOddDirective = classDirective("Odd", 0), ngClassEvenDirective = classDirective("Even", 1), ngCloakDirective = ngDirective({
        compile: function(element, attr) {
            attr.$set("ngCloak", void 0);
            element.removeClass("ng-cloak");
        }
    }), ngControllerDirective = [ function() {
        return {
            restrict: "A",
            scope: !0,
            controller: "@",
            priority: 500
        };
    } ], ngEventDirectives = {}, forceAsyncEvents = {
        blur: !0,
        focus: !0
    };
    forEach("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "), function(eventName) {
        var directiveName = directiveNormalize("ng-" + eventName);
        ngEventDirectives[directiveName] = [ "$parse", "$rootScope", function($parse, $rootScope) {
            return {
                restrict: "A",
                compile: function($element, attr) {
                    var fn = $parse(attr[directiveName]);
                    return function(scope, element) {
                        element.on(eventName, function(event) {
                            var callback = function() {
                                fn(scope, {
                                    $event: event
                                });
                            };
                            forceAsyncEvents[eventName] && $rootScope.$$phase ? scope.$evalAsync(callback) : scope.$apply(callback);
                        });
                    };
                }
            };
        } ];
    });
    var ngIfDirective = [ "$animate", "$compile", function($animate, $compile) {
        return {
            multiElement: !0,
            transclude: "element",
            priority: 600,
            terminal: !0,
            restrict: "A",
            $$tlb: !0,
            link: function($scope, $element, $attr, ctrl, $transclude) {
                var block, childScope, previousElements;
                $scope.$watch($attr.ngIf, function(value) {
                    if (value) childScope || $transclude(function(clone, newScope) {
                        childScope = newScope;
                        clone[clone.length++] = $compile.$$createComment("end ngIf", $attr.ngIf);
                        block = {
                            clone: clone
                        };
                        $animate.enter(clone, $element.parent(), $element);
                    }); else {
                        if (previousElements) {
                            previousElements.remove();
                            previousElements = null;
                        }
                        if (childScope) {
                            childScope.$destroy();
                            childScope = null;
                        }
                        if (block) {
                            previousElements = getBlockNodes(block.clone);
                            $animate.leave(previousElements).done(function(response) {
                                !1 !== response && (previousElements = null);
                            });
                            block = null;
                        }
                    }
                });
            }
        };
    } ], ngIncludeDirective = [ "$templateRequest", "$anchorScroll", "$animate", function($templateRequest, $anchorScroll, $animate) {
        return {
            restrict: "ECA",
            priority: 400,
            terminal: !0,
            transclude: "element",
            controller: angular.noop,
            compile: function(element, attr) {
                var srcExp = attr.ngInclude || attr.src, onloadExp = attr.onload || "", autoScrollExp = attr.autoscroll;
                return function(scope, $element, $attr, ctrl, $transclude) {
                    var currentScope, previousElement, currentElement, changeCounter = 0, cleanupLastIncludeContent = function() {
                        if (previousElement) {
                            previousElement.remove();
                            previousElement = null;
                        }
                        if (currentScope) {
                            currentScope.$destroy();
                            currentScope = null;
                        }
                        if (currentElement) {
                            $animate.leave(currentElement).done(function(response) {
                                !1 !== response && (previousElement = null);
                            });
                            previousElement = currentElement;
                            currentElement = null;
                        }
                    };
                    scope.$watch(srcExp, function(src) {
                        var afterAnimation = function(response) {
                            !1 === response || !isDefined(autoScrollExp) || autoScrollExp && !scope.$eval(autoScrollExp) || $anchorScroll();
                        }, thisChangeId = ++changeCounter;
                        if (src) {
                            $templateRequest(src, !0).then(function(response) {
                                if (!scope.$$destroyed && thisChangeId === changeCounter) {
                                    var newScope = scope.$new();
                                    ctrl.template = response;
                                    var clone = $transclude(newScope, function(clone) {
                                        cleanupLastIncludeContent();
                                        $animate.enter(clone, null, $element).done(afterAnimation);
                                    });
                                    currentElement = clone;
                                    (currentScope = newScope).$emit("$includeContentLoaded", src);
                                    scope.$eval(onloadExp);
                                }
                            }, function() {
                                if (!scope.$$destroyed && thisChangeId === changeCounter) {
                                    cleanupLastIncludeContent();
                                    scope.$emit("$includeContentError", src);
                                }
                            });
                            scope.$emit("$includeContentRequested", src);
                        } else {
                            cleanupLastIncludeContent();
                            ctrl.template = null;
                        }
                    });
                };
            }
        };
    } ], ngIncludeFillContentDirective = [ "$compile", function($compile) {
        return {
            restrict: "ECA",
            priority: -400,
            require: "ngInclude",
            link: function(scope, $element, $attr, ctrl) {
                if (toString.call($element[0]).match(/SVG/)) {
                    $element.empty();
                    $compile(jqLiteBuildFragment(ctrl.template, window.document).childNodes)(scope, function(clone) {
                        $element.append(clone);
                    }, {
                        futureParentElement: $element
                    });
                } else {
                    $element.html(ctrl.template);
                    $compile($element.contents())(scope);
                }
            }
        };
    } ], ngInitDirective = ngDirective({
        priority: 450,
        compile: function() {
            return {
                pre: function(scope, element, attrs) {
                    scope.$eval(attrs.ngInit);
                }
            };
        }
    }), ngListDirective = function() {
        return {
            restrict: "A",
            priority: 100,
            require: "ngModel",
            link: function(scope, element, attr, ctrl) {
                var ngList = attr.ngList || ", ", trimValues = "false" !== attr.ngTrim, separator = trimValues ? trim(ngList) : ngList;
                ctrl.$parsers.push(function(viewValue) {
                    if (!isUndefined(viewValue)) {
                        var list = [];
                        viewValue && forEach(viewValue.split(separator), function(value) {
                            value && list.push(trimValues ? trim(value) : value);
                        });
                        return list;
                    }
                });
                ctrl.$formatters.push(function(value) {
                    if (isArray(value)) return value.join(ngList);
                });
                ctrl.$isEmpty = function(value) {
                    return !value || !value.length;
                };
            }
        };
    }, VALID_CLASS = "ng-valid", INVALID_CLASS = "ng-invalid", PRISTINE_CLASS = "ng-pristine", DIRTY_CLASS = "ng-dirty", ngModelMinErr = minErr("ngModel");
    NgModelController.$inject = [ "$scope", "$exceptionHandler", "$attrs", "$element", "$parse", "$animate", "$timeout", "$q", "$interpolate" ];
    function NgModelController($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $q, $interpolate) {
        this.$viewValue = Number.NaN;
        this.$modelValue = Number.NaN;
        this.$$rawModelValue = void 0;
        this.$validators = {};
        this.$asyncValidators = {};
        this.$parsers = [];
        this.$formatters = [];
        this.$viewChangeListeners = [];
        this.$untouched = !0;
        this.$touched = !1;
        this.$pristine = !0;
        this.$dirty = !1;
        this.$valid = !0;
        this.$invalid = !1;
        this.$error = {};
        this.$$success = {};
        this.$pending = void 0;
        this.$name = $interpolate($attr.name || "", !1)($scope);
        this.$$parentForm = nullFormCtrl;
        this.$options = defaultModelOptions;
        this.$$updateEvents = "";
        this.$$updateEventHandler = this.$$updateEventHandler.bind(this);
        this.$$parsedNgModel = $parse($attr.ngModel);
        this.$$parsedNgModelAssign = this.$$parsedNgModel.assign;
        this.$$ngModelGet = this.$$parsedNgModel;
        this.$$ngModelSet = this.$$parsedNgModelAssign;
        this.$$pendingDebounce = null;
        this.$$parserValid = void 0;
        this.$$currentValidationRunId = 0;
        Object.defineProperty(this, "$$scope", {
            value: $scope
        });
        this.$$attr = $attr;
        this.$$element = $element;
        this.$$animate = $animate;
        this.$$timeout = $timeout;
        this.$$parse = $parse;
        this.$$q = $q;
        this.$$exceptionHandler = $exceptionHandler;
        setupValidity(this);
        (ctrl = this).$$scope.$watch(function(scope) {
            var modelValue = ctrl.$$ngModelGet(scope);
            modelValue === ctrl.$modelValue || ctrl.$modelValue != ctrl.$modelValue && modelValue != modelValue || ctrl.$$setModelValue(modelValue);
            return modelValue;
        });
        var ctrl;
    }
    NgModelController.prototype = {
        $$initGetterSetters: function() {
            if (this.$options.getOption("getterSetter")) {
                var invokeModelGetter = this.$$parse(this.$$attr.ngModel + "()"), invokeModelSetter = this.$$parse(this.$$attr.ngModel + "($$$p)");
                this.$$ngModelGet = function($scope) {
                    var modelValue = this.$$parsedNgModel($scope);
                    isFunction(modelValue) && (modelValue = invokeModelGetter($scope));
                    return modelValue;
                };
                this.$$ngModelSet = function($scope, newValue) {
                    isFunction(this.$$parsedNgModel($scope)) ? invokeModelSetter($scope, {
                        $$$p: newValue
                    }) : this.$$parsedNgModelAssign($scope, newValue);
                };
            } else if (!this.$$parsedNgModel.assign) throw ngModelMinErr("nonassign", "Expression '{0}' is non-assignable. Element: {1}", this.$$attr.ngModel, startingTag(this.$$element));
        },
        $render: noop,
        $isEmpty: function(value) {
            return isUndefined(value) || "" === value || null === value || value != value;
        },
        $$updateEmptyClasses: function(value) {
            if (this.$isEmpty(value)) {
                this.$$animate.removeClass(this.$$element, "ng-not-empty");
                this.$$animate.addClass(this.$$element, "ng-empty");
            } else {
                this.$$animate.removeClass(this.$$element, "ng-empty");
                this.$$animate.addClass(this.$$element, "ng-not-empty");
            }
        },
        $setPristine: function() {
            this.$dirty = !1;
            this.$pristine = !0;
            this.$$animate.removeClass(this.$$element, DIRTY_CLASS);
            this.$$animate.addClass(this.$$element, PRISTINE_CLASS);
        },
        $setDirty: function() {
            this.$dirty = !0;
            this.$pristine = !1;
            this.$$animate.removeClass(this.$$element, PRISTINE_CLASS);
            this.$$animate.addClass(this.$$element, DIRTY_CLASS);
            this.$$parentForm.$setDirty();
        },
        $setUntouched: function() {
            this.$touched = !1;
            this.$untouched = !0;
            this.$$animate.setClass(this.$$element, "ng-untouched", "ng-touched");
        },
        $setTouched: function() {
            this.$touched = !0;
            this.$untouched = !1;
            this.$$animate.setClass(this.$$element, "ng-touched", "ng-untouched");
        },
        $rollbackViewValue: function() {
            this.$$timeout.cancel(this.$$pendingDebounce);
            this.$viewValue = this.$$lastCommittedViewValue;
            this.$render();
        },
        $validate: function() {
            if (!isNumberNaN(this.$modelValue)) {
                var viewValue = this.$$lastCommittedViewValue, modelValue = this.$$rawModelValue, prevValid = this.$valid, prevModelValue = this.$modelValue, allowInvalid = this.$options.getOption("allowInvalid"), that = this;
                this.$$runValidators(modelValue, viewValue, function(allValid) {
                    if (!allowInvalid && prevValid !== allValid) {
                        that.$modelValue = allValid ? modelValue : void 0;
                        that.$modelValue !== prevModelValue && that.$$writeModelToScope();
                    }
                });
            }
        },
        $$runValidators: function(modelValue, viewValue, doneCallback) {
            this.$$currentValidationRunId++;
            var localValidationRunId = this.$$currentValidationRunId, that = this;
            !function() {
                var errorKey = that.$$parserName || "parse";
                {
                    if (!isUndefined(that.$$parserValid)) {
                        if (!that.$$parserValid) {
                            forEach(that.$validators, function(v, name) {
                                setValidity(name, null);
                            });
                            forEach(that.$asyncValidators, function(v, name) {
                                setValidity(name, null);
                            });
                        }
                        setValidity(errorKey, that.$$parserValid);
                        return that.$$parserValid;
                    }
                    setValidity(errorKey, null);
                }
                return !0;
            }() ? validationDone(!1) : function() {
                var syncValidatorsValid = !0;
                forEach(that.$validators, function(validator, name) {
                    var result = Boolean(validator(modelValue, viewValue));
                    syncValidatorsValid = syncValidatorsValid && result;
                    setValidity(name, result);
                });
                if (syncValidatorsValid) return !0;
                forEach(that.$asyncValidators, function(v, name) {
                    setValidity(name, null);
                });
                return !1;
            }() ? function() {
                var validatorPromises = [], allValid = !0;
                forEach(that.$asyncValidators, function(validator, name) {
                    var promise = validator(modelValue, viewValue);
                    if (!isPromiseLike(promise)) throw ngModelMinErr("nopromise", "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
                    setValidity(name, void 0);
                    validatorPromises.push(promise.then(function() {
                        setValidity(name, !0);
                    }, function() {
                        setValidity(name, allValid = !1);
                    }));
                });
                validatorPromises.length ? that.$$q.all(validatorPromises).then(function() {
                    validationDone(allValid);
                }, noop) : validationDone(!0);
            }() : validationDone(!1);
            function setValidity(name, isValid) {
                localValidationRunId === that.$$currentValidationRunId && that.$setValidity(name, isValid);
            }
            function validationDone(allValid) {
                localValidationRunId === that.$$currentValidationRunId && doneCallback(allValid);
            }
        },
        $commitViewValue: function() {
            var viewValue = this.$viewValue;
            this.$$timeout.cancel(this.$$pendingDebounce);
            if (this.$$lastCommittedViewValue !== viewValue || "" === viewValue && this.$$hasNativeValidators) {
                this.$$updateEmptyClasses(viewValue);
                this.$$lastCommittedViewValue = viewValue;
                this.$pristine && this.$setDirty();
                this.$$parseAndValidate();
            }
        },
        $$parseAndValidate: function() {
            var modelValue = this.$$lastCommittedViewValue, that = this;
            this.$$parserValid = !isUndefined(modelValue) || void 0;
            if (this.$$parserValid) for (var i = 0; i < this.$parsers.length; i++) if (isUndefined(modelValue = this.$parsers[i](modelValue))) {
                this.$$parserValid = !1;
                break;
            }
            isNumberNaN(this.$modelValue) && (this.$modelValue = this.$$ngModelGet(this.$$scope));
            var prevModelValue = this.$modelValue, allowInvalid = this.$options.getOption("allowInvalid");
            this.$$rawModelValue = modelValue;
            if (allowInvalid) {
                this.$modelValue = modelValue;
                writeToModelIfNeeded();
            }
            this.$$runValidators(modelValue, this.$$lastCommittedViewValue, function(allValid) {
                if (!allowInvalid) {
                    that.$modelValue = allValid ? modelValue : void 0;
                    writeToModelIfNeeded();
                }
            });
            function writeToModelIfNeeded() {
                that.$modelValue !== prevModelValue && that.$$writeModelToScope();
            }
        },
        $$writeModelToScope: function() {
            this.$$ngModelSet(this.$$scope, this.$modelValue);
            forEach(this.$viewChangeListeners, function(listener) {
                try {
                    listener();
                } catch (e) {
                    this.$$exceptionHandler(e);
                }
            }, this);
        },
        $setViewValue: function(value, trigger) {
            this.$viewValue = value;
            this.$options.getOption("updateOnDefault") && this.$$debounceViewValueCommit(trigger);
        },
        $$debounceViewValueCommit: function(trigger) {
            var debounceDelay = this.$options.getOption("debounce");
            isNumber(debounceDelay[trigger]) ? debounceDelay = debounceDelay[trigger] : isNumber(debounceDelay.default) && (debounceDelay = debounceDelay.default);
            this.$$timeout.cancel(this.$$pendingDebounce);
            var that = this;
            0 < debounceDelay ? this.$$pendingDebounce = this.$$timeout(function() {
                that.$commitViewValue();
            }, debounceDelay) : this.$$scope.$root.$$phase ? this.$commitViewValue() : this.$$scope.$apply(function() {
                that.$commitViewValue();
            });
        },
        $overrideModelOptions: function(options) {
            this.$options = this.$options.createChild(options);
            this.$$setUpdateOnEvents();
        },
        $processModelValue: function() {
            var viewValue = this.$$format();
            if (this.$viewValue !== viewValue) {
                this.$$updateEmptyClasses(viewValue);
                this.$viewValue = this.$$lastCommittedViewValue = viewValue;
                this.$render();
                this.$$runValidators(this.$modelValue, this.$viewValue, noop);
            }
        },
        $$format: function() {
            for (var formatters = this.$formatters, idx = formatters.length, viewValue = this.$modelValue; idx--; ) viewValue = formatters[idx](viewValue);
            return viewValue;
        },
        $$setModelValue: function(modelValue) {
            this.$modelValue = this.$$rawModelValue = modelValue;
            this.$$parserValid = void 0;
            this.$processModelValue();
        },
        $$setUpdateOnEvents: function() {
            this.$$updateEvents && this.$$element.off(this.$$updateEvents, this.$$updateEventHandler);
            this.$$updateEvents = this.$options.getOption("updateOn");
            this.$$updateEvents && this.$$element.on(this.$$updateEvents, this.$$updateEventHandler);
        },
        $$updateEventHandler: function(ev) {
            this.$$debounceViewValueCommit(ev && ev.type);
        }
    };
    addSetValidityMethod({
        clazz: NgModelController,
        set: function(object, property) {
            object[property] = !0;
        },
        unset: function(object, property) {
            delete object[property];
        }
    });
    var defaultModelOptions, ngModelDirective = [ "$rootScope", function($rootScope) {
        return {
            restrict: "A",
            require: [ "ngModel", "^?form", "^?ngModelOptions" ],
            controller: NgModelController,
            priority: 1,
            compile: function(element) {
                element.addClass(PRISTINE_CLASS).addClass("ng-untouched").addClass(VALID_CLASS);
                return {
                    pre: function(scope, element, attr, ctrls) {
                        var modelCtrl = ctrls[0], formCtrl = ctrls[1] || modelCtrl.$$parentForm, optionsCtrl = ctrls[2];
                        optionsCtrl && (modelCtrl.$options = optionsCtrl.$options);
                        modelCtrl.$$initGetterSetters();
                        formCtrl.$addControl(modelCtrl);
                        attr.$observe("name", function(newValue) {
                            modelCtrl.$name !== newValue && modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);
                        });
                        scope.$on("$destroy", function() {
                            modelCtrl.$$parentForm.$removeControl(modelCtrl);
                        });
                    },
                    post: function(scope, element, attr, ctrls) {
                        var modelCtrl = ctrls[0];
                        modelCtrl.$$setUpdateOnEvents();
                        function setTouched() {
                            modelCtrl.$setTouched();
                        }
                        element.on("blur", function() {
                            modelCtrl.$touched || ($rootScope.$$phase ? scope.$evalAsync(setTouched) : scope.$apply(setTouched));
                        });
                    }
                };
            }
        };
    } ], DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;
    function ModelOptions(options) {
        this.$$options = options;
    }
    ModelOptions.prototype = {
        getOption: function(name) {
            return this.$$options[name];
        },
        createChild: function(options) {
            var inheritAll = !1;
            forEach(options = extend({}, options), function(option, key) {
                if ("$inherit" === option) if ("*" === key) inheritAll = !0; else {
                    options[key] = this.$$options[key];
                    "updateOn" === key && (options.updateOnDefault = this.$$options.updateOnDefault);
                } else if ("updateOn" === key) {
                    options.updateOnDefault = !1;
                    options[key] = trim(option.replace(DEFAULT_REGEXP, function() {
                        options.updateOnDefault = !0;
                        return " ";
                    }));
                }
            }, this);
            if (inheritAll) {
                delete options["*"];
                defaults(options, this.$$options);
            }
            defaults(options, defaultModelOptions.$$options);
            return new ModelOptions(options);
        }
    };
    defaultModelOptions = new ModelOptions({
        updateOn: "",
        updateOnDefault: !0,
        debounce: 0,
        getterSetter: !1,
        allowInvalid: !1,
        timezone: null
    });
    var ngModelOptionsDirective = function() {
        NgModelOptionsController.$inject = [ "$attrs", "$scope" ];
        function NgModelOptionsController($attrs, $scope) {
            this.$$attrs = $attrs;
            this.$$scope = $scope;
        }
        NgModelOptionsController.prototype = {
            $onInit: function() {
                var parentOptions = this.parentCtrl ? this.parentCtrl.$options : defaultModelOptions, modelOptionsDefinition = this.$$scope.$eval(this.$$attrs.ngModelOptions);
                this.$options = parentOptions.createChild(modelOptionsDefinition);
            }
        };
        return {
            restrict: "A",
            priority: 10,
            require: {
                parentCtrl: "?^^ngModelOptions"
            },
            bindToController: !0,
            controller: NgModelOptionsController
        };
    };
    function defaults(dst, src) {
        forEach(src, function(value, key) {
            isDefined(dst[key]) || (dst[key] = value);
        });
    }
    var ngNonBindableDirective = ngDirective({
        terminal: !0,
        priority: 1e3
    }), ngOptionsMinErr = minErr("ngOptions"), NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/, ngOptionsDirective = [ "$compile", "$document", "$parse", function($compile, $document, $parse) {
        var optionTemplate = window.document.createElement("option"), optGroupTemplate = window.document.createElement("optgroup");
        return {
            restrict: "A",
            terminal: !0,
            require: [ "select", "ngModel" ],
            link: {
                pre: function(scope, selectElement, attr, ctrls) {
                    ctrls[0].registerOption = noop;
                },
                post: function(scope, selectElement, attr, ctrls) {
                    for (var selectCtrl = ctrls[0], ngModelCtrl = ctrls[1], multiple = attr.multiple, i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) if ("" === children[i].value) {
                        selectCtrl.hasEmptyOption = !0;
                        selectCtrl.emptyOption = children.eq(i);
                        break;
                    }
                    selectElement.empty();
                    var options, providedEmptyOption = !!selectCtrl.emptyOption;
                    jqLite(optionTemplate.cloneNode(!1)).val("?");
                    var ngOptions = function(optionsExp, selectElement, scope) {
                        var match = optionsExp.match(NG_OPTIONS_REGEXP);
                        if (!match) throw ngOptionsMinErr("iexp", "Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}", optionsExp, startingTag(selectElement));
                        var valueName = match[5] || match[7], keyName = match[6], selectAs = / as /.test(match[0]) && match[1], trackBy = match[9], valueFn = $parse(match[2] ? match[1] : valueName), viewValueFn = selectAs && $parse(selectAs) || valueFn, trackByFn = trackBy && $parse(trackBy), getTrackByValueFn = trackBy ? function(value, locals) {
                            return trackByFn(scope, locals);
                        } : function(value) {
                            return hashKey(value);
                        }, getTrackByValue = function(value, key) {
                            return getTrackByValueFn(value, getLocals(value, key));
                        }, displayFn = $parse(match[2] || match[1]), groupByFn = $parse(match[3] || ""), disableWhenFn = $parse(match[4] || ""), valuesFn = $parse(match[8]), locals = {}, getLocals = keyName ? function(value, key) {
                            locals[keyName] = key;
                            locals[valueName] = value;
                            return locals;
                        } : function(value) {
                            locals[valueName] = value;
                            return locals;
                        };
                        function Option(selectValue, viewValue, label, group, disabled) {
                            this.selectValue = selectValue;
                            this.viewValue = viewValue;
                            this.label = label;
                            this.group = group;
                            this.disabled = disabled;
                        }
                        function getOptionValuesKeys(optionValues) {
                            var optionValuesKeys;
                            if (!keyName && isArrayLike(optionValues)) optionValuesKeys = optionValues; else {
                                optionValuesKeys = [];
                                for (var itemKey in optionValues) optionValues.hasOwnProperty(itemKey) && "$" !== itemKey.charAt(0) && optionValuesKeys.push(itemKey);
                            }
                            return optionValuesKeys;
                        }
                        return {
                            trackBy: trackBy,
                            getTrackByValue: getTrackByValue,
                            getWatchables: $parse(valuesFn, function(optionValues) {
                                for (var watchedArray = [], optionValuesKeys = getOptionValuesKeys(optionValues = optionValues || []), optionValuesLength = optionValuesKeys.length, index = 0; index < optionValuesLength; index++) {
                                    var key = optionValues === optionValuesKeys ? index : optionValuesKeys[index], value = optionValues[key], locals = getLocals(value, key), selectValue = getTrackByValueFn(value, locals);
                                    watchedArray.push(selectValue);
                                    if (match[2] || match[1]) {
                                        var label = displayFn(scope, locals);
                                        watchedArray.push(label);
                                    }
                                    if (match[4]) {
                                        var disableWhen = disableWhenFn(scope, locals);
                                        watchedArray.push(disableWhen);
                                    }
                                }
                                return watchedArray;
                            }),
                            getOptions: function() {
                                for (var optionItems = [], selectValueMap = {}, optionValues = valuesFn(scope) || [], optionValuesKeys = getOptionValuesKeys(optionValues), optionValuesLength = optionValuesKeys.length, index = 0; index < optionValuesLength; index++) {
                                    var key = optionValues === optionValuesKeys ? index : optionValuesKeys[index], value = optionValues[key], locals = getLocals(value, key), viewValue = viewValueFn(scope, locals), selectValue = getTrackByValueFn(viewValue, locals), optionItem = new Option(selectValue, viewValue, displayFn(scope, locals), groupByFn(scope, locals), disableWhenFn(scope, locals));
                                    optionItems.push(optionItem);
                                    selectValueMap[selectValue] = optionItem;
                                }
                                return {
                                    items: optionItems,
                                    selectValueMap: selectValueMap,
                                    getOptionFromViewValue: function(value) {
                                        return selectValueMap[getTrackByValue(value)];
                                    },
                                    getViewValueFromOption: function(option) {
                                        return trackBy ? copy(option.viewValue) : option.viewValue;
                                    }
                                };
                            }
                        };
                    }(attr.ngOptions, selectElement, scope), listFragment = $document[0].createDocumentFragment();
                    selectCtrl.generateUnknownOptionValue = function(val) {
                        return "?";
                    };
                    if (multiple) {
                        selectCtrl.writeValue = function(values) {
                            if (options) {
                                var selectedOptions = values && values.map(getAndUpdateSelectedOption) || [];
                                options.items.forEach(function(option) {
                                    option.element.selected && !includes(selectedOptions, option) && (option.element.selected = !1);
                                });
                            }
                        };
                        selectCtrl.readValue = function() {
                            var selectedValues = selectElement.val() || [], selections = [];
                            forEach(selectedValues, function(value) {
                                var option = options.selectValueMap[value];
                                option && !option.disabled && selections.push(options.getViewValueFromOption(option));
                            });
                            return selections;
                        };
                        ngOptions.trackBy && scope.$watchCollection(function() {
                            if (isArray(ngModelCtrl.$viewValue)) return ngModelCtrl.$viewValue.map(function(value) {
                                return ngOptions.getTrackByValue(value);
                            });
                        }, function() {
                            ngModelCtrl.$render();
                        });
                    } else {
                        selectCtrl.writeValue = function(value) {
                            if (options) {
                                var selectedOption = selectElement[0].options[selectElement[0].selectedIndex], option = options.getOptionFromViewValue(value);
                                selectedOption && selectedOption.removeAttribute("selected");
                                if (option) {
                                    if (selectElement[0].value !== option.selectValue) {
                                        selectCtrl.removeUnknownOption();
                                        selectElement[0].value = option.selectValue;
                                        option.element.selected = !0;
                                    }
                                    option.element.setAttribute("selected", "selected");
                                } else selectCtrl.selectUnknownOrEmptyOption(value);
                            }
                        };
                        selectCtrl.readValue = function() {
                            var selectedOption = options.selectValueMap[selectElement.val()];
                            if (!selectedOption || selectedOption.disabled) return null;
                            selectCtrl.unselectEmptyOption();
                            selectCtrl.removeUnknownOption();
                            return options.getViewValueFromOption(selectedOption);
                        };
                        ngOptions.trackBy && scope.$watch(function() {
                            return ngOptions.getTrackByValue(ngModelCtrl.$viewValue);
                        }, function() {
                            ngModelCtrl.$render();
                        });
                    }
                    if (providedEmptyOption) {
                        $compile(selectCtrl.emptyOption)(scope);
                        selectElement.prepend(selectCtrl.emptyOption);
                        if (selectCtrl.emptyOption[0].nodeType === NODE_TYPE_COMMENT) {
                            selectCtrl.hasEmptyOption = !1;
                            selectCtrl.registerOption = function(optionScope, optionEl) {
                                if ("" === optionEl.val()) {
                                    selectCtrl.hasEmptyOption = !0;
                                    selectCtrl.emptyOption = optionEl;
                                    selectCtrl.emptyOption.removeClass("ng-scope");
                                    ngModelCtrl.$render();
                                    optionEl.on("$destroy", function() {
                                        var needsRerender = selectCtrl.$isEmptyOptionSelected();
                                        selectCtrl.hasEmptyOption = !1;
                                        selectCtrl.emptyOption = void 0;
                                        needsRerender && ngModelCtrl.$render();
                                    });
                                }
                            };
                        } else selectCtrl.emptyOption.removeClass("ng-scope");
                    }
                    scope.$watchCollection(ngOptions.getWatchables, function() {
                        var previousValue = options && selectCtrl.readValue();
                        if (options) for (var i = options.items.length - 1; 0 <= i; i--) {
                            var option = options.items[i];
                            isDefined(option.group) ? jqLiteRemove(option.element.parentNode) : jqLiteRemove(option.element);
                        }
                        options = ngOptions.getOptions();
                        var groupElementMap = {};
                        options.items.forEach(function(option) {
                            var groupElement;
                            if (isDefined(option.group)) {
                                if (!(groupElement = groupElementMap[option.group])) {
                                    groupElement = optGroupTemplate.cloneNode(!1);
                                    listFragment.appendChild(groupElement);
                                    groupElement.label = null === option.group ? "null" : option.group;
                                    groupElementMap[option.group] = groupElement;
                                }
                                addOptionElement(option, groupElement);
                            } else addOptionElement(option, listFragment);
                        });
                        selectElement[0].appendChild(listFragment);
                        ngModelCtrl.$render();
                        if (!ngModelCtrl.$isEmpty(previousValue)) {
                            var nextValue = selectCtrl.readValue(), isNotPrimitive = ngOptions.trackBy || multiple;
                            if (isNotPrimitive ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
                                ngModelCtrl.$setViewValue(nextValue);
                                ngModelCtrl.$render();
                            }
                        }
                    });
                    function addOptionElement(option, parent) {
                        var optionElement = optionTemplate.cloneNode(!1);
                        parent.appendChild(optionElement);
                        !function(option, element) {
                            (option.element = element).disabled = option.disabled;
                            if (option.label !== element.label) {
                                element.label = option.label;
                                element.textContent = option.label;
                            }
                            element.value = option.selectValue;
                        }(option, optionElement);
                    }
                    function getAndUpdateSelectedOption(viewValue) {
                        var option = options.getOptionFromViewValue(viewValue), element = option && option.element;
                        element && !element.selected && (element.selected = !0);
                        return option;
                    }
                }
            }
        };
    } ], ngPluralizeDirective = [ "$locale", "$interpolate", "$log", function($locale, $interpolate, $log) {
        var BRACE = /{}/g, IS_WHEN = /^when(Minus)?(.+)$/;
        return {
            link: function(scope, element, attr) {
                var lastCount, numberExp = attr.count, whenExp = attr.$attr.when && element.attr(attr.$attr.when), offset = attr.offset || 0, whens = scope.$eval(whenExp) || {}, whensExpFns = {}, startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), braceReplacement = startSymbol + numberExp + "-" + offset + endSymbol, watchRemover = angular.noop;
                forEach(attr, function(expression, attributeName) {
                    var tmpMatch = IS_WHEN.exec(attributeName);
                    if (tmpMatch) {
                        var whenKey = (tmpMatch[1] ? "-" : "") + lowercase(tmpMatch[2]);
                        whens[whenKey] = element.attr(attr.$attr[attributeName]);
                    }
                });
                forEach(whens, function(expression, key) {
                    whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));
                });
                scope.$watch(numberExp, function(newVal) {
                    var count = parseFloat(newVal), countIsNaN = isNumberNaN(count);
                    countIsNaN || count in whens || (count = $locale.pluralCat(count - offset));
                    if (!(count === lastCount || countIsNaN && isNumberNaN(lastCount))) {
                        watchRemover();
                        var whenExpFn = whensExpFns[count];
                        if (isUndefined(whenExpFn)) {
                            null != newVal && $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);
                            watchRemover = noop;
                            updateElementText();
                        } else watchRemover = scope.$watch(whenExpFn, updateElementText);
                        lastCount = count;
                    }
                });
                function updateElementText(newText) {
                    element.text(newText || "");
                }
            }
        };
    } ], ngRepeatDirective = [ "$parse", "$animate", "$compile", function($parse, $animate, $compile) {
        var ngRepeatMinErr = minErr("ngRepeat"), updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
            scope[valueIdentifier] = value;
            keyIdentifier && (scope[keyIdentifier] = key);
            scope.$index = index;
            scope.$first = 0 === index;
            scope.$last = index === arrayLength - 1;
            scope.$middle = !(scope.$first || scope.$last);
            scope.$odd = !(scope.$even = 0 == (1 & index));
        }, getBlockStart = function(block) {
            return block.clone[0];
        }, getBlockEnd = function(block) {
            return block.clone[block.clone.length - 1];
        };
        return {
            restrict: "A",
            multiElement: !0,
            transclude: "element",
            priority: 1e3,
            terminal: !0,
            $$tlb: !0,
            compile: function($element, $attr) {
                var expression = $attr.ngRepeat, ngRepeatEndComment = $compile.$$createComment("end ngRepeat", expression), match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
                if (!match) throw ngRepeatMinErr("iexp", "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.", expression);
                var lhs = match[1], rhs = match[2], aliasAs = match[3], trackByExp = match[4];
                if (!(match = lhs.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/))) throw ngRepeatMinErr("iidexp", "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.", lhs);
                var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn, valueIdentifier = match[3] || match[1], keyIdentifier = match[2];
                if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) || /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) throw ngRepeatMinErr("badident", "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.", aliasAs);
                var hashFnLocals = {
                    $id: hashKey
                };
                if (trackByExp) trackByExpGetter = $parse(trackByExp); else {
                    trackByIdArrayFn = function(key, value) {
                        return hashKey(value);
                    };
                    trackByIdObjFn = function(key) {
                        return key;
                    };
                }
                return function($scope, $element, $attr, ctrl, $transclude) {
                    trackByExpGetter && (trackByIdExpFn = function(key, value, index) {
                        keyIdentifier && (hashFnLocals[keyIdentifier] = key);
                        hashFnLocals[valueIdentifier] = value;
                        hashFnLocals.$index = index;
                        return trackByExpGetter($scope, hashFnLocals);
                    });
                    var lastBlockMap = createMap();
                    $scope.$watchCollection(rhs, function(collection) {
                        var index, length, nextNode, collectionLength, key, value, trackById, trackByIdFn, collectionKeys, block, nextBlockOrder, elementsToRemove, previousNode = $element[0], nextBlockMap = createMap();
                        aliasAs && ($scope[aliasAs] = collection);
                        if (isArrayLike(collection)) {
                            collectionKeys = collection;
                            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
                        } else {
                            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
                            collectionKeys = [];
                            for (var itemKey in collection) hasOwnProperty.call(collection, itemKey) && "$" !== itemKey.charAt(0) && collectionKeys.push(itemKey);
                        }
                        collectionLength = collectionKeys.length;
                        nextBlockOrder = new Array(collectionLength);
                        for (index = 0; index < collectionLength; index++) {
                            key = collection === collectionKeys ? index : collectionKeys[index];
                            value = collection[key];
                            trackById = trackByIdFn(key, value, index);
                            if (lastBlockMap[trackById]) {
                                block = lastBlockMap[trackById];
                                delete lastBlockMap[trackById];
                                nextBlockMap[trackById] = block;
                                nextBlockOrder[index] = block;
                            } else {
                                if (nextBlockMap[trackById]) {
                                    forEach(nextBlockOrder, function(block) {
                                        block && block.scope && (lastBlockMap[block.id] = block);
                                    });
                                    throw ngRepeatMinErr("dupes", "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}", expression, trackById, value);
                                }
                                nextBlockOrder[index] = {
                                    id: trackById,
                                    scope: void 0,
                                    clone: void 0
                                };
                                nextBlockMap[trackById] = !0;
                            }
                        }
                        for (var blockKey in lastBlockMap) {
                            elementsToRemove = getBlockNodes((block = lastBlockMap[blockKey]).clone);
                            $animate.leave(elementsToRemove);
                            if (elementsToRemove[0].parentNode) for (index = 0, length = elementsToRemove.length; index < length; index++) elementsToRemove[index].$$NG_REMOVED = !0;
                            block.scope.$destroy();
                        }
                        for (index = 0; index < collectionLength; index++) {
                            key = collection === collectionKeys ? index : collectionKeys[index];
                            value = collection[key];
                            if ((block = nextBlockOrder[index]).scope) {
                                nextNode = previousNode;
                                for (;(nextNode = nextNode.nextSibling) && nextNode.$$NG_REMOVED; ) ;
                                getBlockStart(block) !== nextNode && $animate.move(getBlockNodes(block.clone), null, previousNode);
                                previousNode = getBlockEnd(block);
                                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
                            } else $transclude(function(clone, scope) {
                                block.scope = scope;
                                var endNode = ngRepeatEndComment.cloneNode(!1);
                                clone[clone.length++] = endNode;
                                $animate.enter(clone, null, previousNode);
                                previousNode = endNode;
                                block.clone = clone;
                                nextBlockMap[block.id] = block;
                                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
                            });
                        }
                        lastBlockMap = nextBlockMap;
                    });
                };
            }
        };
    } ], ngShowDirective = [ "$animate", function($animate) {
        return {
            restrict: "A",
            multiElement: !0,
            link: function(scope, element, attr) {
                scope.$watch(attr.ngShow, function(value) {
                    $animate[value ? "removeClass" : "addClass"](element, "ng-hide", {
                        tempClasses: "ng-hide-animate"
                    });
                });
            }
        };
    } ], ngHideDirective = [ "$animate", function($animate) {
        return {
            restrict: "A",
            multiElement: !0,
            link: function(scope, element, attr) {
                scope.$watch(attr.ngHide, function(value) {
                    $animate[value ? "addClass" : "removeClass"](element, "ng-hide", {
                        tempClasses: "ng-hide-animate"
                    });
                });
            }
        };
    } ], ngStyleDirective = ngDirective(function(scope, element, attr) {
        scope.$watch(attr.ngStyle, function(newStyles, oldStyles) {
            oldStyles && newStyles !== oldStyles && forEach(oldStyles, function(val, style) {
                element.css(style, "");
            });
            newStyles && element.css(newStyles);
        }, !0);
    }), ngSwitchDirective = [ "$animate", "$compile", function($animate, $compile) {
        return {
            require: "ngSwitch",
            controller: [ "$scope", function() {
                this.cases = {};
            } ],
            link: function(scope, element, attr, ngSwitchController) {
                var watchExpr = attr.ngSwitch || attr.on, selectedTranscludes = [], selectedElements = [], previousLeaveAnimations = [], selectedScopes = [], spliceFactory = function(array, index) {
                    return function(response) {
                        !1 !== response && array.splice(index, 1);
                    };
                };
                scope.$watch(watchExpr, function(value) {
                    for (var i, ii; previousLeaveAnimations.length; ) $animate.cancel(previousLeaveAnimations.pop());
                    for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
                        var selected = getBlockNodes(selectedElements[i].clone);
                        selectedScopes[i].$destroy();
                        (previousLeaveAnimations[i] = $animate.leave(selected)).done(spliceFactory(previousLeaveAnimations, i));
                    }
                    selectedElements.length = 0;
                    selectedScopes.length = 0;
                    (selectedTranscludes = ngSwitchController.cases["!" + value] || ngSwitchController.cases["?"]) && forEach(selectedTranscludes, function(selectedTransclude) {
                        selectedTransclude.transclude(function(caseElement, selectedScope) {
                            selectedScopes.push(selectedScope);
                            var anchor = selectedTransclude.element;
                            caseElement[caseElement.length++] = $compile.$$createComment("end ngSwitchWhen");
                            var block = {
                                clone: caseElement
                            };
                            selectedElements.push(block);
                            $animate.enter(caseElement, anchor.parent(), anchor);
                        });
                    });
                });
            }
        };
    } ], ngSwitchWhenDirective = ngDirective({
        transclude: "element",
        priority: 1200,
        require: "^ngSwitch",
        multiElement: !0,
        link: function(scope, element, attrs, ctrl, $transclude) {
            forEach(attrs.ngSwitchWhen.split(attrs.ngSwitchWhenSeparator).sort().filter(function(element, index, array) {
                return array[index - 1] !== element;
            }), function(whenCase) {
                ctrl.cases["!" + whenCase] = ctrl.cases["!" + whenCase] || [];
                ctrl.cases["!" + whenCase].push({
                    transclude: $transclude,
                    element: element
                });
            });
        }
    }), ngSwitchDefaultDirective = ngDirective({
        transclude: "element",
        priority: 1200,
        require: "^ngSwitch",
        multiElement: !0,
        link: function(scope, element, attr, ctrl, $transclude) {
            ctrl.cases["?"] = ctrl.cases["?"] || [];
            ctrl.cases["?"].push({
                transclude: $transclude,
                element: element
            });
        }
    }), ngTranscludeMinErr = minErr("ngTransclude"), ngTranscludeDirective = [ "$compile", function($compile) {
        return {
            restrict: "EAC",
            compile: function(tElement) {
                var fallbackLinkFn = $compile(tElement.contents());
                tElement.empty();
                return function($scope, $element, $attrs, controller, $transclude) {
                    if (!$transclude) throw ngTranscludeMinErr("orphan", "Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}", startingTag($element));
                    $attrs.ngTransclude === $attrs.$attr.ngTransclude && ($attrs.ngTransclude = "");
                    var slotName = $attrs.ngTransclude || $attrs.ngTranscludeSlot;
                    $transclude(function(clone, transcludedScope) {
                        if (clone.length && function(nodes) {
                            for (var i = 0, ii = nodes.length; i < ii; i++) {
                                var node = nodes[i];
                                if (node.nodeType !== NODE_TYPE_TEXT || node.nodeValue.trim()) return !0;
                            }
                        }(clone)) $element.append(clone); else {
                            useFallbackContent();
                            transcludedScope.$destroy();
                        }
                    }, null, slotName);
                    slotName && !$transclude.isSlotFilled(slotName) && useFallbackContent();
                    function useFallbackContent() {
                        fallbackLinkFn($scope, function(clone) {
                            $element.append(clone);
                        });
                    }
                };
            }
        };
    } ], scriptDirective = [ "$templateCache", function($templateCache) {
        return {
            restrict: "E",
            terminal: !0,
            compile: function(element, attr) {
                if ("text/ng-template" === attr.type) {
                    var templateUrl = attr.id, text = element[0].text;
                    $templateCache.put(templateUrl, text);
                }
            }
        };
    } ], noopNgModelController = {
        $setViewValue: noop,
        $render: noop
    };
    function setOptionSelectedStatus(optionEl, value) {
        optionEl.prop("selected", value);
        optionEl.attr("selected", value);
    }
    var SelectController = [ "$element", "$scope", function($element, $scope) {
        var self = this, optionsMap = new NgMap();
        self.selectValueMap = {};
        self.ngModelCtrl = noopNgModelController;
        self.multiple = !1;
        self.unknownOption = jqLite(window.document.createElement("option"));
        self.hasEmptyOption = !1;
        self.emptyOption = void 0;
        self.renderUnknownOption = function(val) {
            var unknownVal = self.generateUnknownOptionValue(val);
            self.unknownOption.val(unknownVal);
            $element.prepend(self.unknownOption);
            setOptionSelectedStatus(self.unknownOption, !0);
            $element.val(unknownVal);
        };
        self.updateUnknownOption = function(val) {
            var unknownVal = self.generateUnknownOptionValue(val);
            self.unknownOption.val(unknownVal);
            setOptionSelectedStatus(self.unknownOption, !0);
            $element.val(unknownVal);
        };
        self.generateUnknownOptionValue = function(val) {
            return "? " + hashKey(val) + " ?";
        };
        self.removeUnknownOption = function() {
            self.unknownOption.parent() && self.unknownOption.remove();
        };
        self.selectEmptyOption = function() {
            if (self.emptyOption) {
                $element.val("");
                setOptionSelectedStatus(self.emptyOption, !0);
            }
        };
        self.unselectEmptyOption = function() {
            self.hasEmptyOption && setOptionSelectedStatus(self.emptyOption, !1);
        };
        $scope.$on("$destroy", function() {
            self.renderUnknownOption = noop;
        });
        self.readValue = function() {
            var val = $element.val(), realVal = val in self.selectValueMap ? self.selectValueMap[val] : val;
            return self.hasOption(realVal) ? realVal : null;
        };
        self.writeValue = function(value) {
            var currentlySelectedOption = $element[0].options[$element[0].selectedIndex];
            currentlySelectedOption && setOptionSelectedStatus(jqLite(currentlySelectedOption), !1);
            if (self.hasOption(value)) {
                self.removeUnknownOption();
                var hashedVal = hashKey(value);
                $element.val(hashedVal in self.selectValueMap ? hashedVal : value);
                var selectedOption = $element[0].options[$element[0].selectedIndex];
                setOptionSelectedStatus(jqLite(selectedOption), !0);
            } else self.selectUnknownOrEmptyOption(value);
        };
        self.addOption = function(value, element) {
            if (element[0].nodeType !== NODE_TYPE_COMMENT) {
                assertNotHasOwnProperty(value, '"option value"');
                if ("" === value) {
                    self.hasEmptyOption = !0;
                    self.emptyOption = element;
                }
                var count = optionsMap.get(value) || 0;
                optionsMap.set(value, count + 1);
                scheduleRender();
            }
        };
        self.removeOption = function(value) {
            var count = optionsMap.get(value);
            if (count) if (1 === count) {
                optionsMap.delete(value);
                if ("" === value) {
                    self.hasEmptyOption = !1;
                    self.emptyOption = void 0;
                }
            } else optionsMap.set(value, count - 1);
        };
        self.hasOption = function(value) {
            return !!optionsMap.get(value);
        };
        self.$hasEmptyOption = function() {
            return self.hasEmptyOption;
        };
        self.$isUnknownOptionSelected = function() {
            return $element[0].options[0] === self.unknownOption[0];
        };
        self.$isEmptyOptionSelected = function() {
            return self.hasEmptyOption && $element[0].options[$element[0].selectedIndex] === self.emptyOption[0];
        };
        var renderScheduled = !(self.selectUnknownOrEmptyOption = function(value) {
            if (null == value && self.emptyOption) {
                self.removeUnknownOption();
                self.selectEmptyOption();
            } else self.unknownOption.parent().length ? self.updateUnknownOption(value) : self.renderUnknownOption(value);
        });
        function scheduleRender() {
            if (!renderScheduled) {
                renderScheduled = !0;
                $scope.$$postDigest(function() {
                    renderScheduled = !1;
                    self.ngModelCtrl.$render();
                });
            }
        }
        var updateScheduled = !1;
        function scheduleViewValueUpdate(renderAfter) {
            if (!updateScheduled) {
                updateScheduled = !0;
                $scope.$$postDigest(function() {
                    if (!$scope.$$destroyed) {
                        updateScheduled = !1;
                        self.ngModelCtrl.$setViewValue(self.readValue());
                        renderAfter && self.ngModelCtrl.$render();
                    }
                });
            }
        }
        self.registerOption = function(optionScope, optionElement, optionAttrs, interpolateValueFn, interpolateTextFn) {
            if (optionAttrs.$attr.ngValue) {
                var oldVal, hashedVal = NaN;
                optionAttrs.$observe("value", function(newVal) {
                    var removal, previouslySelected = optionElement.prop("selected");
                    if (isDefined(hashedVal)) {
                        self.removeOption(oldVal);
                        delete self.selectValueMap[hashedVal];
                        removal = !0;
                    }
                    hashedVal = hashKey(newVal);
                    oldVal = newVal;
                    self.selectValueMap[hashedVal] = newVal;
                    self.addOption(newVal, optionElement);
                    optionElement.attr("value", hashedVal);
                    removal && previouslySelected && scheduleViewValueUpdate();
                });
            } else interpolateValueFn ? optionAttrs.$observe("value", function(newVal) {
                self.readValue();
                var removal, previouslySelected = optionElement.prop("selected");
                if (isDefined(oldVal)) {
                    self.removeOption(oldVal);
                    removal = !0;
                }
                oldVal = newVal;
                self.addOption(newVal, optionElement);
                removal && previouslySelected && scheduleViewValueUpdate();
            }) : interpolateTextFn ? optionScope.$watch(interpolateTextFn, function(newVal, oldVal) {
                optionAttrs.$set("value", newVal);
                var previouslySelected = optionElement.prop("selected");
                oldVal !== newVal && self.removeOption(oldVal);
                self.addOption(newVal, optionElement);
                oldVal && previouslySelected && scheduleViewValueUpdate();
            }) : self.addOption(optionAttrs.value, optionElement);
            optionAttrs.$observe("disabled", function(newVal) {
                if ("true" === newVal || newVal && optionElement.prop("selected")) if (self.multiple) scheduleViewValueUpdate(!0); else {
                    self.ngModelCtrl.$setViewValue(null);
                    self.ngModelCtrl.$render();
                }
            });
            optionElement.on("$destroy", function() {
                var currentValue = self.readValue(), removeValue = optionAttrs.value;
                self.removeOption(removeValue);
                scheduleRender();
                (self.multiple && currentValue && -1 !== currentValue.indexOf(removeValue) || currentValue === removeValue) && scheduleViewValueUpdate(!0);
            });
        };
    } ], selectDirective = function() {
        return {
            restrict: "E",
            require: [ "select", "?ngModel" ],
            controller: SelectController,
            priority: 1,
            link: {
                pre: function(scope, element, attr, ctrls) {
                    var selectCtrl = ctrls[0], ngModelCtrl = ctrls[1];
                    if (!ngModelCtrl) {
                        selectCtrl.registerOption = noop;
                        return;
                    }
                    selectCtrl.ngModelCtrl = ngModelCtrl;
                    element.on("change", function() {
                        selectCtrl.removeUnknownOption();
                        scope.$apply(function() {
                            ngModelCtrl.$setViewValue(selectCtrl.readValue());
                        });
                    });
                    if (attr.multiple) {
                        selectCtrl.multiple = !0;
                        selectCtrl.readValue = function() {
                            var array = [];
                            forEach(element.find("option"), function(option) {
                                if (option.selected && !option.disabled) {
                                    var val = option.value;
                                    array.push(val in selectCtrl.selectValueMap ? selectCtrl.selectValueMap[val] : val);
                                }
                            });
                            return array;
                        };
                        selectCtrl.writeValue = function(value) {
                            forEach(element.find("option"), function(option) {
                                var shouldBeSelected = !!value && (includes(value, option.value) || includes(value, selectCtrl.selectValueMap[option.value])), currentlySelected = option.selected;
                                shouldBeSelected !== currentlySelected && setOptionSelectedStatus(jqLite(option), shouldBeSelected);
                            });
                        };
                        var lastView, lastViewRef = NaN;
                        scope.$watch(function() {
                            if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
                                lastView = shallowCopy(ngModelCtrl.$viewValue);
                                ngModelCtrl.$render();
                            }
                            lastViewRef = ngModelCtrl.$viewValue;
                        });
                        ngModelCtrl.$isEmpty = function(value) {
                            return !value || 0 === value.length;
                        };
                    }
                },
                post: function(scope, element, attrs, ctrls) {
                    var ngModelCtrl = ctrls[1];
                    if (!ngModelCtrl) return;
                    var selectCtrl = ctrls[0];
                    ngModelCtrl.$render = function() {
                        selectCtrl.writeValue(ngModelCtrl.$viewValue);
                    };
                }
            }
        };
    }, optionDirective = [ "$interpolate", function($interpolate) {
        return {
            restrict: "E",
            priority: 100,
            compile: function(element, attr) {
                var interpolateValueFn, interpolateTextFn;
                isDefined(attr.ngValue) || (isDefined(attr.value) ? interpolateValueFn = $interpolate(attr.value, !0) : (interpolateTextFn = $interpolate(element.text(), !0)) || attr.$set("value", element.text()));
                return function(scope, element, attr) {
                    var parent = element.parent(), selectCtrl = parent.data("$selectController") || parent.parent().data("$selectController");
                    selectCtrl && selectCtrl.registerOption(scope, element, attr, interpolateValueFn, interpolateTextFn);
                };
            }
        };
    } ], requiredDirective = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(scope, elm, attr, ctrl) {
                if (ctrl) {
                    attr.required = !0;
                    ctrl.$validators.required = function(modelValue, viewValue) {
                        return !attr.required || !ctrl.$isEmpty(viewValue);
                    };
                    attr.$observe("required", function() {
                        ctrl.$validate();
                    });
                }
            }
        };
    }, patternDirective = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(scope, elm, attr, ctrl) {
                if (ctrl) {
                    var regexp, patternExp = attr.ngPattern || attr.pattern;
                    attr.$observe("pattern", function(regex) {
                        isString(regex) && 0 < regex.length && (regex = new RegExp("^" + regex + "$"));
                        if (regex && !regex.test) throw minErr("ngPattern")("noregexp", "Expected {0} to be a RegExp but was {1}. Element: {2}", patternExp, regex, startingTag(elm));
                        regexp = regex || void 0;
                        ctrl.$validate();
                    });
                    ctrl.$validators.pattern = function(modelValue, viewValue) {
                        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);
                    };
                }
            }
        };
    }, maxlengthDirective = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(scope, elm, attr, ctrl) {
                if (ctrl) {
                    var maxlength = -1;
                    attr.$observe("maxlength", function(value) {
                        var intVal = toInt(value);
                        maxlength = isNumberNaN(intVal) ? -1 : intVal;
                        ctrl.$validate();
                    });
                    ctrl.$validators.maxlength = function(modelValue, viewValue) {
                        return maxlength < 0 || ctrl.$isEmpty(viewValue) || viewValue.length <= maxlength;
                    };
                }
            }
        };
    }, minlengthDirective = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(scope, elm, attr, ctrl) {
                if (ctrl) {
                    var minlength = 0;
                    attr.$observe("minlength", function(value) {
                        minlength = toInt(value) || 0;
                        ctrl.$validate();
                    });
                    ctrl.$validators.minlength = function(modelValue, viewValue) {
                        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
                    };
                }
            }
        };
    };
    if (window.angular.bootstrap) window.console && console.log("WARNING: Tried to load AngularJS more than once."); else {
        !function() {
            var originalCleanData;
            if (!bindJQueryFired) {
                var jqName = jq();
                if ((jQuery = isUndefined(jqName) ? window.jQuery : jqName ? window[jqName] : void 0) && jQuery.fn.on) {
                    extend((jqLite = jQuery).fn, {
                        scope: JQLitePrototype.scope,
                        isolateScope: JQLitePrototype.isolateScope,
                        controller: JQLitePrototype.controller,
                        injector: JQLitePrototype.injector,
                        inheritedData: JQLitePrototype.inheritedData
                    });
                    originalCleanData = jQuery.cleanData;
                    jQuery.cleanData = function(elems) {
                        for (var events, elem, i = 0; null != (elem = elems[i]); i++) (events = jQuery._data(elem, "events")) && events.$destroy && jQuery(elem).triggerHandler("$destroy");
                        originalCleanData(elems);
                    };
                } else jqLite = JQLite;
                angular.element = jqLite;
                bindJQueryFired = !0;
            }
        }();
        !function(angular) {
            extend(angular, {
                errorHandlingConfig: errorHandlingConfig,
                bootstrap: bootstrap,
                copy: copy,
                extend: extend,
                merge: merge,
                equals: equals,
                element: jqLite,
                forEach: forEach,
                injector: createInjector,
                noop: noop,
                bind: bind,
                toJson: toJson,
                fromJson: fromJson,
                identity: identity,
                isUndefined: isUndefined,
                isDefined: isDefined,
                isString: isString,
                isFunction: isFunction,
                isObject: isObject,
                isNumber: isNumber,
                isElement: isElement,
                isArray: isArray,
                version: version,
                isDate: isDate,
                lowercase: lowercase,
                uppercase: uppercase,
                callbacks: {
                    $$counter: 0
                },
                getTestability: getTestability,
                reloadWithDebugInfo: reloadWithDebugInfo,
                $$minErr: minErr,
                $$csp: csp,
                $$encodeUriSegment: encodeUriSegment,
                $$encodeUriQuery: encodeUriQuery,
                $$stringify: stringify
            });
            (angularModule = function(window) {
                var $injectorMinErr = minErr("$injector"), ngMinErr = minErr("ng");
                function ensure(obj, name, factory) {
                    return obj[name] || (obj[name] = factory());
                }
                var angular = ensure(window, "angular", Object);
                angular.$$minErr = angular.$$minErr || minErr;
                return ensure(angular, "module", function() {
                    var modules = {};
                    return function(name, requires, configFn) {
                        var info = {};
                        !function(name, context) {
                            if ("hasOwnProperty" === name) throw ngMinErr("badname", "hasOwnProperty is not a valid {0} name", context);
                        }(name, "module");
                        requires && modules.hasOwnProperty(name) && (modules[name] = null);
                        return ensure(modules, name, function() {
                            if (!requires) throw $injectorMinErr("nomod", "Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.", name);
                            var invokeQueue = [], configBlocks = [], runBlocks = [], config = invokeLater("$injector", "invoke", "push", configBlocks), moduleInstance = {
                                _invokeQueue: invokeQueue,
                                _configBlocks: configBlocks,
                                _runBlocks: runBlocks,
                                info: function(value) {
                                    if (isDefined(value)) {
                                        if (!isObject(value)) throw ngMinErr("aobj", "Argument '{0}' must be an object", "value");
                                        info = value;
                                        return this;
                                    }
                                    return info;
                                },
                                requires: requires,
                                name: name,
                                provider: invokeLaterAndSetModuleName("$provide", "provider"),
                                factory: invokeLaterAndSetModuleName("$provide", "factory"),
                                service: invokeLaterAndSetModuleName("$provide", "service"),
                                value: invokeLater("$provide", "value"),
                                constant: invokeLater("$provide", "constant", "unshift"),
                                decorator: invokeLaterAndSetModuleName("$provide", "decorator", configBlocks),
                                animation: invokeLaterAndSetModuleName("$animateProvider", "register"),
                                filter: invokeLaterAndSetModuleName("$filterProvider", "register"),
                                controller: invokeLaterAndSetModuleName("$controllerProvider", "register"),
                                directive: invokeLaterAndSetModuleName("$compileProvider", "directive"),
                                component: invokeLaterAndSetModuleName("$compileProvider", "component"),
                                config: config,
                                run: function(block) {
                                    runBlocks.push(block);
                                    return this;
                                }
                            };
                            configFn && config(configFn);
                            return moduleInstance;
                            function invokeLater(provider, method, insertMethod, queue) {
                                queue || (queue = invokeQueue);
                                return function() {
                                    queue[insertMethod || "push"]([ provider, method, arguments ]);
                                    return moduleInstance;
                                };
                            }
                            function invokeLaterAndSetModuleName(provider, method, queue) {
                                queue || (queue = invokeQueue);
                                return function(recipeName, factoryFunction) {
                                    factoryFunction && isFunction(factoryFunction) && (factoryFunction.$$moduleName = name);
                                    queue.push([ provider, method, arguments ]);
                                    return moduleInstance;
                                };
                            }
                        });
                    };
                });
            }(window))("ng", [ "ngLocale" ], [ "$provide", function($provide) {
                $provide.provider({
                    $$sanitizeUri: $$SanitizeUriProvider
                });
                $provide.provider("$compile", $CompileProvider).directive({
                    a: htmlAnchorDirective,
                    input: inputDirective,
                    textarea: inputDirective,
                    form: formDirective,
                    script: scriptDirective,
                    select: selectDirective,
                    option: optionDirective,
                    ngBind: ngBindDirective,
                    ngBindHtml: ngBindHtmlDirective,
                    ngBindTemplate: ngBindTemplateDirective,
                    ngClass: ngClassDirective,
                    ngClassEven: ngClassEvenDirective,
                    ngClassOdd: ngClassOddDirective,
                    ngCloak: ngCloakDirective,
                    ngController: ngControllerDirective,
                    ngForm: ngFormDirective,
                    ngHide: ngHideDirective,
                    ngIf: ngIfDirective,
                    ngInclude: ngIncludeDirective,
                    ngInit: ngInitDirective,
                    ngNonBindable: ngNonBindableDirective,
                    ngPluralize: ngPluralizeDirective,
                    ngRepeat: ngRepeatDirective,
                    ngShow: ngShowDirective,
                    ngStyle: ngStyleDirective,
                    ngSwitch: ngSwitchDirective,
                    ngSwitchWhen: ngSwitchWhenDirective,
                    ngSwitchDefault: ngSwitchDefaultDirective,
                    ngOptions: ngOptionsDirective,
                    ngTransclude: ngTranscludeDirective,
                    ngModel: ngModelDirective,
                    ngList: ngListDirective,
                    ngChange: ngChangeDirective,
                    pattern: patternDirective,
                    ngPattern: patternDirective,
                    required: requiredDirective,
                    ngRequired: requiredDirective,
                    minlength: minlengthDirective,
                    ngMinlength: minlengthDirective,
                    maxlength: maxlengthDirective,
                    ngMaxlength: maxlengthDirective,
                    ngValue: ngValueDirective,
                    ngModelOptions: ngModelOptionsDirective
                }).directive({
                    ngInclude: ngIncludeFillContentDirective
                }).directive(ngAttributeAliasDirectives).directive(ngEventDirectives);
                $provide.provider({
                    $anchorScroll: $AnchorScrollProvider,
                    $animate: $AnimateProvider,
                    $animateCss: $CoreAnimateCssProvider,
                    $$animateJs: $$CoreAnimateJsProvider,
                    $$animateQueue: $$CoreAnimateQueueProvider,
                    $$AnimateRunner: $$AnimateRunnerFactoryProvider,
                    $$animateAsyncRun: $$AnimateAsyncRunFactoryProvider,
                    $browser: $BrowserProvider,
                    $cacheFactory: $CacheFactoryProvider,
                    $controller: $ControllerProvider,
                    $document: $DocumentProvider,
                    $$isDocumentHidden: $$IsDocumentHiddenProvider,
                    $exceptionHandler: $ExceptionHandlerProvider,
                    $filter: $FilterProvider,
                    $$forceReflow: $$ForceReflowProvider,
                    $interpolate: $InterpolateProvider,
                    $interval: $IntervalProvider,
                    $http: $HttpProvider,
                    $httpParamSerializer: $HttpParamSerializerProvider,
                    $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
                    $httpBackend: $HttpBackendProvider,
                    $xhrFactory: $xhrFactoryProvider,
                    $jsonpCallbacks: $jsonpCallbacksProvider,
                    $location: $LocationProvider,
                    $log: $LogProvider,
                    $parse: $ParseProvider,
                    $rootScope: $RootScopeProvider,
                    $q: $QProvider,
                    $$q: $$QProvider,
                    $sce: $SceProvider,
                    $sceDelegate: $SceDelegateProvider,
                    $sniffer: $SnifferProvider,
                    $templateCache: $TemplateCacheProvider,
                    $templateRequest: $TemplateRequestProvider,
                    $$testability: $$TestabilityProvider,
                    $timeout: $TimeoutProvider,
                    $window: $WindowProvider,
                    $$rAF: $$RAFProvider,
                    $$jqLite: $$jqLiteProvider,
                    $$Map: $$MapProvider,
                    $$cookieReader: $$CookieReaderProvider
                });
            } ]).info({
                angularVersion: "1.6.10"
            });
        }(angular);
        angular.module("ngLocale", [], [ "$provide", function($provide) {
            var PLURAL_CATEGORY_ONE = "one", PLURAL_CATEGORY_OTHER = "other";
            $provide.value("$locale", {
                DATETIME_FORMATS: {
                    AMPMS: [ "AM", "PM" ],
                    DAY: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
                    ERANAMES: [ "Before Christ", "Anno Domini" ],
                    ERAS: [ "BC", "AD" ],
                    FIRSTDAYOFWEEK: 6,
                    MONTH: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                    SHORTDAY: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
                    SHORTMONTH: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
                    STANDALONEMONTH: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                    WEEKENDRANGE: [ 5, 6 ],
                    fullDate: "EEEE, MMMM d, y",
                    longDate: "MMMM d, y",
                    medium: "MMM d, y h:mm:ss a",
                    mediumDate: "MMM d, y",
                    mediumTime: "h:mm:ss a",
                    short: "M/d/yy h:mm a",
                    shortDate: "M/d/yy",
                    shortTime: "h:mm a"
                },
                NUMBER_FORMATS: {
                    CURRENCY_SYM: "$",
                    DECIMAL_SEP: ".",
                    GROUP_SEP: ",",
                    PATTERNS: [ {
                        gSize: 3,
                        lgSize: 3,
                        maxFrac: 3,
                        minFrac: 0,
                        minInt: 1,
                        negPre: "-",
                        negSuf: "",
                        posPre: "",
                        posSuf: ""
                    }, {
                        gSize: 3,
                        lgSize: 3,
                        maxFrac: 2,
                        minFrac: 2,
                        minInt: 1,
                        negPre: "-¤",
                        negSuf: "",
                        posPre: "¤",
                        posSuf: ""
                    } ]
                },
                id: "en-us",
                localeID: "en_US",
                pluralCat: function(n, opt_precision) {
                    var i = 0 | n, vf = function(n, opt_precision) {
                        var v = opt_precision;
                        void 0 === v && (v = Math.min(function(n) {
                            var i = (n += "").indexOf(".");
                            return -1 == i ? 0 : n.length - i - 1;
                        }(n), 3));
                        var base = Math.pow(10, v);
                        return {
                            v: v,
                            f: (n * base | 0) % base
                        };
                    }(n, opt_precision);
                    return 1 == i && 0 == vf.v ? PLURAL_CATEGORY_ONE : PLURAL_CATEGORY_OTHER;
                }
            });
        } ]);
        jqLite(function() {
            angularInit(window.document, bootstrap);
        });
    }
}(window);

!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');

!function(window, angular) {
    "use strict";
    var TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT, ELEMENT_NODE = 1, ADD_CLASS_SUFFIX = "-add", REMOVE_CLASS_SUFFIX = "-remove", EVENT_CLASS_PREFIX = "ng-";
    if (void 0 === window.ontransitionend && void 0 !== window.onwebkittransitionend) {
        "-webkit-";
        TRANSITION_PROP = "WebkitTransition";
        TRANSITIONEND_EVENT = "webkitTransitionEnd transitionend";
    } else {
        TRANSITION_PROP = "transition";
        TRANSITIONEND_EVENT = "transitionend";
    }
    if (void 0 === window.onanimationend && void 0 !== window.onwebkitanimationend) {
        "-webkit-";
        ANIMATION_PROP = "WebkitAnimation";
        ANIMATIONEND_EVENT = "webkitAnimationEnd animationend";
    } else {
        ANIMATION_PROP = "animation";
        ANIMATIONEND_EVENT = "animationend";
    }
    var ANIMATION_PLAYSTATE_KEY = "PlayState", ANIMATION_DELAY_PROP = ANIMATION_PROP + "Delay", ANIMATION_DURATION_PROP = ANIMATION_PROP + "Duration", TRANSITION_DELAY_PROP = TRANSITION_PROP + "Delay", TRANSITION_DURATION_PROP = TRANSITION_PROP + "Duration", ngMinErr = angular.$$minErr("ng");
    function assertArg(arg, name, reason) {
        if (!arg) throw ngMinErr("areq", "Argument '{0}' is {1}", name || "?", reason || "required");
        return arg;
    }
    function mergeClasses(a, b) {
        if (!a && !b) return "";
        if (!a) return b;
        if (!b) return a;
        isArray(a) && (a = a.join(" "));
        isArray(b) && (b = b.join(" "));
        return a + " " + b;
    }
    function pendClasses(classes, fix, isPrefix) {
        var className = "";
        classes = isArray(classes) ? classes : classes && isString(classes) && classes.length ? classes.split(/\s+/) : [];
        forEach(classes, function(klass, i) {
            if (klass && 0 < klass.length) {
                className += 0 < i ? " " : "";
                className += isPrefix ? fix + klass : klass + fix;
            }
        });
        return className;
    }
    function stripCommentsFromElement(element) {
        if (element instanceof jqLite) switch (element.length) {
          case 0:
            return element;

          case 1:
            if (element[0].nodeType === ELEMENT_NODE) return element;
            break;

          default:
            return jqLite(extractElementNode(element));
        }
        if (element.nodeType === ELEMENT_NODE) return jqLite(element);
    }
    function extractElementNode(element) {
        if (!element[0]) return element;
        for (var i = 0; i < element.length; i++) {
            var elm = element[i];
            if (elm.nodeType === ELEMENT_NODE) return elm;
        }
    }
    function applyAnimationClassesFactory($$jqLite) {
        return function(element, options) {
            if (options.addClass) {
                !function($$jqLite, element, className) {
                    forEach(element, function(elm) {
                        $$jqLite.addClass(elm, className);
                    });
                }($$jqLite, element, options.addClass);
                options.addClass = null;
            }
            if (options.removeClass) {
                !function($$jqLite, element, className) {
                    forEach(element, function(elm) {
                        $$jqLite.removeClass(elm, className);
                    });
                }($$jqLite, element, options.removeClass);
                options.removeClass = null;
            }
        };
    }
    function prepareAnimationOptions(options) {
        if (!(options = options || {}).$$prepared) {
            var domOperation = options.domOperation || noop;
            options.domOperation = function() {
                options.$$domOperationFired = !0;
                domOperation();
                domOperation = noop;
            };
            options.$$prepared = !0;
        }
        return options;
    }
    function applyAnimationStyles(element, options) {
        applyAnimationFromStyles(element, options);
        applyAnimationToStyles(element, options);
    }
    function applyAnimationFromStyles(element, options) {
        if (options.from) {
            element.css(options.from);
            options.from = null;
        }
    }
    function applyAnimationToStyles(element, options) {
        if (options.to) {
            element.css(options.to);
            options.to = null;
        }
    }
    function mergeAnimationDetails(element, oldAnimation, newAnimation) {
        var target = oldAnimation.options || {}, newOptions = newAnimation.options || {}, toAdd = (target.addClass || "") + " " + (newOptions.addClass || ""), toRemove = (target.removeClass || "") + " " + (newOptions.removeClass || ""), classes = function(existing, toAdd, toRemove) {
            var flags = {};
            existing = splitClassesToLookup(existing);
            toAdd = splitClassesToLookup(toAdd);
            forEach(toAdd, function(value, key) {
                flags[key] = 1;
            });
            toRemove = splitClassesToLookup(toRemove);
            forEach(toRemove, function(value, key) {
                flags[key] = 1 === flags[key] ? null : -1;
            });
            var classes = {
                addClass: "",
                removeClass: ""
            };
            forEach(flags, function(val, klass) {
                var prop, allow;
                if (1 === val) {
                    prop = "addClass";
                    allow = !existing[klass] || existing[klass + REMOVE_CLASS_SUFFIX];
                } else if (-1 === val) {
                    prop = "removeClass";
                    allow = existing[klass] || existing[klass + ADD_CLASS_SUFFIX];
                }
                if (allow) {
                    classes[prop].length && (classes[prop] += " ");
                    classes[prop] += klass;
                }
            });
            function splitClassesToLookup(classes) {
                isString(classes) && (classes = classes.split(" "));
                var obj = {};
                forEach(classes, function(klass) {
                    klass.length && (obj[klass] = !0);
                });
                return obj;
            }
            return classes;
        }(element.attr("class"), toAdd, toRemove);
        if (newOptions.preparationClasses) {
            target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);
            delete newOptions.preparationClasses;
        }
        var realDomOperation = target.domOperation !== noop ? target.domOperation : null;
        extend(target, newOptions);
        realDomOperation && (target.domOperation = realDomOperation);
        classes.addClass ? target.addClass = classes.addClass : target.addClass = null;
        classes.removeClass ? target.removeClass = classes.removeClass : target.removeClass = null;
        oldAnimation.addClass = target.addClass;
        oldAnimation.removeClass = target.removeClass;
        return target;
    }
    function getDomNode(element) {
        return element instanceof jqLite ? element[0] : element;
    }
    function blockTransitions(node, duration) {
        var value = duration ? "-" + duration + "s" : "";
        applyInlineStyle(node, [ TRANSITION_DELAY_PROP, value ]);
        return [ TRANSITION_DELAY_PROP, value ];
    }
    function blockKeyframeAnimations(node, applyBlock) {
        var value = applyBlock ? "paused" : "", key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;
        applyInlineStyle(node, [ key, value ]);
        return [ key, value ];
    }
    function applyInlineStyle(node, styleTuple) {
        var prop = styleTuple[0], value = styleTuple[1];
        node.style[prop] = value;
    }
    function concatWithSpace(a, b) {
        return a ? b ? a + " " + b : a : b;
    }
    var $$AnimateChildrenDirective = [ "$interpolate", function($interpolate) {
        return {
            link: function(scope, element, attrs) {
                var val = attrs.ngAnimateChildren;
                if (isString(val) && 0 === val.length) element.data("$$ngAnimateChildren", !0); else {
                    setData($interpolate(val)(scope));
                    attrs.$observe("ngAnimateChildren", setData);
                }
                function setData(value) {
                    value = "on" === value || "true" === value;
                    element.data("$$ngAnimateChildren", value);
                }
            }
        };
    } ], DETECT_CSS_PROPERTIES = {
        transitionDuration: TRANSITION_DURATION_PROP,
        transitionDelay: TRANSITION_DELAY_PROP,
        transitionProperty: TRANSITION_PROP + "Property",
        animationDuration: ANIMATION_DURATION_PROP,
        animationDelay: ANIMATION_DELAY_PROP,
        animationIterationCount: ANIMATION_PROP + "IterationCount"
    }, DETECT_STAGGER_CSS_PROPERTIES = {
        transitionDuration: TRANSITION_DURATION_PROP,
        transitionDelay: TRANSITION_DELAY_PROP,
        animationDuration: ANIMATION_DURATION_PROP,
        animationDelay: ANIMATION_DELAY_PROP
    };
    function getCssDelayStyle(delay, isKeyframeAnimation) {
        return [ isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP, delay + "s" ];
    }
    function computeCssStyles($window, element, properties) {
        var styles = Object.create(null), detectedStyles = $window.getComputedStyle(element) || {};
        forEach(properties, function(formalStyleName, actualStyleName) {
            var val = detectedStyles[formalStyleName];
            if (val) {
                var c = val.charAt(0);
                ("-" === c || "+" === c || 0 <= c) && (val = function(str) {
                    var maxValue = 0, values = str.split(/\s*,\s*/);
                    forEach(values, function(value) {
                        "s" === value.charAt(value.length - 1) && (value = value.substring(0, value.length - 1));
                        value = parseFloat(value) || 0;
                        maxValue = maxValue ? Math.max(value, maxValue) : value;
                    });
                    return maxValue;
                }(val));
                0 === val && (val = null);
                styles[actualStyleName] = val;
            }
        });
        return styles;
    }
    function truthyTimingValue(val) {
        return 0 === val || null != val;
    }
    function getCssTransitionDurationStyle(duration, applyOnlyDuration) {
        var style = TRANSITION_PROP, value = duration + "s";
        applyOnlyDuration ? style += "Duration" : value += " linear all";
        return [ style, value ];
    }
    function createLocalCacheLookup() {
        var cache = Object.create(null);
        return {
            flush: function() {
                cache = Object.create(null);
            },
            count: function(key) {
                var entry = cache[key];
                return entry ? entry.total : 0;
            },
            get: function(key) {
                var entry = cache[key];
                return entry && entry.value;
            },
            put: function(key, value) {
                cache[key] ? cache[key].total++ : cache[key] = {
                    total: 1,
                    value: value
                };
            }
        };
    }
    function registerRestorableStyles(backup, node, properties) {
        forEach(properties, function(prop) {
            backup[prop] = isDefined(backup[prop]) ? backup[prop] : node.style.getPropertyValue(prop);
        });
    }
    var copy, extend, forEach, isArray, isDefined, isElement, isFunction, isObject, isString, isUndefined, jqLite, noop, $AnimateCssProvider = [ "$animateProvider", function($animateProvider) {
        var gcsLookup = createLocalCacheLookup(), gcsStaggerLookup = createLocalCacheLookup();
        this.$get = [ "$window", "$$jqLite", "$$AnimateRunner", "$timeout", "$$forceReflow", "$sniffer", "$$rAFScheduler", "$$animateQueue", function($window, $$jqLite, $$AnimateRunner, $timeout, $$forceReflow, $sniffer, $$rAFScheduler, $$animateQueue) {
            var applyAnimationClasses = applyAnimationClassesFactory($$jqLite), parentCounter = 0;
            function gcsHashFn(node, extraClasses) {
                var KEY = "$$ngAnimateParentKey", parentNode = node.parentNode;
                return (parentNode[KEY] || (parentNode[KEY] = ++parentCounter)) + "-" + node.getAttribute("class") + "-" + extraClasses;
            }
            var rafWaitQueue = [];
            function waitUntilQuiet(callback) {
                rafWaitQueue.push(callback);
                $$rAFScheduler.waitUntilQuiet(function() {
                    gcsLookup.flush();
                    gcsStaggerLookup.flush();
                    for (var pageWidth = $$forceReflow(), i = 0; i < rafWaitQueue.length; i++) rafWaitQueue[i](pageWidth);
                    rafWaitQueue.length = 0;
                });
            }
            function computeTimings(node, className, cacheKey) {
                var timings = function(node, className, cacheKey, properties) {
                    var timings = gcsLookup.get(cacheKey);
                    timings || "infinite" === (timings = computeCssStyles($window, node, properties)).animationIterationCount && (timings.animationIterationCount = 1);
                    gcsLookup.put(cacheKey, timings);
                    return timings;
                }(node, 0, cacheKey, DETECT_CSS_PROPERTIES), aD = timings.animationDelay, tD = timings.transitionDelay;
                timings.maxDelay = aD && tD ? Math.max(aD, tD) : aD || tD;
                timings.maxDuration = Math.max(timings.animationDuration * timings.animationIterationCount, timings.transitionDuration);
                return timings;
            }
            return function(element, initialOptions) {
                var options = initialOptions || {};
                options.$$prepared || (options = prepareAnimationOptions(copy(options)));
                var restoreStyles = {}, node = getDomNode(element);
                if (!node || !node.parentNode || !$$animateQueue.enabled()) return closeAndReturnNoopAnimator();
                var animationClosed, animationPaused, animationCompleted, runner, runnerHost, maxDelay, maxDelayTime, maxDuration, maxDurationTime, startTime, temporaryStyles = [], classes = element.attr("class"), styles = function(options) {
                    var styles = {};
                    if (options && (options.to || options.from)) {
                        styles.to = options.to;
                        styles.from = options.from;
                    }
                    return styles;
                }(options), events = [];
                if (0 === options.duration || !$sniffer.animations && !$sniffer.transitions) return closeAndReturnNoopAnimator();
                var method = options.event && isArray(options.event) ? options.event.join(" ") : options.event, structuralClassName = "", addRemoveClassName = "";
                method && options.structural ? structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, !0) : method && (structuralClassName = method);
                options.addClass && (addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX));
                if (options.removeClass) {
                    addRemoveClassName.length && (addRemoveClassName += " ");
                    addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);
                }
                options.applyClassesEarly && addRemoveClassName.length && applyAnimationClasses(element, options);
                var cacheKey, stagger, applyOnlyDuration, preparationClasses = [ structuralClassName, addRemoveClassName ].join(" ").trim(), fullClassName = classes + " " + preparationClasses, activeClasses = pendClasses(preparationClasses, "-active"), hasToStyles = styles.to && 0 < Object.keys(styles.to).length;
                if (!(0 < (options.keyframeStyle || "").length) && !hasToStyles && !preparationClasses) return closeAndReturnNoopAnimator();
                if (0 < options.stagger) {
                    var staggerVal = parseFloat(options.stagger);
                    stagger = {
                        transitionDelay: staggerVal,
                        animationDelay: staggerVal,
                        transitionDuration: 0,
                        animationDuration: 0
                    };
                } else {
                    cacheKey = gcsHashFn(node, fullClassName);
                    stagger = function(node, className, cacheKey, properties) {
                        var stagger;
                        if (0 < gcsLookup.count(cacheKey) && !(stagger = gcsStaggerLookup.get(cacheKey))) {
                            var staggerClassName = pendClasses(className, "-stagger");
                            $$jqLite.addClass(node, staggerClassName);
                            (stagger = computeCssStyles($window, node, properties)).animationDuration = Math.max(stagger.animationDuration, 0);
                            stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);
                            $$jqLite.removeClass(node, staggerClassName);
                            gcsStaggerLookup.put(cacheKey, stagger);
                        }
                        return stagger || {};
                    }(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);
                }
                options.$$skipPreparationClasses || $$jqLite.addClass(element, preparationClasses);
                if (options.transitionStyle) {
                    var transitionStyle = [ TRANSITION_PROP, options.transitionStyle ];
                    applyInlineStyle(node, transitionStyle);
                    temporaryStyles.push(transitionStyle);
                }
                if (0 <= options.duration) {
                    applyOnlyDuration = 0 < node.style[TRANSITION_PROP].length;
                    var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);
                    applyInlineStyle(node, durationStyle);
                    temporaryStyles.push(durationStyle);
                }
                if (options.keyframeStyle) {
                    var keyframeStyle = [ ANIMATION_PROP, options.keyframeStyle ];
                    applyInlineStyle(node, keyframeStyle);
                    temporaryStyles.push(keyframeStyle);
                }
                var itemIndex = stagger ? 0 <= options.staggerIndex ? options.staggerIndex : gcsLookup.count(cacheKey) : 0, isFirst = 0 === itemIndex;
                isFirst && !options.skipBlocking && blockTransitions(node, 9999);
                var timings = computeTimings(node, 0, cacheKey), relativeDelay = timings.maxDelay;
                maxDelay = Math.max(relativeDelay, 0);
                maxDuration = timings.maxDuration;
                var flags = {};
                flags.hasTransitions = 0 < timings.transitionDuration;
                flags.hasAnimations = 0 < timings.animationDuration;
                flags.hasTransitionAll = flags.hasTransitions && "all" === timings.transitionProperty;
                flags.applyTransitionDuration = hasToStyles && (flags.hasTransitions && !flags.hasTransitionAll || flags.hasAnimations && !flags.hasTransitions);
                flags.applyAnimationDuration = options.duration && flags.hasAnimations;
                flags.applyTransitionDelay = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);
                flags.applyAnimationDelay = truthyTimingValue(options.delay) && flags.hasAnimations;
                flags.recalculateTimingStyles = 0 < addRemoveClassName.length;
                if (flags.applyTransitionDuration || flags.applyAnimationDuration) {
                    maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;
                    if (flags.applyTransitionDuration) {
                        flags.hasTransitions = !0;
                        timings.transitionDuration = maxDuration;
                        applyOnlyDuration = 0 < node.style[TRANSITION_PROP + "Property"].length;
                        temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));
                    }
                    if (flags.applyAnimationDuration) {
                        flags.hasAnimations = !0;
                        timings.animationDuration = maxDuration;
                        temporaryStyles.push([ ANIMATION_DURATION_PROP, maxDuration + "s" ]);
                    }
                }
                if (0 === maxDuration && !flags.recalculateTimingStyles) return closeAndReturnNoopAnimator();
                if (null != options.delay) {
                    var delayStyle;
                    if ("boolean" != typeof options.delay) {
                        delayStyle = parseFloat(options.delay);
                        maxDelay = Math.max(delayStyle, 0);
                    }
                    flags.applyTransitionDelay && temporaryStyles.push(getCssDelayStyle(delayStyle));
                    flags.applyAnimationDelay && temporaryStyles.push(getCssDelayStyle(delayStyle, !0));
                }
                null == options.duration && 0 < timings.transitionDuration && (flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst);
                maxDelayTime = 1e3 * maxDelay;
                maxDurationTime = 1e3 * maxDuration;
                if (!options.skipBlocking) {
                    flags.blockTransition = 0 < timings.transitionDuration;
                    flags.blockKeyframeAnimation = 0 < timings.animationDuration && 0 < stagger.animationDelay && 0 === stagger.animationDuration;
                }
                if (options.from) {
                    options.cleanupStyles && registerRestorableStyles(restoreStyles, node, Object.keys(options.from));
                    applyAnimationFromStyles(element, options);
                }
                flags.blockTransition || flags.blockKeyframeAnimation ? applyBlocking(maxDuration) : options.skipBlocking || blockTransitions(node, !1);
                return {
                    $$willAnimate: !0,
                    end: endFn,
                    start: function() {
                        if (!animationClosed) {
                            runner = new $$AnimateRunner(runnerHost = {
                                end: endFn,
                                cancel: cancelFn,
                                resume: null,
                                pause: null
                            });
                            waitUntilQuiet(start);
                            return runner;
                        }
                    }
                };
                function endFn() {
                    close();
                }
                function cancelFn() {
                    close(!0);
                }
                function close(rejected) {
                    if (!(animationClosed || animationCompleted && animationPaused)) {
                        animationPaused = !(animationClosed = !0);
                        options.$$skipPreparationClasses || $$jqLite.removeClass(element, preparationClasses);
                        $$jqLite.removeClass(element, activeClasses);
                        blockKeyframeAnimations(node, !1);
                        blockTransitions(node, !1);
                        forEach(temporaryStyles, function(entry) {
                            node.style[entry[0]] = "";
                        });
                        applyAnimationClasses(element, options);
                        applyAnimationStyles(element, options);
                        Object.keys(restoreStyles).length && forEach(restoreStyles, function(value, prop) {
                            value ? node.style.setProperty(prop, value) : node.style.removeProperty(prop);
                        });
                        options.onDone && options.onDone();
                        events && events.length && element.off(events.join(" "), onAnimationProgress);
                        var animationTimerData = element.data("$$animateCss");
                        if (animationTimerData) {
                            $timeout.cancel(animationTimerData[0].timer);
                            element.removeData("$$animateCss");
                        }
                        runner && runner.complete(!rejected);
                    }
                }
                function applyBlocking(duration) {
                    flags.blockTransition && blockTransitions(node, duration);
                    flags.blockKeyframeAnimation && blockKeyframeAnimations(node, !!duration);
                }
                function closeAndReturnNoopAnimator() {
                    runner = new $$AnimateRunner({
                        end: endFn,
                        cancel: cancelFn
                    });
                    waitUntilQuiet(noop);
                    close();
                    return {
                        $$willAnimate: !1,
                        start: function() {
                            return runner;
                        },
                        end: endFn
                    };
                }
                function onAnimationProgress(event) {
                    event.stopPropagation();
                    var ev = event.originalEvent || event;
                    if (ev.target === node) {
                        var timeStamp = ev.$manualTimeStamp || Date.now(), elapsedTime = parseFloat(ev.elapsedTime.toFixed(3));
                        if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && maxDuration <= elapsedTime) {
                            animationCompleted = !0;
                            close();
                        }
                    }
                }
                function start() {
                    if (!animationClosed) if (node.parentNode) {
                        var playPause = function(playAnimation) {
                            if (animationCompleted) {
                                if (animationPaused && playAnimation) {
                                    animationPaused = !1;
                                    close();
                                }
                            } else {
                                animationPaused = !playAnimation;
                                if (timings.animationDuration) {
                                    var value = blockKeyframeAnimations(node, animationPaused);
                                    animationPaused ? temporaryStyles.push(value) : (val = value, index = (arr = temporaryStyles).indexOf(val), 
                                    0 <= val && arr.splice(index, 1));
                                }
                            }
                            var arr, val, index;
                        }, maxStagger = 0 < itemIndex && (timings.transitionDuration && 0 === stagger.transitionDuration || timings.animationDuration && 0 === stagger.animationDuration) && Math.max(stagger.animationDelay, stagger.transitionDelay);
                        maxStagger ? $timeout(triggerAnimationStart, Math.floor(maxStagger * itemIndex * 1e3), !1) : triggerAnimationStart();
                        runnerHost.resume = function() {
                            playPause(!0);
                        };
                        runnerHost.pause = function() {
                            playPause(!1);
                        };
                    } else close();
                    function triggerAnimationStart() {
                        if (!animationClosed) {
                            applyBlocking(!1);
                            forEach(temporaryStyles, function(entry) {
                                var key = entry[0], value = entry[1];
                                node.style[key] = value;
                            });
                            applyAnimationClasses(element, options);
                            $$jqLite.addClass(element, activeClasses);
                            if (flags.recalculateTimingStyles) {
                                fullClassName = node.getAttribute("class") + " " + preparationClasses;
                                cacheKey = gcsHashFn(node, fullClassName);
                                timings = computeTimings(node, 0, cacheKey);
                                relativeDelay = timings.maxDelay;
                                maxDelay = Math.max(relativeDelay, 0);
                                if (0 === (maxDuration = timings.maxDuration)) {
                                    close();
                                    return;
                                }
                                flags.hasTransitions = 0 < timings.transitionDuration;
                                flags.hasAnimations = 0 < timings.animationDuration;
                            }
                            if (flags.applyAnimationDelay) {
                                relativeDelay = "boolean" != typeof options.delay && truthyTimingValue(options.delay) ? parseFloat(options.delay) : relativeDelay;
                                maxDelay = Math.max(relativeDelay, 0);
                                timings.animationDelay = relativeDelay;
                                delayStyle = getCssDelayStyle(relativeDelay, !0);
                                temporaryStyles.push(delayStyle);
                                node.style[delayStyle[0]] = delayStyle[1];
                            }
                            maxDelayTime = 1e3 * maxDelay;
                            maxDurationTime = 1e3 * maxDuration;
                            if (options.easing) {
                                var easeProp, easeVal = options.easing;
                                if (flags.hasTransitions) {
                                    easeProp = TRANSITION_PROP + "TimingFunction";
                                    temporaryStyles.push([ easeProp, easeVal ]);
                                    node.style[easeProp] = easeVal;
                                }
                                if (flags.hasAnimations) {
                                    easeProp = ANIMATION_PROP + "TimingFunction";
                                    temporaryStyles.push([ easeProp, easeVal ]);
                                    node.style[easeProp] = easeVal;
                                }
                            }
                            timings.transitionDuration && events.push(TRANSITIONEND_EVENT);
                            timings.animationDuration && events.push(ANIMATIONEND_EVENT);
                            startTime = Date.now();
                            var timerTime = maxDelayTime + 1.5 * maxDurationTime, endTime = startTime + timerTime, animationsData = element.data("$$animateCss") || [], setupFallbackTimer = !0;
                            if (animationsData.length) {
                                var currentTimerData = animationsData[0];
                                (setupFallbackTimer = endTime > currentTimerData.expectedEndTime) ? $timeout.cancel(currentTimerData.timer) : animationsData.push(close);
                            }
                            if (setupFallbackTimer) {
                                var timer = $timeout(onAnimationExpired, timerTime, !1);
                                animationsData[0] = {
                                    timer: timer,
                                    expectedEndTime: endTime
                                };
                                animationsData.push(close);
                                element.data("$$animateCss", animationsData);
                            }
                            events.length && element.on(events.join(" "), onAnimationProgress);
                            if (options.to) {
                                options.cleanupStyles && registerRestorableStyles(restoreStyles, node, Object.keys(options.to));
                                applyAnimationToStyles(element, options);
                            }
                        }
                    }
                    function onAnimationExpired() {
                        var animationsData = element.data("$$animateCss");
                        if (animationsData) {
                            for (var i = 1; i < animationsData.length; i++) animationsData[i]();
                            element.removeData("$$animateCss");
                        }
                    }
                }
            };
        } ];
    } ], $$AnimateCssDriverProvider = [ "$$animationProvider", function($$animationProvider) {
        $$animationProvider.drivers.push("$$animateCssDriver");
        this.$get = [ "$animateCss", "$rootScope", "$$AnimateRunner", "$rootElement", "$sniffer", "$$jqLite", "$document", function($animateCss, $rootScope, $$AnimateRunner, $rootElement, $sniffer, $$jqLite, $document) {
            if (!$sniffer.animations && !$sniffer.transitions) return noop;
            var node, bodyNode = $document[0].body, rootNode = getDomNode($rootElement), rootBodyElement = jqLite((node = rootNode).parentNode && 11 === node.parentNode.nodeType || bodyNode.contains(rootNode) ? rootNode : bodyNode);
            return function(animationDetails) {
                return animationDetails.from && animationDetails.to ? function(from, to, classes, anchors) {
                    var fromAnimation = prepareRegularAnimation(from), toAnimation = prepareRegularAnimation(to), anchorAnimations = [];
                    forEach(anchors, function(anchor) {
                        var outElement = anchor.out, inElement = anchor.in, animator = function(classes, outAnchor, inAnchor) {
                            var clone = jqLite(getDomNode(outAnchor).cloneNode(!0)), startingClasses = filterCssClasses(getClassVal(clone));
                            outAnchor.addClass("ng-animate-shim");
                            inAnchor.addClass("ng-animate-shim");
                            clone.addClass("ng-anchor");
                            rootBodyElement.append(clone);
                            var animatorIn, animatorOut = (animator = $animateCss(clone, {
                                addClass: "ng-anchor-out",
                                delay: !0,
                                from: calculateAnchorStyles(outAnchor)
                            }), animator.$$willAnimate ? animator : null);
                            var animator;
                            if (!animatorOut && !(animatorIn = prepareInAnimation())) return end();
                            var startingAnimator = animatorOut || animatorIn;
                            return {
                                start: function() {
                                    var runner, currentAnimation = startingAnimator.start();
                                    currentAnimation.done(function() {
                                        currentAnimation = null;
                                        if (!animatorIn && (animatorIn = prepareInAnimation())) {
                                            (currentAnimation = animatorIn.start()).done(function() {
                                                currentAnimation = null;
                                                end();
                                                runner.complete();
                                            });
                                            return currentAnimation;
                                        }
                                        end();
                                        runner.complete();
                                    });
                                    return runner = new $$AnimateRunner({
                                        end: endFn,
                                        cancel: endFn
                                    });
                                    function endFn() {
                                        currentAnimation && currentAnimation.end();
                                    }
                                }
                            };
                            function calculateAnchorStyles(anchor) {
                                var styles = {}, coords = getDomNode(anchor).getBoundingClientRect();
                                forEach([ "width", "height", "top", "left" ], function(key) {
                                    var value = coords[key];
                                    switch (key) {
                                      case "top":
                                        value += bodyNode.scrollTop;
                                        break;

                                      case "left":
                                        value += bodyNode.scrollLeft;
                                    }
                                    styles[key] = Math.floor(value) + "px";
                                });
                                return styles;
                            }
                            function getClassVal(element) {
                                return element.attr("class") || "";
                            }
                            function prepareInAnimation() {
                                var endingClasses = filterCssClasses(getClassVal(inAnchor)), toAdd = getUniqueValues(endingClasses, startingClasses), toRemove = getUniqueValues(startingClasses, endingClasses), animator = $animateCss(clone, {
                                    to: calculateAnchorStyles(inAnchor),
                                    addClass: "ng-anchor-in " + toAdd,
                                    removeClass: "ng-anchor-out " + toRemove,
                                    delay: !0
                                });
                                return animator.$$willAnimate ? animator : null;
                            }
                            function end() {
                                clone.remove();
                                outAnchor.removeClass("ng-animate-shim");
                                inAnchor.removeClass("ng-animate-shim");
                            }
                        }(0, outElement, inElement);
                        animator && anchorAnimations.push(animator);
                    });
                    if (!fromAnimation && !toAnimation && 0 === anchorAnimations.length) return;
                    return {
                        start: function() {
                            var animationRunners = [];
                            fromAnimation && animationRunners.push(fromAnimation.start());
                            toAnimation && animationRunners.push(toAnimation.start());
                            forEach(anchorAnimations, function(animation) {
                                animationRunners.push(animation.start());
                            });
                            var runner = new $$AnimateRunner({
                                end: endFn,
                                cancel: endFn
                            });
                            $$AnimateRunner.all(animationRunners, function(status) {
                                runner.complete(status);
                            });
                            return runner;
                            function endFn() {
                                forEach(animationRunners, function(runner) {
                                    runner.end();
                                });
                            }
                        }
                    };
                }(animationDetails.from, animationDetails.to, animationDetails.classes, animationDetails.anchors) : prepareRegularAnimation(animationDetails);
            };
            function filterCssClasses(classes) {
                return classes.replace(/\bng-\S+\b/g, "");
            }
            function getUniqueValues(a, b) {
                isString(a) && (a = a.split(" "));
                isString(b) && (b = b.split(" "));
                return a.filter(function(val) {
                    return -1 === b.indexOf(val);
                }).join(" ");
            }
            function prepareRegularAnimation(animationDetails) {
                var element = animationDetails.element, options = animationDetails.options || {};
                if (animationDetails.structural) {
                    options.event = animationDetails.event;
                    options.structural = !0;
                    options.applyClassesEarly = !0;
                    "leave" === animationDetails.event && (options.onDone = options.domOperation);
                }
                options.preparationClasses && (options.event = concatWithSpace(options.event, options.preparationClasses));
                var animator = $animateCss(element, options);
                return animator.$$willAnimate ? animator : null;
            }
        } ];
    } ], $$AnimateJsProvider = [ "$animateProvider", function($animateProvider) {
        this.$get = [ "$injector", "$$AnimateRunner", "$$jqLite", function($injector, $$AnimateRunner, $$jqLite) {
            var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
            return function(element, event, classes, options) {
                var animationClosed = !1;
                if (3 === arguments.length && isObject(classes)) {
                    options = classes;
                    classes = null;
                }
                options = prepareAnimationOptions(options);
                if (!classes) {
                    classes = element.attr("class") || "";
                    options.addClass && (classes += " " + options.addClass);
                    options.removeClass && (classes += " " + options.removeClass);
                }
                var before, after, classesToAdd = options.addClass, classesToRemove = options.removeClass, animations = function(classes) {
                    classes = isArray(classes) ? classes : classes.split(" ");
                    for (var matches = [], flagMap = {}, i = 0; i < classes.length; i++) {
                        var klass = classes[i], animationFactory = $animateProvider.$$registeredAnimations[klass];
                        if (animationFactory && !flagMap[klass]) {
                            matches.push($injector.get(animationFactory));
                            flagMap[klass] = !0;
                        }
                    }
                    return matches;
                }(classes);
                if (animations.length) {
                    var afterFn, beforeFn;
                    if ("leave" === event) {
                        beforeFn = "leave";
                        afterFn = "afterLeave";
                    } else {
                        beforeFn = "before" + event.charAt(0).toUpperCase() + event.substr(1);
                        afterFn = event;
                    }
                    "enter" !== event && "move" !== event && (before = packageAnimations(element, event, options, animations, beforeFn));
                    after = packageAnimations(element, event, options, animations, afterFn);
                }
                if (before || after) {
                    var runner;
                    return {
                        $$willAnimate: !0,
                        end: function() {
                            if (runner) runner.end(); else {
                                close();
                                (runner = new $$AnimateRunner()).complete(!0);
                            }
                            return runner;
                        },
                        start: function() {
                            if (runner) return runner;
                            runner = new $$AnimateRunner();
                            var closeActiveAnimations, chain = [];
                            before && chain.push(function(fn) {
                                closeActiveAnimations = before(fn);
                            });
                            chain.length ? chain.push(function(fn) {
                                applyOptions();
                                fn(!0);
                            }) : applyOptions();
                            after && chain.push(function(fn) {
                                closeActiveAnimations = after(fn);
                            });
                            runner.setHost({
                                end: function() {
                                    endAnimations();
                                },
                                cancel: function() {
                                    endAnimations(!0);
                                }
                            });
                            $$AnimateRunner.chain(chain, onComplete);
                            return runner;
                            function onComplete(success) {
                                close();
                                runner.complete(success);
                            }
                            function endAnimations(cancelled) {
                                if (!animationClosed) {
                                    (closeActiveAnimations || noop)(cancelled);
                                    onComplete(cancelled);
                                }
                            }
                        }
                    };
                }
                function applyOptions() {
                    options.domOperation();
                    applyAnimationClasses(element, options);
                }
                function close() {
                    animationClosed = !0;
                    applyOptions();
                    applyAnimationStyles(element, options);
                }
                function groupEventedAnimations(element, event, options, animations, fnName) {
                    var operations = [];
                    forEach(animations, function(ani) {
                        var animation = ani[fnName];
                        animation && operations.push(function() {
                            var runner, endProgressCb, resolved = !1, onAnimationComplete = function(rejected) {
                                if (!resolved) {
                                    resolved = !0;
                                    (endProgressCb || noop)(rejected);
                                    runner.complete(!rejected);
                                }
                            };
                            runner = new $$AnimateRunner({
                                end: function() {
                                    onAnimationComplete();
                                },
                                cancel: function() {
                                    onAnimationComplete(!0);
                                }
                            });
                            endProgressCb = function(fn, element, event, options, onDone) {
                                var args;
                                switch (event) {
                                  case "animate":
                                    args = [ element, options.from, options.to, onDone ];
                                    break;

                                  case "setClass":
                                    args = [ element, classesToAdd, classesToRemove, onDone ];
                                    break;

                                  case "addClass":
                                    args = [ element, classesToAdd, onDone ];
                                    break;

                                  case "removeClass":
                                    args = [ element, classesToRemove, onDone ];
                                    break;

                                  default:
                                    args = [ element, onDone ];
                                }
                                args.push(options);
                                var value = fn.apply(fn, args);
                                if (value) {
                                    isFunction(value.start) && (value = value.start());
                                    if (value instanceof $$AnimateRunner) value.done(onDone); else if (isFunction(value)) return value;
                                }
                                return noop;
                            }(animation, element, event, options, function(result) {
                                onAnimationComplete(!1 === result);
                            });
                            return runner;
                        });
                    });
                    return operations;
                }
                function packageAnimations(element, event, options, animations, fnName) {
                    var operations = groupEventedAnimations(element, event, options, animations, fnName);
                    if (0 === operations.length) {
                        var a, b;
                        if ("beforeSetClass" === fnName) {
                            a = groupEventedAnimations(element, "removeClass", options, animations, "beforeRemoveClass");
                            b = groupEventedAnimations(element, "addClass", options, animations, "beforeAddClass");
                        } else if ("setClass" === fnName) {
                            a = groupEventedAnimations(element, "removeClass", options, animations, "removeClass");
                            b = groupEventedAnimations(element, "addClass", options, animations, "addClass");
                        }
                        a && (operations = operations.concat(a));
                        b && (operations = operations.concat(b));
                    }
                    if (0 !== operations.length) return function(callback) {
                        var runners = [];
                        operations.length && forEach(operations, function(animateFn) {
                            runners.push(animateFn());
                        });
                        runners.length ? $$AnimateRunner.all(runners, callback) : callback();
                        return function(reject) {
                            forEach(runners, function(runner) {
                                reject ? runner.cancel() : runner.end();
                            });
                        };
                    };
                }
            };
        } ];
    } ], $$AnimateJsDriverProvider = [ "$$animationProvider", function($$animationProvider) {
        $$animationProvider.drivers.push("$$animateJsDriver");
        this.$get = [ "$$animateJs", "$$AnimateRunner", function($$animateJs, $$AnimateRunner) {
            return function(animationDetails) {
                if (animationDetails.from && animationDetails.to) {
                    var fromAnimation = prepareAnimation(animationDetails.from), toAnimation = prepareAnimation(animationDetails.to);
                    if (!fromAnimation && !toAnimation) return;
                    return {
                        start: function() {
                            var animationRunners = [];
                            fromAnimation && animationRunners.push(fromAnimation.start());
                            toAnimation && animationRunners.push(toAnimation.start());
                            $$AnimateRunner.all(animationRunners, function(status) {
                                runner.complete(status);
                            });
                            var runner = new $$AnimateRunner({
                                end: endFnFactory(),
                                cancel: endFnFactory()
                            });
                            return runner;
                            function endFnFactory() {
                                return function() {
                                    forEach(animationRunners, function(runner) {
                                        runner.end();
                                    });
                                };
                            }
                        }
                    };
                }
                return prepareAnimation(animationDetails);
            };
            function prepareAnimation(animationDetails) {
                var element = animationDetails.element, event = animationDetails.event, options = animationDetails.options, classes = animationDetails.classes;
                return $$animateJs(element, event, classes, options);
            }
        } ];
    } ], $$AnimateQueueProvider = [ "$animateProvider", function($animateProvider) {
        var ONE_SPACE = " ", rules = this.rules = {
            skip: [],
            cancel: [],
            join: []
        };
        function hasMatchingClasses(newClassString, currentClassString) {
            if (newClassString && currentClassString) {
                var currentClassMap = function(classString) {
                    if (!classString) return null;
                    var keys = classString.split(ONE_SPACE), map = Object.create(null);
                    forEach(keys, function(key) {
                        map[key] = !0;
                    });
                    return map;
                }(currentClassString);
                return newClassString.split(ONE_SPACE).some(function(className) {
                    return currentClassMap[className];
                });
            }
        }
        function isAllowed(ruleType, currentAnimation, previousAnimation) {
            return rules[ruleType].some(function(fn) {
                return fn(currentAnimation, previousAnimation);
            });
        }
        function hasAnimationClasses(animation, and) {
            var a = 0 < (animation.addClass || "").length, b = 0 < (animation.removeClass || "").length;
            return and ? a && b : a || b;
        }
        rules.join.push(function(newAnimation, currentAnimation) {
            return !newAnimation.structural && hasAnimationClasses(newAnimation);
        });
        rules.skip.push(function(newAnimation, currentAnimation) {
            return !newAnimation.structural && !hasAnimationClasses(newAnimation);
        });
        rules.skip.push(function(newAnimation, currentAnimation) {
            return "leave" === currentAnimation.event && newAnimation.structural;
        });
        rules.skip.push(function(newAnimation, currentAnimation) {
            return currentAnimation.structural && 2 === currentAnimation.state && !newAnimation.structural;
        });
        rules.cancel.push(function(newAnimation, currentAnimation) {
            return currentAnimation.structural && newAnimation.structural;
        });
        rules.cancel.push(function(newAnimation, currentAnimation) {
            return 2 === currentAnimation.state && newAnimation.structural;
        });
        rules.cancel.push(function(newAnimation, currentAnimation) {
            if (currentAnimation.structural) return !1;
            var nA = newAnimation.addClass, nR = newAnimation.removeClass, cA = currentAnimation.addClass, cR = currentAnimation.removeClass;
            return !(isUndefined(nA) && isUndefined(nR) || isUndefined(cA) && isUndefined(cR)) && (hasMatchingClasses(nA, cR) || hasMatchingClasses(nR, cA));
        });
        this.$get = [ "$$rAF", "$rootScope", "$rootElement", "$document", "$$Map", "$$animation", "$$AnimateRunner", "$templateRequest", "$$jqLite", "$$forceReflow", "$$isDocumentHidden", function($$rAF, $rootScope, $rootElement, $document, $$Map, $$animation, $$AnimateRunner, $templateRequest, $$jqLite, $$forceReflow, $$isDocumentHidden) {
            var activeAnimationsLookup = new $$Map(), disabledElementsLookup = new $$Map(), animationsEnabled = null;
            var deregisterWatch = $rootScope.$watch(function() {
                return 0 === $templateRequest.totalPendingRequests;
            }, function(isEmpty) {
                if (isEmpty) {
                    deregisterWatch();
                    $rootScope.$$postDigest(function() {
                        $rootScope.$$postDigest(function() {
                            null === animationsEnabled && (animationsEnabled = !0);
                        });
                    });
                }
            }), callbackRegistry = Object.create(null), customFilter = $animateProvider.customFilter(), classNameFilter = $animateProvider.classNameFilter(), returnTrue = function() {
                return !0;
            }, isAnimatableByFilter = customFilter || returnTrue, isAnimatableClassName = classNameFilter ? function(node, options) {
                var className = [ node.getAttribute("class"), options.addClass, options.removeClass ].join(" ");
                return classNameFilter.test(className);
            } : returnTrue, applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
            function normalizeAnimationDetails(element, animation) {
                return mergeAnimationDetails(element, animation, {});
            }
            var contains = window.Node.prototype.contains || function(arg) {
                return this === arg || !!(16 & this.compareDocumentPosition(arg));
            };
            function filterFromRegistry(list, matchContainer, matchCallback) {
                var containerNode = extractElementNode(matchContainer);
                return list.filter(function(entry) {
                    return !(entry.node === containerNode && (!matchCallback || entry.callback === matchCallback));
                });
            }
            function cleanupEventListeners(phase, node) {
                "close" !== phase || node.parentNode || $animate.off(node);
            }
            var $animate = {
                on: function(event, container, callback) {
                    var node = extractElementNode(container);
                    callbackRegistry[event] = callbackRegistry[event] || [];
                    callbackRegistry[event].push({
                        node: node,
                        callback: callback
                    });
                    jqLite(container).on("$destroy", function() {
                        activeAnimationsLookup.get(node) || $animate.off(event, container, callback);
                    });
                },
                off: function(event, container, callback) {
                    if (1 !== arguments.length || isString(event)) {
                        var entries = callbackRegistry[event];
                        entries && (callbackRegistry[event] = 1 === arguments.length ? null : filterFromRegistry(entries, container, callback));
                    } else {
                        container = event;
                        for (var eventType in callbackRegistry) callbackRegistry[eventType] = filterFromRegistry(callbackRegistry[eventType], container);
                    }
                },
                pin: function(element, parentElement) {
                    assertArg(isElement(element), "element", "not an element");
                    assertArg(isElement(parentElement), "parentElement", "not an element");
                    element.data("$ngAnimatePin", parentElement);
                },
                push: function(element, event, options, domOperation) {
                    (options = options || {}).domOperation = domOperation;
                    return function(originalElement, event, initialOptions) {
                        var options = copy(initialOptions), element = stripCommentsFromElement(originalElement), node = getDomNode(element), parentNode = node && node.parentNode;
                        options = prepareAnimationOptions(options);
                        var runner = new $$AnimateRunner(), runInNextPostDigestOrNow = (postDigestCalled = !1, 
                        function(fn) {
                            postDigestCalled ? fn() : $rootScope.$$postDigest(function() {
                                postDigestCalled = !0;
                                fn();
                            });
                        });
                        var postDigestCalled;
                        isArray(options.addClass) && (options.addClass = options.addClass.join(" "));
                        options.addClass && !isString(options.addClass) && (options.addClass = null);
                        isArray(options.removeClass) && (options.removeClass = options.removeClass.join(" "));
                        options.removeClass && !isString(options.removeClass) && (options.removeClass = null);
                        options.from && !isObject(options.from) && (options.from = null);
                        options.to && !isObject(options.to) && (options.to = null);
                        if (!(animationsEnabled && node && isAnimatableByFilter(node, event, initialOptions) && isAnimatableClassName(node, options))) {
                            close();
                            return runner;
                        }
                        var isStructural = 0 <= [ "enter", "move", "leave" ].indexOf(event), documentHidden = $$isDocumentHidden(), skipAnimations = documentHidden || disabledElementsLookup.get(node), existingAnimation = !skipAnimations && activeAnimationsLookup.get(node) || {}, hasExistingAnimation = !!existingAnimation.state;
                        skipAnimations || hasExistingAnimation && 1 === existingAnimation.state || (skipAnimations = !function(node, parentNode, event) {
                            var animateChildren, bodyNode = $document[0].body, rootNode = getDomNode($rootElement), bodyNodeDetected = node === bodyNode || "HTML" === node.nodeName, rootNodeDetected = node === rootNode, parentAnimationDetected = !1, elementDisabled = disabledElementsLookup.get(node), parentHost = jqLite.data(node, "$ngAnimatePin");
                            parentHost && (parentNode = getDomNode(parentHost));
                            for (;parentNode; ) {
                                rootNodeDetected || (rootNodeDetected = parentNode === rootNode);
                                if (parentNode.nodeType !== ELEMENT_NODE) break;
                                var details = activeAnimationsLookup.get(parentNode) || {};
                                if (!parentAnimationDetected) {
                                    var parentNodeDisabled = disabledElementsLookup.get(parentNode);
                                    if (!0 === parentNodeDisabled && !1 !== elementDisabled) {
                                        elementDisabled = !0;
                                        break;
                                    }
                                    !1 === parentNodeDisabled && (elementDisabled = !1);
                                    parentAnimationDetected = details.structural;
                                }
                                if (isUndefined(animateChildren) || !0 === animateChildren) {
                                    var value = jqLite.data(parentNode, "$$ngAnimateChildren");
                                    isDefined(value) && (animateChildren = value);
                                }
                                if (parentAnimationDetected && !1 === animateChildren) break;
                                bodyNodeDetected || (bodyNodeDetected = parentNode === bodyNode);
                                if (bodyNodeDetected && rootNodeDetected) break;
                                rootNodeDetected || !(parentHost = jqLite.data(parentNode, "$ngAnimatePin")) ? parentNode = parentNode.parentNode : parentNode = getDomNode(parentHost);
                            }
                            return (!parentAnimationDetected || animateChildren) && !0 !== elementDisabled && rootNodeDetected && bodyNodeDetected;
                        }(node, parentNode));
                        if (skipAnimations) {
                            documentHidden && notifyProgress(runner, event, "start");
                            close();
                            documentHidden && notifyProgress(runner, event, "close");
                            return runner;
                        }
                        isStructural && function(node) {
                            var children = node.querySelectorAll("[data-ng-animate]");
                            forEach(children, function(child) {
                                var state = parseInt(child.getAttribute("data-ng-animate"), 10), animationDetails = activeAnimationsLookup.get(child);
                                if (animationDetails) switch (state) {
                                  case 2:
                                    animationDetails.runner.end();

                                  case 1:
                                    activeAnimationsLookup.delete(child);
                                }
                            });
                        }(node);
                        var newAnimation = {
                            structural: isStructural,
                            element: element,
                            event: event,
                            addClass: options.addClass,
                            removeClass: options.removeClass,
                            close: close,
                            options: options,
                            runner: runner
                        };
                        if (hasExistingAnimation) {
                            var skipAnimationFlag = isAllowed("skip", newAnimation, existingAnimation);
                            if (skipAnimationFlag) {
                                if (2 === existingAnimation.state) {
                                    close();
                                    return runner;
                                }
                                mergeAnimationDetails(element, existingAnimation, newAnimation);
                                return existingAnimation.runner;
                            }
                            var cancelAnimationFlag = isAllowed("cancel", newAnimation, existingAnimation);
                            if (cancelAnimationFlag) if (2 === existingAnimation.state) existingAnimation.runner.end(); else {
                                if (!existingAnimation.structural) {
                                    mergeAnimationDetails(element, existingAnimation, newAnimation);
                                    return existingAnimation.runner;
                                }
                                existingAnimation.close();
                            } else {
                                var joinAnimationFlag = isAllowed("join", newAnimation, existingAnimation);
                                if (joinAnimationFlag) {
                                    if (2 !== existingAnimation.state) {
                                        !function(element, event, options) {
                                            var classes = "";
                                            event && (classes = pendClasses(event, EVENT_CLASS_PREFIX, !0));
                                            options.addClass && (classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX)));
                                            options.removeClass && (classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX)));
                                            if (classes.length) {
                                                options.preparationClasses = classes;
                                                element.addClass(classes);
                                            }
                                        }(element, isStructural ? event : null, options);
                                        event = newAnimation.event = existingAnimation.event;
                                        options = mergeAnimationDetails(element, existingAnimation, newAnimation);
                                        return existingAnimation.runner;
                                    }
                                    normalizeAnimationDetails(element, newAnimation);
                                }
                            }
                        } else normalizeAnimationDetails(element, newAnimation);
                        var isValidAnimation = newAnimation.structural;
                        isValidAnimation || (isValidAnimation = "animate" === newAnimation.event && 0 < Object.keys(newAnimation.options.to || {}).length || hasAnimationClasses(newAnimation));
                        if (!isValidAnimation) {
                            close();
                            clearElementAnimationState(node);
                            return runner;
                        }
                        var counter = (existingAnimation.counter || 0) + 1;
                        newAnimation.counter = counter;
                        markElementAnimationState(node, 1, newAnimation);
                        $rootScope.$$postDigest(function() {
                            element = stripCommentsFromElement(originalElement);
                            var animationDetails = activeAnimationsLookup.get(node), animationCancelled = !animationDetails;
                            animationDetails = animationDetails || {};
                            var parentElement = element.parent() || [], isValidAnimation = 0 < parentElement.length && ("animate" === animationDetails.event || animationDetails.structural || hasAnimationClasses(animationDetails));
                            if (!animationCancelled && animationDetails.counter === counter && isValidAnimation) {
                                event = !animationDetails.structural && hasAnimationClasses(animationDetails, !0) ? "setClass" : animationDetails.event;
                                markElementAnimationState(node, 2);
                                var realRunner = $$animation(element, event, animationDetails.options);
                                runner.setHost(realRunner);
                                notifyProgress(runner, event, "start", {});
                                realRunner.done(function(status) {
                                    close(!status);
                                    var animationDetails = activeAnimationsLookup.get(node);
                                    animationDetails && animationDetails.counter === counter && clearElementAnimationState(node);
                                    notifyProgress(runner, event, "close", {});
                                });
                            } else {
                                if (animationCancelled) {
                                    applyAnimationClasses(element, options);
                                    applyAnimationStyles(element, options);
                                }
                                if (animationCancelled || isStructural && animationDetails.event !== event) {
                                    options.domOperation();
                                    runner.end();
                                }
                                isValidAnimation || clearElementAnimationState(node);
                            }
                        });
                        return runner;
                        function notifyProgress(runner, event, phase, data) {
                            runInNextPostDigestOrNow(function() {
                                var callbacks = function(targetParentNode, targetNode, event) {
                                    var matches = [], entries = callbackRegistry[event];
                                    entries && forEach(entries, function(entry) {
                                        contains.call(entry.node, targetNode) ? matches.push(entry.callback) : "leave" === event && contains.call(entry.node, targetParentNode) && matches.push(entry.callback);
                                    });
                                    return matches;
                                }(parentNode, node, event);
                                callbacks.length ? $$rAF(function() {
                                    forEach(callbacks, function(callback) {
                                        callback(element, phase, data);
                                    });
                                    cleanupEventListeners(phase, node);
                                }) : cleanupEventListeners(phase, node);
                            });
                            runner.progress(event, phase, data);
                        }
                        function close(reject) {
                            !function(element, options) {
                                if (options.preparationClasses) {
                                    element.removeClass(options.preparationClasses);
                                    options.preparationClasses = null;
                                }
                                if (options.activeClasses) {
                                    element.removeClass(options.activeClasses);
                                    options.activeClasses = null;
                                }
                            }(element, options);
                            applyAnimationClasses(element, options);
                            applyAnimationStyles(element, options);
                            options.domOperation();
                            runner.complete(!reject);
                        }
                    }(element, event, options);
                },
                enabled: function(element, bool) {
                    var argCount = arguments.length;
                    if (0 === argCount) bool = !!animationsEnabled; else {
                        if (isElement(element)) {
                            var node = getDomNode(element);
                            1 === argCount ? bool = !disabledElementsLookup.get(node) : disabledElementsLookup.set(node, !bool);
                        } else bool = animationsEnabled = !!element;
                    }
                    return bool;
                }
            };
            return $animate;
            function clearElementAnimationState(node) {
                node.removeAttribute("data-ng-animate");
                activeAnimationsLookup.delete(node);
            }
            function markElementAnimationState(node, state, details) {
                (details = details || {}).state = state;
                node.setAttribute("data-ng-animate", state);
                var oldValue = activeAnimationsLookup.get(node), newValue = oldValue ? extend(oldValue, details) : details;
                activeAnimationsLookup.set(node, newValue);
            }
        } ];
    } ], $$AnimationProvider = [ "$animateProvider", function($animateProvider) {
        var drivers = this.drivers = [], RUNNER_STORAGE_KEY = "$$animationRunner";
        function getRunner(element) {
            return element.data(RUNNER_STORAGE_KEY);
        }
        this.$get = [ "$$jqLite", "$rootScope", "$injector", "$$AnimateRunner", "$$Map", "$$rAFScheduler", function($$jqLite, $rootScope, $injector, $$AnimateRunner, $$Map, $$rAFScheduler) {
            var animationQueue = [], applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
            return function(element, event, options) {
                options = prepareAnimationOptions(options);
                var isStructural = 0 <= [ "enter", "move", "leave" ].indexOf(event), runner = new $$AnimateRunner({
                    end: function() {
                        close();
                    },
                    cancel: function() {
                        close(!0);
                    }
                });
                if (!drivers.length) {
                    close();
                    return runner;
                }
                !function(element, runner) {
                    element.data(RUNNER_STORAGE_KEY, runner);
                }(element, runner);
                var prepareClassName, classes = mergeClasses(element.attr("class"), mergeClasses(options.addClass, options.removeClass)), tempClasses = options.tempClasses;
                if (tempClasses) {
                    classes += " " + tempClasses;
                    options.tempClasses = null;
                }
                if (isStructural) {
                    prepareClassName = "ng-" + event + "-prepare";
                    $$jqLite.addClass(element, prepareClassName);
                }
                animationQueue.push({
                    element: element,
                    classes: classes,
                    event: event,
                    structural: isStructural,
                    options: options,
                    beforeStart: function() {
                        element.addClass("ng-animate");
                        tempClasses && $$jqLite.addClass(element, tempClasses);
                        if (prepareClassName) {
                            $$jqLite.removeClass(element, prepareClassName);
                            prepareClassName = null;
                        }
                    },
                    close: close
                });
                element.on("$destroy", handleDestroyedElement);
                if (1 < animationQueue.length) return runner;
                $rootScope.$$postDigest(function() {
                    var animations = [];
                    forEach(animationQueue, function(entry) {
                        getRunner(entry.element) ? animations.push(entry) : entry.close();
                    });
                    animationQueue.length = 0;
                    var groupedAnimations = function(animations) {
                        var preparedAnimations = [], refLookup = {};
                        forEach(animations, function(animation, index) {
                            var element = animation.element, node = getDomNode(element), event = animation.event, enterOrMove = 0 <= [ "enter", "move" ].indexOf(event), anchorNodes = animation.structural ? function(node) {
                                var items = node.hasAttribute("ng-animate-ref") ? [ node ] : node.querySelectorAll("[ng-animate-ref]"), anchors = [];
                                forEach(items, function(node) {
                                    var attr = node.getAttribute("ng-animate-ref");
                                    attr && attr.length && anchors.push(node);
                                });
                                return anchors;
                            }(node) : [];
                            if (anchorNodes.length) {
                                var direction = enterOrMove ? "to" : "from";
                                forEach(anchorNodes, function(anchor) {
                                    var key = anchor.getAttribute("ng-animate-ref");
                                    refLookup[key] = refLookup[key] || {};
                                    refLookup[key][direction] = {
                                        animationID: index,
                                        element: jqLite(anchor)
                                    };
                                });
                            } else preparedAnimations.push(animation);
                        });
                        var usedIndicesLookup = {}, anchorGroups = {};
                        forEach(refLookup, function(operations, key) {
                            var from = operations.from, to = operations.to;
                            if (from && to) {
                                var fromAnimation = animations[from.animationID], toAnimation = animations[to.animationID], lookupKey = from.animationID.toString();
                                if (!anchorGroups[lookupKey]) {
                                    var group = anchorGroups[lookupKey] = {
                                        structural: !0,
                                        beforeStart: function() {
                                            fromAnimation.beforeStart();
                                            toAnimation.beforeStart();
                                        },
                                        close: function() {
                                            fromAnimation.close();
                                            toAnimation.close();
                                        },
                                        classes: function(a, b) {
                                            a = a.split(" ");
                                            b = b.split(" ");
                                            for (var matches = [], i = 0; i < a.length; i++) {
                                                var aa = a[i];
                                                if ("ng-" !== aa.substring(0, 3)) for (var j = 0; j < b.length; j++) if (aa === b[j]) {
                                                    matches.push(aa);
                                                    break;
                                                }
                                            }
                                            return matches.join(" ");
                                        }(fromAnimation.classes, toAnimation.classes),
                                        from: fromAnimation,
                                        to: toAnimation,
                                        anchors: []
                                    };
                                    if (group.classes.length) preparedAnimations.push(group); else {
                                        preparedAnimations.push(fromAnimation);
                                        preparedAnimations.push(toAnimation);
                                    }
                                }
                                anchorGroups[lookupKey].anchors.push({
                                    out: from.element,
                                    in: to.element
                                });
                            } else {
                                var index = from ? from.animationID : to.animationID, indexKey = index.toString();
                                if (!usedIndicesLookup[indexKey]) {
                                    usedIndicesLookup[indexKey] = !0;
                                    preparedAnimations.push(animations[index]);
                                }
                            }
                        });
                        return preparedAnimations;
                    }(animations), toBeSortedAnimations = [];
                    forEach(groupedAnimations, function(animationEntry) {
                        toBeSortedAnimations.push({
                            domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),
                            fn: function() {
                                animationEntry.beforeStart();
                                var startAnimationFn, closeFn = animationEntry.close;
                                if (getRunner(animationEntry.anchors ? animationEntry.from.element || animationEntry.to.element : animationEntry.element)) {
                                    var operation = function(animationDetails) {
                                        for (var i = drivers.length - 1; 0 <= i; i--) {
                                            var driverName = drivers[i], factory = $injector.get(driverName), driver = factory(animationDetails);
                                            if (driver) return driver;
                                        }
                                    }(animationEntry);
                                    operation && (startAnimationFn = operation.start);
                                }
                                if (startAnimationFn) {
                                    var animationRunner = startAnimationFn();
                                    animationRunner.done(function(status) {
                                        closeFn(!status);
                                    });
                                    !function(animation, newRunner) {
                                        if (animation.from && animation.to) {
                                            update(animation.from.element);
                                            update(animation.to.element);
                                        } else update(animation.element);
                                        function update(element) {
                                            var runner = getRunner(element);
                                            runner && runner.setHost(newRunner);
                                        }
                                    }(animationEntry, animationRunner);
                                } else closeFn();
                            }
                        });
                    });
                    $$rAFScheduler(function(animations) {
                        var i, tree = {
                            children: []
                        }, lookup = new $$Map();
                        for (i = 0; i < animations.length; i++) {
                            var animation = animations[i];
                            lookup.set(animation.domNode, animations[i] = {
                                domNode: animation.domNode,
                                fn: animation.fn,
                                children: []
                            });
                        }
                        for (i = 0; i < animations.length; i++) processNode(animations[i]);
                        return function(tree) {
                            var i, result = [], queue = [];
                            for (i = 0; i < tree.children.length; i++) queue.push(tree.children[i]);
                            var remainingLevelEntries = queue.length, nextLevelEntries = 0, row = [];
                            for (i = 0; i < queue.length; i++) {
                                var entry = queue[i];
                                if (remainingLevelEntries <= 0) {
                                    remainingLevelEntries = nextLevelEntries;
                                    nextLevelEntries = 0;
                                    result.push(row);
                                    row = [];
                                }
                                row.push(entry.fn);
                                entry.children.forEach(function(childEntry) {
                                    nextLevelEntries++;
                                    queue.push(childEntry);
                                });
                                remainingLevelEntries--;
                            }
                            row.length && result.push(row);
                            return result;
                        }(tree);
                        function processNode(entry) {
                            if (entry.processed) return entry;
                            entry.processed = !0;
                            var parentEntry, elementNode = entry.domNode, parentNode = elementNode.parentNode;
                            lookup.set(elementNode, entry);
                            for (;parentNode; ) {
                                if (parentEntry = lookup.get(parentNode)) {
                                    parentEntry.processed || (parentEntry = processNode(parentEntry));
                                    break;
                                }
                                parentNode = parentNode.parentNode;
                            }
                            (parentEntry || tree).children.push(entry);
                            return entry;
                        }
                    }(toBeSortedAnimations));
                });
                return runner;
                function handleDestroyedElement() {
                    var runner = getRunner(element);
                    !runner || "leave" === event && options.$$domOperationFired || runner.end();
                }
                function close(rejected) {
                    element.off("$destroy", handleDestroyedElement);
                    !function(element) {
                        element.removeData(RUNNER_STORAGE_KEY);
                    }(element);
                    applyAnimationClasses(element, options);
                    applyAnimationStyles(element, options);
                    options.domOperation();
                    tempClasses && $$jqLite.removeClass(element, tempClasses);
                    element.removeClass("ng-animate");
                    runner.complete(!rejected);
                }
            };
        } ];
    } ];
    angular.module("ngAnimate", [], function() {
        noop = angular.noop;
        copy = angular.copy;
        extend = angular.extend;
        jqLite = angular.element;
        forEach = angular.forEach;
        isArray = angular.isArray;
        isString = angular.isString;
        isObject = angular.isObject;
        isUndefined = angular.isUndefined;
        isDefined = angular.isDefined;
        isFunction = angular.isFunction;
        isElement = angular.isElement;
    }).info({
        angularVersion: "1.6.10"
    }).directive("ngAnimateSwap", [ "$animate", "$rootScope", function($animate, $rootScope) {
        return {
            restrict: "A",
            transclude: "element",
            terminal: !0,
            priority: 600,
            link: function(scope, $element, attrs, ctrl, $transclude) {
                var previousElement, previousScope;
                scope.$watchCollection(attrs.ngAnimateSwap || attrs.for, function(value) {
                    previousElement && $animate.leave(previousElement);
                    if (previousScope) {
                        previousScope.$destroy();
                        previousScope = null;
                    }
                    if (value || 0 === value) {
                        previousScope = scope.$new();
                        $transclude(previousScope, function(element) {
                            previousElement = element;
                            $animate.enter(element, null, $element);
                        });
                    }
                });
            }
        };
    } ]).directive("ngAnimateChildren", $$AnimateChildrenDirective).factory("$$rAFScheduler", [ "$$rAF", function($$rAF) {
        var queue, cancelFn;
        function scheduler(tasks) {
            queue = queue.concat(tasks);
            nextTick();
        }
        queue = scheduler.queue = [];
        scheduler.waitUntilQuiet = function(fn) {
            cancelFn && cancelFn();
            cancelFn = $$rAF(function() {
                cancelFn = null;
                fn();
                nextTick();
            });
        };
        return scheduler;
        function nextTick() {
            if (queue.length) {
                for (var items = queue.shift(), i = 0; i < items.length; i++) items[i]();
                cancelFn || $$rAF(function() {
                    cancelFn || nextTick();
                });
            }
        }
    } ]).provider("$$animateQueue", $$AnimateQueueProvider).provider("$$animation", $$AnimationProvider).provider("$animateCss", $AnimateCssProvider).provider("$$animateCssDriver", $$AnimateCssDriverProvider).provider("$$animateJs", $$AnimateJsProvider).provider("$$animateJsDriver", $$AnimateJsDriverProvider);
}(window, window.angular);

!function(window, angular) {
    "use strict";
    var ngAriaModule = angular.module("ngAria", [ "ng" ]).info({
        angularVersion: "1.6.10"
    }).provider("$aria", function() {
        var config = {
            ariaHidden: !0,
            ariaChecked: !0,
            ariaReadonly: !0,
            ariaDisabled: !0,
            ariaRequired: !0,
            ariaInvalid: !0,
            ariaValue: !0,
            tabindex: !0,
            bindKeydown: !0,
            bindRoleForClick: !0
        };
        this.config = function(newConfig) {
            config = angular.extend(config, newConfig);
        };
        function watchExpr(attrName, ariaAttr, nodeBlackList, negate) {
            return function(scope, elem, attr) {
                var ariaCamelName = attr.$normalize(ariaAttr);
                !config[ariaCamelName] || isNodeOneOf(elem, nodeBlackList) || attr[ariaCamelName] || scope.$watch(attr[attrName], function(boolVal) {
                    boolVal = negate ? !boolVal : !!boolVal;
                    elem.attr(ariaAttr, boolVal);
                });
            };
        }
        this.$get = function() {
            return {
                config: function(key) {
                    return config[key];
                },
                $$watchExpr: watchExpr
            };
        };
    }), nodeBlackList = [ "BUTTON", "A", "INPUT", "TEXTAREA", "SELECT", "DETAILS", "SUMMARY" ], isNodeOneOf = function(elem, nodeTypeArray) {
        if (-1 !== nodeTypeArray.indexOf(elem[0].nodeName)) return !0;
    };
    ngAriaModule.directive("ngShow", [ "$aria", function($aria) {
        return $aria.$$watchExpr("ngShow", "aria-hidden", [], !0);
    } ]).directive("ngHide", [ "$aria", function($aria) {
        return $aria.$$watchExpr("ngHide", "aria-hidden", [], !1);
    } ]).directive("ngValue", [ "$aria", function($aria) {
        return $aria.$$watchExpr("ngValue", "aria-checked", nodeBlackList, !1);
    } ]).directive("ngChecked", [ "$aria", function($aria) {
        return $aria.$$watchExpr("ngChecked", "aria-checked", nodeBlackList, !1);
    } ]).directive("ngReadonly", [ "$aria", function($aria) {
        return $aria.$$watchExpr("ngReadonly", "aria-readonly", nodeBlackList, !1);
    } ]).directive("ngRequired", [ "$aria", function($aria) {
        return $aria.$$watchExpr("ngRequired", "aria-required", nodeBlackList, !1);
    } ]).directive("ngModel", [ "$aria", function($aria) {
        function shouldAttachAttr(attr, normalizedAttr, elem, allowBlacklistEls) {
            return $aria.config(normalizedAttr) && !elem.attr(attr) && (allowBlacklistEls || !isNodeOneOf(elem, nodeBlackList));
        }
        function shouldAttachRole(role, elem) {
            return !elem.attr("role") && elem.attr("type") === role && !isNodeOneOf(elem, nodeBlackList);
        }
        return {
            restrict: "A",
            require: "ngModel",
            priority: 200,
            compile: function(elem, attr) {
                var shape = function(attr, elem) {
                    var type = attr.type, role = attr.role;
                    return "checkbox" === (type || role) || "menuitemcheckbox" === role ? "checkbox" : "radio" === (type || role) || "menuitemradio" === role ? "radio" : "range" === type || "progressbar" === role || "slider" === role ? "range" : "";
                }(attr);
                return {
                    post: function(scope, elem, attr, ngModel) {
                        var needsTabIndex = shouldAttachAttr("tabindex", "tabindex", elem, !1);
                        function ngAriaWatchModelValue() {
                            return ngModel.$modelValue;
                        }
                        switch (shape) {
                          case "radio":
                          case "checkbox":
                            shouldAttachRole(shape, elem) && elem.attr("role", shape);
                            shouldAttachAttr("aria-checked", "ariaChecked", elem, !1) && scope.$watch(ngAriaWatchModelValue, "radio" === shape ? function(newVal) {
                                var boolVal = attr.value == ngModel.$viewValue;
                                elem.attr("aria-checked", boolVal);
                            } : function() {
                                elem.attr("aria-checked", !ngModel.$isEmpty(ngModel.$viewValue));
                            });
                            needsTabIndex && elem.attr("tabindex", 0);
                            break;

                          case "range":
                            shouldAttachRole(shape, elem) && elem.attr("role", "slider");
                            if ($aria.config("ariaValue")) {
                                var needsAriaValuemin = !elem.attr("aria-valuemin") && (attr.hasOwnProperty("min") || attr.hasOwnProperty("ngMin")), needsAriaValuemax = !elem.attr("aria-valuemax") && (attr.hasOwnProperty("max") || attr.hasOwnProperty("ngMax")), needsAriaValuenow = !elem.attr("aria-valuenow");
                                needsAriaValuemin && attr.$observe("min", function(newVal) {
                                    elem.attr("aria-valuemin", newVal);
                                });
                                needsAriaValuemax && attr.$observe("max", function(newVal) {
                                    elem.attr("aria-valuemax", newVal);
                                });
                                needsAriaValuenow && scope.$watch(ngAriaWatchModelValue, function(newVal) {
                                    elem.attr("aria-valuenow", newVal);
                                });
                            }
                            needsTabIndex && elem.attr("tabindex", 0);
                        }
                        !attr.hasOwnProperty("ngRequired") && ngModel.$validators.required && shouldAttachAttr("aria-required", "ariaRequired", elem, !1) && attr.$observe("required", function() {
                            elem.attr("aria-required", !!attr.required);
                        });
                        shouldAttachAttr("aria-invalid", "ariaInvalid", elem, !0) && scope.$watch(function() {
                            return ngModel.$invalid;
                        }, function(newVal) {
                            elem.attr("aria-invalid", !!newVal);
                        });
                    }
                };
            }
        };
    } ]).directive("ngDisabled", [ "$aria", function($aria) {
        return $aria.$$watchExpr("ngDisabled", "aria-disabled", nodeBlackList, !1);
    } ]).directive("ngMessages", function() {
        return {
            restrict: "A",
            require: "?ngMessages",
            link: function(scope, elem, attr, ngMessages) {
                elem.attr("aria-live") || elem.attr("aria-live", "assertive");
            }
        };
    }).directive("ngClick", [ "$aria", "$parse", function($aria, $parse) {
        return {
            restrict: "A",
            compile: function(elem, attr) {
                var fn = $parse(attr.ngClick);
                return function(scope, elem, attr) {
                    if (!isNodeOneOf(elem, nodeBlackList)) {
                        $aria.config("bindRoleForClick") && !elem.attr("role") && elem.attr("role", "button");
                        $aria.config("tabindex") && !elem.attr("tabindex") && elem.attr("tabindex", 0);
                        !$aria.config("bindKeydown") || attr.ngKeydown || attr.ngKeypress || attr.ngKeyup || elem.on("keydown", function(event) {
                            var keyCode = event.which || event.keyCode;
                            32 !== keyCode && 13 !== keyCode || scope.$apply(function() {
                                fn(scope, {
                                    $event: event
                                });
                            });
                        });
                    }
                };
            }
        };
    } ]).directive("ngDblclick", [ "$aria", function($aria) {
        return function(scope, elem, attr) {
            !$aria.config("tabindex") || elem.attr("tabindex") || isNodeOneOf(elem, nodeBlackList) || elem.attr("tabindex", 0);
        };
    } ]);
}(window, window.angular);

!function(window, angular) {
    "use strict";
    var $resourceMinErr = angular.$$minErr("$resource"), MEMBER_NAME_REGEX = /^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;
    function lookupDottedPath(obj, path) {
        if (!function(path) {
            return null != path && "" !== path && "hasOwnProperty" !== path && MEMBER_NAME_REGEX.test("." + path);
        }(path)) throw $resourceMinErr("badmember", 'Dotted member path "@{0}" is invalid.', path);
        for (var keys = path.split("."), i = 0, ii = keys.length; i < ii && angular.isDefined(obj); i++) {
            var key = keys[i];
            obj = null !== obj ? obj[key] : void 0;
        }
        return obj;
    }
    function shallowClearAndCopy(src, dst) {
        dst = dst || {};
        angular.forEach(dst, function(value, key) {
            delete dst[key];
        });
        for (var key in src) !src.hasOwnProperty(key) || "$" === key.charAt(0) && "$" === key.charAt(1) || (dst[key] = src[key]);
        return dst;
    }
    angular.module("ngResource", [ "ng" ]).info({
        angularVersion: "1.6.10"
    }).provider("$resource", function() {
        var PROTOCOL_AND_IPV6_REGEX = /^https?:\/\/\[[^\]]*][^/]*/, provider = this;
        this.defaults = {
            stripTrailingSlashes: !0,
            cancellable: !1,
            actions: {
                get: {
                    method: "GET"
                },
                save: {
                    method: "POST"
                },
                query: {
                    method: "GET",
                    isArray: !0
                },
                remove: {
                    method: "DELETE"
                },
                delete: {
                    method: "DELETE"
                }
            }
        };
        this.$get = [ "$http", "$log", "$q", "$timeout", function($http, $log, $q, $timeout) {
            var noop = angular.noop, forEach = angular.forEach, extend = angular.extend, copy = angular.copy, isArray = angular.isArray, isDefined = angular.isDefined, isFunction = angular.isFunction, isNumber = angular.isNumber, encodeUriQuery = angular.$$encodeUriQuery, encodeUriSegment = angular.$$encodeUriSegment;
            function Route(template, defaults) {
                this.template = template;
                this.defaults = extend({}, provider.defaults, defaults);
                this.urlParams = {};
            }
            Route.prototype = {
                setUrlParams: function(config, params, actionUrl) {
                    var val, encodedVal, self = this, url = actionUrl || self.template, protocolAndIpv6 = "", urlParams = self.urlParams = Object.create(null);
                    forEach(url.split(/\W/), function(param) {
                        if ("hasOwnProperty" === param) throw $resourceMinErr("badname", "hasOwnProperty is not a valid parameter name.");
                        !new RegExp("^\\d+$").test(param) && param && new RegExp("(^|[^\\\\]):" + param + "(\\W|$)").test(url) && (urlParams[param] = {
                            isQueryParamValue: new RegExp("\\?.*=:" + param + "(?:\\W|$)").test(url)
                        });
                    });
                    url = (url = url.replace(/\\:/g, ":")).replace(PROTOCOL_AND_IPV6_REGEX, function(match) {
                        protocolAndIpv6 = match;
                        return "";
                    });
                    params = params || {};
                    forEach(self.urlParams, function(paramInfo, urlParam) {
                        val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];
                        if (isDefined(val) && null !== val) {
                            encodedVal = paramInfo.isQueryParamValue ? encodeUriQuery(val, !0) : encodeUriSegment(val);
                            url = url.replace(new RegExp(":" + urlParam + "(\\W|$)", "g"), function(match, p1) {
                                return encodedVal + p1;
                            });
                        } else url = url.replace(new RegExp("(/?):" + urlParam + "(\\W|$)", "g"), function(match, leadingSlashes, tail) {
                            return "/" === tail.charAt(0) ? tail : leadingSlashes + tail;
                        });
                    });
                    self.defaults.stripTrailingSlashes && (url = url.replace(/\/+$/, "") || "/");
                    url = url.replace(/\/\.(?=\w+($|\?))/, ".");
                    config.url = protocolAndIpv6 + url.replace(/\/(\\|%5C)\./, "/.");
                    forEach(params, function(value, key) {
                        if (!self.urlParams[key]) {
                            config.params = config.params || {};
                            config.params[key] = value;
                        }
                    });
                }
            };
            return function(url, paramDefaults, actions, options) {
                var route = new Route(url, options);
                actions = extend({}, provider.defaults.actions, actions);
                function defaultResponseInterceptor(response) {
                    return response.resource;
                }
                function Resource(value) {
                    shallowClearAndCopy(value || {}, this);
                }
                Resource.prototype.toJSON = function() {
                    var data = extend({}, this);
                    delete data.$promise;
                    delete data.$resolved;
                    delete data.$cancelRequest;
                    return data;
                };
                forEach(actions, function(action, name) {
                    var hasBody = !0 === action.hasBody || !1 !== action.hasBody && /^(POST|PUT|PATCH)$/i.test(action.method), numericTimeout = action.timeout, cancellable = isDefined(action.cancellable) ? action.cancellable : route.defaults.cancellable;
                    if (numericTimeout && !isNumber(numericTimeout)) {
                        $log.debug("ngResource:\n  Only numeric values are allowed as `timeout`.\n  Promises are not supported in $resource, because the same value would be used for multiple requests. If you are looking for a way to cancel requests, you should use the `cancellable` option.");
                        delete action.timeout;
                        numericTimeout = null;
                    }
                    Resource[name] = function(a1, a2, a3, a4) {
                        var data, success, error, params = {};
                        switch (arguments.length) {
                          case 4:
                            error = a4;
                            success = a3;

                          case 3:
                          case 2:
                            if (!isFunction(a2)) {
                                params = a1;
                                data = a2;
                                success = a3;
                                break;
                            }
                            if (isFunction(a1)) {
                                success = a1;
                                error = a2;
                                break;
                            }
                            success = a2;
                            error = a3;

                          case 1:
                            isFunction(a1) ? success = a1 : hasBody ? data = a1 : params = a1;
                            break;

                          case 0:
                            break;

                          default:
                            throw $resourceMinErr("badargs", "Expected up to 4 arguments [params, data, success, error], got {0} arguments", arguments.length);
                        }
                        var timeoutDeferred, numericTimeoutPromise, isInstanceCall = this instanceof Resource, value = isInstanceCall ? data : action.isArray ? [] : new Resource(data), httpConfig = {}, responseInterceptor = action.interceptor && action.interceptor.response || defaultResponseInterceptor, responseErrorInterceptor = action.interceptor && action.interceptor.responseError || void 0, hasError = !!error, hasResponseErrorInterceptor = !!responseErrorInterceptor;
                        forEach(action, function(value, key) {
                            switch (key) {
                              default:
                                httpConfig[key] = copy(value);
                                break;

                              case "params":
                              case "isArray":
                              case "interceptor":
                              case "cancellable":
                            }
                        });
                        if (!isInstanceCall && cancellable) {
                            timeoutDeferred = $q.defer();
                            httpConfig.timeout = timeoutDeferred.promise;
                            numericTimeout && (numericTimeoutPromise = $timeout(timeoutDeferred.resolve, numericTimeout));
                        }
                        hasBody && (httpConfig.data = data);
                        route.setUrlParams(httpConfig, extend({}, function(data, actionParams) {
                            var ids = {};
                            actionParams = extend({}, paramDefaults, actionParams);
                            forEach(actionParams, function(value, key) {
                                isFunction(value) && (value = value(data));
                                ids[key] = value && value.charAt && "@" === value.charAt(0) ? lookupDottedPath(data, value.substr(1)) : value;
                            });
                            return ids;
                        }(data, action.params || {}), params), action.url);
                        var promise = $http(httpConfig).then(function(response) {
                            var data = response.data;
                            if (data) {
                                if (isArray(data) !== !!action.isArray) throw $resourceMinErr("badcfg", "Error in resource configuration for action `{0}`. Expected response to contain an {1} but got an {2} (Request: {3} {4})", name, action.isArray ? "array" : "object", isArray(data) ? "array" : "object", httpConfig.method, httpConfig.url);
                                if (action.isArray) {
                                    value.length = 0;
                                    forEach(data, function(item) {
                                        "object" == typeof item ? value.push(new Resource(item)) : value.push(item);
                                    });
                                } else {
                                    var promise = value.$promise;
                                    shallowClearAndCopy(data, value);
                                    value.$promise = promise;
                                }
                            }
                            response.resource = value;
                            return response;
                        }, function(response) {
                            response.resource = value;
                            return $q.reject(response);
                        });
                        promise = (promise = promise.finally(function() {
                            value.$resolved = !0;
                            if (!isInstanceCall && cancellable) {
                                value.$cancelRequest = noop;
                                $timeout.cancel(numericTimeoutPromise);
                                timeoutDeferred = numericTimeoutPromise = httpConfig.timeout = null;
                            }
                        })).then(function(response) {
                            var value = responseInterceptor(response);
                            (success || noop)(value, response.headers, response.status, response.statusText);
                            return value;
                        }, hasError || hasResponseErrorInterceptor ? function(response) {
                            hasError && !hasResponseErrorInterceptor && promise.catch(noop);
                            hasError && error(response);
                            return hasResponseErrorInterceptor ? responseErrorInterceptor(response) : $q.reject(response);
                        } : void 0);
                        if (isInstanceCall) return promise;
                        value.$promise = promise;
                        value.$resolved = !1;
                        cancellable && (value.$cancelRequest = function(value) {
                            promise.catch(noop);
                            null !== timeoutDeferred && timeoutDeferred.resolve(value);
                        });
                        return value;
                    };
                    Resource.prototype["$" + name] = function(params, success, error) {
                        if (isFunction(params)) {
                            error = success;
                            success = params;
                            params = {};
                        }
                        var result = Resource[name].call(this, params, this, success, error);
                        return result.$promise || result;
                    };
                });
                return Resource;
            };
        } ];
    });
}(window, window.angular);

!function() {
    "use strict";
    angular.module("angular-loading-bar", [ "cfp.loadingBarInterceptor" ]);
    angular.module("chieffancypants.loadingBar", [ "cfp.loadingBarInterceptor" ]);
    angular.module("cfp.loadingBarInterceptor", [ "cfp.loadingBar" ]).config([ "$httpProvider", function($httpProvider) {
        var interceptor = [ "$q", "$cacheFactory", "$timeout", "$rootScope", "cfpLoadingBar", function($q, $cacheFactory, $timeout, $rootScope, cfpLoadingBar) {
            var startTimeout, reqsTotal = 0, reqsCompleted = 0, latencyThreshold = cfpLoadingBar.latencyThreshold;
            function setComplete() {
                $timeout.cancel(startTimeout);
                cfpLoadingBar.complete();
                reqsTotal = reqsCompleted = 0;
            }
            function isCached(config) {
                var cache, defaultCache = $cacheFactory.get("$http"), defaults = $httpProvider.defaults;
                !config.cache && !defaults.cache || !1 === config.cache || "GET" !== config.method && "JSONP" !== config.method || (cache = angular.isObject(config.cache) ? config.cache : angular.isObject(defaults.cache) ? defaults.cache : defaultCache);
                var cached = void 0 !== cache && void 0 !== cache.get(config.url);
                return void 0 !== config.cached && cached !== config.cached ? config.cached : config.cached = cached;
            }
            return {
                request: function(config) {
                    if (!config.ignoreLoadingBar && !isCached(config)) {
                        $rootScope.$broadcast("cfpLoadingBar:loading", {
                            url: config.url
                        });
                        0 === reqsTotal && (startTimeout = $timeout(function() {
                            cfpLoadingBar.start();
                        }, latencyThreshold));
                        reqsTotal++;
                        cfpLoadingBar.set(reqsCompleted / reqsTotal);
                    }
                    return config;
                },
                response: function(response) {
                    if (!response.config.ignoreLoadingBar && !isCached(response.config)) {
                        reqsCompleted++;
                        $rootScope.$broadcast("cfpLoadingBar:loaded", {
                            url: response.config.url
                        });
                        reqsTotal <= reqsCompleted ? setComplete() : cfpLoadingBar.set(reqsCompleted / reqsTotal);
                    }
                    return response;
                },
                responseError: function(rejection) {
                    if (!rejection.config.ignoreLoadingBar && !isCached(rejection.config)) {
                        reqsCompleted++;
                        $rootScope.$broadcast("cfpLoadingBar:loaded", {
                            url: rejection.config.url
                        });
                        reqsTotal <= reqsCompleted ? setComplete() : cfpLoadingBar.set(reqsCompleted / reqsTotal);
                    }
                    return $q.reject(rejection);
                }
            };
        } ];
        $httpProvider.interceptors.push(interceptor);
    } ]);
    angular.module("cfp.loadingBar", []).provider("cfpLoadingBar", function() {
        this.includeSpinner = !0;
        this.includeBar = !0;
        this.latencyThreshold = 100;
        this.startSize = .02;
        this.parentSelector = "body";
        this.spinnerTemplate = '<div id="loading-bar-spinner"><div class="spinner-icon"></div></div>';
        this.loadingBarTemplate = '<div id="loading-bar"><div class="bar"><div class="peg"></div></div></div>';
        this.$get = [ "$injector", "$document", "$timeout", "$rootScope", function($injector, $document, $timeout, $rootScope) {
            var $animate, incTimeout, completeTimeout, $parentSelector = this.parentSelector, loadingBarContainer = angular.element(this.loadingBarTemplate), loadingBar = loadingBarContainer.find("div").eq(0), spinner = angular.element(this.spinnerTemplate), started = !1, status = 0, includeSpinner = this.includeSpinner, includeBar = this.includeBar, startSize = this.startSize;
            function _set(n) {
                if (started) {
                    var pct = 100 * n + "%";
                    loadingBar.css("width", pct);
                    status = n;
                    $timeout.cancel(incTimeout);
                    incTimeout = $timeout(function() {
                        _inc();
                    }, 250);
                }
            }
            function _inc() {
                if (!(1 <= _status())) {
                    var rnd = 0, stat = _status();
                    rnd = 0 <= stat && stat < .25 ? (3 * Math.random() + 3) / 100 : .25 <= stat && stat < .65 ? 3 * Math.random() / 100 : .65 <= stat && stat < .9 ? 2 * Math.random() / 100 : .9 <= stat && stat < .99 ? .005 : 0;
                    _set(_status() + rnd);
                }
            }
            function _status() {
                return status;
            }
            function _completeAnimation() {
                status = 0;
                started = !1;
            }
            return {
                start: function() {
                    $animate || ($animate = $injector.get("$animate"));
                    var $parent = $document.find($parentSelector).eq(0);
                    $timeout.cancel(completeTimeout);
                    if (!started) {
                        $rootScope.$broadcast("cfpLoadingBar:started");
                        started = !0;
                        includeBar && $animate.enter(loadingBarContainer, $parent);
                        includeSpinner && $animate.enter(spinner, $parent);
                        _set(startSize);
                    }
                },
                set: _set,
                status: _status,
                inc: _inc,
                complete: function() {
                    $animate || ($animate = $injector.get("$animate"));
                    $rootScope.$broadcast("cfpLoadingBar:completed");
                    _set(1);
                    $timeout.cancel(completeTimeout);
                    completeTimeout = $timeout(function() {
                        var promise = $animate.leave(loadingBarContainer, _completeAnimation);
                        promise && promise.then && promise.then(_completeAnimation);
                        $animate.leave(spinner);
                    }, 500);
                },
                includeSpinner: this.includeSpinner,
                latencyThreshold: this.latencyThreshold,
                parentSelector: this.parentSelector,
                startSize: this.startSize
            };
        } ];
    });
}();

!function() {
    "use strict";
    angular.module("angularjs-stripe-elements", []).provider("StripeElements", function() {
        this.apiKey = null;
        this.setAPIKey = function(apiKey) {
            this.apiKey = apiKey;
        };
        this.$get = function() {
            return Stripe(this.apiKey);
        };
    }).directive("stripeElementDecorator", function() {
        return {
            restrict: "A",
            link: function($scope, $element, $attr) {
                var $ctrl = $scope.$ctrl;
                $scope.$on("$destroy", function() {
                    $ctrl.instance.destroy();
                });
                $ctrl.instance.mount($element[0]);
            }
        };
    }).component("stripeElement", {
        template: "<div stripe-element-decorator></div>",
        controller: function() {},
        bindings: {
            instance: "<"
        }
    });
}();

var uiroutermetatags, duScrollDefaultEasing = function(x) {
    "use strict";
    return x < .5 ? Math.pow(2 * x, 2) / 2 : 1 - Math.pow(2 * (1 - x), 2) / 2;
}, duScroll = angular.module("duScroll", [ "duScroll.scrollspy", "duScroll.smoothScroll", "duScroll.scrollContainer", "duScroll.spyContext", "duScroll.scrollHelpers" ]).value("duScrollDuration", 350).value("duScrollSpyWait", 100).value("duScrollSpyRefreshInterval", 0).value("duScrollGreedy", !1).value("duScrollOffset", 0).value("duScrollEasing", duScrollDefaultEasing).value("duScrollCancelOnEvents", "scroll mousedown mousewheel touchmove keydown").value("duScrollBottomSpy", !1).value("duScrollActiveClass", "active");

"undefined" != typeof module && module && module.exports && (module.exports = duScroll);

angular.module("duScroll.scrollHelpers", [ "duScroll.requestAnimation" ]).run([ "$window", "$q", "cancelAnimation", "requestAnimation", "duScrollEasing", "duScrollDuration", "duScrollOffset", "duScrollCancelOnEvents", function($window, $q, cancelAnimation, requestAnimation, duScrollEasing, duScrollDuration, duScrollOffset, duScrollCancelOnEvents) {
    "use strict";
    var scrollAnimation, deferred, proto = {}, isDocument = function(el) {
        return "undefined" != typeof HTMLDocument && el instanceof HTMLDocument || el.nodeType && el.nodeType === el.DOCUMENT_NODE;
    }, isElement = function(el) {
        return "undefined" != typeof HTMLElement && el instanceof HTMLElement || el.nodeType && el.nodeType === el.ELEMENT_NODE;
    }, unwrap = function(el) {
        return isElement(el) || isDocument(el) ? el : el[0];
    };
    proto.duScrollTo = function(left, top, duration, easing) {
        var aliasFn;
        angular.isElement(left) ? aliasFn = this.duScrollToElement : angular.isDefined(duration) && (aliasFn = this.duScrollToAnimated);
        if (aliasFn) return aliasFn.apply(this, arguments);
        var el = unwrap(this);
        if (isDocument(el)) return $window.scrollTo(left, top);
        el.scrollLeft = left;
        el.scrollTop = top;
    };
    proto.duScrollToAnimated = function(left, top, duration, easing) {
        duration && !easing && (easing = duScrollEasing);
        var startLeft = this.duScrollLeft(), startTop = this.duScrollTop(), deltaLeft = Math.round(left - startLeft), deltaTop = Math.round(top - startTop), startTime = null, progress = 0, el = this, cancelScrollAnimation = function($event) {
            if (!$event || progress && 0 < $event.which) {
                duScrollCancelOnEvents && el.unbind(duScrollCancelOnEvents, cancelScrollAnimation);
                cancelAnimation(scrollAnimation);
                deferred.reject();
                scrollAnimation = null;
            }
        };
        scrollAnimation && cancelScrollAnimation();
        deferred = $q.defer();
        if (0 === duration || !deltaLeft && !deltaTop) {
            0 === duration && el.duScrollTo(left, top);
            deferred.resolve();
            return deferred.promise;
        }
        var animationStep = function(timestamp) {
            null === startTime && (startTime = timestamp);
            var percent = duration <= (progress = timestamp - startTime) ? 1 : easing(progress / duration);
            el.scrollTo(startLeft + Math.ceil(deltaLeft * percent), startTop + Math.ceil(deltaTop * percent));
            if (percent < 1) scrollAnimation = requestAnimation(animationStep); else {
                duScrollCancelOnEvents && el.unbind(duScrollCancelOnEvents, cancelScrollAnimation);
                scrollAnimation = null;
                deferred.resolve();
            }
        };
        el.duScrollTo(startLeft, startTop);
        duScrollCancelOnEvents && el.bind(duScrollCancelOnEvents, cancelScrollAnimation);
        scrollAnimation = requestAnimation(animationStep);
        return deferred.promise;
    };
    proto.duScrollToElement = function(target, offset, duration, easing) {
        var el = unwrap(this);
        angular.isNumber(offset) && !isNaN(offset) || (offset = duScrollOffset);
        var top = this.duScrollTop() + unwrap(target).getBoundingClientRect().top - offset;
        isElement(el) && (top -= el.getBoundingClientRect().top);
        return this.duScrollTo(0, top, duration, easing);
    };
    proto.duScrollLeft = function(value, duration, easing) {
        if (angular.isNumber(value)) return this.duScrollTo(value, this.duScrollTop(), duration, easing);
        var el = unwrap(this);
        return isDocument(el) ? $window.scrollX || document.documentElement.scrollLeft || document.body.scrollLeft : el.scrollLeft;
    };
    proto.duScrollTop = function(value, duration, easing) {
        if (angular.isNumber(value)) return this.duScrollTo(this.duScrollLeft(), value, duration, easing);
        var el = unwrap(this);
        return isDocument(el) ? $window.scrollY || document.documentElement.scrollTop || document.body.scrollTop : el.scrollTop;
    };
    proto.duScrollToElementAnimated = function(target, offset, duration, easing) {
        return this.duScrollToElement(target, offset, duration || duScrollDuration, easing);
    };
    proto.duScrollTopAnimated = function(top, duration, easing) {
        return this.duScrollTop(top, duration || duScrollDuration, easing);
    };
    proto.duScrollLeftAnimated = function(left, duration, easing) {
        return this.duScrollLeft(left, duration || duScrollDuration, easing);
    };
    angular.forEach(proto, function(fn, key) {
        angular.element.prototype[key] = fn;
        var unprefixed = key.replace(/^duScroll/, "scroll");
        angular.isUndefined(angular.element.prototype[unprefixed]) && (angular.element.prototype[unprefixed] = fn);
    });
} ]);

angular.module("duScroll.polyfill", []).factory("polyfill", [ "$window", function($window) {
    "use strict";
    var vendors = [ "webkit", "moz", "o", "ms" ];
    return function(fnName, fallback) {
        if ($window[fnName]) return $window[fnName];
        for (var key, suffix = fnName.substr(0, 1).toUpperCase() + fnName.substr(1), i = 0; i < vendors.length; i++) if ($window[key = vendors[i] + suffix]) return $window[key];
        return fallback;
    };
} ]);

angular.module("duScroll.requestAnimation", [ "duScroll.polyfill" ]).factory("requestAnimation", [ "polyfill", "$timeout", function(polyfill, $timeout) {
    "use strict";
    var lastTime = 0;
    return polyfill("requestAnimationFrame", function(callback, element) {
        var currTime = new Date().getTime(), timeToCall = Math.max(0, 16 - (currTime - lastTime)), id = $timeout(function() {
            callback(currTime + timeToCall);
        }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
    });
} ]).factory("cancelAnimation", [ "polyfill", "$timeout", function(polyfill, $timeout) {
    "use strict";
    return polyfill("cancelAnimationFrame", function(promise) {
        $timeout.cancel(promise);
    });
} ]);

angular.module("duScroll.spyAPI", [ "duScroll.scrollContainerAPI" ]).factory("spyAPI", [ "$rootScope", "$timeout", "$interval", "$window", "$document", "scrollContainerAPI", "duScrollGreedy", "duScrollSpyWait", "duScrollSpyRefreshInterval", "duScrollBottomSpy", "duScrollActiveClass", function($rootScope, $timeout, $interval, $window, $document, scrollContainerAPI, duScrollGreedy, duScrollSpyWait, duScrollSpyRefreshInterval, duScrollBottomSpy, duScrollActiveClass) {
    "use strict";
    var contexts = {}, createContext = function($scope) {
        var id = $scope.$id, context = {
            spies: []
        };
        context.handler = function(context) {
            var timer = !1, queued = !1, handler = function() {
                queued = !1;
                var bottomReached, containerEl = context.container[0], containerOffset = 0;
                if ("undefined" != typeof HTMLElement && containerEl instanceof HTMLElement || containerEl.nodeType && containerEl.nodeType === containerEl.ELEMENT_NODE) {
                    containerOffset = containerEl.getBoundingClientRect().top;
                    bottomReached = Math.round(containerEl.scrollTop + containerEl.clientHeight) >= containerEl.scrollHeight;
                } else {
                    var documentScrollHeight = $document[0].body.scrollHeight || $document[0].documentElement.scrollHeight;
                    bottomReached = Math.round($window.pageYOffset + $window.innerHeight) >= documentScrollHeight;
                }
                var i, currentlyActive, toBeActive, spies, spy, pos, compareProperty = duScrollBottomSpy && bottomReached ? "bottom" : "top";
                spies = context.spies;
                currentlyActive = context.currentlyActive;
                toBeActive = void 0;
                for (i = 0; i < spies.length; i++) (pos = (spy = spies[i]).getTargetPosition()) && spy.$element && (duScrollBottomSpy && bottomReached || pos.top + spy.offset - containerOffset < 20 && (duScrollGreedy || -1 * pos.top + containerOffset) < pos.height) && (!toBeActive || toBeActive[compareProperty] < pos[compareProperty]) && ((toBeActive = {
                    spy: spy
                })[compareProperty] = pos[compareProperty]);
                toBeActive && (toBeActive = toBeActive.spy);
                if (currentlyActive !== toBeActive && (!duScrollGreedy || toBeActive)) {
                    if (currentlyActive && currentlyActive.$element) {
                        currentlyActive.$element.removeClass(duScrollActiveClass);
                        $rootScope.$broadcast("duScrollspy:becameInactive", currentlyActive.$element, angular.element(currentlyActive.getTargetElement()));
                    }
                    if (toBeActive) {
                        toBeActive.$element.addClass(duScrollActiveClass);
                        $rootScope.$broadcast("duScrollspy:becameActive", toBeActive.$element, angular.element(toBeActive.getTargetElement()));
                    }
                    context.currentlyActive = toBeActive;
                }
            };
            return duScrollSpyWait ? function() {
                if (timer) queued = !0; else {
                    handler();
                    timer = $timeout(function() {
                        timer = !1;
                        queued && handler();
                    }, duScrollSpyWait, !1);
                }
            } : handler;
        }(context);
        contexts[id] = context;
        $scope.$on("$destroy", function() {
            destroyContext($scope);
        });
        return id;
    }, destroyContext = function($scope) {
        var id = $scope.$id, context = contexts[id], container = context.container;
        context.intervalPromise && $interval.cancel(context.intervalPromise);
        container && container.off("scroll", context.handler);
        delete contexts[id];
    }, defaultContextId = createContext($rootScope), getContextForScope = function(scope) {
        return contexts[scope.$id] ? contexts[scope.$id] : scope.$parent ? getContextForScope(scope.$parent) : contexts[defaultContextId];
    }, getContextForSpy = function(spy) {
        var context, contextId, scope = spy.$scope;
        if (scope) return getContextForScope(scope);
        for (contextId in contexts) if (-1 !== (context = contexts[contextId]).spies.indexOf(spy)) return context;
    };
    return {
        addSpy: function(spy) {
            var context = getContextForSpy(spy);
            if (context) {
                context.spies.push(spy);
                if (!context.container || !function(element) {
                    for (;element.parentNode; ) if ((element = element.parentNode) === document) return !0;
                    return !1;
                }(context.container)) {
                    context.container && context.container.off("scroll", context.handler);
                    context.container = scrollContainerAPI.getContainer(spy.$scope);
                    duScrollSpyRefreshInterval && !context.intervalPromise && (context.intervalPromise = $interval(context.handler, duScrollSpyRefreshInterval, 0, !1));
                    context.container.on("scroll", context.handler).triggerHandler("scroll");
                }
            }
        },
        removeSpy: function(spy) {
            var context = getContextForSpy(spy);
            if (spy === context.currentlyActive) {
                $rootScope.$broadcast("duScrollspy:becameInactive", context.currentlyActive.$element);
                context.currentlyActive = null;
            }
            var i = context.spies.indexOf(spy);
            -1 !== i && context.spies.splice(i, 1);
            spy.$element = null;
        },
        createContext: createContext,
        destroyContext: destroyContext,
        getContextForScope: getContextForScope
    };
} ]);

angular.module("duScroll.scrollContainerAPI", []).factory("scrollContainerAPI", [ "$document", function($document) {
    "use strict";
    var containers = {}, getContainerId = function(scope) {
        return containers[scope.$id] ? scope.$id : scope.$parent ? getContainerId(scope.$parent) : void 0;
    };
    return {
        getContainerId: getContainerId,
        getContainer: function(scope) {
            var id = getContainerId(scope);
            return id ? containers[id] : $document;
        },
        setContainer: function(scope, element) {
            var id = scope.$id;
            containers[id] = element;
            return id;
        },
        removeContainer: function(scope) {
            var id = getContainerId(scope);
            id && delete containers[id];
        }
    };
} ]);

angular.module("duScroll.smoothScroll", [ "duScroll.scrollHelpers", "duScroll.scrollContainerAPI" ]).directive("duSmoothScroll", [ "duScrollDuration", "duScrollOffset", "scrollContainerAPI", function(duScrollDuration, duScrollOffset, scrollContainerAPI) {
    "use strict";
    return {
        link: function($scope, $element, $attr) {
            $element.on("click", function(e) {
                if ($attr.href && -1 !== $attr.href.indexOf("#") || "" !== $attr.duSmoothScroll) {
                    var id = $attr.href ? $attr.href.replace(/.*(?=#[^\s]+$)/, "").substring(1) : $attr.duSmoothScroll, target = document.getElementById(id) || document.getElementsByName(id)[0];
                    if (target && target.getBoundingClientRect) {
                        e.stopPropagation && e.stopPropagation();
                        e.preventDefault && e.preventDefault();
                        var offset = $attr.offset ? parseInt($attr.offset, 10) : duScrollOffset, duration = $attr.duration ? parseInt($attr.duration, 10) : duScrollDuration;
                        scrollContainerAPI.getContainer($scope).duScrollToElement(angular.element(target), isNaN(offset) ? 0 : offset, isNaN(duration) ? 0 : duration);
                    }
                }
            });
        }
    };
} ]);

angular.module("duScroll.spyContext", [ "duScroll.spyAPI" ]).directive("duSpyContext", [ "spyAPI", function(spyAPI) {
    "use strict";
    return {
        restrict: "A",
        scope: !0,
        compile: function(tElement, tAttrs, transclude) {
            return {
                pre: function($scope, iElement, iAttrs, controller) {
                    spyAPI.createContext($scope);
                }
            };
        }
    };
} ]);

angular.module("duScroll.scrollContainer", [ "duScroll.scrollContainerAPI" ]).directive("duScrollContainer", [ "scrollContainerAPI", function(scrollContainerAPI) {
    "use strict";
    return {
        restrict: "A",
        scope: !0,
        compile: function(tElement, tAttrs, transclude) {
            return {
                pre: function($scope, iElement, iAttrs, controller) {
                    iAttrs.$observe("duScrollContainer", function(element) {
                        angular.isString(element) && (element = document.getElementById(element));
                        element = angular.isElement(element) ? angular.element(element) : iElement;
                        scrollContainerAPI.setContainer($scope, element);
                        $scope.$on("$destroy", function() {
                            scrollContainerAPI.removeContainer($scope);
                        });
                    });
                }
            };
        }
    };
} ]);

angular.module("duScroll.scrollspy", [ "duScroll.spyAPI" ]).directive("duScrollspy", [ "spyAPI", "duScrollOffset", "$timeout", "$rootScope", function(spyAPI, duScrollOffset, $timeout, $rootScope) {
    "use strict";
    var Spy = function(targetElementOrId, $scope, $element, offset) {
        angular.isElement(targetElementOrId) ? this.target = targetElementOrId : angular.isString(targetElementOrId) && (this.targetId = targetElementOrId);
        this.$scope = $scope;
        this.$element = $element;
        this.offset = offset;
    };
    Spy.prototype.getTargetElement = function() {
        !this.target && this.targetId && (this.target = document.getElementById(this.targetId) || document.getElementsByName(this.targetId)[0]);
        return this.target;
    };
    Spy.prototype.getTargetPosition = function() {
        var target = this.getTargetElement();
        if (target) return target.getBoundingClientRect();
    };
    Spy.prototype.flushTargetCache = function() {
        this.targetId && (this.target = void 0);
    };
    return {
        link: function($scope, $element, $attr) {
            var targetId, href = $attr.ngHref || $attr.href;
            href && -1 !== href.indexOf("#") ? targetId = href.replace(/.*(?=#[^\s]+$)/, "").substring(1) : $attr.duScrollspy ? targetId = $attr.duScrollspy : $attr.duSmoothScroll && (targetId = $attr.duSmoothScroll);
            if (targetId) {
                var timeoutPromise = $timeout(function() {
                    var spy = new Spy(targetId, $scope, $element, -($attr.offset ? parseInt($attr.offset, 10) : duScrollOffset));
                    spyAPI.addSpy(spy);
                    $scope.$on("$locationChangeSuccess", spy.flushTargetCache.bind(spy));
                    var deregisterOnStateChange = $rootScope.$on("$stateChangeSuccess", spy.flushTargetCache.bind(spy));
                    $scope.$on("$destroy", function() {
                        spyAPI.removeSpy(spy);
                        deregisterOnStateChange();
                    });
                }, 0, !1);
                $scope.$on("$destroy", function() {
                    $timeout.cancel(timeoutPromise);
                });
            }
        }
    };
} ]);

!function(window, angular, undefined) {
    "use strict";
    var isDefined = angular.isDefined, isUndefined = angular.isUndefined, isNumber = angular.isNumber, isObject = angular.isObject, isArray = angular.isArray, extend = angular.extend, toJson = angular.toJson;
    angular.module("LocalStorageModule", []).provider("localStorageService", function() {
        this.prefix = "ls";
        this.storageType = "localStorage";
        this.cookie = {
            expiry: 30,
            path: "/"
        };
        this.notify = {
            setItem: !0,
            removeItem: !1
        };
        this.setPrefix = function(prefix) {
            this.prefix = prefix;
            return this;
        };
        this.setStorageType = function(storageType) {
            this.storageType = storageType;
            return this;
        };
        this.setStorageCookie = function(exp, path) {
            this.cookie.expiry = exp;
            this.cookie.path = path;
            return this;
        };
        this.setStorageCookieDomain = function(domain) {
            this.cookie.domain = domain;
            return this;
        };
        this.setNotify = function(itemSet, itemRemove) {
            this.notify = {
                setItem: itemSet,
                removeItem: itemRemove
            };
            return this;
        };
        this.$get = [ "$rootScope", "$window", "$document", "$parse", function($rootScope, $window, $document, $parse) {
            var webStorage, self = this, prefix = self.prefix, cookie = self.cookie, notify = self.notify, storageType = self.storageType;
            $document ? $document[0] && ($document = $document[0]) : $document = document;
            "." !== prefix.substr(-1) && (prefix = prefix ? prefix + "." : "");
            var deriveQualifiedKey = function(key) {
                return prefix + key;
            }, browserSupportsLocalStorage = function() {
                try {
                    var supported = storageType in $window && null !== $window[storageType], key = deriveQualifiedKey("__" + Math.round(1e7 * Math.random()));
                    if (supported) {
                        (webStorage = $window[storageType]).setItem(key, "");
                        webStorage.removeItem(key);
                    }
                    return supported;
                } catch (e) {
                    storageType = "cookie";
                    $rootScope.$broadcast("LocalStorageModule.notification.error", e.message);
                    return !1;
                }
            }(), addToLocalStorage = function(key, value) {
                value = isUndefined(value) ? null : toJson(value);
                if (!browserSupportsLocalStorage || "cookie" === self.storageType) {
                    browserSupportsLocalStorage || $rootScope.$broadcast("LocalStorageModule.notification.warning", "LOCAL_STORAGE_NOT_SUPPORTED");
                    notify.setItem && $rootScope.$broadcast("LocalStorageModule.notification.setitem", {
                        key: key,
                        newvalue: value,
                        storageType: "cookie"
                    });
                    return addToCookies(key, value);
                }
                try {
                    webStorage && webStorage.setItem(deriveQualifiedKey(key), value);
                    notify.setItem && $rootScope.$broadcast("LocalStorageModule.notification.setitem", {
                        key: key,
                        newvalue: value,
                        storageType: self.storageType
                    });
                } catch (e) {
                    $rootScope.$broadcast("LocalStorageModule.notification.error", e.message);
                    return addToCookies(key, value);
                }
                return !0;
            }, getFromLocalStorage = function(key) {
                if (!browserSupportsLocalStorage || "cookie" === self.storageType) {
                    browserSupportsLocalStorage || $rootScope.$broadcast("LocalStorageModule.notification.warning", "LOCAL_STORAGE_NOT_SUPPORTED");
                    return getFromCookies(key);
                }
                var item = webStorage ? webStorage.getItem(deriveQualifiedKey(key)) : null;
                if (!item || "null" === item) return null;
                try {
                    return JSON.parse(item);
                } catch (e) {
                    return item;
                }
            }, removeFromLocalStorage = function() {
                var i, key;
                for (i = 0; i < arguments.length; i++) {
                    key = arguments[i];
                    if (browserSupportsLocalStorage && "cookie" !== self.storageType) try {
                        webStorage.removeItem(deriveQualifiedKey(key));
                        notify.removeItem && $rootScope.$broadcast("LocalStorageModule.notification.removeitem", {
                            key: key,
                            storageType: self.storageType
                        });
                    } catch (e) {
                        $rootScope.$broadcast("LocalStorageModule.notification.error", e.message);
                        removeFromCookies(key);
                    } else {
                        browserSupportsLocalStorage || $rootScope.$broadcast("LocalStorageModule.notification.warning", "LOCAL_STORAGE_NOT_SUPPORTED");
                        notify.removeItem && $rootScope.$broadcast("LocalStorageModule.notification.removeitem", {
                            key: key,
                            storageType: "cookie"
                        });
                        removeFromCookies(key);
                    }
                }
            }, browserSupportsCookies = function() {
                try {
                    return $window.navigator.cookieEnabled || "cookie" in $document && (0 < $document.cookie.length || -1 < ($document.cookie = "test").indexOf.call($document.cookie, "test"));
                } catch (e) {
                    $rootScope.$broadcast("LocalStorageModule.notification.error", e.message);
                    return !1;
                }
            }(), addToCookies = function(key, value, daysToExpiry) {
                if (isUndefined(value)) return !1;
                (isArray(value) || isObject(value)) && (value = toJson(value));
                if (!browserSupportsCookies) {
                    $rootScope.$broadcast("LocalStorageModule.notification.error", "COOKIES_NOT_SUPPORTED");
                    return !1;
                }
                try {
                    var expiry = "", expiryDate = new Date(), cookieDomain = "";
                    if (null === value) {
                        expiryDate.setTime(expiryDate.getTime() + -864e5);
                        expiry = "; expires=" + expiryDate.toGMTString();
                        value = "";
                    } else if (isNumber(daysToExpiry) && 0 !== daysToExpiry) {
                        expiryDate.setTime(expiryDate.getTime() + 24 * daysToExpiry * 60 * 60 * 1e3);
                        expiry = "; expires=" + expiryDate.toGMTString();
                    } else if (0 !== cookie.expiry) {
                        expiryDate.setTime(expiryDate.getTime() + 24 * cookie.expiry * 60 * 60 * 1e3);
                        expiry = "; expires=" + expiryDate.toGMTString();
                    }
                    if (key) {
                        var cookiePath = "; path=" + cookie.path;
                        cookie.domain && (cookieDomain = "; domain=" + cookie.domain);
                        $document.cookie = deriveQualifiedKey(key) + "=" + encodeURIComponent(value) + expiry + cookiePath + cookieDomain;
                    }
                } catch (e) {
                    $rootScope.$broadcast("LocalStorageModule.notification.error", e.message);
                    return !1;
                }
                return !0;
            }, getFromCookies = function(key) {
                if (!browserSupportsCookies) {
                    $rootScope.$broadcast("LocalStorageModule.notification.error", "COOKIES_NOT_SUPPORTED");
                    return !1;
                }
                for (var cookies = $document.cookie && $document.cookie.split(";") || [], i = 0; i < cookies.length; i++) {
                    for (var thisCookie = cookies[i]; " " === thisCookie.charAt(0); ) thisCookie = thisCookie.substring(1, thisCookie.length);
                    if (0 === thisCookie.indexOf(deriveQualifiedKey(key) + "=")) {
                        var storedValues = decodeURIComponent(thisCookie.substring(prefix.length + key.length + 1, thisCookie.length));
                        try {
                            return JSON.parse(storedValues);
                        } catch (e) {
                            return storedValues;
                        }
                    }
                }
                return null;
            }, removeFromCookies = function(key) {
                addToCookies(key, null);
            }, clearAllFromCookies = function() {
                for (var thisCookie = null, prefixLength = prefix.length, cookies = $document.cookie.split(";"), i = 0; i < cookies.length; i++) {
                    thisCookie = cookies[i];
                    for (;" " === thisCookie.charAt(0); ) thisCookie = thisCookie.substring(1, thisCookie.length);
                    var key = thisCookie.substring(prefixLength, thisCookie.indexOf("="));
                    removeFromCookies(key);
                }
            };
            return {
                isSupported: browserSupportsLocalStorage,
                getStorageType: function() {
                    return storageType;
                },
                set: addToLocalStorage,
                add: addToLocalStorage,
                get: getFromLocalStorage,
                keys: function() {
                    if (!browserSupportsLocalStorage) {
                        $rootScope.$broadcast("LocalStorageModule.notification.warning", "LOCAL_STORAGE_NOT_SUPPORTED");
                        return !1;
                    }
                    var prefixLength = prefix.length, keys = [];
                    for (var key in webStorage) if (key.substr(0, prefixLength) === prefix) try {
                        keys.push(key.substr(prefixLength));
                    } catch (e) {
                        $rootScope.$broadcast("LocalStorageModule.notification.error", e.Description);
                        return [];
                    }
                    return keys;
                },
                remove: removeFromLocalStorage,
                clearAll: function(regularExpression) {
                    var prefixRegex = prefix ? new RegExp("^" + prefix) : new RegExp(), testRegex = regularExpression ? new RegExp(regularExpression) : new RegExp();
                    if (!browserSupportsLocalStorage || "cookie" === self.storageType) {
                        browserSupportsLocalStorage || $rootScope.$broadcast("LocalStorageModule.notification.warning", "LOCAL_STORAGE_NOT_SUPPORTED");
                        return clearAllFromCookies();
                    }
                    var prefixLength = prefix.length;
                    for (var key in webStorage) if (prefixRegex.test(key) && testRegex.test(key.substr(prefixLength))) try {
                        removeFromLocalStorage(key.substr(prefixLength));
                    } catch (e) {
                        $rootScope.$broadcast("LocalStorageModule.notification.error", e.message);
                        return clearAllFromCookies();
                    }
                    return !0;
                },
                bind: function(scope, key, def, lsKey) {
                    var value = getFromLocalStorage(lsKey = lsKey || key);
                    null === value && isDefined(def) ? value = def : isObject(value) && isObject(def) && (value = extend(def, value));
                    $parse(key).assign(scope, value);
                    return scope.$watch(key, function(newVal) {
                        addToLocalStorage(lsKey, newVal);
                    }, isObject(scope[key]));
                },
                deriveKey: deriveQualifiedKey,
                length: function() {
                    for (var count = 0, storage = $window[storageType], i = 0; i < storage.length; i++) 0 === storage.key(i).indexOf(prefix) && count++;
                    return count;
                },
                cookie: {
                    isSupported: browserSupportsCookies,
                    set: addToCookies,
                    add: addToCookies,
                    get: getFromCookies,
                    remove: removeFromCookies,
                    clearAll: clearAllFromCookies
                }
            };
        } ];
    });
}(window, window.angular);

"undefined" != typeof module && "undefined" != typeof exports && module.exports === exports && (module.exports = "ui.router");

!function(window, angular, undefined) {
    "use strict";
    var $$UMFP, isDefined = angular.isDefined, isFunction = angular.isFunction, isString = angular.isString, isObject = angular.isObject, isArray = angular.isArray, forEach = angular.forEach, extend = angular.extend, copy = angular.copy, toJson = angular.toJson;
    function inherit(parent, extra) {
        return extend(new (extend(function() {}, {
            prototype: parent
        }))(), extra);
    }
    function merge(dst) {
        forEach(arguments, function(obj) {
            obj !== dst && forEach(obj, function(value, key) {
                dst.hasOwnProperty(key) || (dst[key] = value);
            });
        });
        return dst;
    }
    function objectKeys(object) {
        if (Object.keys) return Object.keys(object);
        var result = [];
        forEach(object, function(val, key) {
            result.push(key);
        });
        return result;
    }
    function indexOf(array, value) {
        if (Array.prototype.indexOf) return array.indexOf(value, Number(arguments[2]) || 0);
        var len = array.length >>> 0, from = Number(arguments[2]) || 0;
        (from = from < 0 ? Math.ceil(from) : Math.floor(from)) < 0 && (from += len);
        for (;from < len; from++) if (from in array && array[from] === value) return from;
        return -1;
    }
    function inheritParams(currentParams, newParams, $current, $to) {
        var parentParams, parents = function(first, second) {
            var path = [];
            for (var n in first.path) {
                if (first.path[n] !== second.path[n]) break;
                path.push(first.path[n]);
            }
            return path;
        }($current, $to), inherited = {}, inheritList = [];
        for (var i in parents) if (parents[i] && parents[i].params && (parentParams = objectKeys(parents[i].params)).length) for (var j in parentParams) if (!(0 <= indexOf(inheritList, parentParams[j]))) {
            inheritList.push(parentParams[j]);
            inherited[parentParams[j]] = currentParams[parentParams[j]];
        }
        return extend({}, inherited, newParams);
    }
    function filterByKeys(keys, values) {
        var filtered = {};
        forEach(keys, function(name) {
            filtered[name] = values[name];
        });
        return filtered;
    }
    function pick(obj) {
        var copy = {}, keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
        forEach(keys, function(key) {
            key in obj && (copy[key] = obj[key]);
        });
        return copy;
    }
    function omit(obj) {
        var copy = {}, keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
        for (var key in obj) -1 == indexOf(keys, key) && (copy[key] = obj[key]);
        return copy;
    }
    function filter(collection, callback) {
        var array = isArray(collection), result = array ? [] : {};
        forEach(collection, function(val, i) {
            callback(val, i) && (result[array ? result.length : i] = val);
        });
        return result;
    }
    function map(collection, callback) {
        var result = isArray(collection) ? [] : {};
        forEach(collection, function(val, i) {
            result[i] = callback(val, i);
        });
        return result;
    }
    function silenceUncaughtInPromise(promise) {
        return promise.then(undefined, function() {}) && promise;
    }
    angular.module("ui.router.util", [ "ng" ]);
    angular.module("ui.router.router", [ "ui.router.util" ]);
    angular.module("ui.router.state", [ "ui.router.router", "ui.router.util" ]);
    angular.module("ui.router", [ "ui.router.state" ]);
    angular.module("ui.router.compat", [ "ui.router" ]);
    $Resolve.$inject = [ "$q", "$injector" ];
    function $Resolve($q, $injector) {
        var NOTHING = {}, NO_DEPENDENCIES = [], NO_LOCALS = NOTHING, NO_PARENT = extend($q.when(NOTHING), {
            $$promises: NOTHING,
            $$values: NOTHING
        });
        this.study = function(invocables) {
            if (!isObject(invocables)) throw new Error("'invocables' must be an object");
            var invocableKeys = objectKeys(invocables || {}), plan = [], cycle = [], visited = {};
            forEach(invocables, function visit(value, key) {
                if (2 !== visited[key]) {
                    cycle.push(key);
                    if (1 === visited[key]) {
                        cycle.splice(0, indexOf(cycle, key));
                        throw new Error("Cyclic dependency: " + cycle.join(" -> "));
                    }
                    visited[key] = 1;
                    if (isString(value)) plan.push(key, [ function() {
                        return $injector.get(value);
                    } ], NO_DEPENDENCIES); else {
                        var params = $injector.annotate(value);
                        forEach(params, function(param) {
                            param !== key && invocables.hasOwnProperty(param) && visit(invocables[param], param);
                        });
                        plan.push(key, value, params);
                    }
                    cycle.pop();
                    visited[key] = 2;
                }
            });
            invocables = cycle = visited = null;
            function isResolve(value) {
                return isObject(value) && value.then && value.$$promises;
            }
            return function(locals, parent, self) {
                if (isResolve(locals) && self === undefined) {
                    self = parent;
                    parent = locals;
                    locals = null;
                }
                if (locals) {
                    if (!isObject(locals)) throw new Error("'locals' must be an object");
                } else locals = NO_LOCALS;
                if (parent) {
                    if (!isResolve(parent)) throw new Error("'parent' must be a promise returned by $resolve.resolve()");
                } else parent = NO_PARENT;
                var resolution = $q.defer(), result = silenceUncaughtInPromise(resolution.promise), promises = result.$$promises = {}, values = extend({}, locals), wait = 1 + plan.length / 3, merged = !1;
                silenceUncaughtInPromise(result);
                function done() {
                    if (!--wait) {
                        merged || merge(values, parent.$$values);
                        result.$$values = values;
                        result.$$promises = result.$$promises || !0;
                        delete result.$$inheritedValues;
                        resolution.resolve(values);
                    }
                }
                function fail(reason) {
                    result.$$failure = reason;
                    resolution.reject(reason);
                }
                if (isDefined(parent.$$failure)) {
                    fail(parent.$$failure);
                    return result;
                }
                parent.$$inheritedValues && merge(values, omit(parent.$$inheritedValues, invocableKeys));
                extend(promises, parent.$$promises);
                if (parent.$$values) {
                    merged = merge(values, omit(parent.$$values, invocableKeys));
                    result.$$inheritedValues = omit(parent.$$values, invocableKeys);
                    done();
                } else {
                    parent.$$inheritedValues && (result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys));
                    parent.then(done, fail);
                }
                for (var i = 0, ii = plan.length; i < ii; i += 3) locals.hasOwnProperty(plan[i]) ? done() : invoke(plan[i], plan[i + 1], plan[i + 2]);
                function invoke(key, invocable, params) {
                    var invocation = $q.defer(), waitParams = 0;
                    function onfailure(reason) {
                        invocation.reject(reason);
                        fail(reason);
                    }
                    forEach(params, function(dep) {
                        if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
                            waitParams++;
                            promises[dep].then(function(result) {
                                values[dep] = result;
                                --waitParams || proceed();
                            }, onfailure);
                        }
                    });
                    waitParams || proceed();
                    function proceed() {
                        if (!isDefined(result.$$failure)) try {
                            invocation.resolve($injector.invoke(invocable, self, values));
                            invocation.promise.then(function(result) {
                                values[key] = result;
                                done();
                            }, onfailure);
                        } catch (e) {
                            onfailure(e);
                        }
                    }
                    promises[key] = silenceUncaughtInPromise(invocation.promise);
                }
                return result;
            };
        };
        this.resolve = function(invocables, locals, parent, self) {
            return this.study(invocables)(locals, parent, self);
        };
    }
    angular.module("ui.router.util").service("$resolve", $Resolve);
    function TemplateFactory($http, $templateCache, $injector, shouldUnsafelyUseHttp) {
        this.fromConfig = function(config, params, locals) {
            return isDefined(config.template) ? this.fromString(config.template, params) : isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) : isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) : null;
        };
        this.fromString = function(template, params) {
            return isFunction(template) ? template(params) : template;
        };
        this.fromUrl = function(url, params) {
            isFunction(url) && (url = url(params));
            return null == url ? null : shouldUnsafelyUseHttp ? $http.get(url, {
                cache: $templateCache,
                headers: {
                    Accept: "text/html"
                }
            }).then(function(response) {
                return response.data;
            }) : $injector.get("$templateRequest")(url);
        };
        this.fromProvider = function(provider, params, locals) {
            return $injector.invoke(provider, null, locals || {
                params: params
            });
        };
    }
    angular.module("ui.router.util").provider("$templateFactory", function() {
        var shouldUnsafelyUseHttp = angular.version.minor < 3;
        this.shouldUnsafelyUseHttp = function(value) {
            shouldUnsafelyUseHttp = !!value;
        };
        this.$get = [ "$http", "$templateCache", "$injector", function($http, $templateCache, $injector) {
            return new TemplateFactory($http, $templateCache, $injector, shouldUnsafelyUseHttp);
        } ];
    });
    function UrlMatcher(pattern, config, parentMatcher) {
        config = extend({
            params: {}
        }, isObject(config) ? config : {});
        var m, p, param, segment, placeholder = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, searchPlaceholder = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, compiled = "^", last = 0, segments = this.segments = [], parentParams = parentMatcher ? parentMatcher.params : {}, params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(), paramNames = [];
        function addParameter(id, type, config, location) {
            paramNames.push(id);
            if (parentParams[id]) return parentParams[id];
            if (!/^\w+([-.]+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
            if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
            params[id] = new $$UMFP.Param(id, type, config, location);
            return params[id];
        }
        function quoteRegExp(string, pattern, squash, optional) {
            var surroundPattern = [ "", "" ], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
            if (!pattern) return result;
            switch (squash) {
              case !1:
                surroundPattern = [ "(", ")" + (optional ? "?" : "") ];
                break;

              case !0:
                result = result.replace(/\/$/, "");
                surroundPattern = [ "(?:/(", ")|/)?" ];
                break;

              default:
                surroundPattern = [ "(" + squash + "|", ")?" ];
            }
            return result + surroundPattern[0] + pattern + surroundPattern[1];
        }
        this.source = pattern;
        function matchDetails(m, isSearch) {
            var id, regexp, segment, type, cfg;
            id = m[2] || m[3];
            cfg = config.params[id];
            segment = pattern.substring(last, m.index);
            (regexp = isSearch ? m[4] : m[4] || ("*" == m[1] ? ".*" : null)) && (type = $$UMFP.type(regexp) || inherit($$UMFP.type("string"), {
                pattern: new RegExp(regexp, config.caseInsensitive ? "i" : undefined)
            }));
            return {
                id: id,
                regexp: regexp,
                segment: segment,
                type: type,
                cfg: cfg
            };
        }
        for (;(m = placeholder.exec(pattern)) && !(0 <= (p = matchDetails(m, !1)).segment.indexOf("?")); ) {
            param = addParameter(p.id, p.type, p.cfg, "path");
            compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);
            segments.push(p.segment);
            last = placeholder.lastIndex;
        }
        var i = (segment = pattern.substring(last)).indexOf("?");
        if (0 <= i) {
            var search = this.sourceSearch = segment.substring(i);
            segment = segment.substring(0, i);
            this.sourcePath = pattern.substring(0, last + i);
            if (0 < search.length) {
                last = 0;
                for (;m = searchPlaceholder.exec(search); ) {
                    param = addParameter((p = matchDetails(m, !0)).id, p.type, p.cfg, "search");
                    last = placeholder.lastIndex;
                }
            }
        } else {
            this.sourcePath = pattern;
            this.sourceSearch = "";
        }
        compiled += quoteRegExp(segment) + (!1 === config.strict ? "/?" : "") + "$";
        segments.push(segment);
        this.regexp = new RegExp(compiled, config.caseInsensitive ? "i" : undefined);
        this.prefix = segments[0];
        this.$$paramNames = paramNames;
    }
    UrlMatcher.prototype.concat = function(pattern, config) {
        var defaultConfig = {
            caseInsensitive: $$UMFP.caseInsensitive(),
            strict: $$UMFP.strictMode(),
            squash: $$UMFP.defaultSquashPolicy()
        };
        return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
    };
    UrlMatcher.prototype.toString = function() {
        return this.source;
    };
    UrlMatcher.prototype.exec = function(path, searchParams) {
        var m = this.regexp.exec(path);
        if (!m) return null;
        searchParams = searchParams || {};
        var i, j, paramName, param, paramVal, paramNames = this.parameters(), nTotal = paramNames.length, nPath = this.segments.length - 1, values = {};
        if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");
        function decodePathArray(string) {
            function reverseString(str) {
                return str.split("").reverse().join("");
            }
            return map(map(reverseString(string).split(/-(?!\\)/), reverseString), function(str) {
                return str.replace(/\\-/g, "-");
            }).reverse();
        }
        for (i = 0; i < nPath; i++) {
            paramName = paramNames[i];
            param = this.params[paramName];
            paramVal = m[i + 1];
            for (j = 0; j < param.replace.length; j++) param.replace[j].from === paramVal && (paramVal = param.replace[j].to);
            paramVal && !0 === param.array && (paramVal = decodePathArray(paramVal));
            isDefined(paramVal) && (paramVal = param.type.decode(paramVal));
            values[paramName] = param.value(paramVal);
        }
        for (;i < nTotal; i++) {
            values[paramName = paramNames[i]] = this.params[paramName].value(searchParams[paramName]);
            param = this.params[paramName];
            paramVal = searchParams[paramName];
            for (j = 0; j < param.replace.length; j++) param.replace[j].from === paramVal && (paramVal = param.replace[j].to);
            isDefined(paramVal) && (paramVal = param.type.decode(paramVal));
            values[paramName] = param.value(paramVal);
        }
        return values;
    };
    UrlMatcher.prototype.parameters = function(param) {
        return isDefined(param) ? this.params[param] || null : this.$$paramNames;
    };
    UrlMatcher.prototype.validates = function(params) {
        return this.params.$$validates(params);
    };
    UrlMatcher.prototype.format = function(values) {
        values = values || {};
        var segments = this.segments, params = this.parameters(), paramset = this.params;
        if (!this.validates(values)) return null;
        var i, search = !1, nPath = segments.length - 1, nTotal = params.length, result = segments[0];
        function encodeDashes(str) {
            return encodeURIComponent(str).replace(/-/g, function(c) {
                return "%5C%" + c.charCodeAt(0).toString(16).toUpperCase();
            });
        }
        for (i = 0; i < nTotal; i++) {
            var isPathParam = i < nPath, name = params[i], param = paramset[name], value = param.value(values[name]), isDefaultValue = param.isOptional && param.type.equals(param.value(), value), squash = !!isDefaultValue && param.squash, encoded = param.type.encode(value);
            if (isPathParam) {
                var nextSegment = segments[i + 1], isFinalPathParam = i + 1 === nPath;
                if (!1 === squash) {
                    null != encoded && (isArray(encoded) ? result += map(encoded, encodeDashes).join("-") : result += encodeURIComponent(encoded));
                    result += nextSegment;
                } else if (!0 === squash) {
                    var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
                    result += nextSegment.match(capture)[1];
                } else isString(squash) && (result += squash + nextSegment);
                isFinalPathParam && !0 === param.squash && "/" === result.slice(-1) && (result = result.slice(0, -1));
            } else {
                if (null == encoded || isDefaultValue && !1 !== squash) continue;
                isArray(encoded) || (encoded = [ encoded ]);
                if (0 === encoded.length) continue;
                result += (search ? "&" : "?") + name + "=" + (encoded = map(encoded, encodeURIComponent).join("&" + name + "="));
                search = !0;
            }
        }
        return result;
    };
    function Type(config) {
        extend(this, config);
    }
    Type.prototype.is = function(val, key) {
        return !0;
    };
    Type.prototype.encode = function(val, key) {
        return val;
    };
    Type.prototype.decode = function(val, key) {
        return val;
    };
    Type.prototype.equals = function(a, b) {
        return a == b;
    };
    Type.prototype.$subPattern = function() {
        var sub = this.pattern.toString();
        return sub.substr(1, sub.length - 2);
    };
    Type.prototype.pattern = /.*/;
    Type.prototype.toString = function() {
        return "{Type:" + this.name + "}";
    };
    Type.prototype.$normalize = function(val) {
        return this.is(val) ? val : this.decode(val);
    };
    Type.prototype.$asArray = function(mode, isSearch) {
        if (!mode) return this;
        if ("auto" === mode && !isSearch) throw new Error("'auto' array mode is for query parameters only");
        return new function(type, mode) {
            function bindTo(type, callbackName) {
                return function() {
                    return type[callbackName].apply(type, arguments);
                };
            }
            function arrayWrap(val) {
                return isArray(val) ? val : isDefined(val) ? [ val ] : [];
            }
            function falsey(val) {
                return !val;
            }
            function arrayHandler(callback, allTruthyMode) {
                return function(val) {
                    if (isArray(val) && 0 === val.length) return val;
                    var result = map(val = arrayWrap(val), callback);
                    return !0 === allTruthyMode ? 0 === filter(result, falsey).length : function(val) {
                        switch (val.length) {
                          case 0:
                            return undefined;

                          case 1:
                            return "auto" === mode ? val[0] : val;

                          default:
                            return val;
                        }
                    }(result);
                };
            }
            this.encode = arrayHandler(bindTo(type, "encode"));
            this.decode = arrayHandler(bindTo(type, "decode"));
            this.is = arrayHandler(bindTo(type, "is"), !0);
            this.equals = (callback = bindTo(type, "equals"), function(val1, val2) {
                var left = arrayWrap(val1), right = arrayWrap(val2);
                if (left.length !== right.length) return !1;
                for (var i = 0; i < left.length; i++) if (!callback(left[i], right[i])) return !1;
                return !0;
            });
            var callback;
            this.pattern = type.pattern;
            this.$normalize = arrayHandler(bindTo(type, "$normalize"));
            this.name = type.name;
            this.$arrayMode = mode;
        }(this, mode);
    };
    angular.module("ui.router.util").provider("$urlMatcherFactory", function $UrlMatcherFactory() {
        $$UMFP = this;
        var isCaseInsensitive = !1, isStrictMode = !0, defaultSquashPolicy = !1;
        function valToString(val) {
            return null != val ? val.toString().replace(/(~|\/)/g, function(m) {
                return {
                    "~": "~~",
                    "/": "~2F"
                }[m];
            }) : val;
        }
        var injector, $types = {}, enqueue = !0, typeQueue = [], defaultTypes = {
            string: {
                encode: valToString,
                decode: function(val) {
                    return null != val ? val.toString().replace(/(~~|~2F)/g, function(m) {
                        return {
                            "~~": "~",
                            "~2F": "/"
                        }[m];
                    }) : val;
                },
                is: function(val) {
                    return null == val || !isDefined(val) || "string" == typeof val;
                },
                pattern: /[^/]*/
            },
            int: {
                encode: valToString,
                decode: function(val) {
                    return parseInt(val, 10);
                },
                is: function(val) {
                    return val !== undefined && null !== val && this.decode(val.toString()) === val;
                },
                pattern: /\d+/
            },
            bool: {
                encode: function(val) {
                    return val ? 1 : 0;
                },
                decode: function(val) {
                    return 0 !== parseInt(val, 10);
                },
                is: function(val) {
                    return !0 === val || !1 === val;
                },
                pattern: /0|1/
            },
            date: {
                encode: function(val) {
                    return this.is(val) ? [ val.getFullYear(), ("0" + (val.getMonth() + 1)).slice(-2), ("0" + val.getDate()).slice(-2) ].join("-") : undefined;
                },
                decode: function(val) {
                    if (this.is(val)) return val;
                    var match = this.capture.exec(val);
                    return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
                },
                is: function(val) {
                    return val instanceof Date && !isNaN(val.valueOf());
                },
                equals: function(a, b) {
                    return this.is(a) && this.is(b) && a.toISOString() === b.toISOString();
                },
                pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
                capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
            },
            json: {
                encode: angular.toJson,
                decode: angular.fromJson,
                is: angular.isObject,
                equals: angular.equals,
                pattern: /[^/]*/
            },
            any: {
                encode: angular.identity,
                decode: angular.identity,
                equals: angular.equals,
                pattern: /.*/
            }
        };
        function isInjectable(value) {
            return isFunction(value) || isArray(value) && isFunction(value[value.length - 1]);
        }
        $UrlMatcherFactory.$$getDefaultValue = function(config) {
            if (!isInjectable(config.value)) return config.value;
            if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
            return injector.invoke(config.value);
        };
        this.caseInsensitive = function(value) {
            isDefined(value) && (isCaseInsensitive = value);
            return isCaseInsensitive;
        };
        this.strictMode = function(value) {
            isDefined(value) && (isStrictMode = value);
            return isStrictMode;
        };
        this.defaultSquashPolicy = function(value) {
            if (!isDefined(value)) return defaultSquashPolicy;
            if (!0 !== value && !1 !== value && !isString(value)) throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
            return defaultSquashPolicy = value;
        };
        this.compile = function(pattern, config) {
            return new UrlMatcher(pattern, extend({
                strict: isStrictMode,
                caseInsensitive: isCaseInsensitive
            }, config));
        };
        this.isMatcher = function(o) {
            if (!isObject(o)) return !1;
            var result = !0;
            forEach(UrlMatcher.prototype, function(val, name) {
                isFunction(val) && (result = result && isDefined(o[name]) && isFunction(o[name]));
            });
            return result;
        };
        this.type = function(name, definition, definitionFn) {
            if (!isDefined(definition)) return $types[name];
            if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");
            $types[name] = new Type(extend({
                name: name
            }, definition));
            if (definitionFn) {
                typeQueue.push({
                    name: name,
                    def: definitionFn
                });
                enqueue || flushTypeQueue();
            }
            return this;
        };
        function flushTypeQueue() {
            for (;typeQueue.length; ) {
                var type = typeQueue.shift();
                if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
                angular.extend($types[type.name], injector.invoke(type.def));
            }
        }
        forEach(defaultTypes, function(type, name) {
            $types[name] = new Type(extend({
                name: name
            }, type));
        });
        $types = inherit($types, {});
        this.$get = [ "$injector", function($injector) {
            injector = $injector;
            enqueue = !1;
            flushTypeQueue();
            forEach(defaultTypes, function(type, name) {
                $types[name] || ($types[name] = new Type(type));
            });
            return this;
        } ];
        this.Param = function(id, type, config, location) {
            var self = this;
            config = function(config) {
                var keys = isObject(config) ? objectKeys(config) : [];
                -1 === indexOf(keys, "value") && -1 === indexOf(keys, "type") && -1 === indexOf(keys, "squash") && -1 === indexOf(keys, "array") && (config = {
                    value: config
                });
                config.$$fn = isInjectable(config.value) ? config.value : function() {
                    return config.value;
                };
                return config;
            }(config);
            type = function(config, urlType, location) {
                if (config.type && urlType) throw new Error("Param '" + id + "' has two type configurations.");
                return urlType || (config.type ? angular.isString(config.type) ? $types[config.type] : config.type instanceof Type ? config.type : new Type(config.type) : "config" === location ? $types.any : $types.string);
            }(config, type, location);
            var arrayDefaults, arrayParamNomenclature, arrayMode = (arrayDefaults = {
                array: "search" === location && "auto"
            }, arrayParamNomenclature = id.match(/\[\]$/) ? {
                array: !0
            } : {}, extend(arrayDefaults, arrayParamNomenclature, config).array);
            "string" !== (type = arrayMode ? type.$asArray(arrayMode, "search" === location) : type).name || arrayMode || "path" !== location || config.value !== undefined || (config.value = "");
            var isOptional = config.value !== undefined, squash = function(config, isOptional) {
                var squash = config.squash;
                if (!isOptional || !1 === squash) return !1;
                if (!isDefined(squash) || null == squash) return defaultSquashPolicy;
                if (!0 === squash || isString(squash)) return squash;
                throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
            }(config, isOptional), replace = function(config, arrayMode, isOptional, squash) {
                var replace, configuredKeys, defaultPolicy = [ {
                    from: "",
                    to: isOptional || arrayMode ? undefined : ""
                }, {
                    from: null,
                    to: isOptional || arrayMode ? undefined : ""
                } ];
                replace = isArray(config.replace) ? config.replace : [];
                isString(squash) && replace.push({
                    from: squash,
                    to: undefined
                });
                configuredKeys = map(replace, function(item) {
                    return item.from;
                });
                return filter(defaultPolicy, function(item) {
                    return -1 === indexOf(configuredKeys, item.from);
                }).concat(replace);
            }(config, arrayMode, isOptional, squash);
            extend(this, {
                id: id,
                type: type,
                location: location,
                array: arrayMode,
                squash: squash,
                replace: replace,
                isOptional: isOptional,
                value: function(value) {
                    value = function(value) {
                        var val, replacement = map(filter(self.replace, (val = value, function(obj) {
                            return obj.from === val;
                        })), function(obj) {
                            return obj.to;
                        });
                        return replacement.length ? replacement[0] : value;
                    }(value);
                    return isDefined(value) ? self.type.$normalize(value) : function() {
                        if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
                        var defaultValue = injector.invoke(config.$$fn);
                        if (null !== defaultValue && defaultValue !== undefined && !self.type.is(defaultValue)) throw new Error("Default value (" + defaultValue + ") for parameter '" + self.id + "' is not an instance of Type (" + self.type.name + ")");
                        return defaultValue;
                    }();
                },
                dynamic: undefined,
                config: config,
                toString: function() {
                    return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}";
                }
            });
        };
        function ParamSet(params) {
            extend(this, params || {});
        }
        ParamSet.prototype = {
            $$new: function() {
                return inherit(this, extend(new ParamSet(), {
                    $$parent: this
                }));
            },
            $$keys: function() {
                for (var keys = [], chain = [], parent = this, ignore = objectKeys(ParamSet.prototype); parent; ) {
                    chain.push(parent);
                    parent = parent.$$parent;
                }
                chain.reverse();
                forEach(chain, function(paramset) {
                    forEach(objectKeys(paramset), function(key) {
                        -1 === indexOf(keys, key) && -1 === indexOf(ignore, key) && keys.push(key);
                    });
                });
                return keys;
            },
            $$values: function(paramValues) {
                var values = {}, self = this;
                forEach(self.$$keys(), function(key) {
                    values[key] = self[key].value(paramValues && paramValues[key]);
                });
                return values;
            },
            $$equals: function(paramValues1, paramValues2) {
                var equal = !0, self = this;
                forEach(self.$$keys(), function(key) {
                    var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
                    self[key].type.equals(left, right) || (equal = !1);
                });
                return equal;
            },
            $$validates: function(paramValues) {
                var i, param, rawVal, normalized, encoded, keys = this.$$keys();
                for (i = 0; i < keys.length; i++) {
                    param = this[keys[i]];
                    if (((rawVal = paramValues[keys[i]]) === undefined || null === rawVal) && param.isOptional) break;
                    normalized = param.type.$normalize(rawVal);
                    if (!param.type.is(normalized)) return !1;
                    encoded = param.type.encode(normalized);
                    if (angular.isString(encoded) && !param.type.pattern.exec(encoded)) return !1;
                }
                return !0;
            },
            $$parent: undefined
        };
        this.ParamSet = ParamSet;
    });
    angular.module("ui.router.util").run([ "$urlMatcherFactory", function($urlMatcherFactory) {} ]);
    $UrlRouterProvider.$inject = [ "$locationProvider", "$urlMatcherFactoryProvider" ];
    function $UrlRouterProvider($locationProvider, $urlMatcherFactory) {
        var listener, rules = [], otherwise = null, interceptDeferred = !1;
        this.rule = function(rule) {
            if (!isFunction(rule)) throw new Error("'rule' must be a function");
            rules.push(rule);
            return this;
        };
        this.otherwise = function(rule) {
            if (isString(rule)) {
                var redirect = rule;
                rule = function() {
                    return redirect;
                };
            } else if (!isFunction(rule)) throw new Error("'rule' must be a function");
            otherwise = rule;
            return this;
        };
        function handleIfMatch($injector, handler, match) {
            if (!match) return !1;
            var result = $injector.invoke(handler, handler, {
                $match: match
            });
            return !isDefined(result) || result;
        }
        this.when = function(what, handler) {
            var redirect, handlerIsString = isString(handler);
            isString(what) && (what = $urlMatcherFactory.compile(what));
            if (!handlerIsString && !isFunction(handler) && !isArray(handler)) throw new Error("invalid 'handler' in when()");
            var strategies = {
                matcher: function(what, handler) {
                    if (handlerIsString) {
                        redirect = $urlMatcherFactory.compile(handler);
                        handler = [ "$match", function($match) {
                            return redirect.format($match);
                        } ];
                    }
                    return extend(function($injector, $location) {
                        return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
                    }, {
                        prefix: isString(what.prefix) ? what.prefix : ""
                    });
                },
                regex: function(what, handler) {
                    if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");
                    if (handlerIsString) {
                        redirect = handler;
                        handler = [ "$match", function($match) {
                            return match = $match, redirect.replace(/\$(\$|\d{1,2})/, function(m, what) {
                                return match["$" === what ? 0 : Number(what)];
                            });
                            var match;
                        } ];
                    }
                    return extend(function($injector, $location) {
                        return handleIfMatch($injector, handler, what.exec($location.path()));
                    }, {
                        prefix: (re = what, prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source), 
                        null != prefix ? prefix[1].replace(/\\(.)/g, "$1") : "")
                    });
                    var re, prefix;
                }
            }, check = {
                matcher: $urlMatcherFactory.isMatcher(what),
                regex: what instanceof RegExp
            };
            for (var n in check) if (check[n]) return this.rule(strategies[n](what, handler));
            throw new Error("invalid 'what' in when()");
        };
        this.deferIntercept = function(defer) {
            defer === undefined && (defer = !0);
            interceptDeferred = defer;
        };
        (this.$get = $get).$inject = [ "$location", "$rootScope", "$injector", "$browser", "$sniffer" ];
        function $get($location, $rootScope, $injector, $browser, $sniffer) {
            var lastPushedUrl, baseHref = $browser.baseHref(), location = $location.url();
            function update(evt) {
                if (!evt || !evt.defaultPrevented) {
                    lastPushedUrl && $location.url();
                    lastPushedUrl = undefined;
                    var i, n = rules.length;
                    for (i = 0; i < n; i++) if (check(rules[i])) return;
                    otherwise && check(otherwise);
                }
                function check(rule) {
                    var handled = rule($injector, $location);
                    if (!handled) return !1;
                    isString(handled) && $location.replace().url(handled);
                    return !0;
                }
            }
            function listen() {
                return listener = listener || $rootScope.$on("$locationChangeSuccess", update);
            }
            interceptDeferred || listen();
            return {
                sync: function() {
                    update();
                },
                listen: function() {
                    return listen();
                },
                update: function(read) {
                    if (read) location = $location.url(); else if ($location.url() !== location) {
                        $location.url(location);
                        $location.replace();
                    }
                },
                push: function(urlMatcher, params, options) {
                    var url = urlMatcher.format(params || {});
                    null !== url && params && params["#"] && (url += "#" + params["#"]);
                    $location.url(url);
                    lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
                    options && options.replace && $location.replace();
                },
                href: function(urlMatcher, params, options) {
                    if (!urlMatcher.validates(params)) return null;
                    var isHtml5 = $locationProvider.html5Mode();
                    angular.isObject(isHtml5) && (isHtml5 = isHtml5.enabled);
                    isHtml5 = isHtml5 && $sniffer.history;
                    var url = urlMatcher.format(params);
                    options = options || {};
                    isHtml5 || null === url || (url = "#" + $locationProvider.hashPrefix() + url);
                    null !== url && params && params["#"] && (url += "#" + params["#"]);
                    url = function(url, isHtml5, absolute) {
                        return "/" === baseHref ? url : isHtml5 ? baseHref.slice(0, -1) + url : absolute ? baseHref.slice(1) + url : url;
                    }(url, isHtml5, options.absolute);
                    if (!options.absolute || !url) return url;
                    var slash = !isHtml5 && url ? "/" : "", port = $location.port();
                    port = 80 === port || 443 === port ? "" : ":" + port;
                    return [ $location.protocol(), "://", $location.host(), port, slash, url ].join("");
                }
            };
        }
    }
    angular.module("ui.router.router").provider("$urlRouter", $UrlRouterProvider);
    $StateProvider.$inject = [ "$urlRouterProvider", "$urlMatcherFactoryProvider" ];
    function $StateProvider($urlRouterProvider, $urlMatcherFactory) {
        var root, $state, states = {}, queue = {}, abstractKey = "abstract", stateBuilder = {
            parent: function(state) {
                if (isDefined(state.parent) && state.parent) return findState(state.parent);
                var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
                return compositeName ? findState(compositeName[1]) : root;
            },
            data: function(state) {
                state.parent && state.parent.data && (state.data = state.self.data = inherit(state.parent.data, state.data));
                return state.data;
            },
            url: function(state) {
                var url = state.url, config = {
                    params: state.params || {}
                };
                if (isString(url)) return "^" == url.charAt(0) ? $urlMatcherFactory.compile(url.substring(1), config) : (state.parent.navigable || root).url.concat(url, config);
                if (!url || $urlMatcherFactory.isMatcher(url)) return url;
                throw new Error("Invalid url '" + url + "' in state '" + state + "'");
            },
            navigable: function(state) {
                return state.url ? state : state.parent ? state.parent.navigable : null;
            },
            ownParams: function(state) {
                var params = state.url && state.url.params || new $$UMFP.ParamSet();
                forEach(state.params || {}, function(config, id) {
                    params[id] || (params[id] = new $$UMFP.Param(id, null, config, "config"));
                });
                return params;
            },
            params: function(state) {
                var ownParams = pick(state.ownParams, state.ownParams.$$keys());
                return state.parent && state.parent.params ? extend(state.parent.params.$$new(), ownParams) : new $$UMFP.ParamSet();
            },
            views: function(state) {
                var views = {};
                forEach(isDefined(state.views) ? state.views : {
                    "": state
                }, function(view, name) {
                    name.indexOf("@") < 0 && (name += "@" + state.parent.name);
                    view.resolveAs = view.resolveAs || state.resolveAs || "$resolve";
                    views[name] = view;
                });
                return views;
            },
            path: function(state) {
                return state.parent ? state.parent.path.concat(state) : [];
            },
            includes: function(state) {
                var includes = state.parent ? extend({}, state.parent.includes) : {};
                includes[state.name] = !0;
                return includes;
            },
            $delegates: {}
        };
        function findState(stateOrName, base) {
            if (!stateOrName) return undefined;
            var stateName, isStr = isString(stateOrName), name = isStr ? stateOrName : stateOrName.name;
            if (0 === (stateName = name).indexOf(".") || 0 === stateName.indexOf("^")) {
                if (!base) throw new Error("No reference point given for path '" + name + "'");
                base = findState(base);
                for (var rel = name.split("."), i = 0, pathLength = rel.length, current = base; i < pathLength; i++) if ("" !== rel[i] || 0 !== i) {
                    if ("^" !== rel[i]) break;
                    if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
                    current = current.parent;
                } else current = base;
                rel = rel.slice(i).join(".");
                name = current.name + (current.name && rel ? "." : "") + rel;
            }
            var state = states[name];
            return !state || !isStr && (isStr || state !== stateOrName && state.self !== stateOrName) ? undefined : state;
        }
        function registerState(state) {
            var name = (state = inherit(state, {
                self: state,
                resolve: state.resolve || {},
                toString: function() {
                    return this.name;
                }
            })).name;
            if (!isString(name) || 0 <= name.indexOf("@")) throw new Error("State must have a valid name");
            if (states.hasOwnProperty(name)) throw new Error("State '" + name + "' is already defined");
            var parentName = -1 !== name.indexOf(".") ? name.substring(0, name.lastIndexOf(".")) : isString(state.parent) ? state.parent : isObject(state.parent) && isString(state.parent.name) ? state.parent.name : "";
            if (parentName && !states[parentName]) return function(parentName, state) {
                queue[parentName] || (queue[parentName] = []);
                queue[parentName].push(state);
            }(parentName, state.self);
            for (var key in stateBuilder) isFunction(stateBuilder[key]) && (state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]));
            !(states[name] = state)[abstractKey] && state.url && $urlRouterProvider.when(state.url, [ "$match", "$stateParams", function($match, $stateParams) {
                $state.$current.navigable == state && function(a, b, keys) {
                    if (!keys) {
                        keys = [];
                        for (var n in a) keys.push(n);
                    }
                    for (var i = 0; i < keys.length; i++) {
                        var k = keys[i];
                        if (a[k] != b[k]) return !1;
                    }
                    return !0;
                }($match, $stateParams) || $state.transitionTo(state, $match, {
                    inherit: !0,
                    location: !1
                });
            } ]);
            !function(parentName) {
                for (var queued = queue[parentName] || []; queued.length; ) registerState(queued.shift());
            }(name);
            return state;
        }
        (root = registerState({
            name: "",
            url: "^",
            views: null,
            abstract: !0
        })).navigable = null;
        this.decorator = function(name, func) {
            if (isString(name) && !isDefined(func)) return stateBuilder[name];
            if (!isFunction(func) || !isString(name)) return this;
            stateBuilder[name] && !stateBuilder.$delegates[name] && (stateBuilder.$delegates[name] = stateBuilder[name]);
            stateBuilder[name] = func;
            return this;
        };
        this.state = function(name, definition) {
            isObject(name) ? definition = name : definition.name = name;
            registerState(definition);
            return this;
        };
        (this.$get = $get).$inject = [ "$rootScope", "$q", "$view", "$injector", "$resolve", "$stateParams", "$urlRouter", "$location", "$urlMatcherFactory" ];
        function $get($rootScope, $q, $view, $injector, $resolve, $stateParams, $urlRouter, $location, $urlMatcherFactory) {
            var TransitionSupersededError = new Error("transition superseded"), TransitionSuperseded = silenceUncaughtInPromise($q.reject(TransitionSupersededError)), TransitionPrevented = silenceUncaughtInPromise($q.reject(new Error("transition prevented"))), TransitionAborted = silenceUncaughtInPromise($q.reject(new Error("transition aborted"))), TransitionFailed = silenceUncaughtInPromise($q.reject(new Error("transition failed")));
            root.locals = {
                resolve: null,
                globals: {
                    $stateParams: {}
                }
            };
            ($state = {
                params: {},
                current: root.self,
                $current: root,
                transition: null
            }).reload = function(state) {
                return $state.transitionTo($state.current, $stateParams, {
                    reload: state || !0,
                    inherit: !1,
                    notify: !0
                });
            };
            $state.go = function(to, params, options) {
                return $state.transitionTo(to, params, extend({
                    inherit: !0,
                    relative: $state.$current
                }, options));
            };
            $state.transitionTo = function(to, toParams, options) {
                toParams = toParams || {};
                options = extend({
                    location: !0,
                    inherit: !1,
                    relative: null,
                    notify: !0,
                    reload: !1,
                    $retry: !1
                }, options || {});
                var from = $state.$current, fromParams = $state.params, fromPath = from.path, toState = findState(to, options.relative), hash = toParams["#"];
                if (!isDefined(toState)) {
                    var redirect = {
                        to: to,
                        toParams: toParams,
                        options: options
                    }, redirectResult = function(redirect, state, params, options) {
                        var evt = $rootScope.$broadcast("$stateNotFound", redirect, state, params);
                        if (evt.defaultPrevented) {
                            $urlRouter.update();
                            return TransitionAborted;
                        }
                        if (!evt.retry) return null;
                        if (options.$retry) {
                            $urlRouter.update();
                            return TransitionFailed;
                        }
                        var retryTransition = $state.transition = $q.when(evt.retry);
                        retryTransition.then(function() {
                            if (retryTransition !== $state.transition) {
                                $rootScope.$broadcast("$stateChangeCancel", redirect.to, redirect.toParams, state, params);
                                return TransitionSuperseded;
                            }
                            redirect.options.$retry = !0;
                            return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
                        }, function() {
                            return TransitionAborted;
                        });
                        $urlRouter.update();
                        return retryTransition;
                    }(redirect, from.self, fromParams, options);
                    if (redirectResult) return redirectResult;
                    toParams = redirect.toParams;
                    toState = findState(to = redirect.to, (options = redirect.options).relative);
                    if (!isDefined(toState)) {
                        if (!options.relative) throw new Error("No such state '" + to + "'");
                        throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
                    }
                }
                if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
                options.inherit && (toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState));
                if (!toState.params.$$validates(toParams)) return TransitionFailed;
                toParams = toState.params.$$values(toParams);
                var toPath = (to = toState).path, keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];
                if (options.reload) {
                    if (isString(options.reload) || isObject(options.reload)) {
                        if (isObject(options.reload) && !options.reload.name) throw new Error("Invalid reload state object");
                        var reloadState = !0 === options.reload ? fromPath[0] : findState(options.reload);
                        if (options.reload && !reloadState) throw new Error("No such reload state '" + (isString(options.reload) ? options.reload : options.reload.name) + "'");
                        for (;state && state === fromPath[keep] && state !== reloadState; ) {
                            locals = toLocals[keep] = state.locals;
                            state = toPath[++keep];
                        }
                    }
                } else for (;state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams); ) {
                    locals = toLocals[keep] = state.locals;
                    state = toPath[++keep];
                }
                if (function(to, toParams, from, fromParams, locals, options) {
                    if (!options.reload && to === from && (locals === from.locals || !1 === to.self.reloadOnSearch && function(fromAndToState, fromParams, toParams) {
                        function notSearchParam(key) {
                            return "search" != fromAndToState.params[key].location;
                        }
                        var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam), nonQueryParams = pick.apply({}, [ fromAndToState.params ].concat(nonQueryParamKeys));
                        return new $$UMFP.ParamSet(nonQueryParams).$$equals(fromParams, toParams);
                    }(from, fromParams, toParams))) return !0;
                }(to, toParams, from, fromParams, locals, options)) {
                    hash && (toParams["#"] = hash);
                    $state.params = toParams;
                    copy($state.params, $stateParams);
                    copy(filterByKeys(to.params.$$keys(), $stateParams), to.locals.globals.$stateParams);
                    if (options.location && to.navigable && to.navigable.url) {
                        $urlRouter.push(to.navigable.url, toParams, {
                            $$avoidResync: !0,
                            replace: "replace" === options.location
                        });
                        $urlRouter.update(!0);
                    }
                    $state.transition = null;
                    return $q.when($state.current);
                }
                toParams = filterByKeys(to.params.$$keys(), toParams || {});
                hash && (toParams["#"] = hash);
                if (options.notify && $rootScope.$broadcast("$stateChangeStart", to.self, toParams, from.self, fromParams, options).defaultPrevented) {
                    $rootScope.$broadcast("$stateChangeCancel", to.self, toParams, from.self, fromParams);
                    null == $state.transition && $urlRouter.update();
                    return TransitionPrevented;
                }
                for (var resolved = $q.when(locals), l = keep; l < toPath.length; state = toPath[++l]) {
                    locals = toLocals[l] = inherit(locals);
                    resolved = resolveState(state, toParams, state === to, resolved, locals, options);
                }
                var transition = $state.transition = resolved.then(function() {
                    var l, entering, exiting;
                    if ($state.transition !== transition) {
                        $rootScope.$broadcast("$stateChangeCancel", to.self, toParams, from.self, fromParams);
                        return TransitionSuperseded;
                    }
                    for (l = fromPath.length - 1; keep <= l; l--) {
                        (exiting = fromPath[l]).self.onExit && $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
                        exiting.locals = null;
                    }
                    for (l = keep; l < toPath.length; l++) {
                        (entering = toPath[l]).locals = toLocals[l];
                        entering.self.onEnter && $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
                    }
                    if ($state.transition !== transition) {
                        $rootScope.$broadcast("$stateChangeCancel", to.self, toParams, from.self, fromParams);
                        return TransitionSuperseded;
                    }
                    $state.$current = to;
                    $state.current = to.self;
                    $state.params = toParams;
                    copy($state.params, $stateParams);
                    $state.transition = null;
                    options.location && to.navigable && $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
                        $$avoidResync: !0,
                        replace: "replace" === options.location
                    });
                    options.notify && $rootScope.$broadcast("$stateChangeSuccess", to.self, toParams, from.self, fromParams);
                    $urlRouter.update(!0);
                    return $state.current;
                }).then(null, function(error) {
                    if (error === TransitionSupersededError) return TransitionSuperseded;
                    if ($state.transition !== transition) {
                        $rootScope.$broadcast("$stateChangeCancel", to.self, toParams, from.self, fromParams);
                        return TransitionSuperseded;
                    }
                    $state.transition = null;
                    $rootScope.$broadcast("$stateChangeError", to.self, toParams, from.self, fromParams, error).defaultPrevented || $urlRouter.update();
                    return $q.reject(error);
                });
                silenceUncaughtInPromise(transition);
                return transition;
            };
            $state.is = function(stateOrName, params, options) {
                var state = findState(stateOrName, (options = extend({
                    relative: $state.$current
                }, options || {})).relative);
                return isDefined(state) ? $state.$current === state && (!params || objectKeys(params).reduce(function(acc, key) {
                    var paramDef = state.params[key];
                    return acc && !paramDef || paramDef.type.equals($stateParams[key], params[key]);
                }, !0)) : undefined;
            };
            $state.includes = function(stateOrName, params, options) {
                options = extend({
                    relative: $state.$current
                }, options || {});
                if (isString(stateOrName) && -1 < stateOrName.indexOf("*")) {
                    if (!function(glob) {
                        for (var globSegments = glob.split("."), segments = $state.$current.name.split("."), i = 0, l = globSegments.length; i < l; i++) "*" === globSegments[i] && (segments[i] = "*");
                        "**" === globSegments[0] && (segments = segments.slice(indexOf(segments, globSegments[1]))).unshift("**");
                        if ("**" === globSegments[globSegments.length - 1]) {
                            segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
                            segments.push("**");
                        }
                        return globSegments.length == segments.length && segments.join("") === globSegments.join("");
                    }(stateOrName)) return !1;
                    stateOrName = $state.$current.name;
                }
                var state = findState(stateOrName, options.relative);
                if (!isDefined(state)) return undefined;
                if (!isDefined($state.$current.includes[state.name])) return !1;
                if (!params) return !0;
                for (var keys = objectKeys(params), i = 0; i < keys.length; i++) {
                    var key = keys[i], paramDef = state.params[key];
                    if (paramDef && !paramDef.type.equals($stateParams[key], params[key])) return !1;
                }
                return objectKeys(params).reduce(function(acc, key) {
                    var paramDef = state.params[key];
                    return acc && !paramDef || paramDef.type.equals($stateParams[key], params[key]);
                }, !0);
            };
            $state.href = function(stateOrName, params, options) {
                var state = findState(stateOrName, (options = extend({
                    lossy: !0,
                    inherit: !0,
                    absolute: !1,
                    relative: $state.$current
                }, options || {})).relative);
                if (!isDefined(state)) return null;
                options.inherit && (params = inheritParams($stateParams, params || {}, $state.$current, state));
                var nav = state && options.lossy ? state.navigable : state;
                return nav && nav.url !== undefined && null !== nav.url ? $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat("#"), params || {}), {
                    absolute: options.absolute
                }) : null;
            };
            $state.get = function(stateOrName, context) {
                if (0 === arguments.length) return map(objectKeys(states), function(name) {
                    return states[name].self;
                });
                var state = findState(stateOrName, context || $state.$current);
                return state && state.self ? state.self : null;
            };
            function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
                var $stateParams = paramsAreFiltered ? params : filterByKeys(state.params.$$keys(), params), locals = {
                    $stateParams: $stateParams
                };
                dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
                var promises = [ dst.resolve.then(function(globals) {
                    dst.globals = globals;
                }) ];
                inherited && promises.push(inherited);
                return $q.all(promises).then(function() {
                    var viewsPromises = [];
                    forEach(state.views, function(view, name) {
                        var injectables = view.resolve && view.resolve !== state.resolve ? view.resolve : {};
                        injectables.$template = [ function() {
                            return $view.load(name, {
                                view: view,
                                locals: dst.globals,
                                params: $stateParams,
                                notify: options.notify
                            }) || "";
                        } ];
                        viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function(result) {
                            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
                                var injectLocals = angular.extend({}, injectables, dst.globals);
                                result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
                            } else result.$$controller = view.controller;
                            result.$$state = state;
                            result.$$controllerAs = view.controllerAs;
                            result.$$resolveAs = view.resolveAs;
                            dst[name] = result;
                        }));
                    });
                    return $q.all(viewsPromises).then(function() {
                        return dst.globals;
                    });
                }).then(function(values) {
                    return dst;
                });
            }
            return $state;
        }
    }
    angular.module("ui.router.state").factory("$stateParams", function() {
        return {};
    }).constant("$state.runtime", {
        autoinject: !0
    }).provider("$state", $StateProvider).run([ "$injector", function($injector) {
        $injector.get("$state.runtime").autoinject && $injector.get("$state");
    } ]);
    $ViewProvider.$inject = [];
    function $ViewProvider() {
        (this.$get = $get).$inject = [ "$rootScope", "$templateFactory" ];
        function $get($rootScope, $templateFactory) {
            return {
                load: function(name, options) {
                    var result;
                    (options = extend({
                        template: null,
                        controller: null,
                        view: null,
                        locals: null,
                        notify: !0,
                        async: !0,
                        params: {}
                    }, options)).view && (result = $templateFactory.fromConfig(options.view, options.params, options.locals));
                    return result;
                }
            };
        }
    }
    angular.module("ui.router.state").provider("$view", $ViewProvider);
    angular.module("ui.router.state").provider("$uiViewScroll", function() {
        var useAnchorScroll = !1;
        this.useAnchorScroll = function() {
            useAnchorScroll = !0;
        };
        this.$get = [ "$anchorScroll", "$timeout", function($anchorScroll, $timeout) {
            return useAnchorScroll ? $anchorScroll : function($element) {
                return $timeout(function() {
                    $element[0].scrollIntoView();
                }, 0, !1);
            };
        } ];
    });
    $ViewDirective.$inject = [ "$state", "$injector", "$uiViewScroll", "$interpolate", "$q" ];
    function $ViewDirective($state, $injector, $uiViewScroll, $interpolate, $q) {
        var service = $injector.has ? function(service) {
            return $injector.has(service) ? $injector.get(service) : null;
        } : function(service) {
            try {
                return $injector.get(service);
            } catch (e) {
                return null;
            }
        }, $animator = service("$animator"), $animate = service("$animate");
        return {
            restrict: "ECA",
            terminal: !0,
            priority: 400,
            transclude: "element",
            compile: function(tElement, tAttrs, $transclude) {
                return function(scope, $element, attrs) {
                    var previousEl, currentEl, currentScope, latestLocals, onloadExp = attrs.onload || "", autoScrollExp = attrs.autoscroll, renderer = function(attrs, scope) {
                        if ($animate) return {
                            enter: function(element, target, cb) {
                                2 < angular.version.minor ? $animate.enter(element, null, target).then(cb) : $animate.enter(element, null, target, cb);
                            },
                            leave: function(element, cb) {
                                2 < angular.version.minor ? $animate.leave(element).then(cb) : $animate.leave(element, cb);
                            }
                        };
                        if ($animator) {
                            var animate = $animator && $animator(scope, attrs);
                            return {
                                enter: function(element, target, cb) {
                                    animate.enter(element, null, target);
                                    cb();
                                },
                                leave: function(element, cb) {
                                    animate.leave(element);
                                    cb();
                                }
                            };
                        }
                        return {
                            enter: function(element, target, cb) {
                                target.after(element);
                                cb();
                            },
                            leave: function(element, cb) {
                                element.remove();
                                cb();
                            }
                        };
                    }(attrs, scope);
                    $element.inheritedData("$uiView");
                    scope.$on("$stateChangeSuccess", function() {
                        updateView(!1);
                    });
                    updateView(!0);
                    function updateView(firstTime) {
                        var newScope, name = getUiViewName(scope, attrs, $element, $interpolate), previousLocals = name && $state.$current && $state.$current.locals[name];
                        if (firstTime || previousLocals !== latestLocals) {
                            newScope = scope.$new();
                            latestLocals = $state.$current.locals[name];
                            newScope.$emit("$viewContentLoading", name);
                            currentEl = $transclude(newScope, function(clone) {
                                var animEnter = $q.defer(), animLeave = $q.defer(), viewAnimData = {
                                    $animEnter: animEnter.promise,
                                    $animLeave: animLeave.promise,
                                    $$animLeave: animLeave
                                };
                                clone.data("$uiViewAnim", viewAnimData);
                                renderer.enter(clone, $element, function() {
                                    animEnter.resolve();
                                    currentScope && currentScope.$emit("$viewContentAnimationEnded");
                                    (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) && $uiViewScroll(clone);
                                });
                                !function() {
                                    if (previousEl) {
                                        previousEl.remove();
                                        previousEl = null;
                                    }
                                    if (currentScope) {
                                        currentScope.$destroy();
                                        currentScope = null;
                                    }
                                    if (currentEl) {
                                        var $uiViewData = currentEl.data("$uiViewAnim");
                                        renderer.leave(currentEl, function() {
                                            $uiViewData.$$animLeave.resolve();
                                            previousEl = null;
                                        });
                                        previousEl = currentEl;
                                        currentEl = null;
                                    }
                                }();
                            });
                            (currentScope = newScope).$emit("$viewContentLoaded", name);
                            currentScope.$eval(onloadExp);
                        }
                    }
                };
            }
        };
    }
    $ViewDirectiveFill.$inject = [ "$compile", "$controller", "$state", "$interpolate" ];
    function $ViewDirectiveFill($compile, $controller, $state, $interpolate) {
        return {
            restrict: "ECA",
            priority: -400,
            compile: function(tElement) {
                var initial = tElement.html();
                tElement.empty ? tElement.empty() : tElement[0].innerHTML = null;
                return function(scope, $element, attrs) {
                    var current = $state.$current, name = getUiViewName(scope, attrs, $element, $interpolate), locals = current && current.locals[name];
                    if (locals) {
                        $element.data("$uiView", {
                            name: name,
                            state: locals.$$state
                        });
                        $element.html(locals.$template ? locals.$template : initial);
                        var resolveData = angular.extend({}, locals);
                        scope[locals.$$resolveAs] = resolveData;
                        var link = $compile($element.contents());
                        if (locals.$$controller) {
                            locals.$scope = scope;
                            locals.$element = $element;
                            var controller = $controller(locals.$$controller, locals);
                            if (locals.$$controllerAs) {
                                scope[locals.$$controllerAs] = controller;
                                scope[locals.$$controllerAs][locals.$$resolveAs] = resolveData;
                            }
                            isFunction(controller.$onInit) && controller.$onInit();
                            $element.data("$ngControllerController", controller);
                            $element.children().data("$ngControllerController", controller);
                        }
                        link(scope);
                    } else {
                        $element.html(initial);
                        $compile($element.contents())(scope);
                    }
                };
            }
        };
    }
    function getUiViewName(scope, attrs, element, $interpolate) {
        var name = $interpolate(attrs.uiView || attrs.name || "")(scope), uiViewCreatedBy = element.inheritedData("$uiView");
        return 0 <= name.indexOf("@") ? name : name + "@" + (uiViewCreatedBy ? uiViewCreatedBy.state.name : "");
    }
    angular.module("ui.router.state").directive("uiView", $ViewDirective);
    angular.module("ui.router.state").directive("uiView", $ViewDirectiveFill);
    function parseStateRef(ref, current) {
        var parsed, preparsed = ref.match(/^\s*({[^}]*})\s*$/);
        preparsed && (ref = current + "(" + preparsed[1] + ")");
        if (!(parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/)) || 4 !== parsed.length) throw new Error("Invalid state ref '" + ref + "'");
        return {
            state: parsed[1],
            paramExpr: parsed[3] || null
        };
    }
    function stateContext(el) {
        var stateData = el.parent().inheritedData("$uiView");
        if (stateData && stateData.state && stateData.state.name) return stateData.state;
    }
    function getTypeInfo(el) {
        var isSvg = "[object SVGAnimatedString]" === Object.prototype.toString.call(el.prop("href")), isForm = "FORM" === el[0].nodeName;
        return {
            attr: isForm ? "action" : isSvg ? "xlink:href" : "href",
            isAnchor: "A" === el.prop("tagName").toUpperCase(),
            clickable: !isForm
        };
    }
    function clickHook(el, $state, $timeout, type, current) {
        return function(e) {
            var button = e.which || e.button, target = current();
            if (!(1 < button || e.ctrlKey || e.metaKey || e.shiftKey || el.attr("target"))) {
                var transition = $timeout(function() {
                    $state.go(target.state, target.params, target.options);
                });
                e.preventDefault();
                var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;
                e.preventDefault = function() {
                    ignorePreventDefaultCount-- <= 0 && $timeout.cancel(transition);
                };
            }
        };
    }
    $StateRefDirective.$inject = [ "$state", "$timeout" ];
    function $StateRefDirective($state, $timeout) {
        return {
            restrict: "A",
            require: [ "?^uiSrefActive", "?^uiSrefActiveEq" ],
            link: function(scope, element, attrs, uiSrefActive) {
                var hookFn, ref = parseStateRef(attrs.uiSref, $state.current.name), def = {
                    state: ref.state,
                    href: null,
                    params: null
                }, type = getTypeInfo(element), active = uiSrefActive[1] || uiSrefActive[0], unlinkInfoFn = null;
                def.options = extend(function(el, $state) {
                    return {
                        relative: stateContext(el) || $state.$current,
                        inherit: !0
                    };
                }(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});
                var update = function(val) {
                    val && (def.params = angular.copy(val));
                    def.href = $state.href(ref.state, def.params, def.options);
                    unlinkInfoFn && unlinkInfoFn();
                    active && (unlinkInfoFn = active.$$addStateInfo(ref.state, def.params));
                    null !== def.href && attrs.$set(type.attr, def.href);
                };
                if (ref.paramExpr) {
                    scope.$watch(ref.paramExpr, function(val) {
                        val !== def.params && update(val);
                    }, !0);
                    def.params = angular.copy(scope.$eval(ref.paramExpr));
                }
                update();
                if (type.clickable) {
                    hookFn = clickHook(element, $state, $timeout, type, function() {
                        return def;
                    });
                    element[element.on ? "on" : "bind"]("click", hookFn);
                    scope.$on("$destroy", function() {
                        element[element.off ? "off" : "unbind"]("click", hookFn);
                    });
                }
            }
        };
    }
    $StateRefDynamicDirective.$inject = [ "$state", "$timeout" ];
    function $StateRefDynamicDirective($state, $timeout) {
        return {
            restrict: "A",
            require: [ "?^uiSrefActive", "?^uiSrefActiveEq" ],
            link: function(scope, element, attrs, uiSrefActive) {
                var hookFn, type = getTypeInfo(element), active = uiSrefActive[1] || uiSrefActive[0], watch = "[" + [ attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null ].map(function(val) {
                    return val || "null";
                }).join(", ") + "]", def = {
                    state: null,
                    params: null,
                    options: null,
                    href: null
                }, unlinkInfoFn = null;
                function runStateRefLink(group) {
                    def.state = group[0];
                    def.params = group[1];
                    def.options = group[2];
                    def.href = $state.href(def.state, def.params, def.options);
                    unlinkInfoFn && unlinkInfoFn();
                    active && (unlinkInfoFn = active.$$addStateInfo(def.state, def.params));
                    def.href && attrs.$set(type.attr, def.href);
                }
                scope.$watch(watch, runStateRefLink, !0);
                runStateRefLink(scope.$eval(watch));
                if (type.clickable) {
                    hookFn = clickHook(element, $state, $timeout, type, function() {
                        return def;
                    });
                    element[element.on ? "on" : "bind"]("click", hookFn);
                    scope.$on("$destroy", function() {
                        element[element.off ? "off" : "unbind"]("click", hookFn);
                    });
                }
            }
        };
    }
    $StateRefActiveDirective.$inject = [ "$state", "$stateParams", "$interpolate" ];
    function $StateRefActiveDirective($state, $stateParams, $interpolate) {
        return {
            restrict: "A",
            controller: [ "$scope", "$element", "$attrs", "$timeout", function($scope, $element, $attrs, $timeout) {
                var activeEqClass, uiSrefActive, states = [], activeClasses = {};
                activeEqClass = $interpolate($attrs.uiSrefActiveEq || "", !1)($scope);
                try {
                    uiSrefActive = $scope.$eval($attrs.uiSrefActive);
                } catch (e) {}
                uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || "", !1)($scope);
                isObject(uiSrefActive) && forEach(uiSrefActive, function(stateOrName, activeClass) {
                    if (isString(stateOrName)) {
                        var ref = parseStateRef(stateOrName, $state.current.name);
                        addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);
                    }
                });
                this.$$addStateInfo = function(newState, newParams) {
                    if (!(isObject(uiSrefActive) && 0 < states.length)) {
                        var deregister = addState(newState, newParams, uiSrefActive);
                        update();
                        return deregister;
                    }
                };
                $scope.$on("$stateChangeSuccess", update);
                function addState(stateName, stateParams, activeClass) {
                    var state = $state.get(stateName, stateContext($element)), stateHash = function(state, params) {
                        if (!isString(state)) throw new Error("state should be a string");
                        if (isObject(params)) return state + toJson(params);
                        params = $scope.$eval(params);
                        if (isObject(params)) return state + toJson(params);
                        return state;
                    }(stateName, stateParams), stateInfo = {
                        state: state || {
                            name: stateName
                        },
                        params: stateParams,
                        hash: stateHash
                    };
                    states.push(stateInfo);
                    activeClasses[stateHash] = activeClass;
                    return function() {
                        var idx = states.indexOf(stateInfo);
                        -1 !== idx && states.splice(idx, 1);
                    };
                }
                function update() {
                    for (var i = 0; i < states.length; i++) {
                        state = states[i].state, params = states[i].params, $state.includes(state.name, params) ? addClass($element, activeClasses[states[i].hash]) : removeClass($element, activeClasses[states[i].hash]);
                        exactMatch(states[i].state, states[i].params) ? addClass($element, activeEqClass) : removeClass($element, activeEqClass);
                    }
                    var state, params;
                }
                function addClass(el, className) {
                    $timeout(function() {
                        el.addClass(className);
                    });
                }
                function removeClass(el, className) {
                    el.removeClass(className);
                }
                function exactMatch(state, params) {
                    return $state.is(state.name, params);
                }
                update();
            } ]
        };
    }
    angular.module("ui.router.state").directive("uiSref", $StateRefDirective).directive("uiSrefActive", $StateRefActiveDirective).directive("uiSrefActiveEq", $StateRefActiveDirective).directive("uiState", $StateRefDynamicDirective);
    $IsStateFilter.$inject = [ "$state" ];
    function $IsStateFilter($state) {
        var isFilter = function(state, params) {
            return $state.is(state, params);
        };
        isFilter.$stateful = !0;
        return isFilter;
    }
    $IncludedByStateFilter.$inject = [ "$state" ];
    function $IncludedByStateFilter($state) {
        var includesFilter = function(state, params, options) {
            return $state.includes(state, params, options);
        };
        includesFilter.$stateful = !0;
        return includesFilter;
    }
    angular.module("ui.router.state").filter("isState", $IsStateFilter).filter("includedByState", $IncludedByStateFilter);
}(window, window.angular);

!function(uiroutermetatags) {
    var appModule = angular.module("ui.router.metatags", [ "ui.router" ]), UIRouterMetatags = function() {
        function UIRouterMetatags() {
            this.prefix = "";
            this.suffix = "";
            this.defaultTitle = "";
            this.defaultDescription = "";
            this.defaultKeywords = "";
            this.staticProperties = {};
            this.enableOGURL = !1;
        }
        UIRouterMetatags.prototype.setTitlePrefix = function(prefix) {
            this.prefix = prefix;
            return this;
        };
        UIRouterMetatags.prototype.setTitleSuffix = function(suffix) {
            this.suffix = suffix;
            return this;
        };
        UIRouterMetatags.prototype.setDefaultTitle = function(title) {
            this.defaultTitle = title;
            return this;
        };
        UIRouterMetatags.prototype.setDefaultDescription = function(description) {
            this.defaultDescription = description;
            return this;
        };
        UIRouterMetatags.prototype.setDefaultKeywords = function(keywords) {
            this.defaultKeywords = keywords;
            return this;
        };
        UIRouterMetatags.prototype.setStaticProperties = function(properties) {
            this.staticProperties = properties;
            return this;
        };
        UIRouterMetatags.prototype.setOGURL = function(enabled) {
            this.enableOGURL = enabled;
            return this;
        };
        UIRouterMetatags.prototype.$get = function() {
            return {
                prefix: this.prefix,
                suffix: this.suffix,
                defaultTitle: this.defaultTitle,
                defaultDescription: this.defaultDescription,
                defaultKeywords: this.defaultKeywords,
                staticProperties: this.staticProperties,
                enableOGURL: this.enableOGURL
            };
        };
        return UIRouterMetatags;
    }();
    appModule.provider("UIRouterMetatags", UIRouterMetatags);
    var MetaTags = function() {
        function MetaTags($log, UIRouterMetatags, $interpolate, $injector, $state, $location, $window) {
            this.$log = $log;
            this.UIRouterMetatags = UIRouterMetatags;
            this.$interpolate = $interpolate;
            this.$injector = $injector;
            this.$state = $state;
            this.$location = $location;
            this.$window = $window;
            this.prerender = {};
        }
        MetaTags.$inject = [ "$log", "UIRouterMetatags", "$interpolate", "$injector", "$state", "$location", "$window" ];
        MetaTags.prototype.update = function(tags) {
            var _this = this;
            try {
                this.properties = angular.extend({}, this.UIRouterMetatags.staticProperties);
                this.UIRouterMetatags.enableOGURL && (this.properties["og:url"] = this.$location.absUrl());
                if (tags) {
                    this.title = tags.title ? this.UIRouterMetatags.prefix + (this.getValue("title", tags.title) || "") + this.UIRouterMetatags.suffix : this.UIRouterMetatags.defaultTitle;
                    this.description = tags.description ? this.getValue("description", tags.description) : this.UIRouterMetatags.defaultDescription;
                    this.keywords = tags.keywords ? this.getValue("keywords", tags.keywords) : this.UIRouterMetatags.defaultKeywords;
                    angular.forEach(tags.properties, function(value, key) {
                        var v = _this.getValue(key, value);
                        v && (_this.properties[key] = v);
                    });
                } else {
                    this.title = this.UIRouterMetatags.defaultTitle;
                    this.description = this.UIRouterMetatags.defaultDescription;
                    this.keywords = this.UIRouterMetatags.defaultKeywords;
                }
                if (tags && tags.prerender) {
                    this.prerender.statusCode = tags.prerender.statusCode ? this.getValue("prerender.statusCode", tags.prerender.statusCode) : 200;
                    this.prerender.header = tags.prerender.header ? this.getValue("rerender.header", tags.prerender.header) : null;
                } else {
                    this.prerender.statusCode = 200;
                    this.prerender.header = null;
                }
                this.$window.prerenderReady = !0;
            } catch (err) {
                this.$log.error("error occured when extracting metatags:", err);
            }
        };
        MetaTags.prototype.getValue = function(tagType, tag) {
            try {
                return tag ? "number" == typeof tag ? tag : "string" == typeof tag && 0 === tag.trim().length ? null : angular.isFunction(tag) || Array.isArray(tag) ? this.$injector.invoke(tag, this, this.$state.$current.locals.globals) : this.$interpolate(tag)(this.$state.$current.locals.globals) : null;
            } catch (err) {
                this.$log.error("error occured when trying to get the value of tag:", tagType, err);
                return null;
            }
        };
        return MetaTags;
    }();
    appModule.service("MetaTags", MetaTags);
    function runBlock($log, $rootScope, MetaTags, $window) {
        $rootScope.MetaTags = MetaTags;
        $rootScope.$on("$stateChangeStart", function(event, toState, toParams, from, fromParams) {
            $window.prerenderReady = !1;
        });
        $rootScope.$on("$stateChangeSuccess", function(event, toState) {
            toState.metaTags || $log.debug('MetaTags - route: "' + toState.name + '" does not contain any metatags');
            MetaTags.update(toState.metaTags);
        });
        $rootScope.$on("$stateChangeError", function(event, toState, toParams, fromState, fromParams, error) {
            MetaTags.prerender.statusCode = 500;
            $window.prerenderReady = !0;
        });
        $rootScope.$on("$stateNotFound", function(event, unfoundState, fromState) {
            MetaTags.prerender.statusCode = 404;
            $window.prerenderReady = !0;
        });
    }
    runBlock.$inject = [ "$log", "$rootScope", "MetaTags", "$window" ];
    appModule.run(runBlock);
}(uiroutermetatags || (uiroutermetatags = {}));

angular.module("angularytics", []).provider("Angularytics", function() {
    var eventHandlersNames = [ "Google" ];
    this.setEventHandlers = function(handlers) {
        angular.isString(handlers) && (handlers = [ handlers ]);
        eventHandlersNames = [];
        angular.forEach(handlers, function(handler) {
            eventHandlersNames.push(capitalizeHandler(handler));
        });
    };
    var capitalizeHandler = function(handler) {
        return handler.charAt(0).toUpperCase() + handler.substring(1);
    }, pageChangeEvent = "$locationChangeSuccess";
    this.setPageChangeEvent = function(newPageChangeEvent) {
        pageChangeEvent = newPageChangeEvent;
    };
    this.$get = [ "$injector", "$rootScope", "$location", function($injector, $rootScope, $location) {
        var eventHandlers = [];
        angular.forEach(eventHandlersNames, function(handler) {
            eventHandlers.push($injector.get("Angularytics" + handler + "Handler"));
        });
        var forEachHandlerDo = function(action) {
            angular.forEach(eventHandlers, function(handler) {
                action(handler);
            });
        }, service = {
            init: function() {},
            trackEvent: function(category, action, opt_label, opt_value, opt_noninteraction) {
                forEachHandlerDo(function(handler) {
                    category && action && handler.trackEvent(category, action, opt_label, opt_value, opt_noninteraction);
                });
            },
            trackPageView: function(url) {
                forEachHandlerDo(function(handler) {
                    url && handler.trackPageView(url);
                });
            },
            trackTiming: function(category, variable, value, opt_label) {
                forEachHandlerDo(function(handler) {
                    category && variable && value && handler.trackTiming(category, variable, value, opt_label);
                });
            }
        };
        $rootScope.$on(pageChangeEvent, function() {
            service.trackPageView($location.url());
        });
        return service;
    } ];
});

angular.module("angularytics").factory("AngularyticsConsoleHandler", [ "$log", function($log) {
    var service = {
        trackPageView: function(url) {
            $log.log("URL visited", url);
        },
        trackEvent: function(category, action, opt_label, opt_value, opt_noninteraction) {
            $log.log("Event tracked", category, action, opt_label, opt_value, opt_noninteraction);
        },
        trackTiming: function(category, variable, value, opt_label) {
            $log.log("Timing tracked", category, variable, value, opt_label);
        }
    };
    return service;
} ]);

angular.module("angularytics").factory("AngularyticsGoogleHandler", function() {
    var service = {
        trackPageView: function(url) {
            _gaq.push([ "_set", "page", url ]);
            _gaq.push([ "_trackPageview", url ]);
        },
        trackEvent: function(category, action, opt_label, opt_value, opt_noninteraction) {
            _gaq.push([ "_trackEvent", category, action, opt_label, opt_value, opt_noninteraction ]);
        },
        trackTiming: function(category, variable, value, opt_label) {
            _gaq.push([ "_trackTiming", category, variable, value, opt_label ]);
        }
    };
    return service;
}).factory("AngularyticsGoogleUniversalHandler", function() {
    var service = {
        trackPageView: function(url) {
            ga("set", "page", url);
            ga("send", "pageview", url);
        },
        trackEvent: function(category, action, opt_label, opt_value, opt_noninteraction) {
            ga("send", "event", category, action, opt_label, opt_value, {
                nonInteraction: opt_noninteraction
            });
        },
        trackTiming: function(category, variable, value, opt_label) {
            ga("send", "timing", category, variable, value, opt_label);
        }
    };
    return service;
});

angular.module("angularytics").filter("trackEvent", [ "Angularytics", function(Angularytics) {
    return function(entry, category, action, opt_label, opt_value, opt_noninteraction) {
        Angularytics.trackEvent(category, action, opt_label, opt_value, opt_noninteraction);
        return entry;
    };
} ]);

!function(window, angular, undefined) {
    "use strict";
    angular.module("ngMaterial", [ "ng", "ngAnimate", "ngAria", "material.core", "material.core.gestures", "material.core.layout", "material.core.theming.palette", "material.core.theming", "material.core.animate", "material.components.autocomplete", "material.components.backdrop", "material.components.bottomSheet", "material.components.button", "material.components.card", "material.components.checkbox", "material.components.chips", "material.components.content", "material.components.datepicker", "material.components.dialog", "material.components.divider", "material.components.fabActions", "material.components.fabShared", "material.components.fabSpeedDial", "material.components.fabToolbar", "material.components.fabTrigger", "material.components.gridList", "material.components.icon", "material.components.input", "material.components.list", "material.components.menu", "material.components.menuBar", "material.components.progressCircular", "material.components.radioButton", "material.components.progressLinear", "material.components.showHide", "material.components.select", "material.components.slider", "material.components.sidenav", "material.components.sticky", "material.components.subheader", "material.components.switch", "material.components.swipe", "material.components.tabs", "material.components.toast", "material.components.toolbar", "material.components.virtualRepeat", "material.components.tooltip", "material.components.whiteframe" ]);
    !function() {
        angular.module("material.core", [ "ngAnimate", "material.core.animate", "material.core.layout", "material.core.gestures", "material.core.theming" ]).config(MdCoreConfigure).run(DetectNgTouch);
        function DetectNgTouch($log, $injector) {
            if ($injector.has("$swipe")) {
                $log.warn("You are using the ngTouch module. \nAngular Material already has mobile click, tap, and swipe support... \nngTouch is not supported with Angular Material!");
            }
        }
        DetectNgTouch.$inject = [ "$log", "$injector" ];
        function MdCoreConfigure($provide, $mdThemingProvider) {
            $provide.decorator("$$rAF", [ "$delegate", rAFDecorator ]);
            $mdThemingProvider.theme("default").primaryPalette("indigo").accentPalette("pink").warnPalette("deep-orange").backgroundPalette("grey");
        }
        MdCoreConfigure.$inject = [ "$provide", "$mdThemingProvider" ];
        function rAFDecorator($delegate) {
            $delegate.throttle = function(cb) {
                var queuedArgs, alreadyQueued, queueCb, context;
                return function() {
                    queuedArgs = arguments;
                    context = this;
                    queueCb = cb;
                    if (!alreadyQueued) {
                        alreadyQueued = !0;
                        $delegate(function() {
                            queueCb.apply(context, Array.prototype.slice.call(queuedArgs));
                            alreadyQueued = !1;
                        });
                    }
                };
            };
            return $delegate;
        }
    }();
    !function() {
        angular.module("material.core").factory("$mdConstant", MdConstantFactory);
        function MdConstantFactory($sniffer) {
            var webkit = /webkit/i.test($sniffer.vendorPrefix);
            function vendorProperty(name) {
                return webkit ? "webkit" + name.charAt(0).toUpperCase() + name.substring(1) : name;
            }
            return {
                KEY_CODE: {
                    COMMA: 188,
                    ENTER: 13,
                    ESCAPE: 27,
                    SPACE: 32,
                    PAGE_UP: 33,
                    PAGE_DOWN: 34,
                    END: 35,
                    HOME: 36,
                    LEFT_ARROW: 37,
                    UP_ARROW: 38,
                    RIGHT_ARROW: 39,
                    DOWN_ARROW: 40,
                    TAB: 9,
                    BACKSPACE: 8,
                    DELETE: 46
                },
                CSS: {
                    TRANSITIONEND: "transitionend" + (webkit ? " webkitTransitionEnd" : ""),
                    ANIMATIONEND: "animationend" + (webkit ? " webkitAnimationEnd" : ""),
                    TRANSFORM: vendorProperty("transform"),
                    TRANSFORM_ORIGIN: vendorProperty("transformOrigin"),
                    TRANSITION: vendorProperty("transition"),
                    TRANSITION_DURATION: vendorProperty("transitionDuration"),
                    ANIMATION_PLAY_STATE: vendorProperty("animationPlayState"),
                    ANIMATION_DURATION: vendorProperty("animationDuration"),
                    ANIMATION_NAME: vendorProperty("animationName"),
                    ANIMATION_TIMING: vendorProperty("animationTimingFunction"),
                    ANIMATION_DIRECTION: vendorProperty("animationDirection")
                },
                MEDIA: {
                    xs: "(max-width: 599px)",
                    "gt-xs": "(min-width: 600px)",
                    sm: "(min-width: 600px) and (max-width: 959px)",
                    "gt-sm": "(min-width: 960px)",
                    md: "(min-width: 960px) and (max-width: 1279px)",
                    "gt-md": "(min-width: 1280px)",
                    lg: "(min-width: 1280px) and (max-width: 1919px)",
                    "gt-lg": "(min-width: 1920px)",
                    xl: "(min-width: 1920px)"
                },
                MEDIA_PRIORITY: [ "xl", "gt-lg", "lg", "gt-md", "md", "gt-sm", "sm", "gt-xs", "xs" ]
            };
        }
        MdConstantFactory.$inject = [ "$sniffer" ];
    }();
    !function() {
        angular.module("material.core").config([ "$provide", function($provide) {
            $provide.decorator("$mdUtil", [ "$delegate", function($delegate) {
                $delegate.iterator = MdIterator;
                return $delegate;
            } ]);
        } ]);
        function MdIterator(items, reloop) {
            var trueFn = function() {
                return !0;
            };
            items && !angular.isArray(items) && (items = Array.prototype.slice.call(items));
            reloop = !!reloop;
            var _items = items || [];
            return {
                items: function() {
                    return [].concat(_items);
                },
                count: function() {
                    return _items.length;
                },
                inRange: inRange,
                contains: contains,
                indexOf: indexOf,
                itemAt: function(index) {
                    return inRange(index) ? _items[index] : null;
                },
                findBy: function(key, val) {
                    return _items.filter(function(item) {
                        return item[key] === val;
                    });
                },
                add: function(item, index) {
                    if (!item) return -1;
                    angular.isNumber(index) || (index = _items.length);
                    _items.splice(index, 0, item);
                    return indexOf(item);
                },
                remove: function(item) {
                    contains(item) && _items.splice(indexOf(item), 1);
                },
                first: first,
                last: last,
                next: angular.bind(null, findSubsequentItem, !1),
                previous: angular.bind(null, findSubsequentItem, !0),
                hasPrevious: function(item) {
                    return !!item && inRange(indexOf(item) - 1);
                },
                hasNext: function(item) {
                    return !!item && inRange(indexOf(item) + 1);
                }
            };
            function inRange(index) {
                return _items.length && -1 < index && index < _items.length;
            }
            function indexOf(item) {
                return _items.indexOf(item);
            }
            function contains(item) {
                return item && -1 < indexOf(item);
            }
            function first() {
                return _items.length ? _items[0] : null;
            }
            function last() {
                return _items.length ? _items[_items.length - 1] : null;
            }
            function findSubsequentItem(backwards, item, validate, limit) {
                validate = validate || trueFn;
                for (var curIndex = indexOf(item); ;) {
                    if (!inRange(curIndex)) return null;
                    var nextIndex = curIndex + (backwards ? -1 : 1), foundItem = null;
                    inRange(nextIndex) ? foundItem = _items[nextIndex] : reloop && (nextIndex = indexOf(foundItem = backwards ? last() : first()));
                    if (null === foundItem || nextIndex === limit) return null;
                    if (validate(foundItem)) return foundItem;
                    angular.isUndefined(limit) && (limit = nextIndex);
                    curIndex = nextIndex;
                }
            }
        }
    }();
    !function() {
        angular.module("material.core").factory("$mdMedia", mdMediaFactory);
        function mdMediaFactory($mdConstant, $rootScope, $window) {
            var queries = {}, mqls = {}, results = {}, normalizeCache = {};
            $mdMedia.getResponsiveAttribute = function(attrs, attrName) {
                for (var i = 0; i < $mdConstant.MEDIA_PRIORITY.length; i++) {
                    var mediaName = $mdConstant.MEDIA_PRIORITY[i];
                    if (mqls[queries[mediaName]].matches) {
                        var normalizedName = getNormalizedName(attrs, attrName + "-" + mediaName);
                        if (attrs[normalizedName]) return attrs[normalizedName];
                    }
                }
                return attrs[getNormalizedName(attrs, attrName)];
            };
            $mdMedia.getQuery = function(name) {
                return mqls[name];
            };
            $mdMedia.watchResponsiveAttributes = function(attrNames, attrs, watchFn) {
                var unwatchFns = [];
                attrNames.forEach(function(attrName) {
                    var normalizedName = getNormalizedName(attrs, attrName);
                    angular.isDefined(attrs[normalizedName]) && unwatchFns.push(attrs.$observe(normalizedName, angular.bind(void 0, watchFn, null)));
                    for (var mediaName in $mdConstant.MEDIA) {
                        normalizedName = getNormalizedName(attrs, attrName + "-" + mediaName);
                        angular.isDefined(attrs[normalizedName]) && unwatchFns.push(attrs.$observe(normalizedName, angular.bind(void 0, watchFn, mediaName)));
                    }
                });
                return function() {
                    unwatchFns.forEach(function(fn) {
                        fn();
                    });
                };
            };
            return $mdMedia;
            function $mdMedia(query) {
                var validated = queries[query];
                angular.isUndefined(validated) && (validated = queries[query] = function(query) {
                    return $mdConstant.MEDIA[query] || ("(" !== query.charAt(0) ? "(" + query + ")" : query);
                }(query));
                var result = results[validated];
                angular.isUndefined(result) && (result = function(query) {
                    var result = mqls[query];
                    result || (result = mqls[query] = $window.matchMedia(query));
                    result.addListener(onQueryChange);
                    return results[result.media] = !!result.matches;
                }(validated));
                return result;
            }
            function onQueryChange(query) {
                $rootScope.$evalAsync(function() {
                    results[query.media] = !!query.matches;
                });
            }
            function getNormalizedName(attrs, attrName) {
                return normalizeCache[attrName] || (normalizeCache[attrName] = attrs.$normalize(attrName));
            }
        }
        mdMediaFactory.$inject = [ "$mdConstant", "$rootScope", "$window" ];
    }();
    !function() {
        var nextUniqueId = 0;
        angular.module("material.core").factory("$mdUtil", UtilFactory);
        function UtilFactory($document, $timeout, $compile, $rootScope, $$mdAnimate, $interpolate, $log, $rootElement, $window) {
            var startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), usesStandardSymbols = "{{" === startSymbol && "}}" === endSymbol, hasComputedStyle = function(target, key, expectedVal) {
                var hasValue = !1;
                if (target && target.length) {
                    var computedStyles = $window.getComputedStyle(target[0]);
                    hasValue = angular.isDefined(computedStyles[key]) && (!expectedVal || computedStyles[key] == expectedVal);
                }
                return hasValue;
            }, $mdUtil = {
                dom: {},
                now: window.performance ? angular.bind(window.performance, window.performance.now) : Date.now || function() {
                    return new Date().getTime();
                },
                clientRect: function(element, offsetParent, isOffsetRect) {
                    var node = getNode(element);
                    offsetParent = getNode(offsetParent || node.offsetParent || document.body);
                    var nodeRect = node.getBoundingClientRect(), offsetRect = isOffsetRect ? offsetParent.getBoundingClientRect() : {
                        left: 0,
                        top: 0,
                        width: 0,
                        height: 0
                    };
                    return {
                        left: nodeRect.left - offsetRect.left,
                        top: nodeRect.top - offsetRect.top,
                        width: nodeRect.width,
                        height: nodeRect.height
                    };
                },
                offsetRect: function(element, offsetParent) {
                    return $mdUtil.clientRect(element, offsetParent, !0);
                },
                nodesToArray: function(nodes) {
                    nodes = nodes || [];
                    for (var results = [], i = 0; i < nodes.length; ++i) results.push(nodes.item(i));
                    return results;
                },
                scrollTop: function(element) {
                    var body = (element = angular.element(element || $document[0].body))[0] == $document[0].body ? $document[0].body : void 0;
                    return (body ? body.scrollTop + body.parentElement.scrollTop : 0) || Math.abs(element[0].getBoundingClientRect().top);
                },
                findFocusTarget: function(containerEl, attributeVal) {
                    var elToFocus;
                    (elToFocus = scanForFocusable(containerEl, attributeVal || "[md-autofocus]")) || "[md-autofocus]" == attributeVal || (elToFocus = scanForFocusable(containerEl, "[md-auto-focus]")) || (elToFocus = scanForFocusable(containerEl, "[md-autofocus]"));
                    return elToFocus;
                    function scanForFocusable(target, selector) {
                        var elFound, items = target[0].querySelectorAll(selector);
                        if (items && items.length) {
                            var matches = /\s*\[?([\-a-z]*)\]?\s*/i.exec(selector), attribute = matches ? matches[1] : null;
                            items.length && angular.forEach(items, function(it) {
                                var focusExpression = (it = angular.element(it))[0].getAttribute(attribute);
                                (!focusExpression || !$mdUtil.validateScope(it) || !1 !== it.scope().$eval(focusExpression)) && (elFound = it);
                            });
                        }
                        return elFound;
                    }
                },
                disableScrollAround: function(element, parent) {
                    $mdUtil.disableScrollAround._count = $mdUtil.disableScrollAround._count || 0;
                    ++$mdUtil.disableScrollAround._count;
                    if ($mdUtil.disableScrollAround._enableScrolling) return $mdUtil.disableScrollAround._enableScrolling;
                    element = angular.element(element);
                    var body = $document[0].body, restoreBody = function() {
                        var htmlNode = body.parentNode, restoreHtmlStyle = htmlNode.getAttribute("style") || "", restoreBodyStyle = body.getAttribute("style") || "", scrollOffset = $mdUtil.scrollTop(body), clientWidth = body.clientWidth;
                        if (body.scrollHeight > body.clientHeight + 1) {
                            applyStyles(body, {
                                position: "fixed",
                                width: "100%",
                                top: -scrollOffset + "px"
                            });
                            applyStyles(htmlNode, {
                                overflowY: "scroll"
                            });
                        }
                        body.clientWidth < clientWidth && applyStyles(body, {
                            overflow: "hidden"
                        });
                        return function() {
                            body.setAttribute("style", restoreBodyStyle);
                            htmlNode.setAttribute("style", restoreHtmlStyle);
                            body.scrollTop = scrollOffset;
                            htmlNode.scrollTop = scrollOffset;
                        };
                    }(), restoreElement = function(element) {
                        element = angular.element(element || body)[0];
                        var scrollMask = angular.element('<div class="md-scroll-mask" style="z-index: 50">  <div class="md-scroll-mask-bar"></div></div>');
                        element.appendChild(scrollMask[0]);
                        scrollMask.on("wheel", preventDefault);
                        scrollMask.on("touchmove", preventDefault);
                        $document.on("keydown", disableKeyNav);
                        return function() {
                            scrollMask.off("wheel");
                            scrollMask.off("touchmove");
                            scrollMask[0].parentNode.removeChild(scrollMask[0]);
                            $document.off("keydown", disableKeyNav);
                            delete $mdUtil.disableScrollAround._enableScrolling;
                        };
                        function disableKeyNav(e) {}
                        function preventDefault(e) {
                            e.preventDefault();
                        }
                    }(parent);
                    return $mdUtil.disableScrollAround._enableScrolling = function() {
                        if (!--$mdUtil.disableScrollAround._count) {
                            restoreBody();
                            restoreElement();
                            delete $mdUtil.disableScrollAround._enableScrolling;
                        }
                    };
                    function applyStyles(el, styles) {
                        for (var key in styles) el.style[key] = styles[key];
                    }
                },
                enableScrolling: function() {
                    var method = this.disableScrollAround._enableScrolling;
                    method && method();
                },
                floatingScrollbars: function() {
                    if (void 0 === this.floatingScrollbars.cached) {
                        var tempNode = angular.element('<div style="width: 100%; z-index: -1; position: absolute; height: 35px; overflow-y: scroll"><div style="height: 60px;"></div></div>');
                        $document[0].body.appendChild(tempNode[0]);
                        this.floatingScrollbars.cached = tempNode[0].offsetWidth == tempNode[0].childNodes[0].offsetWidth;
                        tempNode.remove();
                    }
                    return this.floatingScrollbars.cached;
                },
                forceFocus: function(element) {
                    var node = element[0] || element;
                    document.addEventListener("click", function focusOnClick(ev) {
                        if (ev.target === node && ev.$focus) {
                            node.focus();
                            ev.stopImmediatePropagation();
                            ev.preventDefault();
                            node.removeEventListener("click", focusOnClick);
                        }
                    }, !0);
                    var newEvent = document.createEvent("MouseEvents");
                    newEvent.initMouseEvent("click", !1, !0, window, {}, 0, 0, 0, 0, !1, !1, !1, !1, 0, null);
                    newEvent.$material = !0;
                    newEvent.$focus = !0;
                    node.dispatchEvent(newEvent);
                },
                createBackdrop: function(scope, addClass) {
                    return $compile($mdUtil.supplant('<md-backdrop class="{0}">', [ addClass ]))(scope);
                },
                supplant: function(template, values, pattern) {
                    pattern = pattern || /\{([^\{\}]*)\}/g;
                    return template.replace(pattern, function(a, b) {
                        var p = b.split("."), r = values;
                        try {
                            for (var s in p) p.hasOwnProperty(s) && (r = r[p[s]]);
                        } catch (e) {
                            r = a;
                        }
                        return "string" == typeof r || "number" == typeof r ? r : a;
                    });
                },
                fakeNgModel: function() {
                    return {
                        $fake: !0,
                        $setTouched: angular.noop,
                        $setViewValue: function(value) {
                            this.$viewValue = value;
                            this.$render(value);
                            this.$viewChangeListeners.forEach(function(cb) {
                                cb();
                            });
                        },
                        $isEmpty: function(value) {
                            return 0 === ("" + value).length;
                        },
                        $parsers: [],
                        $formatters: [],
                        $viewChangeListeners: [],
                        $render: angular.noop
                    };
                },
                debounce: function(func, wait, scope, invokeApply) {
                    var timer;
                    return function() {
                        var context = scope, args = Array.prototype.slice.call(arguments);
                        $timeout.cancel(timer);
                        timer = $timeout(function() {
                            timer = void 0;
                            func.apply(context, args);
                        }, wait || 10, invokeApply);
                    };
                },
                throttle: function(func, delay) {
                    var recent;
                    return function() {
                        var args = arguments, now = $mdUtil.now();
                        if (!recent || delay < now - recent) {
                            func.apply(this, args);
                            recent = now;
                        }
                    };
                },
                time: function(cb) {
                    var start = $mdUtil.now();
                    cb();
                    return $mdUtil.now() - start;
                },
                valueOnUse: function(scope, key, getter) {
                    var value = null, args = Array.prototype.slice.call(arguments), params = 3 < args.length ? args.slice(3) : [];
                    Object.defineProperty(scope, key, {
                        get: function() {
                            null === value && (value = getter.apply(scope, params));
                            return value;
                        }
                    });
                },
                nextUid: function() {
                    return "" + nextUniqueId++;
                },
                validateScope: function(element) {
                    var hasScope = element && angular.isDefined(element.scope());
                    hasScope || $log.warn("element.scope() is not available when 'debug mode' == false. @see https://docs.angularjs.org/guide/production!");
                    return hasScope;
                },
                disconnectScope: function(scope) {
                    if (scope && scope.$root !== scope && !scope.$$destroyed) {
                        var parent = scope.$parent;
                        scope.$$disconnected = !0;
                        parent.$$childHead === scope && (parent.$$childHead = scope.$$nextSibling);
                        parent.$$childTail === scope && (parent.$$childTail = scope.$$prevSibling);
                        scope.$$prevSibling && (scope.$$prevSibling.$$nextSibling = scope.$$nextSibling);
                        scope.$$nextSibling && (scope.$$nextSibling.$$prevSibling = scope.$$prevSibling);
                        scope.$$nextSibling = scope.$$prevSibling = null;
                    }
                },
                reconnectScope: function(scope) {
                    if (scope && scope.$root !== scope && scope.$$disconnected) {
                        var child = scope, parent = child.$parent;
                        child.$$disconnected = !1;
                        child.$$prevSibling = parent.$$childTail;
                        if (parent.$$childHead) {
                            parent.$$childTail.$$nextSibling = child;
                            parent.$$childTail = child;
                        } else parent.$$childHead = parent.$$childTail = child;
                    }
                },
                getClosest: function(el, tagName, onlyParent) {
                    el instanceof angular.element && (el = el[0]);
                    tagName = tagName.toUpperCase();
                    onlyParent && (el = el.parentNode);
                    if (!el) return null;
                    do {
                        if (el.nodeName === tagName) return el;
                    } while (el = el.parentNode);
                    return null;
                },
                elementContains: function(node, child) {
                    return (window.Node && window.Node.prototype && Node.prototype.contains ? angular.bind(node, node.contains) : angular.bind(node, function(arg) {
                        return node === child || !!(16 & this.compareDocumentPosition(arg));
                    }))(child);
                },
                extractElementByName: function(element, nodeName, scanDeep, warnNotFound) {
                    var found = scanTree(element);
                    !found && warnNotFound && $log.warn($mdUtil.supplant("Unable to find node '{0}' in element '{1}'.", [ nodeName, element[0].outerHTML ]));
                    return angular.element(found || element);
                    function scanTree(element) {
                        return function(element) {
                            if (element) for (var i = 0, len = element.length; i < len; i++) if (element[i].nodeName.toLowerCase() === nodeName) return element[i];
                            return null;
                        }(element) || (scanDeep ? function(element) {
                            var found;
                            if (element) for (var i = 0, len = element.length; i < len; i++) {
                                var target = element[i];
                                if (!found) for (var j = 0, numChild = target.childNodes.length; j < numChild; j++) found = found || scanTree([ target.childNodes[j] ]);
                            }
                            return found;
                        }(element) : null);
                    }
                },
                initOptionalProperties: function(scope, attr, defaults) {
                    defaults = defaults || {};
                    angular.forEach(scope.$$isolateBindings, function(binding, key) {
                        if (binding.optional && angular.isUndefined(scope[key])) {
                            var attrIsDefined = angular.isDefined(attr[binding.attrName]);
                            scope[key] = angular.isDefined(defaults[key]) ? defaults[key] : attrIsDefined;
                        }
                    });
                },
                nextTick: function(callback, digest, scope) {
                    var nextTick = $mdUtil.nextTick, timeout = nextTick.timeout, queue = nextTick.queue || [];
                    queue.push(callback);
                    null == digest && (digest = !0);
                    nextTick.digest = nextTick.digest || digest;
                    nextTick.queue = queue;
                    return timeout || (nextTick.timeout = $timeout(function() {
                        var skip = scope && scope.$$destroyed, queue = skip ? [] : nextTick.queue, digest = skip ? null : nextTick.digest;
                        nextTick.queue = [];
                        nextTick.timeout = null;
                        nextTick.digest = !1;
                        queue.forEach(function(callback) {
                            callback();
                        });
                        digest && $rootScope.$digest();
                    }, 0, !1));
                },
                processTemplate: function(template) {
                    return usesStandardSymbols ? template : template && angular.isString(template) ? template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol) : template;
                },
                getParentWithPointerEvents: function(element) {
                    for (var parent = element.parent(); hasComputedStyle(parent, "pointer-events", "none"); ) parent = parent.parent();
                    return parent;
                },
                getNearestContentElement: function(element) {
                    for (var current = element.parent()[0]; current && current !== $rootElement[0] && current !== document.body && "MD-CONTENT" !== current.nodeName.toUpperCase(); ) current = current.parentNode;
                    return current;
                },
                hasComputedStyle: hasComputedStyle
            };
            $mdUtil.dom.animator = $$mdAnimate($mdUtil);
            return $mdUtil;
            function getNode(el) {
                return el[0] || el;
            }
        }
        UtilFactory.$inject = [ "$document", "$timeout", "$compile", "$rootScope", "$$mdAnimate", "$interpolate", "$log", "$rootElement", "$window" ];
        angular.element.prototype.focus = angular.element.prototype.focus || function() {
            this.length && this[0].focus();
            return this;
        };
        angular.element.prototype.blur = angular.element.prototype.blur || function() {
            this.length && this[0].blur();
            return this;
        };
    }();
    !function() {
        angular.module("material.core").service("$mdAria", AriaService);
        function AriaService($$rAF, $log, $window) {
            return {
                expect: expect,
                expectAsync: expectAsync,
                expectWithText: function(element, attrName) {
                    expectAsync(element, attrName, function() {
                        return function(element) {
                            return element.text().trim();
                        }(element);
                    });
                }
            };
            function expect(element, attrName, defaultValue) {
                var node = angular.element(element)[0] || element;
                !node || node.hasAttribute(attrName) && 0 !== node.getAttribute(attrName).length || function(node, attrName) {
                    var hasChildren = node.hasChildNodes(), hasAttr = !1;
                    if (hasChildren) for (var children = node.childNodes, i = 0; i < children.length; i++) {
                        var child = children[i];
                        1 === child.nodeType && child.hasAttribute(attrName) && ((void 0, "none" === ((el = child).currentStyle ? el.currentStyle : $window.getComputedStyle(el)).display) || (hasAttr = !0));
                    }
                    var el;
                    return hasAttr;
                }(node, attrName) || ((defaultValue = angular.isString(defaultValue) ? defaultValue.trim() : "").length ? element.attr(attrName, defaultValue) : $log.warn('ARIA: Attribute "', attrName, '", required for accessibility, is missing on node:', node));
            }
            function expectAsync(element, attrName, defaultValueGetter) {
                $$rAF(function() {
                    expect(element, attrName, defaultValueGetter());
                });
            }
        }
        AriaService.$inject = [ "$$rAF", "$log", "$window" ];
    }();
    !function() {
        angular.module("material.core").service("$mdCompiler", mdCompilerService);
        function mdCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {
            this.compile = function(options) {
                var templateUrl = options.templateUrl, template = options.template || "", controller = options.controller, controllerAs = options.controllerAs, resolve = angular.extend({}, options.resolve || {}), locals = angular.extend({}, options.locals || {}), transformTemplate = options.transformTemplate || angular.identity, bindToController = options.bindToController;
                angular.forEach(resolve, function(value, key) {
                    angular.isString(value) ? resolve[key] = $injector.get(value) : resolve[key] = $injector.invoke(value);
                });
                angular.extend(resolve, locals);
                resolve.$template = templateUrl ? $http.get(templateUrl, {
                    cache: $templateCache
                }).then(function(response) {
                    return response.data;
                }) : $q.when(template);
                return $q.all(resolve).then(function(locals) {
                    var compiledData, template = transformTemplate(locals.$template, options), element = options.element || angular.element("<div>").html(template.trim()).contents(), linkFn = $compile(element);
                    return compiledData = {
                        locals: locals,
                        element: element,
                        link: function(scope) {
                            locals.$scope = scope;
                            if (controller) {
                                var invokeCtrl = $controller(controller, locals, !0);
                                bindToController && angular.extend(invokeCtrl.instance, locals);
                                var ctrl = invokeCtrl();
                                element.data("$ngControllerController", ctrl);
                                element.children().data("$ngControllerController", ctrl);
                                controllerAs && (scope[controllerAs] = ctrl);
                                compiledData.controller = ctrl;
                            }
                            return linkFn(scope);
                        }
                    };
                });
            };
        }
        mdCompilerService.$inject = [ "$q", "$http", "$injector", "$compile", "$controller", "$templateCache" ];
    }();
    !function() {
        var pointer, lastPointer, HANDLERS = {}, forceSkipClickHijack = !1, lastLabelClickPos = null, isInitialized = !1;
        angular.module("material.core.gestures", []).provider("$mdGesture", MdGestureProvider).factory("$$MdGestureHandler", function() {
            var hasJQuery = void 0 !== window.jQuery && angular.element === window.jQuery;
            GestureHandler.prototype = {
                options: {},
                dispatchEvent: hasJQuery ? function(srcEvent, eventType, eventPointer) {
                    eventPointer = eventPointer || pointer;
                    var eventObj = new angular.element.Event(eventType);
                    eventObj.$material = !0;
                    eventObj.pointer = eventPointer;
                    eventObj.srcEvent = srcEvent;
                    angular.extend(eventObj, {
                        clientX: eventPointer.x,
                        clientY: eventPointer.y,
                        screenX: eventPointer.x,
                        screenY: eventPointer.y,
                        pageX: eventPointer.x,
                        pageY: eventPointer.y,
                        ctrlKey: srcEvent.ctrlKey,
                        altKey: srcEvent.altKey,
                        shiftKey: srcEvent.shiftKey,
                        metaKey: srcEvent.metaKey
                    });
                    angular.element(eventPointer.target).trigger(eventObj);
                } : function(srcEvent, eventType, eventPointer) {
                    eventPointer = eventPointer || pointer;
                    var eventObj;
                    "click" === eventType || "mouseup" == eventType || "mousedown" == eventType ? (eventObj = document.createEvent("MouseEvents")).initMouseEvent(eventType, !0, !0, window, srcEvent.detail, eventPointer.x, eventPointer.y, eventPointer.x, eventPointer.y, srcEvent.ctrlKey, srcEvent.altKey, srcEvent.shiftKey, srcEvent.metaKey, srcEvent.button, srcEvent.relatedTarget || null) : (eventObj = document.createEvent("CustomEvent")).initCustomEvent(eventType, !0, !0, {});
                    eventObj.$material = !0;
                    eventObj.pointer = eventPointer;
                    eventObj.srcEvent = srcEvent;
                    eventPointer.target.dispatchEvent(eventObj);
                },
                onStart: angular.noop,
                onMove: angular.noop,
                onEnd: angular.noop,
                onCancel: angular.noop,
                start: function(ev, pointer) {
                    if (!this.state.isRunning) {
                        var parentTarget = this.getNearestParent(ev.target), parentTargetOptions = parentTarget && parentTarget.$mdGesture[this.name] || {};
                        this.state = {
                            isRunning: !0,
                            options: angular.extend({}, this.options, parentTargetOptions),
                            registeredParent: parentTarget
                        };
                        this.onStart(ev, pointer);
                    }
                },
                move: function(ev, pointer) {
                    this.state.isRunning && this.onMove(ev, pointer);
                },
                end: function(ev, pointer) {
                    if (this.state.isRunning) {
                        this.onEnd(ev, pointer);
                        this.state.isRunning = !1;
                    }
                },
                cancel: function(ev, pointer) {
                    this.onCancel(ev, pointer);
                    this.state = {};
                },
                getNearestParent: function(node) {
                    for (var current = node; current; ) {
                        if ((current.$mdGesture || {})[this.name]) return current;
                        current = current.parentNode;
                    }
                    return null;
                },
                registerElement: function(element, options) {
                    var self = this;
                    element[0].$mdGesture = element[0].$mdGesture || {};
                    element[0].$mdGesture[this.name] = options || {};
                    element.on("$destroy", onDestroy);
                    return onDestroy;
                    function onDestroy() {
                        delete element[0].$mdGesture[self.name];
                        element.off("$destroy", onDestroy);
                    }
                }
            };
            return GestureHandler;
        }).run(attachToDocument);
        function MdGestureProvider() {}
        MdGestureProvider.prototype = {
            skipClickHijack: function() {
                return forceSkipClickHijack = !0;
            },
            $get: [ "$$MdGestureHandler", "$$rAF", "$timeout", function($$MdGestureHandler, $$rAF, $timeout) {
                return new MdGesture($$MdGestureHandler, $$rAF, $timeout);
            } ]
        };
        function MdGesture($$MdGestureHandler, $$rAF, $timeout) {
            var userAgent = navigator.userAgent || navigator.vendor || window.opera, isIos = userAgent.match(/ipad|iphone|ipod/i), isAndroid = userAgent.match(/android/i), hasJQuery = void 0 !== window.jQuery && angular.element === window.jQuery, self = {
                handler: function(name, definition) {
                    var handler = new $$MdGestureHandler(name);
                    angular.extend(handler, definition);
                    HANDLERS[name] = handler;
                    return self;
                },
                register: function(element, handlerName, options) {
                    var handler = HANDLERS[handlerName.replace(/^\$md./, "")];
                    if (handler) return handler.registerElement(element, options);
                    throw new Error("Failed to register element with handler " + handlerName + ". Available handlers: " + Object.keys(HANDLERS).join(", "));
                },
                isHijackingClicks: (isIos || isAndroid) && !hasJQuery && !forceSkipClickHijack
            };
            if (self.isHijackingClicks) {
                self.handler("click", {
                    options: {
                        maxDistance: 6
                    },
                    onEnd: checkDistanceAndEmit("click")
                });
                self.handler("focus", {
                    options: {
                        maxDistance: 6
                    },
                    onEnd: function(ev, pointer) {
                        if (pointer.distance < this.state.options.maxDistance && "-1" != (element = ev.target).getAttribute("tabindex") && !element.hasAttribute("DISABLED") && (element.hasAttribute("tabindex") || element.hasAttribute("href") || -1 != [ "INPUT", "SELECT", "BUTTON", "TEXTAREA", "VIDEO", "AUDIO" ].indexOf(element.nodeName))) {
                            this.dispatchEvent(ev, "focus", pointer);
                            ev.target.focus();
                        }
                        var element;
                    }
                });
                self.handler("mouseup", {
                    options: {
                        maxDistance: 6
                    },
                    onEnd: checkDistanceAndEmit("mouseup")
                });
                self.handler("mousedown", {
                    onStart: function(ev) {
                        this.dispatchEvent(ev, "mousedown");
                    }
                });
            }
            function checkDistanceAndEmit(eventName) {
                return function(ev, pointer) {
                    pointer.distance < this.state.options.maxDistance && this.dispatchEvent(ev, eventName, pointer);
                };
            }
            return self.handler("press", {
                onStart: function(ev, pointer) {
                    this.dispatchEvent(ev, "$md.pressdown");
                },
                onEnd: function(ev, pointer) {
                    this.dispatchEvent(ev, "$md.pressup");
                }
            }).handler("hold", {
                options: {
                    maxDistance: 6,
                    delay: 500
                },
                onCancel: function() {
                    $timeout.cancel(this.state.timeout);
                },
                onStart: function(ev, pointer) {
                    if (!this.state.registeredParent) return this.cancel();
                    this.state.pos = {
                        x: pointer.x,
                        y: pointer.y
                    };
                    this.state.timeout = $timeout(angular.bind(this, function() {
                        this.dispatchEvent(ev, "$md.hold");
                        this.cancel();
                    }), this.state.options.delay, !1);
                },
                onMove: function(ev, pointer) {
                    ev.preventDefault();
                    var dx = this.state.pos.x - pointer.x, dy = this.state.pos.y - pointer.y;
                    Math.sqrt(dx * dx + dy * dy) > this.options.maxDistance && this.cancel();
                },
                onEnd: function() {
                    this.onCancel();
                }
            }).handler("drag", {
                options: {
                    minDistance: 6,
                    horizontal: !0,
                    cancelMultiplier: 1.5
                },
                onStart: function(ev) {
                    this.state.registeredParent || this.cancel();
                },
                onMove: function(ev, pointer) {
                    var shouldStartDrag, shouldCancel;
                    ev.preventDefault();
                    if (this.state.dragPointer) this.dispatchDragMove(ev); else {
                        if (this.state.options.horizontal) {
                            shouldStartDrag = Math.abs(pointer.distanceX) > this.state.options.minDistance;
                            shouldCancel = Math.abs(pointer.distanceY) > this.state.options.minDistance * this.state.options.cancelMultiplier;
                        } else {
                            shouldStartDrag = Math.abs(pointer.distanceY) > this.state.options.minDistance;
                            shouldCancel = Math.abs(pointer.distanceX) > this.state.options.minDistance * this.state.options.cancelMultiplier;
                        }
                        if (shouldStartDrag) {
                            this.state.dragPointer = makeStartPointer(ev);
                            updatePointerState(ev, this.state.dragPointer);
                            this.dispatchEvent(ev, "$md.dragstart", this.state.dragPointer);
                        } else shouldCancel && this.cancel();
                    }
                },
                dispatchDragMove: $$rAF.throttle(function(ev) {
                    if (this.state.isRunning) {
                        updatePointerState(ev, this.state.dragPointer);
                        this.dispatchEvent(ev, "$md.drag", this.state.dragPointer);
                    }
                }),
                onEnd: function(ev, pointer) {
                    if (this.state.dragPointer) {
                        updatePointerState(ev, this.state.dragPointer);
                        this.dispatchEvent(ev, "$md.dragend", this.state.dragPointer);
                    }
                }
            }).handler("swipe", {
                options: {
                    minVelocity: .65,
                    minDistance: 10
                },
                onEnd: function(ev, pointer) {
                    var eventType;
                    if (Math.abs(pointer.velocityX) > this.state.options.minVelocity && Math.abs(pointer.distanceX) > this.state.options.minDistance) {
                        eventType = "left" == pointer.directionX ? "$md.swipeleft" : "$md.swiperight";
                        this.dispatchEvent(ev, eventType);
                    } else if (Math.abs(pointer.velocityY) > this.state.options.minVelocity && Math.abs(pointer.distanceY) > this.state.options.minDistance) {
                        eventType = "up" == pointer.directionY ? "$md.swipeup" : "$md.swipedown";
                        this.dispatchEvent(ev, eventType);
                    }
                }
            });
        }
        MdGesture.$inject = [ "$$MdGestureHandler", "$$rAF", "$timeout" ];
        function GestureHandler(name) {
            this.name = name;
            this.state = {};
        }
        function attachToDocument($mdGesture, $$MdGestureHandler) {
            document.contains || (document.contains = function(node) {
                return document.body.contains(node);
            });
            if (!isInitialized && $mdGesture.isHijackingClicks) {
                document.addEventListener("click", function(ev) {
                    if (0 === ev.clientX && 0 === ev.clientY || ev.$material || ev.isIonicTap || isInputEventFromLabelClick(ev)) {
                        lastLabelClickPos = null;
                        "label" == ev.target.tagName.toLowerCase() && (lastLabelClickPos = {
                            x: ev.x,
                            y: ev.y
                        });
                    } else {
                        ev.preventDefault();
                        ev.stopPropagation();
                        lastLabelClickPos = null;
                    }
                }, !0);
                document.addEventListener("mouseup", mouseInputHijacker, !0);
                document.addEventListener("mousedown", mouseInputHijacker, !0);
                document.addEventListener("focus", mouseInputHijacker, !0);
                isInitialized = !0;
            }
            function mouseInputHijacker(ev) {
                if (!(!ev.clientX && !ev.clientY || ev.$material || ev.isIonicTap || isInputEventFromLabelClick(ev))) {
                    ev.preventDefault();
                    ev.stopPropagation();
                }
            }
            angular.element(document).on("mousedown touchstart pointerdown", function(ev) {
                if (pointer) return;
                var now = +Date.now();
                if (lastPointer && !typesMatch(ev, lastPointer) && now - lastPointer.endTime < 1500) return;
                pointer = makeStartPointer(ev);
                runHandlers("start", ev);
            }).on("mousemove touchmove pointermove", function(ev) {
                if (!pointer || !typesMatch(ev, pointer)) return;
                updatePointerState(ev, pointer);
                runHandlers("move", ev);
            }).on("mouseup mouseleave touchend touchcancel pointerup pointercancel", function(ev) {
                if (!pointer || !typesMatch(ev, pointer)) return;
                updatePointerState(ev, pointer);
                pointer.endTime = +Date.now();
                runHandlers("end", ev);
                lastPointer = pointer;
                pointer = null;
            }).on("$$mdGestureReset", function() {
                lastPointer = pointer = null;
            });
            function runHandlers(handlerEvent, event) {
                var handler;
                for (var name in HANDLERS) if ((handler = HANDLERS[name]) instanceof $$MdGestureHandler) {
                    "start" === handlerEvent && handler.cancel();
                    handler[handlerEvent](event, pointer);
                }
            }
        }
        attachToDocument.$inject = [ "$mdGesture", "$$MdGestureHandler" ];
        function makeStartPointer(ev) {
            var point = getEventPoint(ev), startPointer = {
                startTime: +Date.now(),
                target: ev.target,
                type: ev.type.charAt(0)
            };
            startPointer.startX = startPointer.x = point.pageX;
            startPointer.startY = startPointer.y = point.pageY;
            return startPointer;
        }
        function typesMatch(ev, pointer) {
            return ev && pointer && ev.type.charAt(0) === pointer.type;
        }
        function isInputEventFromLabelClick(event) {
            return lastLabelClickPos && lastLabelClickPos.x == event.x && lastLabelClickPos.y == event.y;
        }
        function updatePointerState(ev, pointer) {
            var point = getEventPoint(ev), x = pointer.x = point.pageX, y = pointer.y = point.pageY;
            pointer.distanceX = x - pointer.startX;
            pointer.distanceY = y - pointer.startY;
            pointer.distance = Math.sqrt(pointer.distanceX * pointer.distanceX + pointer.distanceY * pointer.distanceY);
            pointer.directionX = 0 < pointer.distanceX ? "right" : pointer.distanceX < 0 ? "left" : "";
            pointer.directionY = 0 < pointer.distanceY ? "down" : pointer.distanceY < 0 ? "up" : "";
            pointer.duration = +Date.now() - pointer.startTime;
            pointer.velocityX = pointer.distanceX / pointer.duration;
            pointer.velocityY = pointer.distanceY / pointer.duration;
        }
        function getEventPoint(ev) {
            return (ev = ev.originalEvent || ev).touches && ev.touches[0] || ev.changedTouches && ev.changedTouches[0] || ev;
        }
    }();
    angular.module("material.core").provider("$$interimElement", function() {
        (createInterimElementProvider.$get = InterimElementFactory).$inject = [ "$document", "$q", "$$q", "$rootScope", "$timeout", "$rootElement", "$animate", "$mdUtil", "$mdCompiler", "$mdTheming", "$injector" ];
        return createInterimElementProvider;
        function createInterimElementProvider(interimFactoryName) {
            var EXPOSED_METHODS = [ "onHide", "onShow", "onRemove" ], customMethods = {}, providerConfig = {
                presets: {}
            }, provider = {
                setDefaults: function(definition) {
                    providerConfig.optionsFactory = definition.options;
                    providerConfig.methods = (definition.methods || []).concat(EXPOSED_METHODS);
                    return provider;
                },
                addPreset: function(name, definition) {
                    (definition = definition || {}).methods = definition.methods || [];
                    definition.options = definition.options || function() {
                        return {};
                    };
                    if (/^cancel|hide|show$/.test(name)) throw new Error("Preset '" + name + "' in " + interimFactoryName + " is reserved!");
                    if (-1 < definition.methods.indexOf("_options")) throw new Error("Method '_options' in " + interimFactoryName + " is reserved!");
                    providerConfig.presets[name] = {
                        methods: definition.methods.concat(EXPOSED_METHODS),
                        optionsFactory: definition.options,
                        argOption: definition.argOption
                    };
                    return provider;
                },
                addMethod: function(name, fn) {
                    customMethods[name] = fn;
                    return provider;
                },
                $get: factory
            };
            provider.addPreset("build", {
                methods: [ "controller", "controllerAs", "resolve", "template", "templateUrl", "themable", "transformTemplate", "parent" ]
            });
            factory.$inject = [ "$$interimElement", "$injector" ];
            return provider;
            function factory($$interimElement, $injector) {
                var defaultMethods, defaultOptions, interimElementService = $$interimElement(), publicService = {
                    hide: interimElementService.hide,
                    cancel: interimElementService.cancel,
                    show: function(opts) {
                        (opts = opts || {})._options && (opts = opts._options);
                        return interimElementService.show(angular.extend({}, defaultOptions, opts));
                    },
                    destroy: function(opts) {
                        return interimElementService.destroy(opts);
                    }
                };
                defaultMethods = providerConfig.methods || [];
                defaultOptions = invokeFactory(providerConfig.optionsFactory, {});
                angular.forEach(customMethods, function(fn, name) {
                    publicService[name] = fn;
                });
                angular.forEach(providerConfig.presets, function(definition, name) {
                    var presetDefaults = invokeFactory(definition.optionsFactory, {}), presetMethods = (definition.methods || []).concat(defaultMethods);
                    angular.extend(presetDefaults, {
                        $type: name
                    });
                    function Preset(opts) {
                        this._options = angular.extend({}, presetDefaults, opts);
                    }
                    angular.forEach(presetMethods, function(name) {
                        Preset.prototype[name] = function(value) {
                            this._options[name] = value;
                            return this;
                        };
                    });
                    if (definition.argOption) {
                        var methodName = "show" + name.charAt(0).toUpperCase() + name.slice(1);
                        publicService[methodName] = function(arg) {
                            var config = publicService[name](arg);
                            return publicService.show(config);
                        };
                    }
                    publicService[name] = function(arg) {
                        return arguments.length && definition.argOption && !angular.isObject(arg) && !angular.isArray(arg) ? new Preset()[definition.argOption](arg) : new Preset(arg);
                    };
                });
                return publicService;
                function invokeFactory(factory, defaultVal) {
                    var locals = {};
                    locals[interimFactoryName] = publicService;
                    return $injector.invoke(factory || function() {
                        return defaultVal;
                    }, {}, locals);
                }
            }
        }
        function InterimElementFactory($document, $q, $$q, $rootScope, $timeout, $rootElement, $animate, $mdUtil, $mdCompiler, $mdTheming, $injector) {
            return function() {
                var service, stack = [];
                return service = {
                    show: function(options) {
                        var interimElement = new InterimElement((options = options || {}) || {});
                        (!options.skipHide && stack.length ? service.hide() : $q.when(!0)).finally(function() {
                            stack.push(interimElement);
                            interimElement.show().catch(function(reason) {
                                return reason;
                            });
                        });
                        return interimElement.deferred.promise;
                    },
                    hide: function(reason, options) {
                        if (!stack.length) return $q.when(reason);
                        if ((options = options || {}).closeAll) {
                            var promise = $q.all(stack.reverse().map(closeElement));
                            stack = [];
                            return promise;
                        }
                        if (void 0 !== options.closeTo) return $q.all(stack.splice(options.closeTo).map(closeElement));
                        var interim = stack.pop();
                        return closeElement(interim);
                        function closeElement(interim) {
                            interim.remove(reason, !1, options || {}).catch(function(reason) {
                                return reason;
                            });
                            return interim.deferred.promise;
                        }
                    },
                    cancel: function(reason, options) {
                        var interim = stack.shift();
                        if (!interim) return $q.when(reason);
                        interim.remove(reason, !0, options || {}).catch(function(reason) {
                            return reason;
                        });
                        return interim.deferred.promise;
                    },
                    destroy: function(target) {
                        var interim = target ? null : stack.shift(), cntr = angular.element(target).length ? angular.element(target)[0].parentNode : null;
                        if (cntr) {
                            var filtered = stack.filter(function(entry) {
                                var currNode = entry.options.element[0];
                                return currNode === cntr;
                            });
                            if (0 < filtered.length) {
                                interim = filtered[0];
                                stack.splice(stack.indexOf(interim), 1);
                            }
                        }
                        return interim ? interim.remove(!1, !1, {
                            $destroy: !0
                        }) : $q.when(!1);
                    },
                    $injector_: $injector
                };
                function InterimElement(options) {
                    var self, element, showAction = $q.when(!0);
                    options = function(options) {
                        (options = options || {}).template && (options.template = $mdUtil.processTemplate(options.template));
                        return angular.extend({
                            preserveScope: !1,
                            cancelAutoHide: angular.noop,
                            scope: options.scope || $rootScope.$new(options.isolateScope),
                            onShow: function(scope, element, options) {
                                return $animate.enter(element, options.parent);
                            },
                            onRemove: function(scope, element) {
                                return element && $animate.leave(element) || $q.when();
                            }
                        }, options);
                    }(options);
                    return self = {
                        options: options,
                        deferred: $q.defer(),
                        show: function() {
                            return $q(function(resolve, reject) {
                                (function(options) {
                                    return (options.skipCompile ? null : $mdCompiler.compile(options)) || $q(function(resolve) {
                                        resolve({
                                            locals: {},
                                            link: function() {
                                                return options.element;
                                            }
                                        });
                                    });
                                })(options).then(function(compiledData) {
                                    element = function(compileData, options) {
                                        angular.extend(compileData.locals, options);
                                        var element = compileData.link(options.scope);
                                        options.element = element;
                                        options.parent = function(element, options) {
                                            var el, parent = options.parent;
                                            if (((parent = angular.isFunction(parent) ? parent(options.scope, element, options) : angular.isString(parent) ? angular.element($document[0].querySelector(parent)) : angular.element(parent)) || {}).length) return parent;
                                            $rootElement[0] && $rootElement[0].querySelector && (el = $rootElement[0].querySelector(":not(svg) > body"));
                                            el || (el = $rootElement[0]);
                                            "#comment" == el.nodeName && (el = $document[0].body);
                                            return angular.element(el);
                                        }(element, options);
                                        options.themable && $mdTheming(element);
                                        return element;
                                    }(compiledData, options);
                                    showAction = function(element, options, controller) {
                                        var notifyShowing = options.onShowing || angular.noop, notifyComplete = options.onComplete || angular.noop;
                                        notifyShowing(options.scope, element, options, controller);
                                        return $q(function(resolve, reject) {
                                            try {
                                                $q.when(options.onShow(options.scope, element, options, controller)).then(function() {
                                                    notifyComplete(options.scope, element, options);
                                                    startAutoHide();
                                                    resolve(element);
                                                }, reject);
                                            } catch (e) {
                                                reject(e.message);
                                            }
                                        });
                                    }(element, options, compiledData.controller).then(resolve, rejectAll);
                                }, rejectAll);
                                function rejectAll(fault) {
                                    self.deferred.reject(fault);
                                    reject(fault);
                                }
                            });
                        },
                        remove: function(response, isCancelled, opts) {
                            if (!element) return $q.when(!1);
                            (options = angular.extend(options || {}, opts || {})).cancelAutoHide && options.cancelAutoHide();
                            options.element.triggerHandler("$mdInterimElementRemove");
                            if (!0 === options.$destroy) return hideElement(options.element, options).then(function() {
                                isCancelled && rejectAll(response) || resolveAll(response);
                            });
                            $q.when(showAction).finally(function() {
                                hideElement(options.element, options).then(function() {
                                    isCancelled && rejectAll(response) || resolveAll(response);
                                }, rejectAll);
                            });
                            return self.deferred.promise;
                            function resolveAll(response) {
                                self.deferred.resolve(response);
                            }
                            function rejectAll(fault) {
                                self.deferred.reject(fault);
                            }
                        }
                    };
                    function startAutoHide() {
                        var autoHideTimer, cancelAutoHide = angular.noop;
                        if (options.hideDelay) {
                            autoHideTimer = $timeout(service.hide, options.hideDelay);
                            cancelAutoHide = function() {
                                $timeout.cancel(autoHideTimer);
                            };
                        }
                        options.cancelAutoHide = function() {
                            cancelAutoHide();
                            options.cancelAutoHide = void 0;
                        };
                    }
                    function hideElement(element, options) {
                        var announceRemoving = options.onRemoving || angular.noop;
                        return $$q(function(resolve, reject) {
                            try {
                                var action = $$q.when(options.onRemove(options.scope, element, options) || !0);
                                announceRemoving(element, action);
                                1 == options.$destroy ? resolve(element) : action.then(function() {
                                    !options.preserveScope && options.scope && options.scope.$destroy();
                                    resolve(element);
                                }, reject);
                            } catch (e) {
                                reject(e.message);
                            }
                        });
                    }
                }
            };
        }
    });
    !function() {
        var $mdUtil, $interpolate, $log, SUFFIXES = /(-gt)?-(sm|md|lg)/g, WHITESPACE = /\s+/g, FLEX_OPTIONS = [ "grow", "initial", "auto", "none", "noshrink", "nogrow" ], LAYOUT_OPTIONS = [ "row", "column" ], ALIGNMENT_MAIN_AXIS = [ "", "start", "center", "end", "stretch", "space-around", "space-between" ], ALIGNMENT_CROSS_AXIS = [ "", "start", "center", "end", "stretch" ], config = {
            enabled: !0,
            breakpoints: []
        };
        !function(module) {
            var className, PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i, SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g, API_WITH_VALUES = [ "layout", "flex", "flex-order", "flex-offset", "layout-align" ], API_NO_VALUES = [ "show", "hide", "layout-padding", "layout-margin" ];
            angular.forEach([ "", "xs", "gt-xs", "sm", "gt-sm", "md", "gt-md", "lg", "gt-lg", "xl" ], function(mqb) {
                angular.forEach(API_WITH_VALUES, function(name) {
                    var fullName = mqb ? name + "-" + mqb : name;
                    module.directive(directiveNormalize(fullName), function(className) {
                        return [ "$mdUtil", "$interpolate", "$log", function(_$mdUtil_, _$interpolate_, _$log_) {
                            $mdUtil = _$mdUtil_;
                            $interpolate = _$interpolate_;
                            $log = _$log_;
                            return {
                                restrict: "A",
                                compile: function(element, attr) {
                                    var linkFn;
                                    if (config.enabled) {
                                        !function(className, attr, element, $log) {
                                            var usage, nodeName = element[0].nodeName.toLowerCase();
                                            switch (className.replace(SUFFIXES, "")) {
                                              case "flex":
                                                if ("md-button" == nodeName || "fieldset" == nodeName) {
                                                    usage = "<" + nodeName + " " + className + "></" + nodeName + ">";
                                                    $log.warn($mdUtil.supplant("Markup '{0}' may not work as expected in IE Browsers. Consult '{1}' for details.", [ usage, "https://github.com/philipwalton/flexbugs#9-some-html-elements-cant-be-flex-containers" ]));
                                                }
                                            }
                                        }(className, 0, element, $log);
                                        validateAttributeValue(className, getNormalizedAttrValue(className, attr, ""), buildUpdateFn(0, className, attr));
                                        linkFn = translateWithValueToCssClass;
                                    }
                                    return linkFn || angular.noop;
                                }
                            };
                        } ];
                        function translateWithValueToCssClass(scope, element, attrs) {
                            var updateFn = function(element, className) {
                                var lastClass;
                                return function(newValue) {
                                    var value = validateAttributeValue(className, newValue || "");
                                    if (angular.isDefined(value)) {
                                        lastClass && element.removeClass(lastClass);
                                        lastClass = value ? className + "-" + value.replace(WHITESPACE, "-") : className;
                                        element.addClass(lastClass);
                                    }
                                };
                            }(element, className), unwatch = attrs.$observe(attrs.$normalize(className), updateFn);
                            updateFn(getNormalizedAttrValue(className, attrs, ""));
                            scope.$on("$destroy", function() {
                                unwatch();
                            });
                        }
                    }(fullName));
                });
                angular.forEach(API_NO_VALUES, function(name) {
                    var fullName = mqb ? name + "-" + mqb : name;
                    module.directive(directiveNormalize(fullName), attributeWithoutValue(fullName));
                });
            });
            module.directive("mdLayoutCss", disableLayoutDirective).directive("ngCloak", (className = "ng-cloak", 
            [ "$timeout", function($timeout) {
                return {
                    restrict: "A",
                    priority: -10,
                    compile: function(element) {
                        if (!config.enabled) return angular.noop;
                        element.addClass(className);
                        return function(scope, element) {
                            $timeout(function() {
                                element.removeClass(className);
                            }, 10, !1);
                        };
                    }
                };
            } ])).directive("layoutWrap", attributeWithoutValue("layout-wrap")).directive("layoutNoWrap", attributeWithoutValue("layout-no-wrap")).directive("layoutFill", attributeWithoutValue("layout-fill")).directive("layoutLtMd", warnAttrNotSupported("layout-lt-md")).directive("layoutLtLg", warnAttrNotSupported("layout-lt-lg")).directive("flexLtMd", warnAttrNotSupported("flex-lt-md")).directive("flexLtLg", warnAttrNotSupported("flex-lt-lg")).directive("layoutAlignLtMd", warnAttrNotSupported("layout-align-lt-md")).directive("layoutAlignLtLg", warnAttrNotSupported("layout-align-lt-lg")).directive("flexOrderLtMd", warnAttrNotSupported("flex-order-lt-md")).directive("flexOrderLtLg", warnAttrNotSupported("flex-order-lt-lg")).directive("offsetLtMd", warnAttrNotSupported("flex-offset-lt-md")).directive("offsetLtLg", warnAttrNotSupported("flex-offset-lt-lg")).directive("hideLtMd", warnAttrNotSupported("hide-lt-md")).directive("hideLtLg", warnAttrNotSupported("hide-lt-lg")).directive("showLtMd", warnAttrNotSupported("show-lt-md")).directive("showLtLg", warnAttrNotSupported("show-lt-lg"));
            function directiveNormalize(name) {
                return name.replace(PREFIX_REGEXP, "").replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
                    return offset ? letter.toUpperCase() : letter;
                });
            }
        }(angular.module("material.core.layout", [ "ng" ]));
        function disableLayoutDirective() {
            return {
                restrict: "A",
                priority: "900",
                compile: function(element, attr) {
                    config.enabled = !1;
                    return angular.noop;
                }
            };
        }
        function attributeWithoutValue(className) {
            return [ "$mdUtil", "$interpolate", "$log", function(_$mdUtil_, _$interpolate_, _$log_) {
                $mdUtil = _$mdUtil_;
                $interpolate = _$interpolate_;
                $log = _$log_;
                return {
                    restrict: "A",
                    compile: function(element, attr) {
                        var linkFn;
                        if (config.enabled) {
                            validateAttributeValue(className, getNormalizedAttrValue(className, attr, ""), buildUpdateFn(0, className, attr));
                            translateToCssClass(0, element);
                            linkFn = translateToCssClass;
                        }
                        return linkFn || angular.noop;
                    }
                };
            } ];
            function translateToCssClass(scope, element) {
                element.addClass(className);
            }
        }
        function warnAttrNotSupported(className) {
            var parts = className.split("-");
            return [ "$log", function($log) {
                $log.warn(className + "has been deprecated. Please use a `" + parts[0] + "-gt-<xxx>` variant.");
                return angular.noop;
            } ];
        }
        function validateAttributeValue(className, value, updateFn) {
            var origValue = value;
            if (!needsInterpolation(value)) {
                switch (className.replace(SUFFIXES, "")) {
                  case "layout":
                    findIn(value, LAYOUT_OPTIONS) || (value = LAYOUT_OPTIONS[0]);
                    break;

                  case "flex":
                    findIn(value, FLEX_OPTIONS) || isNaN(value) && (value = "");
                    break;

                  case "flex-offset":
                  case "flex-order":
                    value && !isNaN(+value) || (value = "0");
                    break;

                  case "layout-align":
                    var axis = function(attrValue) {
                        var values, axis = {
                            main: "start",
                            cross: "stretch"
                        };
                        0 != (attrValue = attrValue || "").indexOf("-") && 0 != attrValue.indexOf(" ") || (attrValue = "none" + attrValue);
                        (values = attrValue.toLowerCase().trim().replace(WHITESPACE, "-").split("-")).length && "space" === values[0] && (values = [ values[0] + "-" + values[1], values[2] ]);
                        0 < values.length && (axis.main = values[0] || axis.main);
                        1 < values.length && (axis.cross = values[1] || axis.cross);
                        ALIGNMENT_MAIN_AXIS.indexOf(axis.main) < 0 && (axis.main = "start");
                        ALIGNMENT_CROSS_AXIS.indexOf(axis.cross) < 0 && (axis.cross = "stretch");
                        return axis;
                    }(value);
                    value = $mdUtil.supplant("{main}-{cross}", axis);
                    break;

                  case "layout-padding":
                  case "layout-margin":
                  case "layout-fill":
                  case "layout-wrap":
                  case "layout-no-wrap":
                    value = "";
                }
                value != origValue && (updateFn || angular.noop)(value);
            }
            return value;
        }
        function buildUpdateFn(element, className, attrs) {
            return function(fallback) {
                needsInterpolation(fallback) || (attrs[attrs.$normalize(className)] = fallback);
            };
        }
        function needsInterpolation(value) {
            return -1 < (value || "").indexOf($interpolate.startSymbol());
        }
        function getNormalizedAttrValue(className, attrs, defaultVal) {
            var normalizedAttr = attrs.$normalize(className);
            return attrs[normalizedAttr] ? attrs[normalizedAttr].replace(WHITESPACE, "-") : defaultVal || null;
        }
        function findIn(item, list, replaceWith) {
            item = replaceWith && item ? item.replace(WHITESPACE, replaceWith) : item;
            var found = !1;
            item && list.forEach(function(it) {
                it = replaceWith ? it.replace(WHITESPACE, replaceWith) : it;
                found = found || it === item;
            });
            return found;
        }
    }();
    !function() {
        angular.module("material.core").factory("$mdComponentRegistry", ComponentRegistry);
        function ComponentRegistry($log, $q) {
            var self, instances = [], pendings = {};
            return self = {
                notFoundError: function(handle) {
                    $log.error("No instance found for handle", handle);
                },
                getInstances: function() {
                    return instances;
                },
                get: function(handle) {
                    if (!isValidID(handle)) return null;
                    var i, j, instance;
                    for (i = 0, j = instances.length; i < j; i++) if ((instance = instances[i]).$$mdHandle === handle) return instance;
                    return null;
                },
                register: function(instance, handle) {
                    if (!handle) return angular.noop;
                    instance.$$mdHandle = handle;
                    instances.push(instance);
                    !function() {
                        var dfd = pendings[handle];
                        if (dfd) {
                            dfd.resolve(instance);
                            delete pendings[handle];
                        }
                    }();
                    return function() {
                        var index = instances.indexOf(instance);
                        -1 !== index && instances.splice(index, 1);
                    };
                },
                when: function(handle) {
                    if (isValidID(handle)) {
                        var deferred = $q.defer(), instance = self.get(handle);
                        instance ? deferred.resolve(instance) : pendings[handle] = deferred;
                        return deferred.promise;
                    }
                    return $q.reject("Invalid `md-component-id` value.");
                }
            };
            function isValidID(handle) {
                return handle && "" !== handle;
            }
        }
        ComponentRegistry.$inject = [ "$log", "$q" ];
    }();
    !function() {
        angular.module("material.core").factory("$mdButtonInkRipple", MdButtonInkRipple);
        function MdButtonInkRipple($mdInkRipple) {
            return {
                attach: function(scope, element, options) {
                    options = angular.extend(function(element) {
                        return element.hasClass("md-icon-button") ? {
                            isMenuItem: element.hasClass("md-menu-item"),
                            fitRipple: !0,
                            center: !0
                        } : {
                            isMenuItem: element.hasClass("md-menu-item"),
                            dimBackground: !0
                        };
                    }(element), options);
                    return $mdInkRipple.attach(scope, element, options);
                }
            };
        }
        MdButtonInkRipple.$inject = [ "$mdInkRipple" ];
    }();
    !function() {
        angular.module("material.core").factory("$mdCheckboxInkRipple", MdCheckboxInkRipple);
        function MdCheckboxInkRipple($mdInkRipple) {
            return {
                attach: function(scope, element, options) {
                    return $mdInkRipple.attach(scope, element, angular.extend({
                        center: !0,
                        dimBackground: !1,
                        fitRipple: !0
                    }, options));
                }
            };
        }
        MdCheckboxInkRipple.$inject = [ "$mdInkRipple" ];
    }();
    !function() {
        angular.module("material.core").factory("$mdListInkRipple", MdListInkRipple);
        function MdListInkRipple($mdInkRipple) {
            return {
                attach: function(scope, element, options) {
                    return $mdInkRipple.attach(scope, element, angular.extend({
                        center: !1,
                        dimBackground: !0,
                        outline: !1,
                        rippleSize: "full"
                    }, options));
                }
            };
        }
        MdListInkRipple.$inject = [ "$mdInkRipple" ];
    }();
    !function() {
        angular.module("material.core").factory("$mdInkRipple", InkRippleService).directive("mdInkRipple", InkRippleDirective).directive("mdNoInk", attrNoDirective).directive("mdNoBar", attrNoDirective).directive("mdNoStretch", attrNoDirective);
        function InkRippleDirective($mdButtonInkRipple, $mdCheckboxInkRipple) {
            return {
                controller: angular.noop,
                link: function(scope, element, attr) {
                    attr.hasOwnProperty("mdInkRippleCheckbox") ? $mdCheckboxInkRipple.attach(scope, element) : $mdButtonInkRipple.attach(scope, element);
                }
            };
        }
        InkRippleDirective.$inject = [ "$mdButtonInkRipple", "$mdCheckboxInkRipple" ];
        function InkRippleService($injector) {
            return {
                attach: function(scope, element, options) {
                    return element.controller("mdNoInk") ? angular.noop : $injector.instantiate(InkRippleCtrl, {
                        $scope: scope,
                        $element: element,
                        rippleOptions: options
                    });
                }
            };
        }
        InkRippleService.$inject = [ "$injector" ];
        function InkRippleCtrl($scope, $element, rippleOptions, $window, $timeout, $mdUtil) {
            this.$window = $window;
            this.$timeout = $timeout;
            this.$mdUtil = $mdUtil;
            this.$scope = $scope;
            this.$element = $element;
            this.options = rippleOptions;
            this.mousedown = !1;
            this.ripples = [];
            this.timeout = null;
            this.lastRipple = null;
            $mdUtil.valueOnUse(this, "container", this.createContainer);
            this.$element.addClass("md-ink-ripple");
            ($element.controller("mdInkRipple") || {}).createRipple = angular.bind(this, this.createRipple);
            ($element.controller("mdInkRipple") || {}).setColor = angular.bind(this, this.color);
            this.bindEvents();
        }
        InkRippleCtrl.$inject = [ "$scope", "$element", "rippleOptions", "$window", "$timeout", "$mdUtil" ];
        function autoCleanup(self, cleanupFn) {
            if (self.mousedown || self.lastRipple) {
                self.mousedown = !1;
                self.$mdUtil.nextTick(angular.bind(self, cleanupFn), !1);
            }
        }
        InkRippleCtrl.prototype.color = function(value) {
            var items, elem, self = this;
            angular.isDefined(value) && (self._color = self._parseColor(value));
            return self._color || self._parseColor(self.inkRipple()) || self._parseColor((items = self.options && self.options.colorElement ? self.options.colorElement : [], 
            (elem = items.length ? items[0] : self.$element[0]) ? self.$window.getComputedStyle(elem).color : "rgb(0,0,0)"));
        };
        InkRippleCtrl.prototype.calculateColor = function() {
            return this.color();
        };
        InkRippleCtrl.prototype._parseColor = function(color, multiplier) {
            multiplier = multiplier || 1;
            if (color) {
                if (0 === color.indexOf("rgba")) return color.replace(/\d?\.?\d*\s*\)\s*$/, (.1 * multiplier).toString() + ")");
                if (0 === color.indexOf("rgb")) return function(color) {
                    return color.replace(")", ", 0.1)").replace("(", "a(");
                }(color);
                if (0 === color.indexOf("#")) return function(color) {
                    var hex = "#" === color[0] ? color.substr(1) : color, dig = hex.length / 3, red = hex.substr(0, dig), green = hex.substr(dig, dig), blue = hex.substr(2 * dig);
                    if (1 === dig) {
                        red += red;
                        green += green;
                        blue += blue;
                    }
                    return "rgba(" + parseInt(red, 16) + "," + parseInt(green, 16) + "," + parseInt(blue, 16) + ",0.1)";
                }(color);
            }
        };
        InkRippleCtrl.prototype.bindEvents = function() {
            this.$element.on("mousedown", angular.bind(this, this.handleMousedown));
            this.$element.on("mouseup touchend", angular.bind(this, this.handleMouseup));
            this.$element.on("mouseleave", angular.bind(this, this.handleMouseup));
            this.$element.on("touchmove", angular.bind(this, this.handleTouchmove));
        };
        InkRippleCtrl.prototype.handleMousedown = function(event) {
            if (!this.mousedown) {
                event.hasOwnProperty("originalEvent") && (event = event.originalEvent);
                this.mousedown = !0;
                if (this.options.center) this.createRipple(this.container.prop("clientWidth") / 2, this.container.prop("clientWidth") / 2); else if (event.srcElement !== this.$element[0]) {
                    var layerRect = this.$element[0].getBoundingClientRect(), layerX = event.clientX - layerRect.left, layerY = event.clientY - layerRect.top;
                    this.createRipple(layerX, layerY);
                } else this.createRipple(event.offsetX, event.offsetY);
            }
        };
        InkRippleCtrl.prototype.handleMouseup = function() {
            autoCleanup(this, this.clearRipples);
        };
        InkRippleCtrl.prototype.handleTouchmove = function() {
            autoCleanup(this, this.deleteRipples);
        };
        InkRippleCtrl.prototype.deleteRipples = function() {
            for (var i = 0; i < this.ripples.length; i++) this.ripples[i].remove();
        };
        InkRippleCtrl.prototype.clearRipples = function() {
            for (var i = 0; i < this.ripples.length; i++) this.fadeInComplete(this.ripples[i]);
        };
        InkRippleCtrl.prototype.createContainer = function() {
            var container = angular.element('<div class="md-ripple-container"></div>');
            this.$element.append(container);
            return container;
        };
        InkRippleCtrl.prototype.clearTimeout = function() {
            if (this.timeout) {
                this.$timeout.cancel(this.timeout);
                this.timeout = null;
            }
        };
        InkRippleCtrl.prototype.isRippleAllowed = function() {
            var element = this.$element[0];
            do {
                if (!element.tagName || "BODY" === element.tagName) break;
                if (element && angular.isFunction(element.hasAttribute)) {
                    if (element.hasAttribute("disabled")) return !1;
                    if ("false" === this.inkRipple() || "0" === this.inkRipple()) return !1;
                }
            } while (element = element.parentNode);
            return !0;
        };
        InkRippleCtrl.prototype.inkRipple = function() {
            return this.$element.attr("md-ink-ripple");
        };
        InkRippleCtrl.prototype.createRipple = function(left, top) {
            if (this.isRippleAllowed()) {
                var ctrl = this, ripple = angular.element('<div class="md-ripple"></div>'), width = this.$element.prop("clientWidth"), height = this.$element.prop("clientHeight"), x = 2 * Math.max(Math.abs(width - left), left), y = 2 * Math.max(Math.abs(height - top), top), size = function(fit, x, y) {
                    return fit ? Math.max(x, y) : Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
                }(this.options.fitRipple, x, y), color = this.calculateColor();
                ripple.css({
                    left: left + "px",
                    top: top + "px",
                    background: "black",
                    width: size + "px",
                    height: size + "px",
                    backgroundColor: rgbaToRGB(color),
                    borderColor: rgbaToRGB(color)
                });
                this.lastRipple = ripple;
                this.clearTimeout();
                this.timeout = this.$timeout(function() {
                    ctrl.clearTimeout();
                    ctrl.mousedown || ctrl.fadeInComplete(ripple);
                }, 157.5, !1);
                this.options.dimBackground && this.container.css({
                    backgroundColor: color
                });
                this.container.append(ripple);
                this.ripples.push(ripple);
                ripple.addClass("md-ripple-placed");
                this.$mdUtil.nextTick(function() {
                    ripple.addClass("md-ripple-scaled md-ripple-active");
                    ctrl.$timeout(function() {
                        ctrl.clearRipples();
                    }, 450, !1);
                }, !1);
            }
            function rgbaToRGB(color) {
                return color ? color.replace("rgba", "rgb").replace(/,[^\),]+\)/, ")") : "rgb(0,0,0)";
            }
        };
        InkRippleCtrl.prototype.fadeInComplete = function(ripple) {
            this.lastRipple === ripple && (this.timeout || this.mousedown) || this.removeRipple(ripple);
        };
        InkRippleCtrl.prototype.removeRipple = function(ripple) {
            var ctrl = this;
            if (!(this.ripples.indexOf(ripple) < 0)) {
                this.ripples.splice(this.ripples.indexOf(ripple), 1);
                ripple.removeClass("md-ripple-active");
                0 === this.ripples.length && this.container.css({
                    backgroundColor: ""
                });
                this.$timeout(function() {
                    ctrl.fadeOutComplete(ripple);
                }, 450, !1);
            }
        };
        InkRippleCtrl.prototype.fadeOutComplete = function(ripple) {
            ripple.remove();
            this.lastRipple = null;
        };
        function attrNoDirective() {
            return {
                controller: angular.noop
            };
        }
    }();
    !function() {
        angular.module("material.core").factory("$mdTabInkRipple", MdTabInkRipple);
        function MdTabInkRipple($mdInkRipple) {
            return {
                attach: function(scope, element, options) {
                    return $mdInkRipple.attach(scope, element, angular.extend({
                        center: !1,
                        dimBackground: !0,
                        outline: !1,
                        rippleSize: "full"
                    }, options));
                }
            };
        }
        MdTabInkRipple.$inject = [ "$mdInkRipple" ];
    }();
    angular.module("material.core.theming.palette", []).constant("$mdColorPalette", {
        red: {
            50: "#ffebee",
            100: "#ffcdd2",
            200: "#ef9a9a",
            300: "#e57373",
            400: "#ef5350",
            500: "#f44336",
            600: "#e53935",
            700: "#d32f2f",
            800: "#c62828",
            900: "#b71c1c",
            A100: "#ff8a80",
            A200: "#ff5252",
            A400: "#ff1744",
            A700: "#d50000",
            contrastDefaultColor: "light",
            contrastDarkColors: "50 100 200 300 A100",
            contrastStrongLightColors: "400 500 600 700 A200 A400 A700"
        },
        pink: {
            50: "#fce4ec",
            100: "#f8bbd0",
            200: "#f48fb1",
            300: "#f06292",
            400: "#ec407a",
            500: "#e91e63",
            600: "#d81b60",
            700: "#c2185b",
            800: "#ad1457",
            900: "#880e4f",
            A100: "#ff80ab",
            A200: "#ff4081",
            A400: "#f50057",
            A700: "#c51162",
            contrastDefaultColor: "light",
            contrastDarkColors: "50 100 200 A100",
            contrastStrongLightColors: "500 600 A200 A400 A700"
        },
        purple: {
            50: "#f3e5f5",
            100: "#e1bee7",
            200: "#ce93d8",
            300: "#ba68c8",
            400: "#ab47bc",
            500: "#9c27b0",
            600: "#8e24aa",
            700: "#7b1fa2",
            800: "#6a1b9a",
            900: "#4a148c",
            A100: "#ea80fc",
            A200: "#e040fb",
            A400: "#d500f9",
            A700: "#aa00ff",
            contrastDefaultColor: "light",
            contrastDarkColors: "50 100 200 A100",
            contrastStrongLightColors: "300 400 A200 A400 A700"
        },
        "deep-purple": {
            50: "#ede7f6",
            100: "#d1c4e9",
            200: "#b39ddb",
            300: "#9575cd",
            400: "#7e57c2",
            500: "#673ab7",
            600: "#5e35b1",
            700: "#512da8",
            800: "#4527a0",
            900: "#311b92",
            A100: "#b388ff",
            A200: "#7c4dff",
            A400: "#651fff",
            A700: "#6200ea",
            contrastDefaultColor: "light",
            contrastDarkColors: "50 100 200 A100",
            contrastStrongLightColors: "300 400 A200"
        },
        indigo: {
            50: "#e8eaf6",
            100: "#c5cae9",
            200: "#9fa8da",
            300: "#7986cb",
            400: "#5c6bc0",
            500: "#3f51b5",
            600: "#3949ab",
            700: "#303f9f",
            800: "#283593",
            900: "#1a237e",
            A100: "#8c9eff",
            A200: "#536dfe",
            A400: "#3d5afe",
            A700: "#304ffe",
            contrastDefaultColor: "light",
            contrastDarkColors: "50 100 200 A100",
            contrastStrongLightColors: "300 400 A200 A400"
        },
        blue: {
            50: "#e3f2fd",
            100: "#bbdefb",
            200: "#90caf9",
            300: "#64b5f6",
            400: "#42a5f5",
            500: "#2196f3",
            600: "#1e88e5",
            700: "#1976d2",
            800: "#1565c0",
            900: "#0d47a1",
            A100: "#82b1ff",
            A200: "#448aff",
            A400: "#2979ff",
            A700: "#2962ff",
            contrastDefaultColor: "light",
            contrastDarkColors: "50 100 200 300 400 A100",
            contrastStrongLightColors: "500 600 700 A200 A400 A700"
        },
        "light-blue": {
            50: "#e1f5fe",
            100: "#b3e5fc",
            200: "#81d4fa",
            300: "#4fc3f7",
            400: "#29b6f6",
            500: "#03a9f4",
            600: "#039be5",
            700: "#0288d1",
            800: "#0277bd",
            900: "#01579b",
            A100: "#80d8ff",
            A200: "#40c4ff",
            A400: "#00b0ff",
            A700: "#0091ea",
            contrastDefaultColor: "dark",
            contrastLightColors: "600 700 800 900 A700",
            contrastStrongLightColors: "600 700 800 A700"
        },
        cyan: {
            50: "#e0f7fa",
            100: "#b2ebf2",
            200: "#80deea",
            300: "#4dd0e1",
            400: "#26c6da",
            500: "#00bcd4",
            600: "#00acc1",
            700: "#0097a7",
            800: "#00838f",
            900: "#006064",
            A100: "#84ffff",
            A200: "#18ffff",
            A400: "#00e5ff",
            A700: "#00b8d4",
            contrastDefaultColor: "dark",
            contrastLightColors: "700 800 900",
            contrastStrongLightColors: "700 800 900"
        },
        teal: {
            50: "#e0f2f1",
            100: "#b2dfdb",
            200: "#80cbc4",
            300: "#4db6ac",
            400: "#26a69a",
            500: "#009688",
            600: "#00897b",
            700: "#00796b",
            800: "#00695c",
            900: "#004d40",
            A100: "#a7ffeb",
            A200: "#64ffda",
            A400: "#1de9b6",
            A700: "#00bfa5",
            contrastDefaultColor: "dark",
            contrastLightColors: "500 600 700 800 900",
            contrastStrongLightColors: "500 600 700"
        },
        green: {
            50: "#e8f5e9",
            100: "#c8e6c9",
            200: "#a5d6a7",
            300: "#81c784",
            400: "#66bb6a",
            500: "#4caf50",
            600: "#43a047",
            700: "#388e3c",
            800: "#2e7d32",
            900: "#1b5e20",
            A100: "#b9f6ca",
            A200: "#69f0ae",
            A400: "#00e676",
            A700: "#00c853",
            contrastDefaultColor: "dark",
            contrastLightColors: "600 700 800 900",
            contrastStrongLightColors: "600 700"
        },
        "light-green": {
            50: "#f1f8e9",
            100: "#dcedc8",
            200: "#c5e1a5",
            300: "#aed581",
            400: "#9ccc65",
            500: "#8bc34a",
            600: "#7cb342",
            700: "#689f38",
            800: "#558b2f",
            900: "#33691e",
            A100: "#ccff90",
            A200: "#b2ff59",
            A400: "#76ff03",
            A700: "#64dd17",
            contrastDefaultColor: "dark",
            contrastLightColors: "700 800 900",
            contrastStrongLightColors: "700 800 900"
        },
        lime: {
            50: "#f9fbe7",
            100: "#f0f4c3",
            200: "#e6ee9c",
            300: "#dce775",
            400: "#d4e157",
            500: "#cddc39",
            600: "#c0ca33",
            700: "#afb42b",
            800: "#9e9d24",
            900: "#827717",
            A100: "#f4ff81",
            A200: "#eeff41",
            A400: "#c6ff00",
            A700: "#aeea00",
            contrastDefaultColor: "dark",
            contrastLightColors: "900",
            contrastStrongLightColors: "900"
        },
        yellow: {
            50: "#fffde7",
            100: "#fff9c4",
            200: "#fff59d",
            300: "#fff176",
            400: "#ffee58",
            500: "#ffeb3b",
            600: "#fdd835",
            700: "#fbc02d",
            800: "#f9a825",
            900: "#f57f17",
            A100: "#ffff8d",
            A200: "#ffff00",
            A400: "#ffea00",
            A700: "#ffd600",
            contrastDefaultColor: "dark"
        },
        amber: {
            50: "#fff8e1",
            100: "#ffecb3",
            200: "#ffe082",
            300: "#ffd54f",
            400: "#ffca28",
            500: "#ffc107",
            600: "#ffb300",
            700: "#ffa000",
            800: "#ff8f00",
            900: "#ff6f00",
            A100: "#ffe57f",
            A200: "#ffd740",
            A400: "#ffc400",
            A700: "#ffab00",
            contrastDefaultColor: "dark"
        },
        orange: {
            50: "#fff3e0",
            100: "#ffe0b2",
            200: "#ffcc80",
            300: "#ffb74d",
            400: "#ffa726",
            500: "#ff9800",
            600: "#fb8c00",
            700: "#f57c00",
            800: "#ef6c00",
            900: "#e65100",
            A100: "#ffd180",
            A200: "#ffab40",
            A400: "#ff9100",
            A700: "#ff6d00",
            contrastDefaultColor: "dark",
            contrastLightColors: "800 900",
            contrastStrongLightColors: "800 900"
        },
        "deep-orange": {
            50: "#fbe9e7",
            100: "#ffccbc",
            200: "#ffab91",
            300: "#ff8a65",
            400: "#ff7043",
            500: "#ff5722",
            600: "#f4511e",
            700: "#e64a19",
            800: "#d84315",
            900: "#bf360c",
            A100: "#ff9e80",
            A200: "#ff6e40",
            A400: "#ff3d00",
            A700: "#dd2c00",
            contrastDefaultColor: "light",
            contrastDarkColors: "50 100 200 300 400 A100 A200",
            contrastStrongLightColors: "500 600 700 800 900 A400 A700"
        },
        brown: {
            50: "#efebe9",
            100: "#d7ccc8",
            200: "#bcaaa4",
            300: "#a1887f",
            400: "#8d6e63",
            500: "#795548",
            600: "#6d4c41",
            700: "#5d4037",
            800: "#4e342e",
            900: "#3e2723",
            A100: "#d7ccc8",
            A200: "#bcaaa4",
            A400: "#8d6e63",
            A700: "#5d4037",
            contrastDefaultColor: "light",
            contrastDarkColors: "50 100 200",
            contrastStrongLightColors: "300 400"
        },
        grey: {
            50: "#fafafa",
            100: "#f5f5f5",
            200: "#eeeeee",
            300: "#e0e0e0",
            400: "#bdbdbd",
            500: "#9e9e9e",
            600: "#757575",
            700: "#616161",
            800: "#424242",
            900: "#212121",
            1e3: "#000000",
            A100: "#ffffff",
            A200: "#eeeeee",
            A400: "#bdbdbd",
            A700: "#616161",
            contrastDefaultColor: "dark",
            contrastLightColors: "600 700 800 900"
        },
        "blue-grey": {
            50: "#eceff1",
            100: "#cfd8dc",
            200: "#b0bec5",
            300: "#90a4ae",
            400: "#78909c",
            500: "#607d8b",
            600: "#546e7a",
            700: "#455a64",
            800: "#37474f",
            900: "#263238",
            A100: "#cfd8dc",
            A200: "#b0bec5",
            A400: "#78909c",
            A700: "#455a64",
            contrastDefaultColor: "light",
            contrastDarkColors: "50 100 200 300",
            contrastStrongLightColors: "400 500"
        }
    });
    !function() {
        angular.module("material.core.theming", [ "material.core.theming.palette" ]).directive("mdTheme", ThemingDirective).directive("mdThemable", ThemableDirective).provider("$mdTheming", ThemingProvider).run(generateAllThemes);
        var PALETTES, THEMES, GENERATED = {}, DARK_FOREGROUND = {
            name: "dark",
            1: "rgba(0,0,0,0.87)",
            2: "rgba(0,0,0,0.54)",
            3: "rgba(0,0,0,0.26)",
            4: "rgba(0,0,0,0.12)"
        }, LIGHT_FOREGROUND = {
            name: "light",
            1: "rgba(255,255,255,1.0)",
            2: "rgba(255,255,255,0.7)",
            3: "rgba(255,255,255,0.3)",
            4: "rgba(255,255,255,0.12)"
        }, DARK_SHADOW = "1px 1px 0px rgba(0,0,0,0.4), -1px -1px 0px rgba(0,0,0,0.4)", LIGHT_SHADOW = "", DARK_CONTRAST_COLOR = colorToRgbaArray("rgba(0,0,0,0.87)"), LIGHT_CONTRAST_COLOR = colorToRgbaArray("rgba(255,255,255,0.87)"), STRONG_LIGHT_CONTRAST_COLOR = colorToRgbaArray("rgb(255,255,255)"), THEME_COLOR_TYPES = [ "primary", "accent", "warn", "background" ], DEFAULT_COLOR_TYPE = "primary", LIGHT_DEFAULT_HUES = {
            accent: {
                default: "A200",
                "hue-1": "A100",
                "hue-2": "A400",
                "hue-3": "A700"
            },
            background: {
                default: "A100",
                "hue-1": "300",
                "hue-2": "800",
                "hue-3": "900"
            }
        }, DARK_DEFAULT_HUES = {
            background: {
                default: "800",
                "hue-1": "600",
                "hue-2": "300",
                "hue-3": "900"
            }
        };
        THEME_COLOR_TYPES.forEach(function(colorType) {
            var defaultDefaultHues = {
                default: "500",
                "hue-1": "300",
                "hue-2": "800",
                "hue-3": "A100"
            };
            LIGHT_DEFAULT_HUES[colorType] || (LIGHT_DEFAULT_HUES[colorType] = defaultDefaultHues);
            DARK_DEFAULT_HUES[colorType] || (DARK_DEFAULT_HUES[colorType] = defaultDefaultHues);
        });
        var VALID_HUE_VALUES = [ "50", "100", "200", "300", "400", "500", "600", "700", "800", "900", "A100", "A200", "A400", "A700" ], generateOnDemand = !1;
        function ThemingProvider($mdColorPalette) {
            PALETTES = {};
            var themingProvider, defaultTheme = "default", alwaysWatchTheme = !(THEMES = {});
            angular.extend(PALETTES, $mdColorPalette);
            ThemingService.$inject = [ "$rootScope", "$log" ];
            return themingProvider = {
                definePalette: function(name, map) {
                    map = map || {};
                    PALETTES[name] = checkPaletteValid(name, map);
                    return themingProvider;
                },
                extendPalette: function(name, map) {
                    return checkPaletteValid(name, angular.extend({}, PALETTES[name] || {}, map));
                },
                theme: function(name, inheritFrom) {
                    if (THEMES[name]) return THEMES[name];
                    var parentTheme = "string" == typeof (inheritFrom = inheritFrom || "default") ? THEMES[inheritFrom] : inheritFrom, theme = new Theme(name);
                    parentTheme && angular.forEach(parentTheme.colors, function(color, colorType) {
                        theme.colors[colorType] = {
                            name: color.name,
                            hues: angular.extend({}, color.hues)
                        };
                    });
                    return THEMES[name] = theme;
                },
                setDefaultTheme: function(theme) {
                    defaultTheme = theme;
                },
                alwaysWatchTheme: function(alwaysWatch) {
                    alwaysWatchTheme = alwaysWatch;
                },
                generateThemesOnDemand: function(onDemand) {
                    generateOnDemand = onDemand;
                },
                $get: ThemingService,
                _LIGHT_DEFAULT_HUES: LIGHT_DEFAULT_HUES,
                _DARK_DEFAULT_HUES: DARK_DEFAULT_HUES,
                _PALETTES: PALETTES,
                _THEMES: THEMES,
                _parseRules: parseRules,
                _rgba: rgba
            };
            function checkPaletteValid(name, map) {
                var missingColors = VALID_HUE_VALUES.filter(function(field) {
                    return !map[field];
                });
                if (missingColors.length) throw new Error("Missing colors %1 in palette %2!".replace("%1", missingColors.join(", ")).replace("%2", name));
                return map;
            }
            function Theme(name) {
                var self = this;
                self.name = name;
                self.colors = {};
                (self.dark = setDark)(!1);
                function setDark(isDark) {
                    if ((isDark = 0 === arguments.length || !!isDark) !== self.isDark) {
                        self.isDark = isDark;
                        self.foregroundPalette = self.isDark ? LIGHT_FOREGROUND : DARK_FOREGROUND;
                        self.foregroundShadow = self.isDark ? DARK_SHADOW : LIGHT_SHADOW;
                        var newDefaultHues = self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES, oldDefaultHues = self.isDark ? LIGHT_DEFAULT_HUES : DARK_DEFAULT_HUES;
                        angular.forEach(newDefaultHues, function(newDefaults, colorType) {
                            var color = self.colors[colorType], oldDefaults = oldDefaultHues[colorType];
                            if (color) for (var hueName in color.hues) color.hues[hueName] === oldDefaults[hueName] && (color.hues[hueName] = newDefaults[hueName]);
                        });
                        return self;
                    }
                }
                THEME_COLOR_TYPES.forEach(function(colorType) {
                    var defaultHues = (self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES)[colorType];
                    self[colorType + "Palette"] = function(paletteName, hues) {
                        var color = self.colors[colorType] = {
                            name: paletteName,
                            hues: angular.extend({}, defaultHues, hues)
                        };
                        Object.keys(color.hues).forEach(function(name) {
                            if (!defaultHues[name]) throw new Error("Invalid hue name '%1' in theme %2's %3 color %4. Available hue names: %4".replace("%1", name).replace("%2", self.name).replace("%3", paletteName).replace("%4", Object.keys(defaultHues).join(", ")));
                        });
                        Object.keys(color.hues).map(function(key) {
                            return color.hues[key];
                        }).forEach(function(hueValue) {
                            if (-1 == VALID_HUE_VALUES.indexOf(hueValue)) throw new Error("Invalid hue value '%1' in theme %2's %3 color %4. Available hue values: %5".replace("%1", hueValue).replace("%2", self.name).replace("%3", colorType).replace("%4", paletteName).replace("%5", VALID_HUE_VALUES.join(", ")));
                        });
                        return self;
                    };
                    self[colorType + "Color"] = function() {
                        var args = Array.prototype.slice.call(arguments);
                        console.warn("$mdThemingProviderTheme." + colorType + "Color() has been deprecated. Use $mdThemingProviderTheme." + colorType + "Palette() instead.");
                        return self[colorType + "Palette"].apply(self, args);
                    };
                });
            }
            function ThemingService($rootScope, $log) {
                applyTheme.inherit = function(el, parent) {
                    var ctrl = parent.controller("mdTheme"), attrThemeValue = el.attr("md-theme-watch");
                    if ((alwaysWatchTheme || angular.isDefined(attrThemeValue)) && "false" != attrThemeValue) {
                        var deregisterWatch = $rootScope.$watch(function() {
                            return ctrl && ctrl.$mdTheme || ("default" == defaultTheme ? "" : defaultTheme);
                        }, changeTheme);
                        el.on("$destroy", deregisterWatch);
                    } else {
                        changeTheme(ctrl && ctrl.$mdTheme || ("default" == defaultTheme ? "" : defaultTheme));
                    }
                    function changeTheme(theme) {
                        if (theme) {
                            registered(theme) || $log.warn("Attempted to use unregistered theme '" + theme + "'. Register it with $mdThemingProvider.theme().");
                            var oldTheme = el.data("$mdThemeName");
                            oldTheme && el.removeClass("md-" + oldTheme + "-theme");
                            el.addClass("md-" + theme + "-theme");
                            el.data("$mdThemeName", theme);
                            ctrl && el.data("$mdThemeController", ctrl);
                        }
                    }
                };
                applyTheme.THEMES = angular.extend({}, THEMES);
                applyTheme.defaultTheme = function() {
                    return defaultTheme;
                };
                applyTheme.registered = registered;
                applyTheme.generateTheme = generateTheme;
                return applyTheme;
                function registered(themeName) {
                    return void 0 === themeName || "" === themeName || void 0 !== applyTheme.THEMES[themeName];
                }
                function applyTheme(scope, el) {
                    if (void 0 === el) {
                        el = scope;
                        scope = void 0;
                    }
                    void 0 === scope && (scope = $rootScope);
                    applyTheme.inherit(el, el);
                }
            }
        }
        ThemingProvider.$inject = [ "$mdColorPalette" ];
        function ThemingDirective($mdTheming, $interpolate, $log) {
            return {
                priority: 100,
                link: {
                    pre: function(scope, el, attrs) {
                        var ctrl = {
                            $setTheme: function(theme) {
                                $mdTheming.registered(theme) || $log.warn("attempted to use unregistered theme '" + theme + "'");
                                ctrl.$mdTheme = theme;
                            }
                        };
                        el.data("$mdThemeController", ctrl);
                        ctrl.$setTheme($interpolate(attrs.mdTheme)(scope));
                        attrs.$observe("mdTheme", ctrl.$setTheme);
                    }
                }
            };
        }
        ThemingDirective.$inject = [ "$mdTheming", "$interpolate", "$log" ];
        function ThemableDirective($mdTheming) {
            return $mdTheming;
        }
        ThemableDirective.$inject = [ "$mdTheming" ];
        function parseRules(theme, colorType, rules) {
            !function(theme, colorType) {
                if (!PALETTES[(theme.colors[colorType] || {}).name]) throw new Error("You supplied an invalid color palette for theme %1's %2 palette. Available palettes: %3".replace("%1", theme.name).replace("%2", colorType).replace("%3", Object.keys(PALETTES).join(", ")));
            }(theme, colorType);
            rules = rules.replace(/THEME_NAME/g, theme.name);
            var generatedRules = [], color = theme.colors[colorType], themeNameRegex = new RegExp(".md-" + theme.name + "-theme", "g"), hueRegex = new RegExp("('|\")?{{\\s*(" + colorType + ")-(color|contrast)-?(\\d\\.?\\d*)?\\s*}}(\"|')?", "g"), palette = PALETTES[color.name];
            rules = rules.replace(/'?"?\{\{\s*([a-zA-Z]+)-(A?\d+|hue\-[0-3]|shadow)-?(\d\.?\d*)?(contrast)?\s*\}\}'?"?/g, function(match, colorType, hue, opacity, contrast) {
                if ("foreground" === colorType) return "shadow" == hue ? theme.foregroundShadow : theme.foregroundPalette[hue] || theme.foregroundPalette[1];
                0 === hue.indexOf("hue") && (hue = theme.colors[colorType].hues[hue]);
                return rgba((PALETTES[theme.colors[colorType].name][hue] || "")[contrast ? "contrast" : "value"], opacity);
            });
            angular.forEach(color.hues, function(hueValue, hueName) {
                var newRule = rules.replace(hueRegex, function(match, _, colorType, hueType, opacity) {
                    return rgba(palette[hueValue]["color" === hueType ? "value" : "contrast"], opacity);
                });
                "default" !== hueName && (newRule = newRule.replace(themeNameRegex, ".md-" + theme.name + "-theme.md-" + hueName));
                if ("default" == theme.name) {
                    newRule = newRule.replace(/((?:(?:(?: |>|\.|\w|-|:|\(|\)|\[|\]|"|'|=)+) )?)((?:(?:\w|\.|-)+)?)\.md-default-theme((?: |>|\.|\w|-|:|\(|\)|\[|\]|"|'|=)*)/g, function(match, prefix, target, suffix) {
                        return match + ", " + prefix + target + suffix;
                    });
                }
                generatedRules.push(newRule);
            });
            return generatedRules;
        }
        var rulesByType = {};
        function generateAllThemes($injector) {
            var head = document.head, firstChild = head ? head.firstElementChild : null, themeCss = $injector.has("$MD_THEME_CSS") ? $injector.get("$MD_THEME_CSS") : "";
            if (firstChild && 0 !== themeCss.length) {
                angular.forEach(PALETTES, function(palette) {
                    var defaultContrast = palette.contrastDefaultColor, lightColors = palette.contrastLightColors || [], strongLightColors = palette.contrastStrongLightColors || [], darkColors = palette.contrastDarkColors || [];
                    "string" == typeof lightColors && (lightColors = lightColors.split(" "));
                    "string" == typeof strongLightColors && (strongLightColors = strongLightColors.split(" "));
                    "string" == typeof darkColors && (darkColors = darkColors.split(" "));
                    delete palette.contrastDefaultColor;
                    delete palette.contrastLightColors;
                    delete palette.contrastStrongLightColors;
                    delete palette.contrastDarkColors;
                    angular.forEach(palette, function(hueValue, hueName) {
                        if (!angular.isObject(hueValue)) {
                            var rgbValue = colorToRgbaArray(hueValue);
                            if (!rgbValue) throw new Error("Color %1, in palette %2's hue %3, is invalid. Hex or rgb(a) color expected.".replace("%1", hueValue).replace("%2", palette.name).replace("%3", hueName));
                            palette[hueName] = {
                                value: rgbValue,
                                contrast: "light" === defaultContrast ? -1 < darkColors.indexOf(hueName) ? DARK_CONTRAST_COLOR : -1 < strongLightColors.indexOf(hueName) ? STRONG_LIGHT_CONTRAST_COLOR : LIGHT_CONTRAST_COLOR : -1 < lightColors.indexOf(hueName) ? -1 < strongLightColors.indexOf(hueName) ? STRONG_LIGHT_CONTRAST_COLOR : LIGHT_CONTRAST_COLOR : DARK_CONTRAST_COLOR
                            };
                        }
                    });
                });
                var rules = themeCss.split(/\}(?!(\}|'|"|;))/).filter(function(rule) {
                    return rule && rule.length;
                }).map(function(rule) {
                    return rule.trim() + "}";
                }), ruleMatchRegex = new RegExp("md-(" + THEME_COLOR_TYPES.join("|") + ")", "g");
                THEME_COLOR_TYPES.forEach(function(type) {
                    rulesByType[type] = "";
                });
                rules.forEach(function(rule) {
                    rule.match(ruleMatchRegex);
                    for (var type, i = 0; type = THEME_COLOR_TYPES[i]; i++) if (-1 < rule.indexOf(".md-" + type)) return rulesByType[type] += rule;
                    for (i = 0; type = THEME_COLOR_TYPES[i]; i++) if (-1 < rule.indexOf(type)) return rulesByType[type] += rule;
                    return rulesByType[DEFAULT_COLOR_TYPE] += rule;
                });
                generateOnDemand || angular.forEach(THEMES, function(theme) {
                    GENERATED[theme.name] || generateTheme(theme.name);
                });
            }
        }
        generateAllThemes.$inject = [ "$injector" ];
        function generateTheme(name) {
            var theme = THEMES[name], head = document.head, firstChild = head ? head.firstElementChild : null;
            if (!GENERATED[name]) {
                THEME_COLOR_TYPES.forEach(function(colorType) {
                    for (var styleStrings = parseRules(theme, colorType, rulesByType[colorType]); styleStrings.length; ) {
                        var styleContent = styleStrings.shift();
                        if (styleContent) {
                            var style = document.createElement("style");
                            style.setAttribute("md-theme-style", "");
                            style.appendChild(document.createTextNode(styleContent));
                            head.insertBefore(style, firstChild);
                        }
                    }
                });
                theme.colors.primary.name == theme.colors.accent.name && console.warn("$mdThemingProvider: Using the same palette for primary and accent. This violates the material design spec.");
                GENERATED[theme.name] = !0;
            }
        }
        function colorToRgbaArray(clr) {
            if (angular.isArray(clr) && 3 == clr.length) return clr;
            if (/^rgb/.test(clr)) return clr.replace(/(^\s*rgba?\(|\)\s*$)/g, "").split(",").map(function(value, i) {
                return 3 == i ? parseFloat(value, 10) : parseInt(value, 10);
            });
            "#" == clr.charAt(0) && (clr = clr.substring(1));
            if (/^([a-fA-F0-9]{3}){1,2}$/g.test(clr)) {
                var dig = clr.length / 3, red = clr.substr(0, dig), grn = clr.substr(dig, dig), blu = clr.substr(2 * dig);
                if (1 === dig) {
                    red += red;
                    grn += grn;
                    blu += blu;
                }
                return [ parseInt(red, 16), parseInt(grn, 16), parseInt(blu, 16) ];
            }
        }
        function rgba(rgbArray, opacity) {
            if (!rgbArray) return "rgb('0,0,0')";
            if (4 == rgbArray.length) {
                rgbArray = angular.copy(rgbArray);
                opacity ? rgbArray.pop() : opacity = rgbArray.pop();
            }
            return opacity && ("number" == typeof opacity || "string" == typeof opacity && opacity.length) ? "rgba(" + rgbArray.join(",") + "," + opacity + ")" : "rgb(" + rgbArray.join(",") + ")";
        }
    }();
    angular.module("material.core").factory("$$mdAnimate", [ "$q", "$timeout", "$mdConstant", "$animateCss", function($q, $timeout, $mdConstant, $animateCss) {
        return function($mdUtil) {
            return function($mdUtil, $q, $timeout, $mdConstant, $animateCss) {
                var self;
                return self = {
                    translate3d: function(target, from, to, options) {
                        return $animateCss(target, {
                            from: from,
                            to: to,
                            addClass: options.transitionInClass
                        }).start().then(function() {
                            return reverseTranslate;
                        });
                        function reverseTranslate(newFrom) {
                            return $animateCss(target, {
                                to: newFrom || from,
                                addClass: options.transitionOutClass,
                                removeClass: options.transitionInClass
                            }).start();
                        }
                    },
                    waitTransitionEnd: function(element, opts) {
                        return $q(function(resolve, reject) {
                            var timer = $timeout(finished, (opts = opts || {}).timeout || 3e3);
                            element.on($mdConstant.CSS.TRANSITIONEND, finished);
                            function finished(ev) {
                                if (!ev || ev.target === element[0]) {
                                    ev && $timeout.cancel(timer);
                                    element.off($mdConstant.CSS.TRANSITIONEND, finished);
                                    resolve();
                                }
                            }
                        });
                    },
                    calculateZoomToOrigin: function(element, originator) {
                        var cntr, parent, origin = originator.element, bounds = originator.bounds, buildZoom = angular.bind(null, $mdUtil.supplant, "translate3d( {centerX}px, {centerY}px, 0 ) scale( {scaleX}, {scaleY} )"), zoomStyle = buildZoom({
                            centerX: 0,
                            centerY: 0,
                            scaleX: .5,
                            scaleY: .5
                        });
                        if (origin || bounds) {
                            var originBnds = origin ? self.clientRect(origin) || (cntr = element ? element.parent() : null, 
                            (parent = cntr ? cntr.parent() : null) ? self.clientRect(parent) : null) : self.copyRect(bounds), dialogRect = self.copyRect(element[0].getBoundingClientRect()), dialogCenterPt = self.centerPointFor(dialogRect), originCenterPt = self.centerPointFor(originBnds);
                            zoomStyle = buildZoom({
                                centerX: originCenterPt.x - dialogCenterPt.x,
                                centerY: originCenterPt.y - dialogCenterPt.y,
                                scaleX: Math.round(100 * Math.min(.5, originBnds.width / dialogRect.width)) / 100,
                                scaleY: Math.round(100 * Math.min(.5, originBnds.height / dialogRect.height)) / 100
                            });
                        }
                        return zoomStyle;
                    },
                    toCss: function(raw) {
                        var css = {};
                        angular.forEach(raw, function(value, key) {
                            if (!angular.isUndefined(value)) if (0 <= "left top right bottom width height x y min-width min-height max-width max-height".indexOf(key)) css[key] = value + "px"; else switch (key) {
                              case "transition":
                                convertToVendor(key, $mdConstant.CSS.TRANSITION, value);
                                break;

                              case "transform":
                                convertToVendor(key, $mdConstant.CSS.TRANSFORM, value);
                                break;

                              case "transformOrigin":
                                convertToVendor(key, $mdConstant.CSS.TRANSFORM_ORIGIN, value);
                            }
                        });
                        return css;
                        function convertToVendor(key, vendor, value) {
                            angular.forEach(vendor.split(" "), function(key) {
                                css[key] = value;
                            });
                        }
                    },
                    toTransformCss: function(transform, addTransition, transition) {
                        var css = {};
                        angular.forEach($mdConstant.CSS.TRANSFORM.split(" "), function(key) {
                            css[key] = transform;
                        });
                        if (addTransition) {
                            transition = transition || "all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1) !important";
                            css.transition = transition;
                        }
                        return css;
                    },
                    copyRect: function(source, destination) {
                        if (!source) return null;
                        destination = destination || {};
                        angular.forEach("left top right bottom width height".split(" "), function(key) {
                            destination[key] = Math.round(source[key]);
                        });
                        destination.width = destination.width || destination.right - destination.left;
                        destination.height = destination.height || destination.bottom - destination.top;
                        return destination;
                    },
                    clientRect: function(element) {
                        var rect, bounds = angular.element(element)[0].getBoundingClientRect();
                        return (rect = bounds) && 0 < rect.width && 0 < rect.height ? self.copyRect(bounds) : null;
                    },
                    centerPointFor: function(targetRect) {
                        return targetRect ? {
                            x: Math.round(targetRect.left + targetRect.width / 2),
                            y: Math.round(targetRect.top + targetRect.height / 2)
                        } : {
                            x: 0,
                            y: 0
                        };
                    }
                };
            }($mdUtil, $q, $timeout, $mdConstant, $animateCss);
        };
    } ]);
    4 <= angular.version.minor ? angular.module("material.core.animate", []) : function() {
        var forEach = angular.forEach, WEBKIT = angular.isDefined(document.documentElement.style.WebkitAppearance), PREFIX = WEBKIT ? "-webkit-" : "", TRANSITION_EVENTS = (WEBKIT ? "webkitTransitionEnd " : "") + "transitionend", ANIMATION_EVENTS = (WEBKIT ? "webkitAnimationEnd " : "") + "animationend", $$AnimateRunnerFactory = [ "$q", "$$rAFMutex", function($q, $$rAFMutex) {
            function AnimateRunner(host) {
                this.setHost(host);
                this._doneCallbacks = [];
                this._runInAnimationFrame = $$rAFMutex();
                this._state = 0;
            }
            AnimateRunner.prototype = {
                setHost: function(host) {
                    this.host = host || {};
                },
                done: function(fn) {
                    2 === this._state ? fn() : this._doneCallbacks.push(fn);
                },
                progress: angular.noop,
                getPromise: function() {
                    if (!this.promise) {
                        var self = this;
                        this.promise = $q(function(resolve, reject) {
                            self.done(function(status) {
                                !1 === status ? reject() : resolve();
                            });
                        });
                    }
                    return this.promise;
                },
                then: function(resolveHandler, rejectHandler) {
                    return this.getPromise().then(resolveHandler, rejectHandler);
                },
                catch: function(handler) {
                    return this.getPromise().catch(handler);
                },
                finally: function(handler) {
                    return this.getPromise().finally(handler);
                },
                pause: function() {
                    this.host.pause && this.host.pause();
                },
                resume: function() {
                    this.host.resume && this.host.resume();
                },
                end: function() {
                    this.host.end && this.host.end();
                    this._resolve(!0);
                },
                cancel: function() {
                    this.host.cancel && this.host.cancel();
                    this._resolve(!1);
                },
                complete: function(response) {
                    var self = this;
                    if (0 === self._state) {
                        self._state = 1;
                        self._runInAnimationFrame(function() {
                            self._resolve(response);
                        });
                    }
                },
                _resolve: function(response) {
                    if (2 !== this._state) {
                        forEach(this._doneCallbacks, function(fn) {
                            fn(response);
                        });
                        this._doneCallbacks.length = 0;
                        this._state = 2;
                    }
                }
            };
            return AnimateRunner;
        } ];
        angular.module("material.core.animate", []).factory("$$forceReflow", [ "$document", function($document) {
            return function() {
                return $document[0].body.clientWidth + 1;
            };
        } ]).factory("$$AnimateRunner", $$AnimateRunnerFactory).factory("$$rAFMutex", [ "$$rAF", function($$rAF) {
            return function() {
                var passed = !1;
                $$rAF(function() {
                    passed = !0;
                });
                return function(fn) {
                    passed ? fn() : $$rAF(fn);
                };
            };
        } ]).factory("$animateCss", [ "$window", "$$rAF", "$$AnimateRunner", "$$forceReflow", "$$jqLite", "$timeout", function($window, $$rAF, $$AnimateRunner, $$forceReflow, $$jqLite, $timeout) {
            function applyClasses(element, options) {
                if (options.addClass) {
                    $$jqLite.addClass(element, options.addClass);
                    options.addClass = null;
                }
                if (options.removeClass) {
                    $$jqLite.removeClass(element, options.removeClass);
                    options.removeClass = null;
                }
            }
            function parseMaxTime(str) {
                var maxValue = 0, values = (str || "").split(/\s*,\s*/);
                forEach(values, function(value) {
                    "s" == value.charAt(value.length - 1) && (value = value.substring(0, value.length - 1));
                    value = parseFloat(value) || 0;
                    maxValue = maxValue ? Math.max(value, maxValue) : value;
                });
                return maxValue;
            }
            var cancelLastRAFRequest, rafWaitQueue = [];
            function applyAnimationFromStyles(element, options) {
                if (options.from) {
                    element.css(options.from);
                    options.from = null;
                }
            }
            function applyAnimationToStyles(element, options) {
                if (options.to) {
                    element.css(options.to);
                    options.to = null;
                }
            }
            function getDomNode(element) {
                for (var i = 0; i < element.length; i++) if (1 === element[i].nodeType) return element[i];
            }
            function blockTransition(element, bool) {
                var node = getDomNode(element), key = camelCase(PREFIX + "transition-delay");
                node.style[key] = bool ? "-9999s" : "";
            }
            return function(element, options) {
                var temporaryStyles = [], node = getDomNode(element);
                options.transitionStyle && temporaryStyles.push([ PREFIX + "transition", options.transitionStyle ]);
                options.keyframeStyle && temporaryStyles.push([ PREFIX + "animation", options.keyframeStyle ]);
                options.delay && temporaryStyles.push([ PREFIX + "transition-delay", options.delay + "s" ]);
                options.duration && temporaryStyles.push([ PREFIX + "transition-duration", options.duration + "s" ]);
                var hasCompleteStyles = options.keyframeStyle || options.to && (0 < options.duration || options.transitionStyle), hasCompleteClasses = !!options.addClass || !!options.removeClass, hasCompleteAnimation = hasCompleteStyles || hasCompleteClasses;
                blockTransition(element, !0);
                applyAnimationFromStyles(element, options);
                var events, eventFn, animationClosed = !1;
                return {
                    close: $window.close,
                    start: function() {
                        var runner = new $$AnimateRunner();
                        !function(callback) {
                            cancelLastRAFRequest && cancelLastRAFRequest();
                            rafWaitQueue.push(callback);
                            cancelLastRAFRequest = $$rAF(function() {
                                cancelLastRAFRequest = null;
                                for (var pageWidth = $$forceReflow(), i = 0; i < rafWaitQueue.length; i++) rafWaitQueue[i](pageWidth);
                                rafWaitQueue.length = 0;
                            });
                        }(function() {
                            blockTransition(element, !1);
                            if (!hasCompleteAnimation) return close();
                            forEach(temporaryStyles, function(entry) {
                                var key = entry[0], value = entry[1];
                                node.style[camelCase(key)] = value;
                            });
                            applyClasses(element, options);
                            var timings = function(element) {
                                var node = getDomNode(element), cs = $window.getComputedStyle(node), tdr = parseMaxTime(cs[prop("transitionDuration")]), adr = parseMaxTime(cs[prop("animationDuration")]), tdy = parseMaxTime(cs[prop("transitionDelay")]), ady = parseMaxTime(cs[prop("animationDelay")]);
                                adr *= parseInt(cs[prop("animationIterationCount")], 10) || 1;
                                var duration = Math.max(adr, tdr), delay = Math.max(ady, tdy);
                                return {
                                    duration: duration,
                                    delay: delay,
                                    animationDuration: adr,
                                    transitionDuration: tdr,
                                    animationDelay: ady,
                                    transitionDelay: tdy
                                };
                                function prop(key) {
                                    return WEBKIT ? "Webkit" + key.charAt(0).toUpperCase() + key.substr(1) : key;
                                }
                            }(element);
                            if (0 === timings.duration) return close();
                            var moreStyles = [];
                            if (options.easing) {
                                timings.transitionDuration && moreStyles.push([ PREFIX + "transition-timing-function", options.easing ]);
                                timings.animationDuration && moreStyles.push([ PREFIX + "animation-timing-function", options.easing ]);
                            }
                            options.delay && timings.animationDelay && moreStyles.push([ PREFIX + "animation-delay", options.delay + "s" ]);
                            options.duration && timings.animationDuration && moreStyles.push([ PREFIX + "animation-duration", options.duration + "s" ]);
                            forEach(moreStyles, function(entry) {
                                var key = entry[0], value = entry[1];
                                node.style[camelCase(key)] = value;
                                temporaryStyles.push(entry);
                            });
                            var maxDelayTime = 1e3 * timings.delay, maxDuration = timings.duration, maxDurationTime = 1e3 * maxDuration, startTime = Date.now();
                            events = [];
                            timings.transitionDuration && events.push(TRANSITION_EVENTS);
                            timings.animationDuration && events.push(ANIMATION_EVENTS);
                            events = events.join(" ");
                            eventFn = function(event) {
                                event.stopPropagation();
                                var ev = event.originalEvent || event, timeStamp = ev.timeStamp || Date.now(), elapsedTime = parseFloat(ev.elapsedTime.toFixed(3));
                                Math.max(timeStamp - startTime, 0) >= maxDelayTime && maxDuration <= elapsedTime && close();
                            };
                            element.on(events, eventFn);
                            applyAnimationToStyles(element, options);
                            $timeout(close, maxDelayTime + 1.5 * maxDurationTime, !1);
                        });
                        return runner;
                        function close() {
                            if (!animationClosed) {
                                animationClosed = !0;
                                events && eventFn && element.off(events, eventFn);
                                applyClasses(element, options);
                                !function(element, options) {
                                    applyAnimationFromStyles(element, options);
                                    applyAnimationToStyles(element, options);
                                }(element, options);
                                forEach(temporaryStyles, function(entry) {
                                    node.style[camelCase(entry[0])] = "";
                                });
                                runner.complete(!0);
                                return runner;
                            }
                        }
                    }
                };
            };
        } ]);
        function camelCase(str) {
            return str.replace(/-[a-z]/g, function(str) {
                return str.charAt(1).toUpperCase();
            });
        }
    }();
    angular.module("material.components.autocomplete", [ "material.core", "material.components.icon", "material.components.virtualRepeat" ]);
    angular.module("material.components.backdrop", [ "material.core" ]).directive("mdBackdrop", [ "$mdTheming", "$animate", "$rootElement", "$window", "$log", "$$rAF", "$document", function($mdTheming, $animate, $rootElement, $window, $log, $$rAF, $document) {
        return {
            restrict: "E",
            link: function(scope, element, attrs) {
                var body = $window.getComputedStyle($document[0].body);
                if ("fixed" == body.position) {
                    var hViewport = parseInt(body.height, 10) + Math.abs(parseInt(body.top, 10));
                    element.css({
                        height: hViewport + "px"
                    });
                }
                $animate.pin && $animate.pin(element, $rootElement);
                $$rAF(function() {
                    var parent = element.parent()[0];
                    if (parent) {
                        "BODY" == parent.nodeName && element.css({
                            position: "fixed"
                        });
                        var styles = $window.getComputedStyle(parent);
                        "static" == styles.position && $log.warn("<md-backdrop> may not work properly in a scrolled, static-positioned parent container.");
                    }
                    $mdTheming.inherit(element, element.parent());
                });
            }
        };
    } ]);
    !function() {
        angular.module("material.components.bottomSheet", [ "material.core", "material.components.backdrop" ]).directive("mdBottomSheet", MdBottomSheetDirective).provider("$mdBottomSheet", MdBottomSheetProvider);
        function MdBottomSheetDirective($mdBottomSheet) {
            return {
                restrict: "E",
                link: function(scope, element, attr) {
                    scope.$on("$destroy", function() {
                        $mdBottomSheet.destroy();
                    });
                }
            };
        }
        MdBottomSheetDirective.$inject = [ "$mdBottomSheet" ];
        function MdBottomSheetProvider($$interimElementProvider) {
            bottomSheetDefaults.$inject = [ "$animate", "$mdConstant", "$mdUtil", "$mdTheming", "$mdBottomSheet", "$rootElement", "$mdGesture" ];
            return $$interimElementProvider("$mdBottomSheet").setDefaults({
                methods: [ "disableParentScroll", "escapeToClose", "clickOutsideToClose" ],
                options: bottomSheetDefaults
            });
            function bottomSheetDefaults($animate, $mdConstant, $mdUtil, $mdTheming, $mdBottomSheet, $rootElement, $mdGesture) {
                var backdrop;
                return {
                    themable: !0,
                    onShow: function(scope, element, options, controller) {
                        element = $mdUtil.extractElementByName(element, "md-bottom-sheet");
                        backdrop = $mdUtil.createBackdrop(scope, "md-bottom-sheet-backdrop md-opaque");
                        options.clickOutsideToClose && backdrop.on("click", function() {
                            $mdUtil.nextTick($mdBottomSheet.cancel, !0);
                        });
                        $mdTheming.inherit(backdrop, options.parent);
                        $animate.enter(backdrop, options.parent, null);
                        var bottomSheet = new BottomSheet(element, options.parent);
                        options.bottomSheet = bottomSheet;
                        $mdTheming.inherit(bottomSheet.element, options.parent);
                        options.disableParentScroll && (options.restoreScroll = $mdUtil.disableScrollAround(bottomSheet.element, options.parent));
                        return $animate.enter(bottomSheet.element, options.parent).then(function() {
                            var focusable = $mdUtil.findFocusTarget(element) || angular.element(element[0].querySelector("button") || element[0].querySelector("a") || element[0].querySelector("[ng-click]"));
                            focusable.focus();
                            if (options.escapeToClose) {
                                options.rootElementKeyupCallback = function(e) {
                                    e.keyCode === $mdConstant.KEY_CODE.ESCAPE && $mdUtil.nextTick($mdBottomSheet.cancel, !0);
                                };
                                $rootElement.on("keyup", options.rootElementKeyupCallback);
                            }
                        });
                    },
                    onRemove: function(scope, element, options) {
                        var bottomSheet = options.bottomSheet;
                        $animate.leave(backdrop);
                        return $animate.leave(bottomSheet.element).then(function() {
                            if (options.disableParentScroll) {
                                options.restoreScroll();
                                delete options.restoreScroll;
                            }
                            bottomSheet.cleanup();
                        });
                    },
                    escapeToClose: !0,
                    clickOutsideToClose: !0,
                    disableParentScroll: !0
                };
                function BottomSheet(element, parent) {
                    var deregister = $mdGesture.register(parent, "drag", {
                        horizontal: !1
                    });
                    parent.on("$md.dragstart", onDragStart).on("$md.drag", onDrag).on("$md.dragend", onDragEnd);
                    return {
                        element: element,
                        cleanup: function() {
                            deregister();
                            parent.off("$md.dragstart", onDragStart);
                            parent.off("$md.drag", onDrag);
                            parent.off("$md.dragend", onDragEnd);
                        }
                    };
                    function onDragStart(ev) {
                        element.css($mdConstant.CSS.TRANSITION_DURATION, "0ms");
                    }
                    function onDrag(ev) {
                        var transform = ev.pointer.distanceY;
                        transform < 5 && (transform = Math.max(-80, transform / 2));
                        element.css($mdConstant.CSS.TRANSFORM, "translate3d(0," + (80 + transform) + "px,0)");
                    }
                    function onDragEnd(ev) {
                        if (0 < ev.pointer.distanceY && (20 < ev.pointer.distanceY || .5 < Math.abs(ev.pointer.velocityY))) {
                            var distanceRemaining = element.prop("offsetHeight") - ev.pointer.distanceY, transitionDuration = Math.min(distanceRemaining / ev.pointer.velocityY * .75, 500);
                            element.css($mdConstant.CSS.TRANSITION_DURATION, transitionDuration + "ms");
                            $mdUtil.nextTick($mdBottomSheet.cancel, !0);
                        } else {
                            element.css($mdConstant.CSS.TRANSITION_DURATION, "");
                            element.css($mdConstant.CSS.TRANSFORM, "");
                        }
                    }
                }
            }
        }
        MdBottomSheetProvider.$inject = [ "$$interimElementProvider" ];
    }();
    !function() {
        angular.module("material.components.button", [ "material.core" ]).directive("mdButton", MdButtonDirective);
        function MdButtonDirective($mdButtonInkRipple, $mdTheming, $mdAria, $timeout) {
            return {
                restrict: "EA",
                replace: !0,
                transclude: !0,
                template: function(element, attr) {
                    {
                        if (isAnchor(attr)) return '<a class="md-button" ng-transclude></a>';
                        var btnType = void 0 === attr.type ? "button" : attr.type;
                        return '<button class="md-button" type="' + btnType + '" ng-transclude></button>';
                    }
                },
                link: function(scope, element, attr) {
                    var node = element[0];
                    $mdTheming(element);
                    $mdButtonInkRipple.attach(scope, element);
                    node.textContent.trim() || $mdAria.expect(element, "aria-label");
                    isAnchor(attr) && angular.isDefined(attr.ngDisabled) && scope.$watch(attr.ngDisabled, function(isDisabled) {
                        element.attr("tabindex", isDisabled ? -1 : 0);
                    });
                    element.on("click", function(e) {
                        if (!0 === attr.disabled) {
                            e.preventDefault();
                            e.stopImmediatePropagation();
                        }
                    });
                    scope.mouseActive = !1;
                    element.on("mousedown", function() {
                        scope.mouseActive = !0;
                        $timeout(function() {
                            scope.mouseActive = !1;
                        }, 100);
                    }).on("focus", function() {
                        !1 === scope.mouseActive && element.addClass("md-focused");
                    }).on("blur", function(ev) {
                        element.removeClass("md-focused");
                    });
                }
            };
            function isAnchor(attr) {
                return angular.isDefined(attr.href) || angular.isDefined(attr.ngHref) || angular.isDefined(attr.ngLink) || angular.isDefined(attr.uiSref);
            }
        }
        MdButtonDirective.$inject = [ "$mdButtonInkRipple", "$mdTheming", "$mdAria", "$timeout" ];
    }();
    !function() {
        angular.module("material.components.card", [ "material.core" ]).directive("mdCard", mdCardDirective);
        function mdCardDirective($mdTheming) {
            return {
                restrict: "E",
                link: function($scope, $element) {
                    $mdTheming($element);
                }
            };
        }
        mdCardDirective.$inject = [ "$mdTheming" ];
    }();
    !function() {
        angular.module("material.components.checkbox", [ "material.core" ]).directive("mdCheckbox", MdCheckboxDirective);
        function MdCheckboxDirective(inputDirective, $mdAria, $mdConstant, $mdTheming, $mdUtil, $timeout) {
            inputDirective = inputDirective[0];
            return {
                restrict: "E",
                transclude: !0,
                require: "?ngModel",
                priority: 210,
                template: '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox><div class="md-icon"></div></div><div ng-transclude class="md-label"></div>',
                compile: function(tElement, tAttrs) {
                    tAttrs.type = "checkbox";
                    tAttrs.tabindex = tAttrs.tabindex || "0";
                    tElement.attr("role", tAttrs.type);
                    tElement.on("click", function(event) {
                        this.hasAttribute("disabled") && event.stopImmediatePropagation();
                    });
                    return function(scope, element, attr, ngModelCtrl) {
                        ngModelCtrl = ngModelCtrl || $mdUtil.fakeNgModel();
                        $mdTheming(element);
                        attr.ngChecked && scope.$watch(scope.$eval.bind(scope, attr.ngChecked), ngModelCtrl.$setViewValue.bind(ngModelCtrl));
                        expr = "ngDisabled", htmlAttr = "tabindex", valueOpts = {
                            true: "-1",
                            false: attr.tabindex
                        }, attr[expr] && scope.$watch(attr[expr], function(val) {
                            valueOpts[val] && element.attr(htmlAttr, valueOpts[val]);
                        });
                        var expr, htmlAttr, valueOpts;
                        $mdAria.expectWithText(element, "aria-label");
                        inputDirective.link.pre(scope, {
                            on: angular.noop,
                            0: {}
                        }, attr, [ ngModelCtrl ]);
                        scope.mouseActive = !1;
                        element.on("click", listener).on("keypress", function(ev) {
                            var keyCode = ev.which || ev.keyCode;
                            if (keyCode === $mdConstant.KEY_CODE.SPACE || keyCode === $mdConstant.KEY_CODE.ENTER) {
                                ev.preventDefault();
                                element.hasClass("md-focused") || element.addClass("md-focused");
                                listener(ev);
                            }
                        }).on("mousedown", function() {
                            scope.mouseActive = !0;
                            $timeout(function() {
                                scope.mouseActive = !1;
                            }, 100);
                        }).on("focus", function() {
                            !1 === scope.mouseActive && element.addClass("md-focused");
                        }).on("blur", function() {
                            element.removeClass("md-focused");
                        });
                        ngModelCtrl.$render = function() {
                            ngModelCtrl.$viewValue ? element.addClass("md-checked") : element.removeClass("md-checked");
                        };
                        function listener(ev) {
                            element[0].hasAttribute("disabled") || scope.$apply(function() {
                                var viewValue = attr.ngChecked ? attr.checked : !ngModelCtrl.$viewValue;
                                ngModelCtrl.$setViewValue(viewValue, ev && ev.type);
                                ngModelCtrl.$render();
                            });
                        }
                    };
                }
            };
        }
        MdCheckboxDirective.$inject = [ "inputDirective", "$mdAria", "$mdConstant", "$mdTheming", "$mdUtil", "$timeout" ];
    }();
    angular.module("material.components.chips", [ "material.core", "material.components.autocomplete" ]);
    !function() {
        angular.module("material.components.content", [ "material.core" ]).directive("mdContent", mdContentDirective);
        function mdContentDirective($mdTheming) {
            return {
                restrict: "E",
                controller: [ "$scope", "$element", function($scope, $element) {
                    this.$scope = $scope;
                    this.$element = $element;
                } ],
                link: function(scope, element, attr) {
                    element[0];
                    $mdTheming(element);
                    scope.$broadcast("$mdContentLoaded", element);
                    !function(node) {
                        angular.element(node).on("$md.pressdown", function(ev) {
                            if ("t" === ev.pointer.type && !ev.$materialScrollFixed) {
                                ev.$materialScrollFixed = !0;
                                0 === node.scrollTop ? node.scrollTop = 1 : node.scrollHeight === node.scrollTop + node.offsetHeight && (node.scrollTop -= 1);
                            }
                        });
                    }(element[0]);
                }
            };
        }
        mdContentDirective.$inject = [ "$mdTheming" ];
    }();
    !function() {
        angular.module("material.components.datepicker", [ "material.core", "material.components.icon", "material.components.virtualRepeat" ]).directive("mdCalendar", function() {
            return {
                template: '<table aria-hidden="true" class="md-calendar-day-header"><thead></thead></table><div class="md-calendar-scroll-mask"><md-virtual-repeat-container class="md-calendar-scroll-container" md-offset-size="' + (TBODY_SINGLE_ROW_HEIGHT - TBODY_HEIGHT) + '"><table role="grid" tabindex="0" class="md-calendar" aria-readonly="true"><tbody role="rowgroup" md-virtual-repeat="i in ctrl.items" md-calendar-month md-month-offset="$index" class="md-calendar-month" md-start-index="ctrl.getSelectedMonthIndex()" md-item-size="' + TBODY_HEIGHT + '"></tbody></table></md-virtual-repeat-container></div>',
                scope: {
                    minDate: "=mdMinDate",
                    maxDate: "=mdMaxDate",
                    dateFilter: "=mdDateFilter"
                },
                require: [ "ngModel", "mdCalendar" ],
                controller: CalendarCtrl,
                controllerAs: "ctrl",
                bindToController: !0,
                link: function(scope, element, attrs, controllers) {
                    var ngModelCtrl = controllers[0], mdCalendarCtrl = controllers[1];
                    mdCalendarCtrl.configureNgModel(ngModelCtrl);
                }
            };
        });
        var TBODY_HEIGHT = 265, TBODY_SINGLE_ROW_HEIGHT = 45, nextUniqueId = 0;
        function CalendarCtrl($element, $attrs, $scope, $animate, $q, $mdConstant, $mdTheming, $$mdDateUtil, $mdDateLocale, $mdInkRipple, $mdUtil) {
            $mdTheming($element);
            this.items = {
                length: 2e3
            };
            if (this.maxDate && this.minDate) {
                var numMonths = $$mdDateUtil.getMonthDistance(this.minDate, this.maxDate) + 1;
                numMonths = Math.max(numMonths, 1);
                numMonths += 1;
                this.items.length = numMonths;
            }
            this.$animate = $animate;
            this.$q = $q;
            this.$mdInkRipple = $mdInkRipple;
            this.$mdUtil = $mdUtil;
            this.keyCode = $mdConstant.KEY_CODE;
            this.dateUtil = $$mdDateUtil;
            this.dateLocale = $mdDateLocale;
            this.$element = $element;
            this.$scope = $scope;
            this.calendarElement = $element[0].querySelector(".md-calendar");
            this.calendarScroller = $element[0].querySelector(".md-virtual-repeat-scroller");
            this.today = this.dateUtil.createDateAtMidnight();
            this.firstRenderableDate = this.dateUtil.incrementMonths(this.today, -this.items.length / 2);
            if (this.minDate && this.minDate > this.firstRenderableDate) this.firstRenderableDate = this.minDate; else if (this.maxDate) {
                this.items.length;
                this.firstRenderableDate = this.dateUtil.incrementMonths(this.maxDate, -(this.items.length - 2));
            }
            this.id = nextUniqueId++;
            this.ngModelCtrl = null;
            this.selectedDate = null;
            this.displayDate = null;
            this.focusDate = null;
            this.isInitialized = !1;
            this.isMonthTransitionInProgress = !1;
            $attrs.tabindex || $element.attr("tabindex", "-1");
            var self = this;
            this.cellClickHandler = function() {
                var cellElement = this;
                this.hasAttribute("data-timestamp") && $scope.$apply(function() {
                    var timestamp = Number(cellElement.getAttribute("data-timestamp"));
                    self.setNgModelValue(self.dateUtil.createDateAtMidnight(timestamp));
                });
            };
            this.attachCalendarEventListeners();
        }
        CalendarCtrl.$inject = [ "$element", "$attrs", "$scope", "$animate", "$q", "$mdConstant", "$mdTheming", "$$mdDateUtil", "$mdDateLocale", "$mdInkRipple", "$mdUtil" ];
        CalendarCtrl.prototype.configureNgModel = function(ngModelCtrl) {
            this.ngModelCtrl = ngModelCtrl;
            var self = this;
            ngModelCtrl.$render = function() {
                self.changeSelectedDate(self.ngModelCtrl.$viewValue);
            };
        };
        CalendarCtrl.prototype.buildInitialCalendarDisplay = function() {
            this.buildWeekHeader();
            this.hideVerticalScrollbar();
            this.displayDate = this.selectedDate || this.today;
            this.isInitialized = !0;
        };
        CalendarCtrl.prototype.hideVerticalScrollbar = function() {
            var element = this.$element[0], scrollMask = element.querySelector(".md-calendar-scroll-mask"), scroller = this.calendarScroller, headerWidth = element.querySelector(".md-calendar-day-header").clientWidth, scrollbarWidth = scroller.offsetWidth - scroller.clientWidth;
            scrollMask.style.width = headerWidth + "px";
            scroller.style.width = headerWidth + scrollbarWidth + "px";
            scroller.style.paddingRight = scrollbarWidth + "px";
        };
        CalendarCtrl.prototype.attachCalendarEventListeners = function() {
            this.$element.on("keydown", angular.bind(this, this.handleKeyEvent));
        };
        CalendarCtrl.prototype.handleKeyEvent = function(event) {
            var self = this;
            this.$scope.$apply(function() {
                if (event.which != self.keyCode.ESCAPE && event.which != self.keyCode.TAB) if (event.which !== self.keyCode.ENTER) {
                    var date = self.getFocusDateFromKeyEvent(event);
                    if (date) {
                        date = self.boundDateByMinAndMax(date);
                        event.preventDefault();
                        event.stopPropagation();
                        self.changeDisplayDate(date).then(function() {
                            self.focus(date);
                        });
                    }
                } else {
                    self.setNgModelValue(self.displayDate);
                    event.preventDefault();
                } else {
                    self.$scope.$emit("md-calendar-close");
                    event.which == self.keyCode.TAB && event.preventDefault();
                }
            });
        };
        CalendarCtrl.prototype.getFocusDateFromKeyEvent = function(event) {
            var dateUtil = this.dateUtil, keyCode = this.keyCode;
            switch (event.which) {
              case keyCode.RIGHT_ARROW:
                return dateUtil.incrementDays(this.displayDate, 1);

              case keyCode.LEFT_ARROW:
                return dateUtil.incrementDays(this.displayDate, -1);

              case keyCode.DOWN_ARROW:
                return event.metaKey ? dateUtil.incrementMonths(this.displayDate, 1) : dateUtil.incrementDays(this.displayDate, 7);

              case keyCode.UP_ARROW:
                return event.metaKey ? dateUtil.incrementMonths(this.displayDate, -1) : dateUtil.incrementDays(this.displayDate, -7);

              case keyCode.PAGE_DOWN:
                return dateUtil.incrementMonths(this.displayDate, 1);

              case keyCode.PAGE_UP:
                return dateUtil.incrementMonths(this.displayDate, -1);

              case keyCode.HOME:
                return dateUtil.getFirstDateOfMonth(this.displayDate);

              case keyCode.END:
                return dateUtil.getLastDateOfMonth(this.displayDate);

              default:
                return null;
            }
        };
        CalendarCtrl.prototype.getSelectedMonthIndex = function() {
            return this.dateUtil.getMonthDistance(this.firstRenderableDate, this.selectedDate || this.today);
        };
        CalendarCtrl.prototype.scrollToMonth = function(date) {
            if (this.dateUtil.isValidDate(date)) {
                var monthDistance = this.dateUtil.getMonthDistance(this.firstRenderableDate, date);
                this.calendarScroller.scrollTop = monthDistance * TBODY_HEIGHT;
            }
        };
        CalendarCtrl.prototype.setNgModelValue = function(date) {
            this.$scope.$emit("md-calendar-change", date);
            this.ngModelCtrl.$setViewValue(date);
            this.ngModelCtrl.$render();
        };
        CalendarCtrl.prototype.focus = function(opt_date) {
            var date = opt_date || this.selectedDate || this.today, previousFocus = this.calendarElement.querySelector(".md-focus");
            previousFocus && previousFocus.classList.remove("md-focus");
            var cellId = this.getDateId(date), cell = document.getElementById(cellId);
            if (cell) {
                cell.classList.add("md-focus");
                cell.focus();
            } else this.focusDate = date;
        };
        CalendarCtrl.prototype.boundDateByMinAndMax = function(date) {
            var boundDate = date;
            this.minDate && date < this.minDate && (boundDate = new Date(this.minDate.getTime()));
            this.maxDate && date > this.maxDate && (boundDate = new Date(this.maxDate.getTime()));
            return boundDate;
        };
        CalendarCtrl.prototype.changeSelectedDate = function(date) {
            var self = this, previousSelectedDate = this.selectedDate;
            this.selectedDate = date;
            this.changeDisplayDate(date).then(function() {
                if (previousSelectedDate) {
                    var prevDateCell = document.getElementById(self.getDateId(previousSelectedDate));
                    if (prevDateCell) {
                        prevDateCell.classList.remove("md-calendar-selected-date");
                        prevDateCell.setAttribute("aria-selected", "false");
                    }
                }
                if (date) {
                    var dateCell = document.getElementById(self.getDateId(date));
                    if (dateCell) {
                        dateCell.classList.add("md-calendar-selected-date");
                        dateCell.setAttribute("aria-selected", "true");
                    }
                }
            });
        };
        CalendarCtrl.prototype.changeDisplayDate = function(date) {
            if (!this.isInitialized) {
                this.buildInitialCalendarDisplay();
                return this.$q.when();
            }
            if (!this.dateUtil.isValidDate(date) || this.isMonthTransitionInProgress) return this.$q.when();
            this.isMonthTransitionInProgress = !0;
            var animationPromise = this.animateDateChange(date);
            this.displayDate = date;
            var self = this;
            animationPromise.then(function() {
                self.isMonthTransitionInProgress = !1;
            });
            return animationPromise;
        };
        CalendarCtrl.prototype.animateDateChange = function(date) {
            this.scrollToMonth(date);
            return this.$q.when();
        };
        CalendarCtrl.prototype.buildWeekHeader = function() {
            for (var firstDayOfWeek = this.dateLocale.firstDayOfWeek, shortDays = this.dateLocale.shortDays, row = document.createElement("tr"), i = 0; i < 7; i++) {
                var th = document.createElement("th");
                th.textContent = shortDays[(i + firstDayOfWeek) % 7];
                row.appendChild(th);
            }
            this.$element.find("thead").append(row);
        };
        CalendarCtrl.prototype.getDateId = function(date) {
            return [ "md", this.id, date.getFullYear(), date.getMonth(), date.getDate() ].join("-");
        };
    }();
    !function() {
        angular.module("material.components.datepicker").directive("mdCalendarMonth", function() {
            return {
                require: [ "^^mdCalendar", "mdCalendarMonth" ],
                scope: {
                    offset: "=mdMonthOffset"
                },
                controller: CalendarMonthCtrl,
                controllerAs: "mdMonthCtrl",
                bindToController: !0,
                link: function(scope, element, attrs, controllers) {
                    var calendarCtrl = controllers[0], monthCtrl = controllers[1];
                    monthCtrl.calendarCtrl = calendarCtrl;
                    monthCtrl.generateContent();
                    scope.$watch(function() {
                        return monthCtrl.offset;
                    }, function(offset, oldOffset) {
                        offset != oldOffset && monthCtrl.generateContent();
                    });
                }
            };
        });
        function CalendarMonthCtrl($element, $$mdDateUtil, $mdDateLocale) {
            this.dateUtil = $$mdDateUtil;
            this.dateLocale = $mdDateLocale;
            this.$element = $element;
            this.calendarCtrl = null;
            this.offset;
            this.focusAfterAppend = null;
        }
        CalendarMonthCtrl.$inject = [ "$element", "$$mdDateUtil", "$mdDateLocale" ];
        CalendarMonthCtrl.prototype.generateContent = function() {
            var calendarCtrl = this.calendarCtrl, date = this.dateUtil.incrementMonths(calendarCtrl.firstRenderableDate, this.offset);
            this.$element.empty();
            this.$element.append(this.buildCalendarForMonth(date));
            if (this.focusAfterAppend) {
                this.focusAfterAppend.classList.add("md-focus");
                this.focusAfterAppend.focus();
                this.focusAfterAppend = null;
            }
        };
        CalendarMonthCtrl.prototype.buildDateCell = function(opt_date) {
            var calendarCtrl = this.calendarCtrl, cell = document.createElement("td");
            cell.tabIndex = -1;
            cell.classList.add("md-calendar-date");
            cell.setAttribute("role", "gridcell");
            if (opt_date) {
                cell.setAttribute("tabindex", "-1");
                cell.setAttribute("aria-label", this.dateLocale.longDateFormatter(opt_date));
                cell.id = calendarCtrl.getDateId(opt_date);
                cell.setAttribute("data-timestamp", opt_date.getTime());
                this.dateUtil.isSameDay(opt_date, calendarCtrl.today) && cell.classList.add("md-calendar-date-today");
                if (this.dateUtil.isValidDate(calendarCtrl.selectedDate) && this.dateUtil.isSameDay(opt_date, calendarCtrl.selectedDate)) {
                    cell.classList.add("md-calendar-selected-date");
                    cell.setAttribute("aria-selected", "true");
                }
                var cellText = this.dateLocale.dates[opt_date.getDate()];
                if (this.isDateEnabled(opt_date)) {
                    var selectionIndicator = document.createElement("span");
                    cell.appendChild(selectionIndicator);
                    selectionIndicator.classList.add("md-calendar-date-selection-indicator");
                    selectionIndicator.textContent = cellText;
                    cell.addEventListener("click", calendarCtrl.cellClickHandler);
                    calendarCtrl.focusDate && this.dateUtil.isSameDay(opt_date, calendarCtrl.focusDate) && (this.focusAfterAppend = cell);
                } else {
                    cell.classList.add("md-calendar-date-disabled");
                    cell.textContent = cellText;
                }
            }
            return cell;
        };
        CalendarMonthCtrl.prototype.isDateEnabled = function(opt_date) {
            return this.dateUtil.isDateWithinRange(opt_date, this.calendarCtrl.minDate, this.calendarCtrl.maxDate) && (!angular.isFunction(this.calendarCtrl.dateFilter) || this.calendarCtrl.dateFilter(opt_date));
        };
        CalendarMonthCtrl.prototype.buildDateRow = function(rowNumber) {
            var row = document.createElement("tr");
            row.setAttribute("role", "row");
            row.setAttribute("aria-label", this.dateLocale.weekNumberFormatter(rowNumber));
            return row;
        };
        CalendarMonthCtrl.prototype.buildCalendarForMonth = function(opt_dateInMonth) {
            var date = this.dateUtil.isValidDate(opt_dateInMonth) ? opt_dateInMonth : new Date(), firstDayOfMonth = this.dateUtil.getFirstDateOfMonth(date), firstDayOfTheWeek = this.getLocaleDay_(firstDayOfMonth), numberOfDaysInMonth = this.dateUtil.getNumberOfDaysInMonth(date), monthBody = document.createDocumentFragment(), rowNumber = 1, row = this.buildDateRow(rowNumber);
            monthBody.appendChild(row);
            var isFinalMonth = this.offset === this.calendarCtrl.items.length - 1, blankCellOffset = 0, monthLabelCell = document.createElement("td");
            monthLabelCell.classList.add("md-calendar-month-label");
            this.calendarCtrl.maxDate && firstDayOfMonth > this.calendarCtrl.maxDate && monthLabelCell.classList.add("md-calendar-month-label-disabled");
            monthLabelCell.textContent = this.dateLocale.monthHeaderFormatter(date);
            if (firstDayOfTheWeek <= 2) {
                monthLabelCell.setAttribute("colspan", "7");
                var monthLabelRow = this.buildDateRow();
                monthLabelRow.appendChild(monthLabelCell);
                monthBody.insertBefore(monthLabelRow, row);
                if (isFinalMonth) return monthBody;
            } else {
                blankCellOffset = 2;
                monthLabelCell.setAttribute("colspan", "2");
                row.appendChild(monthLabelCell);
            }
            for (var i = blankCellOffset; i < firstDayOfTheWeek; i++) row.appendChild(this.buildDateCell());
            for (var dayOfWeek = firstDayOfTheWeek, iterationDate = firstDayOfMonth, d = 1; d <= numberOfDaysInMonth; d++) {
                if (7 === dayOfWeek) {
                    if (isFinalMonth) return monthBody;
                    dayOfWeek = 0;
                    rowNumber++;
                    row = this.buildDateRow(rowNumber);
                    monthBody.appendChild(row);
                }
                iterationDate.setDate(d);
                var cell = this.buildDateCell(iterationDate);
                row.appendChild(cell);
                dayOfWeek++;
            }
            for (;row.childNodes.length < 7; ) row.appendChild(this.buildDateCell());
            for (;monthBody.childNodes.length < 6; ) {
                var whitespaceRow = this.buildDateRow();
                for (i = 0; i < 7; i++) whitespaceRow.appendChild(this.buildDateCell());
                monthBody.appendChild(whitespaceRow);
            }
            return monthBody;
        };
        CalendarMonthCtrl.prototype.getLocaleDay_ = function(date) {
            return (date.getDay() + (7 - this.dateLocale.firstDayOfWeek)) % 7;
        };
    }();
    angular.module("material.components.datepicker").config([ "$provide", function($provide) {
        function DateLocaleProvider() {
            this.months = null;
            this.shortMonths = null;
            this.days = null;
            this.shortDays = null;
            this.dates = null;
            this.firstDayOfWeek = 0;
            this.formatDate = null;
            this.parseDate = null;
            this.monthHeaderFormatter = null;
            this.weekNumberFormatter = null;
            this.longDateFormatter = null;
            this.msgCalendar = "";
            this.msgOpenCalendar = "";
        }
        (DateLocaleProvider.prototype.$get = function($locale) {
            for (var defaultShortDays = $locale.DATETIME_FORMATS.DAY.map(function(day) {
                return day[0];
            }), defaultDates = Array(32), i = 1; i <= 31; i++) defaultDates[i] = i;
            var service = {
                months: this.months || $locale.DATETIME_FORMATS.MONTH,
                shortMonths: this.shortMonths || $locale.DATETIME_FORMATS.SHORTMONTH,
                days: this.days || $locale.DATETIME_FORMATS.DAY,
                shortDays: this.shortDays || defaultShortDays,
                dates: this.dates || defaultDates,
                firstDayOfWeek: this.firstDayOfWeek || 0,
                formatDate: this.formatDate || function(date) {
                    if (!date) return "";
                    var localeTime = date.toLocaleTimeString(), formatDate = date;
                    0 != date.getHours() || -1 === localeTime.indexOf("11:") && -1 === localeTime.indexOf("23:") || (formatDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 1, 0, 0));
                    return formatDate.toLocaleDateString();
                },
                parseDate: this.parseDate || function(dateString) {
                    return new Date(dateString);
                },
                isDateComplete: this.isDateComplete || function(dateString) {
                    dateString = dateString.trim();
                    return /^(([a-zA-Z]{3,}|[0-9]{1,4})([ \.,]+|[\/\-])){2}([a-zA-Z]{3,}|[0-9]{1,4})$/.test(dateString);
                },
                monthHeaderFormatter: this.monthHeaderFormatter || function(date) {
                    return service.shortMonths[date.getMonth()] + " " + date.getFullYear();
                },
                weekNumberFormatter: this.weekNumberFormatter || function(number) {
                    return "Week " + number;
                },
                longDateFormatter: this.longDateFormatter || function(date) {
                    return [ service.days[date.getDay()], service.months[date.getMonth()], service.dates[date.getDate()], date.getFullYear() ].join(" ");
                },
                msgCalendar: this.msgCalendar || "Calendar",
                msgOpenCalendar: this.msgOpenCalendar || "Open calendar"
            };
            return service;
        }).$inject = [ "$locale" ];
        $provide.provider("$mdDateLocale", new DateLocaleProvider());
    } ]);
    !function() {
        angular.module("material.components.datepicker").directive("mdDatepicker", function() {
            return {
                template: '<md-button class="md-datepicker-button md-icon-button" type="button" tabindex="-1" aria-hidden="true" ng-click="ctrl.openCalendarPane($event)"><md-icon class="md-datepicker-calendar-icon" md-svg-icon="md-calendar"></md-icon></md-button><div class="md-datepicker-input-container" ng-class="{\'md-datepicker-focused\': ctrl.isFocused}"><input class="md-datepicker-input" aria-haspopup="true" ng-focus="ctrl.setFocused(true)" ng-blur="ctrl.setFocused(false)"><md-button type="button" md-no-ink class="md-datepicker-triangle-button md-icon-button" ng-click="ctrl.openCalendarPane($event)" aria-label="{{::ctrl.dateLocale.msgOpenCalendar}}"><div class="md-datepicker-expand-triangle"></div></md-button></div><div class="md-datepicker-calendar-pane md-whiteframe-z1"><div class="md-datepicker-input-mask"><div class="md-datepicker-input-mask-opaque"></div></div><div class="md-datepicker-calendar"><md-calendar role="dialog" aria-label="{{::ctrl.dateLocale.msgCalendar}}" md-min-date="ctrl.minDate" md-max-date="ctrl.maxDate"md-date-filter="ctrl.dateFilter"ng-model="ctrl.date" ng-if="ctrl.isCalendarOpen"></md-calendar></div></div>',
                require: [ "ngModel", "mdDatepicker", "?^mdInputContainer" ],
                scope: {
                    minDate: "=mdMinDate",
                    maxDate: "=mdMaxDate",
                    placeholder: "@mdPlaceholder",
                    dateFilter: "=mdDateFilter"
                },
                controller: DatePickerCtrl,
                controllerAs: "ctrl",
                bindToController: !0,
                link: function(scope, element, attr, controllers) {
                    var ngModelCtrl = controllers[0], mdDatePickerCtrl = controllers[1], mdInputContainer = controllers[2];
                    if (mdInputContainer) throw Error("md-datepicker should not be placed inside md-input-container.");
                    mdDatePickerCtrl.configureNgModel(ngModelCtrl);
                }
            };
        });
        function DatePickerCtrl($scope, $element, $attrs, $compile, $timeout, $window, $mdConstant, $mdTheming, $mdUtil, $mdDateLocale, $$mdDateUtil, $$rAF) {
            this.$compile = $compile;
            this.$timeout = $timeout;
            this.$window = $window;
            this.dateLocale = $mdDateLocale;
            this.dateUtil = $$mdDateUtil;
            this.$mdConstant = $mdConstant;
            this.$mdUtil = $mdUtil;
            this.$$rAF = $$rAF;
            this.documentElement = angular.element(document.documentElement);
            this.ngModelCtrl = null;
            this.inputElement = $element[0].querySelector("input");
            this.ngInputElement = angular.element(this.inputElement);
            this.inputContainer = $element[0].querySelector(".md-datepicker-input-container");
            this.calendarPane = $element[0].querySelector(".md-datepicker-calendar-pane");
            this.calendarButton = $element[0].querySelector(".md-datepicker-button");
            this.inputMask = $element[0].querySelector(".md-datepicker-input-mask-opaque");
            this.$element = $element;
            this.$attrs = $attrs;
            this.$scope = $scope;
            this.date = null;
            this.isFocused = !1;
            this.isDisabled;
            this.setDisabled($element[0].disabled || angular.isString($attrs.disabled));
            this.isCalendarOpen = !1;
            this.calendarPaneOpenedFrom = null;
            this.calendarPane.id = "md-date-pane" + $mdUtil.nextUid();
            $mdTheming($element);
            this.bodyClickHandler = angular.bind(this, this.handleBodyClick);
            this.windowResizeHandler = $mdUtil.debounce(angular.bind(this, this.closeCalendarPane), 100);
            $attrs.tabindex || $element.attr("tabindex", "-1");
            this.installPropertyInterceptors();
            this.attachChangeListeners();
            this.attachInteractionListeners();
            var self = this;
            $scope.$on("$destroy", function() {
                self.detachCalendarPane();
            });
        }
        DatePickerCtrl.$inject = [ "$scope", "$element", "$attrs", "$compile", "$timeout", "$window", "$mdConstant", "$mdTheming", "$mdUtil", "$mdDateLocale", "$$mdDateUtil", "$$rAF" ];
        DatePickerCtrl.prototype.configureNgModel = function(ngModelCtrl) {
            this.ngModelCtrl = ngModelCtrl;
            var self = this;
            ngModelCtrl.$render = function() {
                var value = self.ngModelCtrl.$viewValue;
                if (value && !(value instanceof Date)) throw Error("The ng-model for md-datepicker must be a Date instance. Currently the model is a: " + typeof value);
                self.date = value;
                self.inputElement.value = self.dateLocale.formatDate(value);
                self.resizeInputElement();
                self.updateErrorState();
            };
        };
        DatePickerCtrl.prototype.attachChangeListeners = function() {
            var self = this;
            self.$scope.$on("md-calendar-change", function(event, date) {
                self.ngModelCtrl.$setViewValue(date);
                self.date = date;
                self.inputElement.value = self.dateLocale.formatDate(date);
                self.closeCalendarPane();
                self.resizeInputElement();
                self.updateErrorState();
            });
            self.ngInputElement.on("input", angular.bind(self, self.resizeInputElement));
            self.ngInputElement.on("input", self.$mdUtil.debounce(self.handleInputEvent, 500, self));
        };
        DatePickerCtrl.prototype.attachInteractionListeners = function() {
            var self = this, $scope = this.$scope, keyCodes = this.$mdConstant.KEY_CODE;
            self.ngInputElement.on("keydown", function(event) {
                if (event.altKey && event.keyCode == keyCodes.DOWN_ARROW) {
                    self.openCalendarPane(event);
                    $scope.$digest();
                }
            });
            $scope.$on("md-calendar-close", function() {
                self.closeCalendarPane();
            });
        };
        DatePickerCtrl.prototype.installPropertyInterceptors = function() {
            var self = this;
            if (this.$attrs.ngDisabled) {
                var scope = this.$mdUtil.validateScope(this.$element) ? this.$element.scope() : null;
                scope && scope.$watch(this.$attrs.ngDisabled, function(isDisabled) {
                    self.setDisabled(isDisabled);
                });
            }
            Object.defineProperty(this, "placeholder", {
                get: function() {
                    return self.inputElement.placeholder;
                },
                set: function(value) {
                    self.inputElement.placeholder = value || "";
                }
            });
        };
        DatePickerCtrl.prototype.setDisabled = function(isDisabled) {
            this.isDisabled = isDisabled;
            this.inputElement.disabled = isDisabled;
            this.calendarButton.disabled = isDisabled;
        };
        DatePickerCtrl.prototype.updateErrorState = function(opt_date) {
            var date = opt_date || this.date;
            this.clearErrorState();
            if (this.dateUtil.isValidDate(date)) {
                this.dateUtil.isValidDate(this.minDate) && this.ngModelCtrl.$setValidity("mindate", date >= this.minDate);
                this.dateUtil.isValidDate(this.maxDate) && this.ngModelCtrl.$setValidity("maxdate", date <= this.maxDate);
                angular.isFunction(this.dateFilter) && this.ngModelCtrl.$setValidity("filtered", this.dateFilter(date));
            } else this.ngModelCtrl.$setValidity("valid", null == date);
            this.ngModelCtrl.$valid || this.inputContainer.classList.add("md-datepicker-invalid");
        };
        DatePickerCtrl.prototype.clearErrorState = function() {
            this.inputContainer.classList.remove("md-datepicker-invalid");
            [ "mindate", "maxdate", "filtered", "valid" ].forEach(function(field) {
                this.ngModelCtrl.$setValidity(field, !0);
            }, this);
        };
        DatePickerCtrl.prototype.resizeInputElement = function() {
            this.inputElement.size = this.inputElement.value.length + 3;
        };
        DatePickerCtrl.prototype.handleInputEvent = function() {
            var inputString = this.inputElement.value, parsedDate = inputString ? this.dateLocale.parseDate(inputString) : null;
            this.dateUtil.setDateTimeToMidnight(parsedDate);
            if ("" == inputString || this.dateUtil.isValidDate(parsedDate) && this.dateLocale.isDateComplete(inputString) && this.isDateEnabled(parsedDate)) {
                this.ngModelCtrl.$setViewValue(parsedDate);
                this.date = parsedDate;
            }
            this.updateErrorState(parsedDate);
        };
        DatePickerCtrl.prototype.isDateEnabled = function(opt_date) {
            return this.dateUtil.isDateWithinRange(opt_date, this.minDate, this.maxDate) && (!angular.isFunction(this.dateFilter) || this.dateFilter(opt_date));
        };
        DatePickerCtrl.prototype.attachCalendarPane = function() {
            var calendarPane = this.calendarPane;
            calendarPane.style.transform = "";
            this.$element.addClass("md-datepicker-open");
            var elementRect = this.inputContainer.getBoundingClientRect(), bodyRect = document.body.getBoundingClientRect(), paneTop = elementRect.top - bodyRect.top, paneLeft = elementRect.left - bodyRect.left, viewportTop = bodyRect.top < 0 && 0 == document.body.scrollTop ? -bodyRect.top : document.body.scrollTop, viewportLeft = bodyRect.left < 0 && 0 == document.body.scrollLeft ? -bodyRect.left : document.body.scrollLeft, viewportBottom = viewportTop + this.$window.innerHeight, viewportRight = viewportLeft + this.$window.innerWidth;
            if (viewportRight < paneLeft + 360) {
                if (0 < viewportRight - 360) paneLeft = viewportRight - 360; else {
                    paneLeft = viewportLeft;
                    var scale = this.$window.innerWidth / 360;
                    calendarPane.style.transform = "scale(" + scale + ")";
                }
                calendarPane.classList.add("md-datepicker-pos-adjusted");
            }
            if (viewportBottom < paneTop + 368 && viewportTop < viewportBottom - 368) {
                paneTop = viewportBottom - 368;
                calendarPane.classList.add("md-datepicker-pos-adjusted");
            }
            calendarPane.style.left = paneLeft + "px";
            calendarPane.style.top = paneTop + "px";
            document.body.appendChild(calendarPane);
            this.inputMask.style.left = elementRect.width + "px";
            this.$$rAF(function() {
                calendarPane.classList.add("md-pane-open");
            });
        };
        DatePickerCtrl.prototype.detachCalendarPane = function() {
            this.$element.removeClass("md-datepicker-open");
            this.calendarPane.classList.remove("md-pane-open");
            this.calendarPane.classList.remove("md-datepicker-pos-adjusted");
            this.calendarPane.parentNode && this.calendarPane.parentNode.removeChild(this.calendarPane);
        };
        DatePickerCtrl.prototype.openCalendarPane = function(event) {
            if (!this.isCalendarOpen && !this.isDisabled) {
                this.isCalendarOpen = !0;
                this.calendarPaneOpenedFrom = event.target;
                this.$mdUtil.disableScrollAround(this.calendarPane);
                this.attachCalendarPane();
                this.focusCalendar();
                var self = this;
                this.$mdUtil.nextTick(function() {
                    self.documentElement.on("click touchstart", self.bodyClickHandler);
                }, !1);
                window.addEventListener("resize", this.windowResizeHandler);
            }
        };
        DatePickerCtrl.prototype.closeCalendarPane = function() {
            if (this.isCalendarOpen) {
                this.isCalendarOpen = !1;
                this.detachCalendarPane();
                this.calendarPaneOpenedFrom.focus();
                this.calendarPaneOpenedFrom = null;
                this.$mdUtil.enableScrolling();
                this.documentElement.off("click touchstart", this.bodyClickHandler);
                window.removeEventListener("resize", this.windowResizeHandler);
            }
        };
        DatePickerCtrl.prototype.getCalendarCtrl = function() {
            return angular.element(this.calendarPane.querySelector("md-calendar")).controller("mdCalendar");
        };
        DatePickerCtrl.prototype.focusCalendar = function() {
            var self = this;
            this.$mdUtil.nextTick(function() {
                self.getCalendarCtrl().focus();
            }, !1);
        };
        DatePickerCtrl.prototype.setFocused = function(isFocused) {
            this.isFocused = isFocused;
        };
        DatePickerCtrl.prototype.handleBodyClick = function(event) {
            if (this.isCalendarOpen) {
                this.$mdUtil.getClosest(event.target, "md-calendar") || this.closeCalendarPane();
                this.$scope.$digest();
            }
        };
    }();
    angular.module("material.components.datepicker").factory("$$mdDateUtil", function() {
        return {
            getFirstDateOfMonth: getFirstDateOfMonth,
            getNumberOfDaysInMonth: getNumberOfDaysInMonth,
            getDateInNextMonth: getDateInNextMonth,
            getDateInPreviousMonth: getDateInPreviousMonth,
            isInNextMonth: function(startDate, endDate) {
                return isSameMonthAndYear(getDateInNextMonth(startDate), endDate);
            },
            isInPreviousMonth: function(startDate, endDate) {
                var previousMonth = getDateInPreviousMonth(startDate);
                return isSameMonthAndYear(endDate, previousMonth);
            },
            getDateMidpoint: function(d1, d2) {
                return createDateAtMidnight((d1.getTime() + d2.getTime()) / 2);
            },
            isSameMonthAndYear: isSameMonthAndYear,
            getWeekOfMonth: function(date) {
                var firstDayOfMonth = getFirstDateOfMonth(date);
                return Math.floor((firstDayOfMonth.getDay() + date.getDate() - 1) / 7);
            },
            incrementDays: function(date, numberOfDays) {
                return new Date(date.getFullYear(), date.getMonth(), date.getDate() + numberOfDays);
            },
            incrementMonths: function(date, numberOfMonths) {
                var dateInTargetMonth = new Date(date.getFullYear(), date.getMonth() + numberOfMonths, 1), numberOfDaysInMonth = getNumberOfDaysInMonth(dateInTargetMonth);
                numberOfDaysInMonth < date.getDate() ? dateInTargetMonth.setDate(numberOfDaysInMonth) : dateInTargetMonth.setDate(date.getDate());
                return dateInTargetMonth;
            },
            getLastDateOfMonth: function(date) {
                return new Date(date.getFullYear(), date.getMonth(), getNumberOfDaysInMonth(date));
            },
            isSameDay: function(d1, d2) {
                return d1.getDate() == d2.getDate() && isSameMonthAndYear(d1, d2);
            },
            getMonthDistance: function(start, end) {
                return 12 * (end.getFullYear() - start.getFullYear()) + (end.getMonth() - start.getMonth());
            },
            isValidDate: isValidDate,
            setDateTimeToMidnight: setDateTimeToMidnight,
            createDateAtMidnight: createDateAtMidnight,
            isDateWithinRange: function(date, minDate, maxDate) {
                return (!angular.isDate(minDate) || minDate <= date) && (!angular.isDate(maxDate) || date <= maxDate);
            }
        };
        function getFirstDateOfMonth(date) {
            return new Date(date.getFullYear(), date.getMonth(), 1);
        }
        function getNumberOfDaysInMonth(date) {
            return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
        }
        function getDateInNextMonth(date) {
            return new Date(date.getFullYear(), date.getMonth() + 1, 1);
        }
        function getDateInPreviousMonth(date) {
            return new Date(date.getFullYear(), date.getMonth() - 1, 1);
        }
        function isSameMonthAndYear(d1, d2) {
            return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth();
        }
        function isValidDate(date) {
            return null != date && date.getTime && !isNaN(date.getTime());
        }
        function setDateTimeToMidnight(date) {
            isValidDate(date) && date.setHours(0, 0, 0, 0);
        }
        function createDateAtMidnight(opt_value) {
            var date;
            setDateTimeToMidnight(date = angular.isUndefined(opt_value) ? new Date() : new Date(opt_value));
            return date;
        }
    });
    !function() {
        angular.module("material.components.dialog", [ "material.core", "material.components.backdrop" ]).directive("mdDialog", MdDialogDirective).provider("$mdDialog", MdDialogProvider);
        function MdDialogDirective($$rAF, $mdTheming, $mdDialog) {
            return {
                restrict: "E",
                link: function(scope, element, attr) {
                    $mdTheming(element);
                    $$rAF(function() {
                        var images, content = element[0].querySelector("md-dialog-content");
                        if (content) {
                            images = content.getElementsByTagName("img");
                            addOverflowClass();
                            angular.element(images).on("load", addOverflowClass);
                        }
                        scope.$on("$destroy", function() {
                            $mdDialog.destroy(element);
                        });
                        function addOverflowClass() {
                            element.toggleClass("md-content-overflow", content.scrollHeight > content.clientHeight);
                        }
                    });
                }
            };
        }
        MdDialogDirective.$inject = [ "$$rAF", "$mdTheming", "$mdDialog" ];
        function MdDialogProvider($$interimElementProvider) {
            var topFocusTrap, bottomFocusTrap;
            advancedDialogOptions.$inject = [ "$mdDialog", "$mdTheming" ];
            dialogDefaultOptions.$inject = [ "$mdDialog", "$mdAria", "$mdUtil", "$mdConstant", "$animate", "$document", "$window", "$rootElement", "$log", "$injector" ];
            return $$interimElementProvider("$mdDialog").setDefaults({
                methods: [ "disableParentScroll", "hasBackdrop", "clickOutsideToClose", "escapeToClose", "targetEvent", "closeTo", "openFrom", "parent", "fullscreen" ],
                options: dialogDefaultOptions
            }).addPreset("alert", {
                methods: [ "title", "htmlContent", "textContent", "content", "ariaLabel", "ok", "theme", "css" ],
                options: advancedDialogOptions
            }).addPreset("confirm", {
                methods: [ "title", "htmlContent", "textContent", "content", "ariaLabel", "ok", "cancel", "theme", "css" ],
                options: advancedDialogOptions
            });
            function advancedDialogOptions($mdDialog, $mdTheming) {
                return {
                    template: [ '<md-dialog md-theme="{{ dialog.theme }}" aria-label="{{ dialog.ariaLabel }}" ng-class="dialog.css">', '  <md-dialog-content class="md-dialog-content" role="document" tabIndex="-1">', '    <h2 class="md-title">{{ dialog.title }}</h2>', '    <div ng-if="::dialog.mdHtmlContent" class="md-dialog-content-body" ', '        ng-bind-html="::dialog.mdHtmlContent"></div>', '    <div ng-if="::!dialog.mdHtmlContent" class="md-dialog-content-body">', "      <p>{{::dialog.mdTextContent}}</p>", "    </div>", "  </md-dialog-content>", "  <md-dialog-actions>", '    <md-button ng-if="dialog.$type == \'confirm\'"               ng-click="dialog.abort()" class="md-primary">', "      {{ dialog.cancel }}", "    </md-button>", '    <md-button ng-click="dialog.hide()" class="md-primary" md-autofocus="dialog.$type!=\'confirm\'">', "      {{ dialog.ok }}", "    </md-button>", "  </md-dialog-actions>", "</md-dialog>" ].join("").replace(/\s\s+/g, ""),
                    controller: function() {
                        this.hide = function() {
                            $mdDialog.hide(!0);
                        };
                        this.abort = function() {
                            $mdDialog.cancel();
                        };
                    },
                    controllerAs: "dialog",
                    bindToController: !0,
                    theme: $mdTheming.defaultTheme()
                };
            }
            function dialogDefaultOptions($mdDialog, $mdAria, $mdUtil, $mdConstant, $animate, $document, $window, $rootElement, $log, $injector) {
                return {
                    hasBackdrop: !0,
                    isolateScope: !0,
                    onShow: function(scope, element, options, controller) {
                        angular.element($document[0].body).addClass("md-dialog-is-showing");
                        !function(options) {
                            options.origin = angular.extend({
                                element: null,
                                bounds: null,
                                focus: angular.noop
                            }, options.origin || {});
                            options.parent = getDomElement(options.parent, $rootElement);
                            options.closeTo = getBoundingClientRect(getDomElement(options.closeTo));
                            options.openFrom = getBoundingClientRect(getDomElement(options.openFrom));
                            options.targetEvent && (options.origin = getBoundingClientRect(options.targetEvent.target, options.origin));
                            function getBoundingClientRect(element, orig) {
                                var source = angular.element(element || {});
                                if (source && source.length) {
                                    var hasFn = angular.isFunction(source[0].getBoundingClientRect);
                                    return angular.extend(orig || {}, {
                                        element: hasFn ? source : void 0,
                                        bounds: hasFn ? source[0].getBoundingClientRect() : angular.extend({}, {
                                            top: 0,
                                            left: 0,
                                            height: 0,
                                            width: 0
                                        }, source[0]),
                                        focus: angular.bind(source, source.focus)
                                    });
                                }
                            }
                            function getDomElement(element, defaultElement) {
                                if (angular.isString(element)) {
                                    var simpleSelector = element, container = $document[0].querySelectorAll(simpleSelector);
                                    element = container.length ? container[0] : null;
                                }
                                return angular.element(element || defaultElement);
                            }
                        }(options);
                        !function(element, options) {
                            var role = "alert" === options.$type ? "alertdialog" : "dialog", dialogContent = element.find("md-dialog-content"), dialogId = element.attr("id") || "dialog_" + $mdUtil.nextUid();
                            element.attr({
                                role: role,
                                tabIndex: "-1"
                            });
                            0 === dialogContent.length && (dialogContent = element);
                            dialogContent.attr("id", dialogId);
                            element.attr("aria-describedby", dialogId);
                            options.ariaLabel ? $mdAria.expect(element, "aria-label", options.ariaLabel) : $mdAria.expectAsync(element, "aria-label", function() {
                                var words = dialogContent.text().split(/\s+/);
                                3 < words.length && (words = words.slice(0, 3).concat("..."));
                                return words.join(" ");
                            });
                            (topFocusTrap = document.createElement("div")).classList.add("md-dialog-focus-trap");
                            topFocusTrap.tabIndex = 0;
                            bottomFocusTrap = topFocusTrap.cloneNode(!1);
                            var focusHandler = angular.bind(element, element.focus);
                            topFocusTrap.addEventListener("focus", focusHandler);
                            bottomFocusTrap.addEventListener("focus", focusHandler);
                            element[0].parentNode.insertBefore(topFocusTrap, element[0]);
                            element.append(bottomFocusTrap);
                        }(element.find("md-dialog"), options);
                        !function(scope, element, options) {
                            options.disableParentScroll && (options.restoreScroll = $mdUtil.disableScrollAround(element, options.parent));
                            if (options.hasBackdrop) {
                                options.backdrop = $mdUtil.createBackdrop(scope, "md-dialog-backdrop md-opaque");
                                $animate.enter(options.backdrop, options.parent);
                            }
                            options.hideBackdrop = function($destroy) {
                                options.backdrop && ($destroy ? options.backdrop.remove() : $animate.leave(options.backdrop));
                                if (options.disableParentScroll) {
                                    options.restoreScroll();
                                    delete options.restoreScroll;
                                }
                                options.hideBackdrop = null;
                            };
                        }(scope, element, options);
                        return function(container, options) {
                            options.parent.append(container);
                            stretchDialogContainerToViewport(container, options);
                            var dialogEl = container.find("md-dialog"), animator = $mdUtil.dom.animator, buildTranslateToOrigin = animator.calculateZoomToOrigin, translateOptions = {
                                transitionInClass: "md-transition-in",
                                transitionOutClass: "md-transition-out"
                            }, from = animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.openFrom || options.origin)), to = animator.toTransformCss("");
                            options.fullscreen && dialogEl.addClass("md-dialog-fullscreen");
                            return animator.translate3d(dialogEl, from, to, translateOptions).then(function(animateReversal) {
                                options.reverseAnimate = function() {
                                    delete options.reverseAnimate;
                                    if (options.closeTo) {
                                        translateOptions = {
                                            transitionInClass: "md-transition-out",
                                            transitionOutClass: "md-transition-in"
                                        };
                                        from = to;
                                        to = animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.closeTo));
                                        return animator.translate3d(dialogEl, from, to, translateOptions);
                                    }
                                    return animateReversal(animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.origin)));
                                };
                                return !0;
                            });
                        }(element, options).then(function() {
                            !function(element, options) {
                                var window = angular.element($window), onWindowResize = $mdUtil.debounce(function() {
                                    stretchDialogContainerToViewport(element, options);
                                }, 60), removeListeners = [], smartClose = function() {
                                    var closeFn = "alert" == options.$type ? $mdDialog.hide : $mdDialog.cancel;
                                    $mdUtil.nextTick(closeFn, !0);
                                };
                                if (options.escapeToClose) {
                                    var target = options.parent, keyHandlerFn = function(ev) {
                                        if (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE) {
                                            ev.stopPropagation();
                                            ev.preventDefault();
                                            smartClose();
                                        }
                                    };
                                    element.on("keydown", keyHandlerFn);
                                    target.on("keydown", keyHandlerFn);
                                    window.on("resize", onWindowResize);
                                    removeListeners.push(function() {
                                        element.off("keydown", keyHandlerFn);
                                        target.off("keydown", keyHandlerFn);
                                        window.off("resize", onWindowResize);
                                    });
                                }
                                if (options.clickOutsideToClose) {
                                    var sourceElem, target = element, mousedownHandler = function(ev) {
                                        sourceElem = ev.target;
                                    }, mouseupHandler = function(ev) {
                                        if (sourceElem === target[0] && ev.target === target[0]) {
                                            ev.stopPropagation();
                                            ev.preventDefault();
                                            smartClose();
                                        }
                                    };
                                    target.on("mousedown", mousedownHandler);
                                    target.on("mouseup", mouseupHandler);
                                    removeListeners.push(function() {
                                        target.off("mousedown", mousedownHandler);
                                        target.off("mouseup", mouseupHandler);
                                    });
                                }
                                options.deactivateListeners = function() {
                                    removeListeners.forEach(function(removeFn) {
                                        removeFn();
                                    });
                                    options.deactivateListeners = null;
                                };
                            }(element, options);
                            !function(element, options) {
                                var isHidden = !0;
                                walkDOM(element[0]);
                                options.unlockScreenReader = function() {
                                    isHidden = !1;
                                    walkDOM(element[0]);
                                    options.unlockScreenReader = null;
                                };
                                function walkDOM(element) {
                                    for (;element.parentNode; ) {
                                        if (element === document.body) return;
                                        for (var children = element.parentNode.children, i = 0; i < children.length; i++) element === children[i] || isNodeOneOf(children[i], [ "SCRIPT", "STYLE" ]) || children[i].setAttribute("aria-hidden", isHidden);
                                        walkDOM(element = element.parentNode);
                                    }
                                }
                            }(element, options);
                            0 < element[0].querySelectorAll(".md-actions").length && $log.warn("Using a class of md-actions is deprected, please use <md-dialog-actions>.");
                            !function() {
                                if (options.focusOnOpen) {
                                    var target = $mdUtil.findFocusTarget(element) || function() {
                                        var closeButton = element[0].querySelector(".dialog-close");
                                        if (!closeButton) {
                                            var actionButtons = element[0].querySelectorAll(".md-actions button, md-dialog-actions button");
                                            closeButton = actionButtons[actionButtons.length - 1];
                                        }
                                        return angular.element(closeButton);
                                    }();
                                    target.focus();
                                }
                            }();
                        });
                    },
                    onShowing: function(scope, element, options, controller) {
                        if (controller) {
                            controller.mdHtmlContent = controller.htmlContent || options.htmlContent || "";
                            controller.mdTextContent = controller.textContent || options.textContent || controller.content || options.content || "";
                            if (controller.mdHtmlContent && !$injector.has("$sanitize")) throw Error("The ngSanitize module must be loaded in order to use htmlContent.");
                            if (controller.mdHtmlContent && controller.mdTextContent) throw Error("md-dialog cannot have both `htmlContent` and `textContent`");
                        }
                    },
                    onRemove: function(scope, element, options) {
                        options.deactivateListeners();
                        options.unlockScreenReader();
                        options.hideBackdrop(options.$destroy);
                        topFocusTrap && topFocusTrap.parentNode && topFocusTrap.parentNode.removeChild(topFocusTrap);
                        bottomFocusTrap && bottomFocusTrap.parentNode && bottomFocusTrap.parentNode.removeChild(bottomFocusTrap);
                        return options.$destroy ? detachAndClean() : function(container, options) {
                            return options.reverseAnimate();
                        }(0, options).then(detachAndClean);
                        function detachAndClean() {
                            angular.element($document[0].body).removeClass("md-dialog-is-showing");
                            element.remove();
                            options.$destroy || options.origin.focus();
                        }
                    },
                    clickOutsideToClose: !1,
                    escapeToClose: !0,
                    targetEvent: null,
                    closeTo: null,
                    openFrom: null,
                    focusOnOpen: !0,
                    disableParentScroll: !0,
                    autoWrap: !0,
                    fullscreen: !1,
                    transformTemplate: function(template, options) {
                        return '<div class="md-dialog-container">' + function(template) {
                            return options.autoWrap && !/<\/md-dialog>/g.test(template) ? "<md-dialog>" + (template || "") + "</md-dialog>" : template || "";
                        }(template) + "</div>";
                    }
                };
                function stretchDialogContainerToViewport(container, options) {
                    var isFixed = "fixed" == $window.getComputedStyle($document[0].body).position, backdrop = options.backdrop ? $window.getComputedStyle(options.backdrop[0]) : null, height = backdrop ? Math.min($document[0].body.clientHeight, Math.ceil(Math.abs(parseInt(backdrop.height, 10)))) : 0;
                    container.css({
                        top: (isFixed ? $mdUtil.scrollTop(options.parent) : 0) + "px",
                        height: height ? height + "px" : "100%"
                    });
                    return container;
                }
                function isNodeOneOf(elem, nodeTypeArray) {
                    if (-1 !== nodeTypeArray.indexOf(elem.nodeName)) return !0;
                }
            }
        }
        MdDialogProvider.$inject = [ "$$interimElementProvider" ];
    }();
    !function() {
        angular.module("material.components.divider", [ "material.core" ]).directive("mdDivider", MdDividerDirective);
        function MdDividerDirective($mdTheming) {
            return {
                restrict: "E",
                link: $mdTheming
            };
        }
        MdDividerDirective.$inject = [ "$mdTheming" ];
    }();
    angular.module("material.components.fabActions", [ "material.core" ]).directive("mdFabActions", function() {
        return {
            restrict: "E",
            require: [ "^?mdFabSpeedDial", "^?mdFabToolbar" ],
            compile: function(element, attributes) {
                var children = element.children(), hasNgRepeat = !1;
                angular.forEach([ "", "data-", "x-" ], function(prefix) {
                    hasNgRepeat = hasNgRepeat || !!children.attr(prefix + "ng-repeat");
                });
                hasNgRepeat ? children.addClass("md-fab-action-item") : children.wrap('<div class="md-fab-action-item">');
            }
        };
    });
    !function() {
        angular.module("material.components.fabShared", [ "material.core" ]).controller("FabController", FabController);
        function FabController($scope, $element, $animate, $mdUtil, $mdConstant, $timeout) {
            var vm = this;
            vm.open = function() {
                $scope.$evalAsync("vm.isOpen = true");
            };
            vm.close = function() {
                $scope.$evalAsync("vm.isOpen = false");
                $element.find("md-fab-trigger")[0].focus();
            };
            vm.toggle = function() {
                $scope.$evalAsync("vm.isOpen = !vm.isOpen");
            };
            !function() {
                vm.direction = vm.direction || "down";
                vm.isOpen = vm.isOpen || !1;
                resetActionIndex();
                $element.addClass("md-animations-waiting");
            }();
            !function() {
                var eventTypes = [ "click", "focusin", "focusout" ];
                angular.forEach(eventTypes, function(eventType) {
                    $element.on(eventType, parseEvents);
                });
                $scope.$on("$destroy", function() {
                    angular.forEach(eventTypes, function(eventType) {
                        $element.off(eventType, parseEvents);
                    });
                    disableKeyboard();
                });
            }();
            !function() {
                $scope.$watch("vm.direction", function(newDir, oldDir) {
                    $animate.removeClass($element, "md-" + oldDir);
                    $animate.addClass($element, "md-" + newDir);
                    resetActionIndex();
                });
                var trigger, actions;
                $scope.$watch("vm.isOpen", function(isOpen) {
                    resetActionIndex();
                    if (!trigger || !actions) {
                        trigger = $element.find("md-fab-trigger");
                        actions = getActionsElement();
                    }
                    isOpen ? function() {
                        $element.on("keydown", keyPressed);
                        $mdUtil.nextTick(function() {
                            angular.element(document).on("click touchend", checkForOutsideClick);
                        });
                    }() : disableKeyboard();
                    var toAdd = isOpen ? "md-is-open" : "", toRemove = isOpen ? "" : "md-is-open";
                    trigger.attr("aria-haspopup", !0);
                    trigger.attr("aria-expanded", isOpen);
                    actions.attr("aria-hidden", !isOpen);
                    $animate.setClass($element, toAdd, toRemove);
                });
            }();
            var closeTimeout, initialAnimationAttempts = 0;
            !function fireInitialAnimations() {
                if (0 < $element[0].scrollHeight) $animate.addClass($element, "md-animations-ready").then(function() {
                    $element.removeClass("md-animations-waiting");
                }); else if (initialAnimationAttempts < 10) {
                    $timeout(fireInitialAnimations, 100);
                    initialAnimationAttempts += 1;
                }
            }();
            function parseEvents(event) {
                "click" == event.type && function(event) {
                    (element = event.target, $mdUtil.getClosest(element, "md-fab-trigger")) && vm.toggle();
                    var element;
                    (function(element) {
                        return $mdUtil.getClosest(element, "md-fab-actions");
                    })(event.target) && vm.close();
                }(event);
                "focusout" != event.type || closeTimeout || (closeTimeout = $timeout(function() {
                    vm.close();
                }, 100, !1));
                if ("focusin" == event.type && closeTimeout) {
                    $timeout.cancel(closeTimeout);
                    closeTimeout = null;
                }
            }
            function resetActionIndex() {
                vm.currentActionIndex = -1;
            }
            function disableKeyboard() {
                $element.off("keydown", keyPressed);
                angular.element(document).off("click touchend", checkForOutsideClick);
            }
            function checkForOutsideClick(event) {
                if (event.target) {
                    var closestTrigger = $mdUtil.getClosest(event.target, "md-fab-trigger"), closestActions = $mdUtil.getClosest(event.target, "md-fab-actions");
                    closestTrigger || closestActions || vm.close();
                }
            }
            function keyPressed(event) {
                switch (event.which) {
                  case $mdConstant.KEY_CODE.ESCAPE:
                    vm.close();
                    event.preventDefault();
                    return !1;

                  case $mdConstant.KEY_CODE.LEFT_ARROW:
                    !function(event) {
                        "left" === vm.direction ? doActionNext(event) : doActionPrev(event);
                    }(event);
                    return !1;

                  case $mdConstant.KEY_CODE.UP_ARROW:
                    !function(event) {
                        "down" === vm.direction ? doActionPrev(event) : doActionNext(event);
                    }(event);
                    return !1;

                  case $mdConstant.KEY_CODE.RIGHT_ARROW:
                    !function(event) {
                        "left" === vm.direction ? doActionPrev(event) : doActionNext(event);
                    }(event);
                    return !1;

                  case $mdConstant.KEY_CODE.DOWN_ARROW:
                    !function(event) {
                        "up" === vm.direction ? doActionPrev(event) : doActionNext(event);
                    }(event);
                    return !1;
                }
            }
            function doActionPrev(event) {
                focusAction(event, -1);
            }
            function doActionNext(event) {
                focusAction(event, 1);
            }
            function focusAction(event, direction) {
                var actions = function() {
                    var actions = getActionsElement()[0].querySelectorAll(".md-fab-action-item");
                    angular.forEach(actions, function(action) {
                        angular.element(angular.element(action).children()[0]).attr("tabindex", -1);
                    });
                    return actions;
                }();
                vm.currentActionIndex = vm.currentActionIndex + direction;
                vm.currentActionIndex = Math.min(actions.length - 1, vm.currentActionIndex);
                vm.currentActionIndex = Math.max(0, vm.currentActionIndex);
                var focusElement = angular.element(actions[vm.currentActionIndex]).children()[0];
                angular.element(focusElement).attr("tabindex", 0);
                focusElement.focus();
                event.preventDefault();
                event.stopImmediatePropagation();
            }
            function getActionsElement() {
                return $element.find("md-fab-actions");
            }
        }
        FabController.$inject = [ "$scope", "$element", "$animate", "$mdUtil", "$mdConstant", "$timeout" ];
    }();
    !function() {
        angular.module("material.components.fabSpeedDial", [ "material.core", "material.components.fabShared", "material.components.fabTrigger", "material.components.fabActions" ]).directive("mdFabSpeedDial", function() {
            return {
                restrict: "E",
                scope: {
                    direction: "@?mdDirection",
                    isOpen: "=?mdOpen"
                },
                bindToController: !0,
                controller: "FabController",
                controllerAs: "vm",
                link: function(scope, element) {
                    element.prepend('<div class="md-css-variables"></div>');
                }
            };
        }).animation(".md-fling", MdFabSpeedDialFlingAnimation).animation(".md-scale", MdFabSpeedDialScaleAnimation).service("mdFabSpeedDialFlingAnimation", MdFabSpeedDialFlingAnimation).service("mdFabSpeedDialScaleAnimation", MdFabSpeedDialScaleAnimation);
        function MdFabSpeedDialFlingAnimation($timeout) {
            function delayDone(done) {
                $timeout(done, 300, !1);
            }
            function runAnimation(element) {
                if (!element.hasClass("md-animations-waiting") || element.hasClass("md-animations-ready")) {
                    var el = element[0], ctrl = element.controller("mdFabSpeedDial"), items = el.querySelectorAll(".md-fab-action-item"), triggerElement = el.querySelector("md-fab-trigger"), variablesElement = el.querySelector(".md-css-variables"), startZIndex = parseInt(window.getComputedStyle(variablesElement).zIndex);
                    angular.forEach(items, function(item, index) {
                        var styles = item.style;
                        styles.transform = styles.webkitTransform = "";
                        styles.transitionDelay = "";
                        styles.opacity = 1;
                        styles.zIndex = items.length - index + startZIndex;
                    });
                    triggerElement.style.zIndex = startZIndex + items.length + 1;
                    ctrl.isOpen || angular.forEach(items, function(item, index) {
                        var newPosition, axis, styles = item.style, triggerItemHeightOffset = (triggerElement.clientHeight - item.clientHeight) / 2, triggerItemWidthOffset = (triggerElement.clientWidth - item.clientWidth) / 2;
                        switch (ctrl.direction) {
                          case "up":
                            newPosition = item.scrollHeight * (index + 1) + triggerItemHeightOffset;
                            axis = "Y";
                            break;

                          case "down":
                            newPosition = -(item.scrollHeight * (index + 1) + triggerItemHeightOffset);
                            axis = "Y";
                            break;

                          case "left":
                            newPosition = item.scrollWidth * (index + 1) + triggerItemWidthOffset;
                            axis = "X";
                            break;

                          case "right":
                            newPosition = -(item.scrollWidth * (index + 1) + triggerItemWidthOffset);
                            axis = "X";
                        }
                        var newTranslate = "translate" + axis + "(" + newPosition + "px)";
                        styles.transform = styles.webkitTransform = newTranslate;
                    });
                }
            }
            return {
                addClass: function(element, className, done) {
                    if (element.hasClass("md-fling")) {
                        runAnimation(element);
                        delayDone(done);
                    } else done();
                },
                removeClass: function(element, className, done) {
                    runAnimation(element);
                    delayDone(done);
                }
            };
        }
        MdFabSpeedDialFlingAnimation.$inject = [ "$timeout" ];
        function MdFabSpeedDialScaleAnimation($timeout) {
            function delayDone(done) {
                $timeout(done, 300, !1);
            }
            function runAnimation(element) {
                var el = element[0], ctrl = element.controller("mdFabSpeedDial"), items = el.querySelectorAll(".md-fab-action-item"), variablesElement = el.querySelector(".md-css-variables"), startZIndex = parseInt(window.getComputedStyle(variablesElement).zIndex);
                angular.forEach(items, function(item, index) {
                    var styles = item.style, offsetDelay = 65 * index;
                    styles.opacity = ctrl.isOpen ? 1 : 0;
                    styles.transform = styles.webkitTransform = ctrl.isOpen ? "scale(1)" : "scale(0.1)";
                    styles.transitionDelay = (ctrl.isOpen ? offsetDelay : items.length - offsetDelay) + "ms";
                    styles.zIndex = items.length - index + startZIndex;
                });
            }
            return {
                addClass: function(element, className, done) {
                    runAnimation(element);
                    delayDone(done);
                },
                removeClass: function(element, className, done) {
                    runAnimation(element);
                    delayDone(done);
                }
            };
        }
        MdFabSpeedDialScaleAnimation.$inject = [ "$timeout" ];
    }();
    !function() {
        angular.module("material.components.fabToolbar", [ "material.core", "material.components.fabShared", "material.components.fabTrigger", "material.components.fabActions" ]).directive("mdFabToolbar", function() {
            return {
                restrict: "E",
                transclude: !0,
                template: '<div class="md-fab-toolbar-wrapper">  <div class="md-fab-toolbar-content" ng-transclude></div></div>',
                scope: {
                    direction: "@?mdDirection",
                    isOpen: "=?mdOpen"
                },
                bindToController: !0,
                controller: "FabController",
                controllerAs: "vm",
                link: function(scope, element, attributes) {
                    element.addClass("md-fab-toolbar");
                    element.find("md-fab-trigger").find("button").prepend('<div class="md-fab-toolbar-background"></div>');
                }
            };
        }).animation(".md-fab-toolbar", MdFabToolbarAnimation).service("mdFabToolbarAnimation", MdFabToolbarAnimation);
        function MdFabToolbarAnimation() {
            function runAnimation(element, className, done) {
                if (className) {
                    var el = element[0], ctrl = element.controller("mdFabToolbar"), backgroundElement = el.querySelector(".md-fab-toolbar-background"), triggerElement = el.querySelector("md-fab-trigger button"), toolbarElement = el.querySelector("md-toolbar"), iconElement = el.querySelector("md-fab-trigger button md-icon"), actions = element.find("md-fab-actions").children();
                    if (triggerElement && backgroundElement) {
                        var color = window.getComputedStyle(triggerElement).getPropertyValue("background-color"), width = el.offsetWidth, scale = (el.offsetHeight, 
                        width / triggerElement.offsetWidth * 2);
                        backgroundElement.style.backgroundColor = color;
                        backgroundElement.style.borderRadius = width + "px";
                        if (ctrl.isOpen) {
                            toolbarElement.style.pointerEvents = "initial";
                            backgroundElement.style.width = triggerElement.offsetWidth + "px";
                            backgroundElement.style.height = triggerElement.offsetHeight + "px";
                            backgroundElement.style.transform = "scale(" + scale + ")";
                            backgroundElement.style.transitionDelay = "0ms";
                            iconElement && (iconElement.style.transitionDelay = ".3s");
                            angular.forEach(actions, function(action, index) {
                                action.style.transitionDelay = 25 * (actions.length - index) + "ms";
                            });
                        } else {
                            toolbarElement.style.pointerEvents = "none";
                            backgroundElement.style.transform = "scale(1)";
                            backgroundElement.style.top = "0";
                            if (element.hasClass("md-right")) {
                                backgroundElement.style.left = "0";
                                backgroundElement.style.right = null;
                            }
                            if (element.hasClass("md-left")) {
                                backgroundElement.style.right = "0";
                                backgroundElement.style.left = null;
                            }
                            backgroundElement.style.transitionDelay = "200ms";
                            iconElement && (iconElement.style.transitionDelay = "0ms");
                            angular.forEach(actions, function(action, index) {
                                action.style.transitionDelay = 200 + 25 * index + "ms";
                            });
                        }
                    }
                }
            }
            return {
                addClass: function(element, className, done) {
                    runAnimation(element, className);
                    done();
                },
                removeClass: function(element, className, done) {
                    runAnimation(element, className);
                    done();
                }
            };
        }
    }();
    angular.module("material.components.fabTrigger", [ "material.core" ]).directive("mdFabTrigger", function() {
        return {
            restrict: "E",
            require: [ "^?mdFabSpeedDial", "^?mdFabToolbar" ]
        };
    });
    !function() {
        angular.module("material.components.gridList", [ "material.core" ]).directive("mdGridList", GridListDirective).directive("mdGridTile", GridTileDirective).directive("mdGridTileFooter", GridTileCaptionDirective).directive("mdGridTileHeader", GridTileCaptionDirective).factory("$mdGridLayout", GridLayoutFactory);
        function GridListDirective($interpolate, $mdConstant, $mdGridLayout, $mdMedia) {
            return {
                restrict: "E",
                controller: GridListController,
                scope: {
                    mdOnLayout: "&"
                },
                link: function(scope, element, attrs, ctrl) {
                    element.attr("role", "list");
                    ctrl.layoutDelegate = function(tilesInvalidated) {
                        var tiles = [].filter.call(element.children(), function(ele) {
                            return "MD-GRID-TILE" == ele.tagName && !ele.$$mdDestroyed;
                        }), props = {
                            tileSpans: (tileElements = tiles, [].map.call(tileElements, function(ele) {
                                var ctrl = angular.element(ele).controller("mdGridTile");
                                return {
                                    row: parseInt($mdMedia.getResponsiveAttribute(ctrl.$attrs, "md-rowspan"), 10) || 1,
                                    col: parseInt($mdMedia.getResponsiveAttribute(ctrl.$attrs, "md-colspan"), 10) || 1
                                };
                            })),
                            colCount: function() {
                                var colCount = parseInt($mdMedia.getResponsiveAttribute(attrs, "md-cols"), 10);
                                if (isNaN(colCount)) throw "md-grid-list: md-cols attribute was not found, or contained a non-numeric value";
                                return colCount;
                            }(),
                            rowMode: getRowMode(),
                            rowHeight: function() {
                                var rowHeight = $mdMedia.getResponsiveAttribute(attrs, "md-row-height");
                                switch (getRowMode()) {
                                  case "fixed":
                                    return applyDefaultUnit(rowHeight);

                                  case "ratio":
                                    var whRatio = rowHeight.split(":");
                                    return parseFloat(whRatio[0]) / parseFloat(whRatio[1]);

                                  case "fit":
                                    return 0;
                                }
                            }(),
                            gutter: applyDefaultUnit($mdMedia.getResponsiveAttribute(attrs, "md-gutter") || 1)
                        };
                        var tileElements;
                        if (!tilesInvalidated && angular.equals(props, lastLayoutProps)) return;
                        var performance = $mdGridLayout(props.colCount, props.tileSpans, tiles).map(function(tilePositions, rowCount) {
                            return {
                                grid: {
                                    element: element,
                                    style: function(colCount, rowCount, gutter, rowMode, rowHeight) {
                                        var style = {};
                                        switch (rowMode) {
                                          case "fixed":
                                            style.height = DIMENSION({
                                                unit: rowHeight,
                                                span: rowCount,
                                                gutter: gutter
                                            });
                                            style.paddingBottom = "";
                                            break;

                                          case "ratio":
                                            var hGutterShare = 1 === colCount ? 0 : (colCount - 1) / colCount, hShare = 1 / colCount * 100, vShare = hShare * (1 / rowHeight), vUnit = UNIT({
                                                share: vShare,
                                                gutterShare: hGutterShare,
                                                gutter: gutter
                                            });
                                            style.height = "";
                                            style.paddingBottom = DIMENSION({
                                                unit: vUnit,
                                                span: rowCount,
                                                gutter: gutter
                                            });
                                        }
                                        return style;
                                    }(props.colCount, rowCount, props.gutter, props.rowMode, props.rowHeight)
                                },
                                tiles: tilePositions.map(function(ps, i) {
                                    return {
                                        element: angular.element(tiles[i]),
                                        style: function(position, spans, colCount, rowCount, gutter, rowMode, rowHeight) {
                                            var hShare = 1 / colCount * 100, hGutterShare = (colCount - 1) / colCount, hUnit = UNIT({
                                                share: hShare,
                                                gutterShare: hGutterShare,
                                                gutter: gutter
                                            }), style = {
                                                left: POSITION({
                                                    unit: hUnit,
                                                    offset: position.col,
                                                    gutter: gutter
                                                }),
                                                width: DIMENSION({
                                                    unit: hUnit,
                                                    span: spans.col,
                                                    gutter: gutter
                                                }),
                                                paddingTop: "",
                                                marginTop: "",
                                                top: "",
                                                height: ""
                                            };
                                            switch (rowMode) {
                                              case "fixed":
                                                style.top = POSITION({
                                                    unit: rowHeight,
                                                    offset: position.row,
                                                    gutter: gutter
                                                });
                                                style.height = DIMENSION({
                                                    unit: rowHeight,
                                                    span: spans.row,
                                                    gutter: gutter
                                                });
                                                break;

                                              case "ratio":
                                                var vShare = hShare / rowHeight, vUnit = UNIT({
                                                    share: vShare,
                                                    gutterShare: hGutterShare,
                                                    gutter: gutter
                                                });
                                                style.paddingTop = DIMENSION({
                                                    unit: vUnit,
                                                    span: spans.row,
                                                    gutter: gutter
                                                });
                                                style.marginTop = POSITION({
                                                    unit: vUnit,
                                                    offset: position.row,
                                                    gutter: gutter
                                                });
                                                break;

                                              case "fit":
                                                var vGutterShare = (rowCount - 1) / rowCount, vShare = 1 / rowCount * 100, vUnit = UNIT({
                                                    share: vShare,
                                                    gutterShare: vGutterShare,
                                                    gutter: gutter
                                                });
                                                style.top = POSITION({
                                                    unit: vUnit,
                                                    offset: position.row,
                                                    gutter: gutter
                                                });
                                                style.height = DIMENSION({
                                                    unit: vUnit,
                                                    span: spans.row,
                                                    gutter: gutter
                                                });
                                            }
                                            return style;
                                        }(ps.position, ps.spans, props.colCount, rowCount, props.gutter, props.rowMode, props.rowHeight)
                                    };
                                })
                            };
                        }).reflow().performance();
                        scope.mdOnLayout({
                            $event: {
                                performance: performance
                            }
                        });
                        lastLayoutProps = props;
                    };
                    var lastLayoutProps, invalidateLayout = angular.bind(ctrl, ctrl.invalidateLayout), unwatchAttrs = function() {
                        for (var mediaName in $mdConstant.MEDIA) {
                            $mdMedia(mediaName);
                            $mdMedia.getQuery($mdConstant.MEDIA[mediaName]).addListener(invalidateLayout);
                        }
                        return $mdMedia.watchResponsiveAttributes([ "md-cols", "md-row-height", "md-gutter" ], attrs, layoutIfMediaMatch);
                    }();
                    scope.$on("$destroy", function() {
                        ctrl.layoutDelegate = angular.noop;
                        unwatchAttrs();
                        for (var mediaName in $mdConstant.MEDIA) $mdMedia.getQuery($mdConstant.MEDIA[mediaName]).removeListener(invalidateLayout);
                    });
                    function layoutIfMediaMatch(mediaName) {
                        null == mediaName ? ctrl.invalidateLayout() : $mdMedia(mediaName) && ctrl.invalidateLayout();
                    }
                    var startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol();
                    function expr(exprStr) {
                        return startSymbol + exprStr + endSymbol;
                    }
                    var UNIT = $interpolate(expr("share") + "% - (" + expr("gutter") + " * " + expr("gutterShare") + ")"), POSITION = $interpolate("calc((" + expr("unit") + " + " + expr("gutter") + ") * " + expr("offset") + ")"), DIMENSION = $interpolate("calc((" + expr("unit") + ") * " + expr("span") + " + (" + expr("span") + " - 1) * " + expr("gutter") + ")");
                    function getRowMode() {
                        var rowHeight = $mdMedia.getResponsiveAttribute(attrs, "md-row-height");
                        return "fit" == rowHeight ? "fit" : -1 !== rowHeight.indexOf(":") ? "ratio" : "fixed";
                    }
                    function applyDefaultUnit(val) {
                        return /\D$/.test(val) ? val : val + "px";
                    }
                }
            };
        }
        GridListDirective.$inject = [ "$interpolate", "$mdConstant", "$mdGridLayout", "$mdMedia" ];
        function GridListController($mdUtil) {
            this.layoutInvalidated = !1;
            this.tilesInvalidated = !1;
            this.$timeout_ = $mdUtil.nextTick;
            this.layoutDelegate = angular.noop;
        }
        GridListController.$inject = [ "$mdUtil" ];
        GridListController.prototype = {
            invalidateTiles: function() {
                this.tilesInvalidated = !0;
                this.invalidateLayout();
            },
            invalidateLayout: function() {
                if (!this.layoutInvalidated) {
                    this.layoutInvalidated = !0;
                    this.$timeout_(angular.bind(this, this.layout));
                }
            },
            layout: function() {
                try {
                    this.layoutDelegate(this.tilesInvalidated);
                } finally {
                    this.layoutInvalidated = !1;
                    this.tilesInvalidated = !1;
                }
            }
        };
        function GridLayoutFactory($mdUtil) {
            var defaultAnimator = GridTileAnimator;
            GridLayout.animateWith = function(customAnimator) {
                defaultAnimator = angular.isFunction(customAnimator) ? customAnimator : GridTileAnimator;
            };
            return GridLayout;
            function GridLayout(colCount, tileSpans) {
                var self, layoutInfo, gridStyles, layoutTime, mapTime, reflowTime;
                layoutTime = $mdUtil.time(function() {
                    layoutInfo = function(colCount, tileSpans) {
                        var curCol = 0, curRow = 0, spaceTracker = function() {
                            for (var tracker = [], i = 0; i < colCount; i++) tracker.push(0);
                            return tracker;
                        }();
                        return {
                            positioning: tileSpans.map(function(spans, i) {
                                return {
                                    spans: spans,
                                    position: function(spans, i) {
                                        if (spans.col > colCount) throw "md-grid-list: Tile at position " + i + " has a colspan (" + spans.col + ") that exceeds the column count (" + colCount + ")";
                                        var start = 0, end = 0;
                                        for (;end - start < spans.col; ) if (colCount <= curCol) nextRow(); else if (-1 !== (start = spaceTracker.indexOf(0, curCol)) && -1 !== (end = findEnd(start + 1))) curCol = end + 1; else {
                                            start = end = 0;
                                            nextRow();
                                        }
                                        adjustRow(start, spans.col, spans.row);
                                        curCol = start + spans.col;
                                        return {
                                            col: start,
                                            row: curRow
                                        };
                                    }(spans, i)
                                };
                            }),
                            rowCount: curRow + Math.max.apply(Math, spaceTracker)
                        };
                        function nextRow() {
                            curRow++;
                            adjustRow(curCol = 0, colCount, -1);
                        }
                        function adjustRow(from, cols, by) {
                            for (var i = from; i < from + cols; i++) spaceTracker[i] = Math.max(spaceTracker[i] + by, 0);
                        }
                        function findEnd(start) {
                            var i;
                            for (i = start; i < spaceTracker.length; i++) if (0 !== spaceTracker[i]) return i;
                            if (i === spaceTracker.length) return i;
                        }
                    }(colCount, tileSpans);
                });
                return self = {
                    layoutInfo: function() {
                        return layoutInfo;
                    },
                    map: function(updateFn) {
                        mapTime = $mdUtil.time(function() {
                            var info = self.layoutInfo();
                            gridStyles = updateFn(info.positioning, info.rowCount);
                        });
                        return self;
                    },
                    reflow: function(animatorFn) {
                        reflowTime = $mdUtil.time(function() {
                            (animatorFn || defaultAnimator)(gridStyles.grid, gridStyles.tiles);
                        });
                        return self;
                    },
                    performance: function() {
                        return {
                            tileCount: tileSpans.length,
                            layoutTime: layoutTime,
                            mapTime: mapTime,
                            reflowTime: reflowTime,
                            totalTime: layoutTime + mapTime + reflowTime
                        };
                    }
                };
            }
            function GridTileAnimator(grid, tiles) {
                grid.element.css(grid.style);
                tiles.forEach(function(t) {
                    t.element.css(t.style);
                });
            }
        }
        GridLayoutFactory.$inject = [ "$mdUtil" ];
        function GridTileDirective($mdMedia) {
            return {
                restrict: "E",
                require: "^mdGridList",
                template: "<figure ng-transclude></figure>",
                transclude: !0,
                scope: {},
                controller: [ "$attrs", function($attrs) {
                    this.$attrs = $attrs;
                } ],
                link: function(scope, element, attrs, gridCtrl) {
                    element.attr("role", "listitem");
                    var unwatchAttrs = $mdMedia.watchResponsiveAttributes([ "md-colspan", "md-rowspan" ], attrs, angular.bind(gridCtrl, gridCtrl.invalidateLayout));
                    gridCtrl.invalidateTiles();
                    scope.$on("$destroy", function() {
                        element[0].$$mdDestroyed = !0;
                        unwatchAttrs();
                        gridCtrl.invalidateLayout();
                    });
                    angular.isDefined(scope.$parent.$index) && scope.$watch(function() {
                        return scope.$parent.$index;
                    }, function(newIdx, oldIdx) {
                        newIdx !== oldIdx && gridCtrl.invalidateTiles();
                    });
                }
            };
        }
        GridTileDirective.$inject = [ "$mdMedia" ];
        function GridTileCaptionDirective() {
            return {
                template: "<figcaption ng-transclude></figcaption>",
                transclude: !0
            };
        }
    }();
    angular.module("material.components.icon", [ "material.core" ]);
    !function() {
        angular.module("material.components.input", [ "material.core" ]).directive("mdInputContainer", mdInputContainerDirective).directive("label", function() {
            return {
                restrict: "E",
                require: "^?mdInputContainer",
                link: function(scope, element, attr, containerCtrl) {
                    if (containerCtrl && !attr.mdNoFloat && !element.hasClass("md-container-ignore")) {
                        containerCtrl.label = element;
                        scope.$on("$destroy", function() {
                            containerCtrl.label = null;
                        });
                    }
                }
            };
        }).directive("input", inputTextareaDirective).directive("textarea", inputTextareaDirective).directive("mdMaxlength", mdMaxlengthDirective).directive("placeholder", placeholderDirective).directive("ngMessages", function() {
            return {
                restrict: "EA",
                link: function(scope, element, attrs, inputContainer) {
                    if (!inputContainer) return;
                    element.toggleClass("md-input-messages-animation", !0);
                    element.toggleClass("md-auto-hide", !0);
                    ("false" == attrs.mdAutoHide || function(attrs) {
                        return visibilityDirectives.some(function(attr) {
                            return attrs[attr];
                        });
                    }(attrs)) && element.toggleClass("md-auto-hide", !1);
                },
                require: "^^?mdInputContainer"
            };
        }).directive("ngMessage", ngMessageDirective).directive("ngMessageExp", ngMessageDirective).animation(".md-input-invalid", mdInputInvalidMessagesAnimation).animation(".md-input-messages-animation", ngMessagesAnimation).animation(".md-input-message-animation", ngMessageAnimation);
        function mdInputContainerDirective($mdTheming, $parse) {
            ContainerCtrl.$inject = [ "$scope", "$element", "$attrs", "$animate" ];
            return {
                restrict: "E",
                link: function(scope, element, attr) {
                    $mdTheming(element);
                    element.find("md-icon").length && element.addClass("md-has-icon");
                },
                controller: ContainerCtrl
            };
            function ContainerCtrl($scope, $element, $attrs, $animate) {
                var self = this;
                self.isErrorGetter = $attrs.mdIsError && $parse($attrs.mdIsError);
                self.delegateClick = function() {
                    self.input.focus();
                };
                self.element = $element;
                self.setFocused = function(isFocused) {
                    $element.toggleClass("md-input-focused", !!isFocused);
                };
                self.setHasValue = function(hasValue) {
                    $element.toggleClass("md-input-has-value", !!hasValue);
                };
                self.setHasPlaceholder = function(hasPlaceholder) {
                    $element.toggleClass("md-input-has-placeholder", !!hasPlaceholder);
                };
                self.setInvalid = function(isInvalid) {
                    isInvalid ? $animate.addClass($element, "md-input-invalid") : $animate.removeClass($element, "md-input-invalid");
                };
                $scope.$watch(function() {
                    return self.label && self.input;
                }, function(hasLabelAndInput) {
                    hasLabelAndInput && !self.label.attr("for") && self.label.attr("for", self.input.attr("id"));
                });
            }
        }
        mdInputContainerDirective.$inject = [ "$mdTheming", "$parse" ];
        function inputTextareaDirective($mdUtil, $window, $mdAria) {
            return {
                restrict: "E",
                require: [ "^?mdInputContainer", "?ngModel" ],
                link: function(scope, element, attr, ctrls) {
                    var containerCtrl = ctrls[0], hasNgModel = !!ctrls[1], ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel(), isReadonly = angular.isDefined(attr.readonly);
                    if (!containerCtrl) return;
                    if (containerCtrl.input) throw new Error("<md-input-container> can only have *one* <input>, <textarea> or <md-select> child element!");
                    containerCtrl.input = element;
                    var errorsSpacer = angular.element('<div class="md-errors-spacer">');
                    element.after(errorsSpacer);
                    containerCtrl.label || $mdAria.expect(element, "aria-label", element.attr("placeholder"));
                    element.addClass("md-input");
                    element.attr("id") || element.attr("id", "input_" + $mdUtil.nextUid());
                    "textarea" === element[0].tagName.toLowerCase() && function() {
                        if (angular.isDefined(element.attr("md-no-autogrow"))) return;
                        var node = element[0], container = containerCtrl.element[0], min_rows = NaN, lineHeight = null;
                        node.hasAttribute("rows") && (min_rows = parseInt(node.getAttribute("rows")));
                        var onChangeTextarea = $mdUtil.debounce(growTextarea, 1);
                        function pipelineListener(value) {
                            onChangeTextarea();
                            return value;
                        }
                        if (ngModelCtrl) {
                            ngModelCtrl.$formatters.push(pipelineListener);
                            ngModelCtrl.$viewChangeListeners.push(pipelineListener);
                        } else onChangeTextarea();
                        element.on("keydown input", onChangeTextarea);
                        if (isNaN(min_rows)) {
                            element.attr("rows", "1");
                            element.on("scroll", function(e) {
                                node.scrollTop = 0;
                                var line = node.scrollHeight - node.offsetHeight, height = node.offsetHeight + line;
                                node.style.height = height + "px";
                            });
                        }
                        angular.element($window).on("resize", onChangeTextarea);
                        scope.$on("$destroy", function() {
                            angular.element($window).off("resize", onChangeTextarea);
                        });
                        function growTextarea() {
                            container.style.height = container.offsetHeight + "px";
                            element.addClass("md-no-flex");
                            if (isNaN(min_rows)) {
                                node.style.height = "auto";
                                node.scrollTop = 0;
                                var height = (line = node.scrollHeight - node.offsetHeight, node.offsetHeight + (0 < line ? line : 0));
                                height && (node.style.height = height + "px");
                            } else {
                                node.setAttribute("rows", 1);
                                if (!lineHeight) {
                                    node.style.minHeight = "0";
                                    lineHeight = element.prop("clientHeight");
                                    node.style.minHeight = null;
                                }
                                var rows = Math.min(min_rows, Math.round(node.scrollHeight / lineHeight));
                                node.setAttribute("rows", rows);
                                node.style.height = lineHeight * rows + "px";
                            }
                            var line;
                            element.removeClass("md-no-flex");
                            container.style.height = "auto";
                        }
                        if (angular.isDefined(element.attr("md-detect-hidden"))) {
                            var handleHiddenChange = (wasHidden = !1, function() {
                                var isHidden = 0 === node.offsetHeight;
                                !1 === isHidden && !0 === wasHidden && growTextarea();
                                wasHidden = isHidden;
                            });
                            scope.$watch(function() {
                                $mdUtil.nextTick(handleHiddenChange, !1);
                                return !0;
                            });
                        }
                        var wasHidden;
                    }();
                    hasNgModel || inputCheckValue();
                    var isErrorGetter = containerCtrl.isErrorGetter || function() {
                        return ngModelCtrl.$invalid && (ngModelCtrl.$touched || ngModelCtrl.$$parentForm && ngModelCtrl.$$parentForm.$submitted);
                    };
                    scope.$watch(isErrorGetter, containerCtrl.setInvalid);
                    ngModelCtrl.$parsers.push(ngModelPipelineCheckValue);
                    ngModelCtrl.$formatters.push(ngModelPipelineCheckValue);
                    element.on("input", inputCheckValue);
                    isReadonly || element.on("focus", function(ev) {
                        containerCtrl.setFocused(!0);
                    }).on("blur", function(ev) {
                        containerCtrl.setFocused(!1);
                        inputCheckValue();
                    });
                    scope.$on("$destroy", function() {
                        containerCtrl.setFocused(!1);
                        containerCtrl.setHasValue(!1);
                        containerCtrl.input = null;
                    });
                    function ngModelPipelineCheckValue(arg) {
                        containerCtrl.setHasValue(!ngModelCtrl.$isEmpty(arg));
                        return arg;
                    }
                    function inputCheckValue() {
                        containerCtrl.setHasValue(0 < element.val().length || (element[0].validity || {}).badInput);
                    }
                }
            };
        }
        inputTextareaDirective.$inject = [ "$mdUtil", "$window", "$mdAria" ];
        function mdMaxlengthDirective($animate, $mdUtil) {
            return {
                restrict: "A",
                require: [ "ngModel", "^mdInputContainer" ],
                link: function(scope, element, attr, ctrls) {
                    var maxlength, charCountEl, errorsSpacer, ngModelCtrl = ctrls[0], containerCtrl = ctrls[1];
                    $mdUtil.nextTick(function() {
                        errorsSpacer = angular.element(containerCtrl.element[0].querySelector(".md-errors-spacer"));
                        charCountEl = angular.element('<div class="md-char-counter">');
                        errorsSpacer.append(charCountEl);
                        attr.$set("ngTrim", "false");
                        ngModelCtrl.$formatters.push(renderCharCount);
                        ngModelCtrl.$viewChangeListeners.push(renderCharCount);
                        element.on("input keydown keyup", function() {
                            renderCharCount();
                        });
                        scope.$watch(attr.mdMaxlength, function(value) {
                            maxlength = value;
                            if (angular.isNumber(value) && 0 < value) {
                                charCountEl.parent().length || $animate.enter(charCountEl, errorsSpacer);
                                renderCharCount();
                            } else $animate.leave(charCountEl);
                        });
                        ngModelCtrl.$validators["md-maxlength"] = function(modelValue, viewValue) {
                            return !angular.isNumber(maxlength) || maxlength < 0 || (modelValue || element.val() || viewValue || "").length <= maxlength;
                        };
                    });
                    function renderCharCount(value) {
                        if (!charCountEl.parent) return value;
                        charCountEl.text(String(element.val() || value || "").length + "/" + maxlength);
                        return value;
                    }
                }
            };
        }
        mdMaxlengthDirective.$inject = [ "$animate", "$mdUtil" ];
        function placeholderDirective($log) {
            return {
                restrict: "A",
                require: "^^?mdInputContainer",
                priority: 200,
                link: function(scope, element, attr, inputContainer) {
                    if (!inputContainer) return;
                    var label = inputContainer.element.find("label"), hasNoFloat = angular.isDefined(inputContainer.element.attr("md-no-float"));
                    if (label && label.length || hasNoFloat) {
                        inputContainer.setHasPlaceholder(!0);
                        return;
                    }
                    var placeholderText = attr.placeholder;
                    element.removeAttr("placeholder");
                    if (inputContainer.input && "MD-SELECT" != inputContainer.input[0].nodeName) {
                        var placeholder = '<label ng-click="delegateClick()">' + placeholderText + "</label>";
                        inputContainer.element.addClass("md-icon-float");
                        inputContainer.element.prepend(placeholder);
                    }
                }
            };
        }
        placeholderDirective.$inject = [ "$log" ];
        var visibilityDirectives = [ "ngIf", "ngShow", "ngHide", "ngSwitchWhen", "ngSwitchDefault" ];
        function ngMessageDirective($mdUtil) {
            return {
                restrict: "EA",
                compile: function(element) {
                    if (!$mdUtil.getClosest(element, "md-input-container")) return;
                    element.toggleClass("md-input-message-animation", !0);
                    return {};
                },
                priority: 100
            };
        }
        ngMessageDirective.$inject = [ "$mdUtil" ];
        function mdInputInvalidMessagesAnimation($q, $animateCss) {
            return {
                addClass: function(element, className, done) {
                    var messages = getMessagesElement(element);
                    "md-input-invalid" == className && messages.hasClass("md-auto-hide") && showInputMessages(element, $animateCss, $q).finally(done);
                }
            };
        }
        mdInputInvalidMessagesAnimation.$inject = [ "$q", "$animateCss" ];
        function ngMessagesAnimation($q, $animateCss) {
            return {
                enter: function(element, done) {
                    showInputMessages(element, $animateCss, $q).finally(done);
                },
                leave: function(element, done) {
                    hideInputMessages(element, $animateCss, $q).finally(done);
                },
                addClass: function(element, className, done) {
                    "ng-hide" == className ? hideInputMessages(element, $animateCss, $q).finally(done) : done();
                },
                removeClass: function(element, className, done) {
                    "ng-hide" == className ? showInputMessages(element, $animateCss, $q).finally(done) : done();
                }
            };
        }
        ngMessagesAnimation.$inject = [ "$q", "$animateCss" ];
        function ngMessageAnimation($animateCss) {
            return {
                enter: function(element, done) {
                    if (!getMessagesElement(element).hasClass("md-auto-hide")) return showMessage(element, $animateCss);
                    done();
                },
                leave: function(element, done) {
                    return hideMessage(element, $animateCss);
                }
            };
        }
        ngMessageAnimation.$inject = [ "$animateCss" ];
        function showInputMessages(element, $animateCss, $q) {
            var animator, animators = [], messages = getMessagesElement(element);
            angular.forEach(messages.children(), function(child) {
                animator = showMessage(angular.element(child), $animateCss);
                animators.push(animator.start());
            });
            return $q.all(animators);
        }
        function hideInputMessages(element, $animateCss, $q) {
            var animator, animators = [], messages = getMessagesElement(element);
            angular.forEach(messages.children(), function(child) {
                animator = hideMessage(angular.element(child), $animateCss);
                animators.push(animator.start());
            });
            return $q.all(animators);
        }
        function showMessage(element, $animateCss) {
            return $animateCss(element, {
                event: "enter",
                structural: !0,
                from: {
                    opacity: 0,
                    "margin-top": -element[0].offsetHeight + "px"
                },
                to: {
                    opacity: 1,
                    "margin-top": "0"
                },
                duration: .3
            });
        }
        function hideMessage(element, $animateCss) {
            var height = element[0].offsetHeight;
            return 0 == window.getComputedStyle(element[0]).opacity ? $animateCss(element, {}) : $animateCss(element, {
                event: "leave",
                structural: !0,
                from: {
                    opacity: 1,
                    "margin-top": 0
                },
                to: {
                    opacity: 0,
                    "margin-top": -height + "px"
                },
                duration: .3
            });
        }
        function getMessagesElement(element) {
            var input = function(element) {
                return element.controller("mdInputContainer").element;
            }(element);
            return angular.element(input[0].querySelector("ng-messages,data-ng-messages,x-ng-messages,[ng-messages],[data-ng-messages],[x-ng-messages]"));
        }
    }();
    !function() {
        angular.module("material.components.list", [ "material.core" ]).controller("MdListController", MdListController).directive("mdList", mdListDirective).directive("mdListItem", mdListItemDirective);
        function mdListDirective($mdTheming) {
            return {
                restrict: "E",
                compile: function(tEl) {
                    tEl[0].setAttribute("role", "list");
                    return $mdTheming;
                }
            };
        }
        mdListDirective.$inject = [ "$mdTheming" ];
        function mdListItemDirective($mdAria, $mdConstant, $mdUtil, $timeout) {
            var proxiedTypes = [ "md-checkbox", "md-switch" ];
            return {
                restrict: "E",
                controller: "MdListController",
                compile: function(tEl, tAttrs) {
                    var hasProxiedElement, secondaryItem = tEl[0].querySelector(".md-secondary");
                    tEl[0].setAttribute("role", "listitem");
                    if (tAttrs.ngClick || tAttrs.ngHref || tAttrs.href || tAttrs.uiSref || tAttrs.ngAttrUiSref) wrapIn("button"); else {
                        for (var type, i = 0; type = proxiedTypes[i]; ++i) if (tEl[0].querySelector(type)) {
                            hasProxiedElement = !0;
                            break;
                        }
                        hasProxiedElement ? wrapIn("div") : tEl[0].querySelector("md-button:not(.md-secondary):not(.md-exclude)") || tEl.addClass("md-no-proxy");
                    }
                    !function() {
                        if (secondaryItem && !(el = secondaryItem, nodeName = el.nodeName.toUpperCase(), 
                        "MD-BUTTON" == nodeName || "BUTTON" == nodeName) && secondaryItem.hasAttribute("ng-click")) {
                            $mdAria.expect(secondaryItem, "aria-label");
                            var buttonWrapper = angular.element('<md-button class="md-secondary-container md-icon-button">');
                            copyAttributes(secondaryItem, buttonWrapper[0]);
                            secondaryItem.setAttribute("tabindex", "-1");
                            secondaryItem.classList.remove("md-secondary");
                            buttonWrapper.append(secondaryItem);
                            secondaryItem = buttonWrapper[0];
                        }
                        var el, nodeName;
                        if (secondaryItem && (secondaryItem.hasAttribute("ng-click") || tAttrs.ngClick && function(el) {
                            return -1 != proxiedTypes.indexOf(el.nodeName.toLowerCase());
                        }(secondaryItem))) {
                            tEl.addClass("md-with-secondary");
                            tEl.append(secondaryItem);
                        }
                    }();
                    !function() {
                        for (var toggle, toggleType, toggleTypes = [ "md-switch", "md-checkbox" ], i = 0; toggleType = toggleTypes[i]; ++i) if ((toggle = tEl.find(toggleType)[0]) && !toggle.hasAttribute("aria-label")) {
                            var p = tEl.find("p")[0];
                            if (!p) return;
                            toggle.setAttribute("aria-label", "Toggle " + p.textContent);
                        }
                    }();
                    function wrapIn(type) {
                        var container;
                        if ("div" == type) {
                            (container = angular.element('<div class="md-no-style md-list-item-inner">')).append(tEl.contents());
                            tEl.addClass("md-proxy-focus");
                        } else {
                            container = angular.element('<md-button class="md-no-style"><div class="md-list-item-inner"></div></md-button>');
                            copyAttributes(tEl[0], container[0]);
                            container.children().eq(0).append(tEl.contents());
                        }
                        tEl[0].setAttribute("tabindex", "-1");
                        tEl.append(container);
                    }
                    function copyAttributes(item, wrapper) {
                        angular.forEach([ "ng-if", "ng-click", "aria-label", "ng-disabled", "ui-sref", "href", "ng-href", "ng-attr-ui-sref" ], function(attr) {
                            if (item.hasAttribute(attr)) {
                                wrapper.setAttribute(attr, item.getAttribute(attr));
                                item.removeAttribute(attr);
                            }
                        });
                    }
                    return function($scope, $element, $attr, ctrl) {
                        var proxies = [], firstChild = $element[0].firstElementChild, hasClick = firstChild && function(element) {
                            for (var attr = element.attributes, i = 0; i < attr.length; i++) if ("ngClick" === $attr.$normalize(attr[i].name)) return !0;
                            return !1;
                        }(firstChild);
                        children = $element.children(), children.length && !children[0].hasAttribute("ng-click") && angular.forEach(proxiedTypes, function(type) {
                            angular.forEach(firstChild.querySelectorAll(type), function(child) {
                                proxies.push(child);
                            });
                        });
                        var children;
                        !function() {
                            if (1 == proxies.length || hasClick) {
                                $element.addClass("md-clickable");
                                hasClick || ctrl.attachRipple($scope, angular.element($element[0].querySelector(".md-no-style")));
                            }
                        }();
                        $element.hasClass("md-proxy-focus") && proxies.length && angular.forEach(proxies, function(proxy) {
                            proxy = angular.element(proxy);
                            $scope.mouseActive = !1;
                            proxy.on("mousedown", function() {
                                $scope.mouseActive = !0;
                                $timeout(function() {
                                    $scope.mouseActive = !1;
                                }, 100);
                            }).on("focus", function() {
                                !1 === $scope.mouseActive && $element.addClass("md-focused");
                                proxy.on("blur", function proxyOnBlur() {
                                    $element.removeClass("md-focused");
                                    proxy.off("blur", proxyOnBlur);
                                });
                            });
                        });
                        hasClick || proxies.length || firstChild && firstChild.addEventListener("keypress", function(e) {
                            if ("INPUT" != e.target.nodeName && "TEXTAREA" != e.target.nodeName) {
                                var keyCode = e.which || e.keyCode;
                                if (keyCode == $mdConstant.KEY_CODE.SPACE && firstChild) {
                                    firstChild.click();
                                    e.preventDefault();
                                    e.stopPropagation();
                                }
                            }
                        });
                        $element.off("click");
                        $element.off("keypress");
                        1 == proxies.length && firstChild && $element.children().eq(0).on("click", function(e) {
                            var parentButton = $mdUtil.getClosest(e.target, "BUTTON");
                            !parentButton && firstChild.contains(e.target) && angular.forEach(proxies, function(proxy) {
                                e.target === proxy || proxy.contains(e.target) || angular.element(proxy).triggerHandler("click");
                            });
                        });
                    };
                }
            };
        }
        mdListItemDirective.$inject = [ "$mdAria", "$mdConstant", "$mdUtil", "$timeout" ];
        function MdListController($scope, $element, $mdListInkRipple) {
            this.attachRipple = function(scope, element) {
                $mdListInkRipple.attach(scope, element, {});
            };
        }
        MdListController.$inject = [ "$scope", "$element", "$mdListInkRipple" ];
    }();
    angular.module("material.components.menu", [ "material.core", "material.components.backdrop" ]);
    angular.module("material.components.menuBar", [ "material.core", "material.components.menu" ]);
    !function() {
        angular.module("material.components.progressCircular", [ "material.core" ]).directive("mdProgressCircular", MdProgressCircularDirective);
        function MdProgressCircularDirective($mdTheming, $mdUtil, $log) {
            var DEFAULT_PROGRESS_SIZE = 100, DEFAULT_SCALING = .5, MODE_DETERMINATE = "determinate", MODE_INDETERMINATE = "indeterminate";
            return {
                restrict: "E",
                scope: !0,
                template: '<div class="md-scale-wrapper"><div class="md-spinner-wrapper"><div class="md-inner"><div class="md-gap"></div><div class="md-left"><div class="md-half-circle"></div></div><div class="md-right"><div class="md-half-circle"></div></div></div></div></div>',
                compile: function(tElement) {
                    tElement.attr("aria-valuemin", 0);
                    tElement.attr("aria-valuemax", 100);
                    tElement.attr("role", "progressbar");
                    return postLink;
                }
            };
            function postLink(scope, element, attr) {
                $mdTheming(element);
                var lastMode, leftC, rightC, gap, circle = element, spinnerWrapper = angular.element(element.children()[0]), toVendorCSS = $mdUtil.dom.animator.toCss;
                element.attr("md-mode", mode());
                !function() {
                    circle.css({
                        width: 100 * getDiameterRatio() + "px",
                        height: 100 * getDiameterRatio() + "px"
                    });
                    circle.children().eq(0).css(toVendorCSS({
                        transform: $mdUtil.supplant("translate(-50%, -50%) scale( {0} )", [ getDiameterRatio() ])
                    }));
                }();
                !function() {
                    if (angular.isUndefined(attr.mdMode)) {
                        var hasValue = angular.isDefined(attr.value), mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;
                        $log.debug($mdUtil.supplant("Auto-adding the missing md-mode='{0}' to the ProgressCircular element", [ mode ]));
                        element.attr("md-mode", mode);
                        attr.mdMode = mode;
                    }
                }();
                !function() {
                    attr.$observe("value", function(value) {
                        var percentValue = function(value) {
                            return Math.max(0, Math.min(value || 0, 100));
                        }(value);
                        element.attr("aria-valuenow", percentValue);
                        mode() == MODE_DETERMINATE && function(value) {
                            if (!mode()) return;
                            leftC = leftC || angular.element(element[0].querySelector(".md-left > .md-half-circle"));
                            rightC = rightC || angular.element(element[0].querySelector(".md-right > .md-half-circle"));
                            gap = gap || angular.element(element[0].querySelector(".md-gap"));
                            var gapStyles = removeEmptyValues({
                                borderBottomColor: value <= 50 ? "transparent !important" : "",
                                transition: value <= 50 ? "" : "borderBottomColor 0.1s linear"
                            }), leftStyles = removeEmptyValues({
                                transition: value <= 50 ? "transform 0.1s linear" : "",
                                transform: $mdUtil.supplant("rotate({0}deg)", [ value <= 50 ? 135 : (value - 50) / 50 * 180 + 135 ])
                            }), rightStyles = removeEmptyValues({
                                transition: 50 <= value ? "transform 0.1s linear" : "",
                                transform: $mdUtil.supplant("rotate({0}deg)", [ 50 <= value ? 45 : value / 50 * 180 - 135 ])
                            });
                            leftC.css(toVendorCSS(leftStyles));
                            rightC.css(toVendorCSS(rightStyles));
                            gap.css(toVendorCSS(gapStyles));
                        }(percentValue);
                    });
                    attr.$observe("mdMode", function(mode) {
                        switch (mode) {
                          case MODE_DETERMINATE:
                          case MODE_INDETERMINATE:
                            spinnerWrapper.removeClass("ng-hide");
                            lastMode && spinnerWrapper.removeClass(lastMode);
                            spinnerWrapper.addClass(lastMode = "md-mode-" + mode);
                            break;

                          default:
                            lastMode && spinnerWrapper.removeClass(lastMode);
                            spinnerWrapper.addClass("ng-hide");
                            lastMode = void 0;
                        }
                    });
                }();
                function getDiameterRatio() {
                    if (!attr.mdDiameter) return DEFAULT_SCALING;
                    var match = /([0-9]*)%/.exec(attr.mdDiameter), value = Math.max(0, match && match[1] / 100 || parseFloat(attr.mdDiameter));
                    return 1 < value ? value / DEFAULT_PROGRESS_SIZE : value;
                }
                function mode() {
                    var value = (attr.mdMode || "").trim();
                    if (value) switch (value) {
                      case MODE_DETERMINATE:
                      case MODE_INDETERMINATE:
                        break;

                      default:
                        value = void 0;
                    }
                    return value;
                }
            }
            function removeEmptyValues(target) {
                for (var key in target) target.hasOwnProperty(key) && "" == target[key] && delete target[key];
                return target;
            }
        }
        MdProgressCircularDirective.$inject = [ "$mdTheming", "$mdUtil", "$log" ];
    }();
    !function() {
        angular.module("material.components.radioButton", [ "material.core" ]).directive("mdRadioGroup", mdRadioGroupDirective).directive("mdRadioButton", mdRadioButtonDirective);
        function mdRadioGroupDirective($mdUtil, $mdConstant, $mdTheming, $timeout) {
            RadioGroupController.prototype = {
                init: function(ngModelCtrl) {
                    this._ngModelCtrl = ngModelCtrl;
                    this._ngModelCtrl.$render = angular.bind(this, this.render);
                },
                add: function(rbRender) {
                    this._radioButtonRenderFns.push(rbRender);
                },
                remove: function(rbRender) {
                    var index = this._radioButtonRenderFns.indexOf(rbRender);
                    -1 !== index && this._radioButtonRenderFns.splice(index, 1);
                },
                render: function() {
                    this._radioButtonRenderFns.forEach(function(rbRender) {
                        rbRender();
                    });
                },
                setViewValue: function(value, eventType) {
                    this._ngModelCtrl.$setViewValue(value, eventType);
                    this.render();
                },
                getViewValue: function() {
                    return this._ngModelCtrl.$viewValue;
                },
                selectNext: function() {
                    return changeSelectedButton(this.$element, 1);
                },
                selectPrevious: function() {
                    return changeSelectedButton(this.$element, -1);
                },
                setActiveDescendant: function(radioId) {
                    this.$element.attr("aria-activedescendant", radioId);
                }
            };
            return {
                restrict: "E",
                controller: [ "$element", RadioGroupController ],
                require: [ "mdRadioGroup", "?ngModel" ],
                link: {
                    pre: function(scope, element, attr, ctrls) {
                        $mdTheming(element);
                        var rgCtrl = ctrls[0], ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();
                        rgCtrl.init(ngModelCtrl);
                        scope.mouseActive = !1;
                        element.attr({
                            role: "radiogroup",
                            tabIndex: element.attr("tabindex") || "0"
                        }).on("keydown", function(ev) {
                            var keyCode = ev.which || ev.keyCode;
                            if (keyCode != $mdConstant.KEY_CODE.ENTER && ev.currentTarget != ev.target) return;
                            switch (keyCode) {
                              case $mdConstant.KEY_CODE.LEFT_ARROW:
                              case $mdConstant.KEY_CODE.UP_ARROW:
                                ev.preventDefault();
                                rgCtrl.selectPrevious();
                                setFocus();
                                break;

                              case $mdConstant.KEY_CODE.RIGHT_ARROW:
                              case $mdConstant.KEY_CODE.DOWN_ARROW:
                                ev.preventDefault();
                                rgCtrl.selectNext();
                                setFocus();
                                break;

                              case $mdConstant.KEY_CODE.ENTER:
                                var form = angular.element($mdUtil.getClosest(element[0], "form"));
                                0 < form.length && form.triggerHandler("submit");
                            }
                        }).on("mousedown", function(event) {
                            scope.mouseActive = !0;
                            $timeout(function() {
                                scope.mouseActive = !1;
                            }, 100);
                        }).on("focus", function() {
                            !1 === scope.mouseActive && rgCtrl.$element.addClass("md-focused");
                        }).on("blur", function() {
                            rgCtrl.$element.removeClass("md-focused");
                        });
                        function setFocus() {
                            element.hasClass("md-focused") || element.addClass("md-focused");
                        }
                    }
                }
            };
            function RadioGroupController($element) {
                this._radioButtonRenderFns = [];
                this.$element = $element;
            }
            function changeSelectedButton(parent, increment) {
                var buttons = $mdUtil.iterator(parent[0].querySelectorAll("md-radio-button"), !0);
                if (buttons.count()) {
                    var selected = parent[0].querySelector("md-radio-button.md-checked"), target = buttons[increment < 0 ? "previous" : "next"](selected, function(button) {
                        return !angular.element(button).attr("disabled");
                    }) || buttons.first();
                    angular.element(target).triggerHandler("click");
                }
            }
        }
        mdRadioGroupDirective.$inject = [ "$mdUtil", "$mdConstant", "$mdTheming", "$timeout" ];
        function mdRadioButtonDirective($mdAria, $mdUtil, $mdTheming) {
            return {
                restrict: "E",
                require: "^mdRadioGroup",
                transclude: !0,
                template: '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox><div class="md-off"></div><div class="md-on"></div></div><div ng-transclude class="md-label"></div>',
                link: function(scope, element, attr, rgCtrl) {
                    var lastChecked;
                    $mdTheming(element);
                    !function(element, scope) {
                        scope.ariaId = attr.id || "radio_" + $mdUtil.nextUid();
                        element.attr({
                            id: scope.ariaId,
                            role: "radio",
                            "aria-checked": "false"
                        });
                        $mdAria.expectWithText(element, "aria-label");
                    }(element, scope);
                    !function(controller) {
                        if (!rgCtrl) throw "RadioGroupController not found.";
                        rgCtrl.add(render);
                        attr.$observe("value", render);
                        element.on("click", listener).on("$destroy", function() {
                            rgCtrl.remove(render);
                        });
                    }();
                    function listener(ev) {
                        element[0].hasAttribute("disabled") || scope.$apply(function() {
                            rgCtrl.setViewValue(attr.value, ev && ev.type);
                        });
                    }
                    function render() {
                        var checked = rgCtrl.getViewValue() == attr.value;
                        if (checked !== lastChecked) {
                            lastChecked = checked;
                            element.attr("aria-checked", checked);
                            if (checked) {
                                markParentAsChecked(!0);
                                element.addClass("md-checked");
                                rgCtrl.setActiveDescendant(element.attr("id"));
                            } else {
                                markParentAsChecked(!1);
                                element.removeClass("md-checked");
                            }
                        }
                        function markParentAsChecked(addClass) {
                            "MD-RADIO-GROUP" != element.parent()[0].nodeName && element.parent()[addClass ? "addClass" : "removeClass"]("md-checked");
                        }
                    }
                }
            };
        }
        mdRadioButtonDirective.$inject = [ "$mdAria", "$mdUtil", "$mdTheming" ];
    }();
    !function() {
        angular.module("material.components.progressLinear", [ "material.core" ]).directive("mdProgressLinear", MdProgressLinearDirective);
        function MdProgressLinearDirective($mdTheming, $mdUtil, $log) {
            var MODE_DETERMINATE = "determinate", MODE_INDETERMINATE = "indeterminate", MODE_BUFFER = "buffer", MODE_QUERY = "query";
            return {
                restrict: "E",
                template: '<div class="md-container"><div class="md-dashed"></div><div class="md-bar md-bar1"></div><div class="md-bar md-bar2"></div></div>',
                compile: function(tElement, tAttrs, transclude) {
                    tElement.attr("aria-valuemin", 0);
                    tElement.attr("aria-valuemax", 100);
                    tElement.attr("role", "progressbar");
                    return postLink;
                }
            };
            function postLink(scope, element, attr) {
                $mdTheming(element);
                var lastMode, toVendorCSS = $mdUtil.dom.animator.toCss, bar1 = angular.element(element[0].querySelector(".md-bar1")), bar2 = angular.element(element[0].querySelector(".md-bar2")), container = angular.element(element[0].querySelector(".md-container"));
                element.attr("md-mode", mode());
                !function() {
                    if (angular.isUndefined(attr.mdMode)) {
                        var hasValue = angular.isDefined(attr.value), mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;
                        $log.debug($mdUtil.supplant("Auto-adding the missing md-mode='{0}' to the ProgressLinear element", [ mode ]));
                        element.attr("md-mode", mode);
                        attr.mdMode = mode;
                    }
                }();
                !function() {
                    attr.$observe("value", function(value) {
                        var percentValue = clamp(value);
                        element.attr("aria-valuenow", percentValue);
                        mode() != MODE_QUERY && animateIndicator(bar2, percentValue);
                    });
                    attr.$observe("mdBufferValue", function(value) {
                        animateIndicator(bar1, clamp(value));
                    });
                    attr.$observe("mdMode", function(mode) {
                        switch (mode) {
                          case MODE_QUERY:
                          case MODE_BUFFER:
                          case MODE_DETERMINATE:
                          case MODE_INDETERMINATE:
                            container.removeClass("ng-hide " + lastMode);
                            container.addClass(lastMode = "md-mode-" + mode);
                            break;

                          default:
                            lastMode && container.removeClass(lastMode);
                            container.addClass("ng-hide");
                            lastMode = void 0;
                        }
                    });
                }();
                function mode() {
                    var value = (attr.mdMode || "").trim();
                    if (value) switch (value) {
                      case MODE_DETERMINATE:
                      case MODE_INDETERMINATE:
                      case MODE_BUFFER:
                      case MODE_QUERY:
                        break;

                      default:
                        value = void 0;
                    }
                    return value;
                }
                function animateIndicator(target, value) {
                    if (mode()) {
                        var to = $mdUtil.supplant("translateX({0}%) scale({1},1)", [ (value - 100) / 2, value / 100 ]), styles = toVendorCSS({
                            transform: to
                        });
                        angular.element(target).css(styles);
                    }
                }
            }
            function clamp(value) {
                return Math.max(0, Math.min(value || 0, 100));
            }
        }
        MdProgressLinearDirective.$inject = [ "$mdTheming", "$mdUtil", "$log" ];
    }();
    !function() {
        angular.module("material.components.showHide", [ "material.core" ]).directive("ngShow", createDirective("ngShow", !0)).directive("ngHide", createDirective("ngHide", !1));
        function createDirective(name, targetValue) {
            return [ "$mdUtil", function($mdUtil) {
                return {
                    restrict: "A",
                    multiElement: !0,
                    link: function($scope, $element, $attr) {
                        var unregister = $scope.$on("$md-resize-enable", function() {
                            unregister();
                            $scope.$watch($attr[name], function(value) {
                                if (!!value === targetValue) {
                                    $mdUtil.nextTick(function() {
                                        $scope.$broadcast("$md-resize");
                                    });
                                    $mdUtil.dom.animator.waitTransitionEnd($element).then(function() {
                                        $scope.$broadcast("$md-resize");
                                    });
                                }
                            });
                        });
                    }
                };
            } ];
        }
    }();
    !function() {
        var selectNextId = 0;
        angular.module("material.components.select", [ "material.core", "material.components.backdrop" ]).directive("mdSelect", SelectDirective).directive("mdSelectMenu", SelectMenuDirective).directive("mdOption", OptionDirective).directive("mdOptgroup", function() {
            return {
                restrict: "E",
                compile: function(el, attrs) {
                    var labelElement = el.find("label");
                    if (!labelElement.length) {
                        labelElement = angular.element("<label>");
                        el.prepend(labelElement);
                    }
                    labelElement.addClass("md-container-ignore");
                    attrs.label && labelElement.text(attrs.label);
                }
            };
        }).provider("$mdSelect", SelectProvider);
        function SelectDirective($mdSelect, $mdUtil, $mdTheming, $mdAria, $compile, $parse) {
            return {
                restrict: "E",
                require: [ "^?mdInputContainer", "mdSelect", "ngModel", "?^form" ],
                compile: function(element, attr) {
                    var valueEl = angular.element("<md-select-value><span></span></md-select-value>");
                    valueEl.append('<span class="md-select-icon" aria-hidden="true"></span>');
                    valueEl.addClass("md-select-value");
                    valueEl[0].hasAttribute("id") || valueEl.attr("id", "select_value_label_" + $mdUtil.nextUid());
                    element.find("md-content").length || element.append(angular.element("<md-content>").append(element.contents()));
                    if (attr.mdOnOpen) {
                        element.find("md-content").prepend(angular.element('<div> <md-progress-circular md-mode="{{progressMode}}" ng-hide="$$loadingAsyncDone"></md-progress-circular></div>'));
                        element.find("md-option").attr("ng-show", "$$loadingAsyncDone");
                    }
                    if (attr.name) {
                        var autofillClone = angular.element('<select class="md-visually-hidden">');
                        autofillClone.attr({
                            name: "." + attr.name,
                            "ng-model": attr.ngModel,
                            "aria-hidden": "true",
                            tabindex: "-1"
                        });
                        var opts = element.find("md-option");
                        angular.forEach(opts, function(el) {
                            var newEl = angular.element("<option>" + el.innerHTML + "</option>");
                            el.hasAttribute("ng-value") ? newEl.attr("ng-value", el.getAttribute("ng-value")) : el.hasAttribute("value") && newEl.attr("value", el.getAttribute("value"));
                            autofillClone.append(newEl);
                        });
                        element.parent().append(autofillClone);
                    }
                    var multiple = angular.isDefined(attr.multiple) ? "multiple" : "", selectTemplate = '<div class="md-select-menu-container" aria-hidden="true"><md-select-menu {0}>{1}</md-select-menu></div>';
                    selectTemplate = $mdUtil.supplant(selectTemplate, [ multiple, element.html() ]);
                    element.empty().append(valueEl);
                    element.append(selectTemplate);
                    attr.tabindex = attr.tabindex || "0";
                    return function(scope, element, attr, ctrls) {
                        var isDisabled, ariaLabelBase, selectContainer, selectScope, selectMenuCtrl, untouched = !0, containerCtrl = ctrls[0], mdSelectCtrl = ctrls[1], ngModelCtrl = ctrls[2], formCtrl = ctrls[3], valueEl = element.find("md-select-value"), isReadonly = angular.isDefined(attr.readonly);
                        if (containerCtrl) {
                            var isErrorGetter = containerCtrl.isErrorGetter || function() {
                                return ngModelCtrl.$invalid && ngModelCtrl.$touched;
                            };
                            if (containerCtrl.input) throw new Error("<md-input-container> can only have *one* child <input>, <textarea> or <select> element!");
                            containerCtrl.input = element;
                            containerCtrl.label || $mdAria.expect(element, "aria-label", element.attr("placeholder"));
                            scope.$watch(isErrorGetter, containerCtrl.setInvalid);
                        }
                        !function() {
                            selectContainer = angular.element(element[0].querySelector(".md-select-menu-container"));
                            selectScope = scope;
                            if (element.attr("md-container-class")) {
                                var value = selectContainer[0].getAttribute("class") + " " + element.attr("md-container-class");
                                selectContainer[0].setAttribute("class", value);
                            }
                            (selectMenuCtrl = selectContainer.find("md-select-menu").controller("mdSelectMenu")).init(ngModelCtrl, attr.ngModel);
                            element.on("$destroy", function() {
                                selectContainer.remove();
                            });
                        }();
                        $mdTheming(element);
                        if (attr.name && formCtrl) {
                            var selectEl = element.parent()[0].querySelector('select[name=".' + attr.name + '"]');
                            $mdUtil.nextTick(function() {
                                var controller = angular.element(selectEl).controller("ngModel");
                                controller && formCtrl.$removeControl(controller);
                            });
                        }
                        formCtrl && $mdUtil.nextTick(function() {
                            formCtrl.$setPristine();
                        });
                        var deregisterWatcher, originalRender = ngModelCtrl.$render;
                        ngModelCtrl.$render = function() {
                            originalRender();
                            syncLabelText();
                            syncAriaLabel();
                            inputCheckValue();
                        };
                        attr.$observe("placeholder", ngModelCtrl.$render);
                        mdSelectCtrl.setLabelText = function(text) {
                            mdSelectCtrl.setIsPlaceholder(!text);
                            var tmpPlaceholder = attr.placeholder || (containerCtrl && containerCtrl.label ? containerCtrl.label.text() : "");
                            text = text || tmpPlaceholder || "";
                            var target = valueEl.children().eq(0);
                            target.html(text);
                        };
                        mdSelectCtrl.setIsPlaceholder = function(isPlaceholder) {
                            if (isPlaceholder) {
                                valueEl.addClass("md-select-placeholder");
                                containerCtrl && containerCtrl.label && containerCtrl.label.addClass("md-placeholder");
                            } else {
                                valueEl.removeClass("md-select-placeholder");
                                containerCtrl && containerCtrl.label && containerCtrl.label.removeClass("md-placeholder");
                            }
                        };
                        if (!isReadonly) {
                            element.on("focus", function(ev) {
                                containerCtrl && containerCtrl.element.hasClass("md-input-has-value") && containerCtrl.setFocused(!0);
                            });
                            $mdUtil.nextTick(function() {
                                element.on("blur", function() {
                                    if (untouched) {
                                        untouched = !1;
                                        ngModelCtrl.$setUntouched();
                                    }
                                    if (!selectScope.isOpen) {
                                        containerCtrl && containerCtrl.setFocused(!1);
                                        inputCheckValue();
                                    }
                                });
                            });
                        }
                        mdSelectCtrl.triggerClose = function() {
                            $parse(attr.mdOnClose)(scope);
                        };
                        scope.$$postDigest(function() {
                            !function() {
                                var labelText = element.attr("aria-label") || element.attr("placeholder");
                                !labelText && containerCtrl && containerCtrl.label && (labelText = containerCtrl.label.text());
                                ariaLabelBase = labelText;
                                $mdAria.expect(element, "aria-label", labelText);
                            }();
                            syncLabelText();
                            syncAriaLabel();
                        });
                        scope.$watch(selectMenuCtrl.selectedLabels, syncLabelText);
                        function syncLabelText() {
                            if (selectContainer) {
                                selectMenuCtrl = selectMenuCtrl || selectContainer.find("md-select-menu").controller("mdSelectMenu");
                                mdSelectCtrl.setLabelText(selectMenuCtrl.selectedLabels());
                            }
                        }
                        function syncAriaLabel() {
                            if (ariaLabelBase) {
                                var ariaLabels = selectMenuCtrl.selectedLabels({
                                    mode: "aria"
                                });
                                element.attr("aria-label", ariaLabels.length ? ariaLabelBase + ": " + ariaLabels : ariaLabelBase);
                            }
                        }
                        attr.$observe("ngMultiple", function(val) {
                            deregisterWatcher && deregisterWatcher();
                            var parser = $parse(val);
                            deregisterWatcher = scope.$watch(function() {
                                return parser(scope);
                            }, function(multiple, prevVal) {
                                if (void 0 !== multiple || void 0 !== prevVal) {
                                    multiple ? element.attr("multiple", "multiple") : element.removeAttr("multiple");
                                    element.attr("aria-multiselectable", multiple ? "true" : "false");
                                    if (selectContainer) {
                                        selectMenuCtrl.setMultiple(multiple);
                                        originalRender = ngModelCtrl.$render;
                                        ngModelCtrl.$render = function() {
                                            originalRender();
                                            syncLabelText();
                                            syncAriaLabel();
                                            inputCheckValue();
                                        };
                                        ngModelCtrl.$render();
                                    }
                                }
                            });
                        });
                        attr.$observe("disabled", function(disabled) {
                            angular.isString(disabled) && (disabled = !0);
                            if (void 0 === isDisabled || isDisabled !== disabled) if (isDisabled = disabled) {
                                element.attr({
                                    tabindex: -1,
                                    "aria-disabled": "true"
                                });
                                element.off("click", openSelect);
                                element.off("keydown", handleKeypress);
                            } else {
                                element.attr({
                                    tabindex: attr.tabindex,
                                    "aria-disabled": "false"
                                });
                                element.on("click", openSelect);
                                element.on("keydown", handleKeypress);
                            }
                        });
                        if (!attr.disabled && !attr.ngDisabled) {
                            element.attr({
                                tabindex: attr.tabindex,
                                "aria-disabled": "false"
                            });
                            element.on("click", openSelect);
                            element.on("keydown", handleKeypress);
                        }
                        var ariaAttrs = {
                            role: "listbox",
                            "aria-expanded": "false",
                            "aria-multiselectable": void 0 === attr.multiple || attr.ngMultiple ? "false" : "true"
                        };
                        element[0].hasAttribute("id") || (ariaAttrs.id = "select_" + $mdUtil.nextUid());
                        var containerId = "select_container_" + $mdUtil.nextUid();
                        selectContainer.attr("id", containerId);
                        ariaAttrs["aria-owns"] = containerId;
                        element.attr(ariaAttrs);
                        scope.$on("$destroy", function() {
                            $mdSelect.destroy().finally(function() {
                                if (containerCtrl) {
                                    containerCtrl.setFocused(!1);
                                    containerCtrl.setHasValue(!1);
                                    containerCtrl.input = null;
                                }
                                ngModelCtrl.$setTouched();
                            });
                        });
                        function inputCheckValue() {
                            containerCtrl && containerCtrl.setHasValue(0 < selectMenuCtrl.selectedLabels().length || (element[0].validity || {}).badInput);
                        }
                        function handleKeypress(e) {
                            if (-1 != [ 32, 13, 38, 40 ].indexOf(e.keyCode)) {
                                e.preventDefault();
                                openSelect();
                            } else if (e.keyCode <= 90 && 31 <= e.keyCode) {
                                e.preventDefault();
                                var node = selectMenuCtrl.optNodeForKeyboardSearch(e);
                                if (!node) return;
                                var optionCtrl = angular.element(node).controller("mdOption");
                                selectMenuCtrl.isMultiple || selectMenuCtrl.deselect(Object.keys(selectMenuCtrl.selected)[0]);
                                selectMenuCtrl.select(optionCtrl.hashKey, optionCtrl.value);
                                selectMenuCtrl.refreshViewValue();
                            }
                        }
                        function openSelect() {
                            selectScope.isOpen = !0;
                            element.attr("aria-expanded", "true");
                            $mdSelect.show({
                                scope: selectScope,
                                preserveScope: !0,
                                skipCompile: !0,
                                element: selectContainer,
                                target: element[0],
                                selectCtrl: mdSelectCtrl,
                                preserveElement: !0,
                                hasBackdrop: !0,
                                loadingAsync: !!attr.mdOnOpen && (scope.$eval(attr.mdOnOpen) || !0)
                            }).finally(function() {
                                selectScope.isOpen = !1;
                                element.focus();
                                element.attr("aria-expanded", "false");
                                ngModelCtrl.$setTouched();
                            });
                        }
                    };
                },
                controller: function() {}
            };
        }
        SelectDirective.$inject = [ "$mdSelect", "$mdUtil", "$mdTheming", "$mdAria", "$compile", "$parse" ];
        function SelectMenuDirective($parse, $mdUtil, $mdTheming) {
            SelectMenuController.$inject = [ "$scope", "$attrs", "$element" ];
            return {
                restrict: "E",
                require: [ "mdSelectMenu" ],
                scope: !0,
                controller: SelectMenuController,
                link: {
                    pre: function(scope, element, attr, ctrls) {
                        var selectCtrl = ctrls[0];
                        $mdTheming(element);
                        element.on("click", clickListener);
                        element.on("keypress", function(e) {
                            13 != e.keyCode && 32 != e.keyCode || clickListener(e);
                        });
                        function clickListener(ev) {
                            var option = $mdUtil.getClosest(ev.target, "md-option"), optionCtrl = option && angular.element(option).data("$mdOptionController");
                            if (option && optionCtrl) {
                                if (option.hasAttribute("disabled")) {
                                    ev.stopImmediatePropagation();
                                    return !1;
                                }
                                var optionHashKey = selectCtrl.hashGetter(optionCtrl.value), isSelected = angular.isDefined(selectCtrl.selected[optionHashKey]);
                                scope.$apply(function() {
                                    if (selectCtrl.isMultiple) isSelected ? selectCtrl.deselect(optionHashKey) : selectCtrl.select(optionHashKey, optionCtrl.value); else if (!isSelected) {
                                        selectCtrl.deselect(Object.keys(selectCtrl.selected)[0]);
                                        selectCtrl.select(optionHashKey, optionCtrl.value);
                                    }
                                    selectCtrl.refreshViewValue();
                                });
                            }
                        }
                    }
                }
            };
            function SelectMenuController($scope, $attrs, $element) {
                var defaultIsEmpty, self = this;
                self.isMultiple = angular.isDefined($attrs.multiple);
                self.selected = {};
                self.options = {};
                $scope.$watchCollection(function() {
                    return self.options;
                }, function() {
                    self.ngModel.$render();
                });
                self.setMultiple = function(isMultiple) {
                    var ngModel = self.ngModel;
                    defaultIsEmpty = defaultIsEmpty || ngModel.$isEmpty;
                    self.isMultiple = isMultiple;
                    void 0;
                    if (self.isMultiple) {
                        ngModel.$validators["md-multiple"] = validateArray;
                        ngModel.$render = renderMultiple;
                        $scope.$watchCollection(self.modelBinding, function(value) {
                            validateArray(value) && renderMultiple();
                            self.ngModel.$setPristine();
                        });
                        ngModel.$isEmpty = function(value) {
                            return !value || 0 === value.length;
                        };
                    } else {
                        delete ngModel.$validators["md-multiple"];
                        ngModel.$render = renderSingular;
                    }
                    function validateArray(modelValue, viewValue) {
                        return angular.isArray(modelValue || viewValue || []);
                    }
                };
                var clearSearchTimeout, optNodes, optText, searchStr = "";
                self.optNodeForKeyboardSearch = function(e) {
                    clearSearchTimeout && clearTimeout(clearSearchTimeout);
                    clearSearchTimeout = setTimeout(function() {
                        searchStr = "";
                        optNodes = optText = clearSearchTimeout = void 0;
                    }, 300);
                    searchStr += String.fromCharCode(e.keyCode);
                    var search = new RegExp("^" + searchStr, "i");
                    if (!optNodes) {
                        optNodes = $element.find("md-option");
                        optText = new Array(optNodes.length);
                        angular.forEach(optNodes, function(el, i) {
                            optText[i] = el.textContent.trim();
                        });
                    }
                    for (var i = 0; i < optText.length; ++i) if (search.test(optText[i])) return optNodes[i];
                };
                self.init = function(ngModel, binding) {
                    self.ngModel = ngModel;
                    self.modelBinding = binding;
                    if (ngModel.$options && ngModel.$options.trackBy) {
                        var trackByLocals = {}, trackByParsed = $parse(ngModel.$options.trackBy);
                        self.hashGetter = function(value, valueScope) {
                            trackByLocals.$value = value;
                            return trackByParsed(valueScope || $scope, trackByLocals);
                        };
                    } else self.hashGetter = function(value) {
                        return angular.isObject(value) ? "object_" + (value.$$mdSelectId || (value.$$mdSelectId = ++selectNextId)) : value;
                    };
                    self.setMultiple(self.isMultiple);
                };
                self.selectedLabels = function(opts) {
                    var mode = (opts = opts || {}).mode || "html", selectedOptionEls = $mdUtil.nodesToArray($element[0].querySelectorAll("md-option[selected]"));
                    if (selectedOptionEls.length) {
                        var mapFn;
                        "html" == mode ? mapFn = function(el) {
                            return el.innerHTML;
                        } : "aria" == mode && (mapFn = function(el) {
                            return el.hasAttribute("aria-label") ? el.getAttribute("aria-label") : el.textContent;
                        });
                        return selectedOptionEls.map(mapFn).join(", ");
                    }
                    return "";
                };
                self.select = function(hashKey, hashedValue) {
                    var option = self.options[hashKey];
                    option && option.setSelected(!0);
                    self.selected[hashKey] = hashedValue;
                };
                self.deselect = function(hashKey) {
                    var option = self.options[hashKey];
                    option && option.setSelected(!1);
                    delete self.selected[hashKey];
                };
                self.addOption = function(hashKey, optionCtrl) {
                    if (angular.isDefined(self.options[hashKey])) throw new Error('Duplicate md-option values are not allowed in a select. Duplicate value "' + optionCtrl.value + '" found.');
                    self.options[hashKey] = optionCtrl;
                    if (angular.isDefined(self.selected[hashKey])) {
                        self.select(hashKey, optionCtrl.value);
                        self.refreshViewValue();
                    }
                };
                self.removeOption = function(hashKey) {
                    delete self.options[hashKey];
                };
                self.refreshViewValue = function() {
                    var option, values = [];
                    for (var hashKey in self.selected) (option = self.options[hashKey]) ? values.push(option.value) : values.push(self.selected[hashKey]);
                    var usingTrackBy = self.ngModel.$options && self.ngModel.$options.trackBy, newVal = self.isMultiple ? values : values[0], prevVal = self.ngModel.$modelValue;
                    if (usingTrackBy ? !angular.equals(prevVal, newVal) : prevVal != newVal) {
                        self.ngModel.$setViewValue(newVal);
                        self.ngModel.$render();
                    }
                };
                function renderMultiple() {
                    var newSelectedValues = self.ngModel.$modelValue || self.ngModel.$viewValue || [];
                    if (angular.isArray(newSelectedValues)) {
                        var oldSelected = Object.keys(self.selected), newSelectedHashes = newSelectedValues.map(self.hashGetter);
                        oldSelected.filter(function(hash) {
                            return -1 === newSelectedHashes.indexOf(hash);
                        }).forEach(self.deselect);
                        newSelectedHashes.forEach(function(hashKey, i) {
                            self.select(hashKey, newSelectedValues[i]);
                        });
                    }
                }
                function renderSingular() {
                    var value = self.ngModel.$viewValue || self.ngModel.$modelValue;
                    Object.keys(self.selected).forEach(self.deselect);
                    self.select(self.hashGetter(value), value);
                }
            }
        }
        SelectMenuDirective.$inject = [ "$parse", "$mdUtil", "$mdTheming" ];
        function OptionDirective($mdButtonInkRipple, $mdUtil) {
            OptionController.$inject = [ "$element" ];
            return {
                restrict: "E",
                require: [ "mdOption", "^^mdSelectMenu" ],
                controller: OptionController,
                compile: function(element, attr) {
                    element.append(angular.element('<div class="md-text">').append(element.contents()));
                    element.attr("tabindex", attr.tabindex || "0");
                    return postLink;
                }
            };
            function postLink(scope, element, attr, ctrls) {
                var optionCtrl = ctrls[0], selectCtrl = ctrls[1];
                angular.isDefined(attr.ngValue) ? scope.$watch(attr.ngValue, setOptionValue) : angular.isDefined(attr.value) ? setOptionValue(attr.value) : scope.$watch(function() {
                    return element.text();
                }, setOptionValue);
                attr.$observe("disabled", function(disabled) {
                    disabled ? element.attr("tabindex", "-1") : element.attr("tabindex", "0");
                });
                scope.$$postDigest(function() {
                    attr.$observe("selected", function(selected) {
                        if (angular.isDefined(selected)) {
                            "string" == typeof selected && (selected = !0);
                            if (selected) {
                                selectCtrl.isMultiple || selectCtrl.deselect(Object.keys(selectCtrl.selected)[0]);
                                selectCtrl.select(optionCtrl.hashKey, optionCtrl.value);
                            } else selectCtrl.deselect(optionCtrl.hashKey);
                            selectCtrl.refreshViewValue();
                        }
                    });
                });
                $mdButtonInkRipple.attach(scope, element);
                !function() {
                    var ariaAttrs = {
                        role: "option",
                        "aria-selected": "false"
                    };
                    element[0].hasAttribute("id") || (ariaAttrs.id = "select_option_" + $mdUtil.nextUid());
                    element.attr(ariaAttrs);
                }();
                function setOptionValue(newValue, oldValue, prevAttempt) {
                    if (selectCtrl.hashGetter) {
                        var oldHashKey = selectCtrl.hashGetter(oldValue, scope), newHashKey = selectCtrl.hashGetter(newValue, scope);
                        optionCtrl.hashKey = newHashKey;
                        optionCtrl.value = newValue;
                        selectCtrl.removeOption(oldHashKey, optionCtrl);
                        selectCtrl.addOption(newHashKey, optionCtrl);
                    } else prevAttempt || scope.$$postDigest(function() {
                        setOptionValue(newValue, oldValue, !0);
                    });
                }
                scope.$on("$destroy", function() {
                    selectCtrl.removeOption(optionCtrl.hashKey, optionCtrl);
                });
            }
            function OptionController($element) {
                this.selected = !1;
                this.setSelected = function(isSelected) {
                    if (isSelected && !this.selected) $element.attr({
                        selected: "selected",
                        "aria-selected": "true"
                    }); else if (!isSelected && this.selected) {
                        $element.removeAttr("selected");
                        $element.attr("aria-selected", "false");
                    }
                    this.selected = isSelected;
                };
            }
        }
        OptionDirective.$inject = [ "$mdButtonInkRipple", "$mdUtil" ];
        function SelectProvider($$interimElementProvider) {
            selectDefaultOptions.$inject = [ "$mdSelect", "$mdConstant", "$mdUtil", "$window", "$q", "$$rAF", "$animateCss", "$animate", "$document" ];
            return $$interimElementProvider("$mdSelect").setDefaults({
                methods: [ "target" ],
                options: selectDefaultOptions
            });
            function selectDefaultOptions($mdSelect, $mdConstant, $mdUtil, $window, $q, $$rAF, $animateCss, $animate, $document) {
                var animator = $mdUtil.dom.animator;
                return {
                    parent: "body",
                    themable: !0,
                    onShow: function(scope, element, opts) {
                        !function() {
                            if (opts.loadingAsync && !opts.isRemoved) {
                                scope.$$loadingAsyncDone = !1;
                                scope.progressMode = "indeterminate";
                                $q.when(opts.loadingAsync).then(function() {
                                    scope.$$loadingAsyncDone = !0;
                                    scope.progressMode = "";
                                    delete opts.loadingAsync;
                                }).then(function() {
                                    $$rAF(positionAndFocusMenu);
                                });
                            }
                        }();
                        !function(scope, options) {
                            var selectEl = element.find("md-select-menu");
                            if (!options.target) throw new Error($mdUtil.supplant("$mdSelect.show() expected a target element in options.target but got '{0}'!", [ options.target ]));
                            angular.extend(options, {
                                isRemoved: !1,
                                target: angular.element(options.target),
                                parent: angular.element(options.parent),
                                selectEl: selectEl,
                                contentEl: element.find("md-content"),
                                optionNodes: selectEl[0].getElementsByTagName("md-option")
                            });
                        }(0, opts);
                        opts.hideBackdrop = function(scope, element, options) {
                            options.disableParentScroll && !$mdUtil.getClosest(options.target, "MD-DIALOG") ? options.restoreScroll = $mdUtil.disableScrollAround(options.element, options.parent) : options.disableParentScroll = !1;
                            if (options.hasBackdrop) {
                                options.backdrop = $mdUtil.createBackdrop(scope, "md-select-backdrop md-click-catcher");
                                $animate.enter(options.backdrop, $document[0].body, null, {
                                    duration: 0
                                });
                            }
                            return function() {
                                options.backdrop && options.backdrop.remove();
                                options.disableParentScroll && options.restoreScroll();
                                delete options.restoreScroll;
                            };
                        }(scope, 0, opts);
                        return function(scope, element, opts) {
                            opts.parent.append(element);
                            return $q(function(resolve, reject) {
                                try {
                                    $animateCss(element, {
                                        removeClass: "md-leave",
                                        duration: 0
                                    }).start().then(positionAndFocusMenu).then(resolve);
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        }(0, element, opts).then(function(response) {
                            element.attr("aria-hidden", "false");
                            opts.alreadyOpen = !0;
                            opts.cleanupInteraction = function() {
                                if (opts.isRemoved) return;
                                var dropDown = opts.selectEl, selectCtrl = dropDown.controller("mdSelectMenu") || {};
                                element.addClass("md-clickable");
                                opts.backdrop && opts.backdrop.on("click", onBackdropClick);
                                dropDown.on("keydown", onMenuKeyDown);
                                dropDown.on("click", checkCloseMenu);
                                return function() {
                                    opts.backdrop && opts.backdrop.off("click", onBackdropClick);
                                    dropDown.off("keydown", onMenuKeyDown);
                                    dropDown.off("click", checkCloseMenu);
                                    element.removeClass("md-clickable");
                                    opts.isRemoved = !0;
                                };
                                function onBackdropClick(e) {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    opts.restoreFocus = !1;
                                    $mdUtil.nextTick($mdSelect.hide, !0);
                                }
                                function onMenuKeyDown(ev) {
                                    var keyCodes = $mdConstant.KEY_CODE;
                                    ev.preventDefault();
                                    ev.stopPropagation();
                                    switch (ev.keyCode) {
                                      case keyCodes.UP_ARROW:
                                        return void focusOption("prev");

                                      case keyCodes.DOWN_ARROW:
                                        return void focusOption("next");

                                      case keyCodes.SPACE:
                                      case keyCodes.ENTER:
                                        var option = $mdUtil.getClosest(ev.target, "md-option");
                                        if (option) {
                                            dropDown.triggerHandler({
                                                type: "click",
                                                target: option
                                            });
                                            ev.preventDefault();
                                        }
                                        checkCloseMenu(ev);
                                        break;

                                      case keyCodes.TAB:
                                      case keyCodes.ESCAPE:
                                        ev.stopPropagation();
                                        ev.preventDefault();
                                        opts.restoreFocus = !0;
                                        $mdUtil.nextTick($mdSelect.hide, !0);
                                        break;

                                      default:
                                        if (31 <= ev.keyCode && ev.keyCode <= 90) {
                                            var optNode = dropDown.controller("mdSelectMenu").optNodeForKeyboardSearch(ev);
                                            opts.focusedNode = optNode || opts.focusedNode;
                                            optNode && optNode.focus();
                                        }
                                    }
                                }
                                function focusOption(direction) {
                                    var newOption, optionsArray = $mdUtil.nodesToArray(opts.optionNodes), index = optionsArray.indexOf(opts.focusedNode);
                                    do {
                                        -1 === index ? index = 0 : "next" === direction && index < optionsArray.length - 1 ? index++ : "prev" === direction && 0 < index && index--;
                                        (newOption = optionsArray[index]).hasAttribute("disabled") && (newOption = void 0);
                                    } while (!newOption && index < optionsArray.length - 1 && 0 < index);
                                    newOption && newOption.focus();
                                    opts.focusedNode = newOption;
                                }
                                function checkCloseMenu(ev) {
                                    if (!(ev && "click" == ev.type && ev.currentTarget != dropDown[0] || function() {
                                        var clickOnScrollbar = !1;
                                        if (ev && 0 < ev.currentTarget.children.length) {
                                            var child = ev.currentTarget.children[0], hasScrollbar = child.scrollHeight > child.clientHeight;
                                            if (hasScrollbar && 0 < child.children.length) {
                                                var relPosX = ev.pageX - ev.currentTarget.getBoundingClientRect().left;
                                                relPosX > child.querySelector("md-option").offsetWidth && (clickOnScrollbar = !0);
                                            }
                                        }
                                        return clickOnScrollbar;
                                    }())) {
                                        var option = $mdUtil.getClosest(ev.target, "md-option");
                                        if (option && option.hasAttribute && !option.hasAttribute("disabled")) {
                                            ev.preventDefault();
                                            ev.stopPropagation();
                                            if (!selectCtrl.isMultiple) {
                                                opts.restoreFocus = !0;
                                                $mdUtil.nextTick(function() {
                                                    $mdSelect.hide(selectCtrl.ngModel.$viewValue);
                                                }, !0);
                                            }
                                        }
                                    }
                                }
                            }();
                            opts.cleanupResizing = function() {
                                var debouncedOnResize = function(scope, target, options) {
                                    return function() {
                                        if (!options.isRemoved) {
                                            var updates = calculateMenuPositions(scope, target, options), container = updates.container, dropDown = updates.dropDown;
                                            container.element.css(animator.toCss(container.styles));
                                            dropDown.element.css(animator.toCss(dropDown.styles));
                                        }
                                    };
                                }(scope, element, opts), window = angular.element($window);
                                window.on("resize", debouncedOnResize);
                                window.on("orientationchange", debouncedOnResize);
                                return function() {
                                    window.off("resize", debouncedOnResize);
                                    window.off("orientationchange", debouncedOnResize);
                                };
                            }();
                            return response;
                        }, opts.hideBackdrop);
                        function positionAndFocusMenu() {
                            return $q(function(resolve) {
                                if (opts.isRemoved) return $q.reject(!1);
                                var info = calculateMenuPositions(scope, element, opts);
                                info.container.element.css(animator.toCss(info.container.styles));
                                info.dropDown.element.css(animator.toCss(info.dropDown.styles));
                                $$rAF(function() {
                                    element.addClass("md-active");
                                    info.dropDown.element.css(animator.toCss({
                                        transform: ""
                                    }));
                                    (focusedNode = opts.focusedNode) && !focusedNode.hasAttribute("disabled") && focusedNode.focus();
                                    var focusedNode;
                                    resolve();
                                });
                            });
                        }
                    },
                    onRemove: function(scope, element, opts) {
                        (opts = opts || {}).cleanupInteraction();
                        opts.cleanupResizing();
                        opts.hideBackdrop();
                        return !0 === opts.$destroy ? cleanElement() : $animateCss(element, {
                            addClass: "md-leave"
                        }).start().then(cleanElement);
                        function cleanElement() {
                            element.removeClass("md-active");
                            element.attr("aria-hidden", "true");
                            element[0].style.display = "none";
                            !function(opts) {
                                var mdSelect = opts.selectCtrl;
                                if (mdSelect) {
                                    var menuController = opts.selectEl.controller("mdSelectMenu");
                                    mdSelect.setLabelText(menuController.selectedLabels());
                                    mdSelect.triggerClose();
                                }
                            }(opts);
                            !opts.$destroy && opts.restoreFocus && opts.target.focus();
                        }
                    },
                    hasBackdrop: !0,
                    disableParentScroll: !0
                };
                function calculateMenuPositions(scope, element, opts) {
                    var obj, centeredNode, containerNode = element[0], targetNode = opts.target[0].children[0], parentNode = $document[0].body, selectNode = opts.selectEl[0], contentNode = opts.contentEl[0], parentRect = parentNode.getBoundingClientRect(), targetRect = targetNode.getBoundingClientRect(), bounds = {
                        left: parentRect.left + 8,
                        top: 8,
                        bottom: parentRect.height - 8,
                        right: parentRect.width - 8 - ($mdUtil.floatingScrollbars() ? 16 : 0)
                    }, spaceAvailable_top = targetRect.top - bounds.top, spaceAvailable_bottom = (targetRect.left, 
                    targetRect.left, targetRect.width, bounds.bottom - (targetRect.top + targetRect.height)), maxWidth = parentRect.width - 16, isScrollable = contentNode.scrollHeight > contentNode.offsetHeight, selectedNode = selectNode.querySelector("md-option[selected]"), optionNodes = selectNode.getElementsByTagName("md-option"), optgroupNodes = selectNode.getElementsByTagName("md-optgroup");
                    centeredNode = (obj = opts.loadingAsync) && angular.isFunction(obj.then) ? contentNode.firstElementChild || contentNode : selectedNode || (optgroupNodes.length ? optgroupNodes[0] : optionNodes.length ? optionNodes[0] : contentNode.firstElementChild || contentNode);
                    contentNode.offsetWidth > maxWidth ? contentNode.style["max-width"] = maxWidth + "px" : contentNode.style.maxWidth = null;
                    0;
                    isScrollable && selectNode.classList.add("md-overflow");
                    var focusedNode = centeredNode;
                    "MD-OPTGROUP" === (focusedNode.tagName || "").toUpperCase() && (centeredNode = focusedNode = optionNodes[0] || contentNode.firstElementChild || contentNode);
                    opts.focusedNode = focusedNode;
                    containerNode.style.display = "block";
                    var node, left, top, transformOrigin, minWidth, selectMenuRect = selectNode.getBoundingClientRect(), centeredRect = (node = centeredNode) ? {
                        left: node.offsetLeft,
                        top: node.offsetTop,
                        width: node.offsetWidth,
                        height: node.offsetHeight
                    } : {
                        left: 0,
                        top: 0,
                        width: 0,
                        height: 0
                    };
                    if (centeredNode) {
                        var centeredStyle = $window.getComputedStyle(centeredNode);
                        centeredRect.paddingLeft = parseInt(centeredStyle.paddingLeft, 10) || 0;
                        centeredRect.paddingRight = parseInt(centeredStyle.paddingRight, 10) || 0;
                    }
                    if (isScrollable) {
                        var scrollBuffer = contentNode.offsetHeight / 2;
                        contentNode.scrollTop = centeredRect.top + centeredRect.height / 2 - scrollBuffer;
                        spaceAvailable_top < scrollBuffer ? contentNode.scrollTop = Math.min(centeredRect.top, contentNode.scrollTop + scrollBuffer - spaceAvailable_top) : spaceAvailable_bottom < scrollBuffer && (contentNode.scrollTop = Math.max(centeredRect.top + centeredRect.height - selectMenuRect.height, contentNode.scrollTop - scrollBuffer + spaceAvailable_bottom));
                    }
                    left = targetRect.left + centeredRect.left - centeredRect.paddingLeft + 2;
                    top = Math.floor(targetRect.top + targetRect.height / 2 - centeredRect.height / 2 - centeredRect.top + contentNode.scrollTop) + 4;
                    transformOrigin = centeredRect.left + targetRect.width / 2 + "px " + (centeredRect.top + centeredRect.height / 2 - contentNode.scrollTop) + "px 0px";
                    minWidth = Math.min(targetRect.width + centeredRect.paddingLeft + centeredRect.paddingRight, maxWidth);
                    var containerRect = containerNode.getBoundingClientRect(), scaleX = Math.round(100 * Math.min(targetRect.width / selectMenuRect.width, 1)) / 100, scaleY = Math.round(100 * Math.min(targetRect.height / selectMenuRect.height, 1)) / 100;
                    return {
                        container: {
                            element: angular.element(containerNode),
                            styles: {
                                left: Math.floor(clamp(bounds.left, left, bounds.right - containerRect.width)),
                                top: Math.floor(clamp(bounds.top, top, bounds.bottom - containerRect.height)),
                                "min-width": minWidth
                            }
                        },
                        dropDown: {
                            element: angular.element(selectNode),
                            styles: {
                                transformOrigin: transformOrigin,
                                transform: opts.alreadyOpen ? "" : $mdUtil.supplant("scale({0},{1})", [ scaleX, scaleY ])
                            }
                        }
                    };
                }
            }
            function clamp(min, n, max) {
                return Math.max(min, Math.min(n, max));
            }
        }
        SelectProvider.$inject = [ "$$interimElementProvider" ];
    }();
    !function() {
        angular.module("material.components.slider", [ "material.core" ]).directive("mdSlider", SliderDirective);
        function SliderDirective($$rAF, $window, $mdAria, $mdUtil, $mdConstant, $mdTheming, $mdGesture, $parse, $log) {
            return {
                scope: {},
                require: "?ngModel",
                template: '<div class="md-slider-wrapper"><div class="md-track-container"><div class="md-track"></div><div class="md-track md-track-fill"></div><div class="md-track-ticks"></div></div><div class="md-thumb-container"><div class="md-thumb"></div><div class="md-focus-thumb"></div><div class="md-focus-ring"></div><div class="md-sign"><span class="md-thumb-text"></span></div><div class="md-disabled-thumb"></div></div></div>',
                compile: function(tElement, tAttrs) {
                    tElement.attr({
                        tabIndex: 0,
                        role: "slider"
                    });
                    $mdAria.expect(tElement, "aria-label");
                    return postLink;
                }
            };
            function postLink(scope, element, attr, ngModelCtrl) {
                $mdTheming(element);
                ngModelCtrl = ngModelCtrl || {
                    $setViewValue: function(val) {
                        this.$viewValue = val;
                        this.$viewChangeListeners.forEach(function(cb) {
                            cb();
                        });
                    },
                    $parsers: [],
                    $formatters: [],
                    $viewChangeListeners: []
                };
                var isDisabledGetter = angular.noop;
                null != attr.disabled ? isDisabledGetter = function() {
                    return !0;
                } : attr.ngDisabled && (isDisabledGetter = angular.bind(null, $parse(attr.ngDisabled), scope.$parent));
                var thumb = angular.element(element[0].querySelector(".md-thumb")), thumbText = angular.element(element[0].querySelector(".md-thumb-text")), thumbContainer = thumb.parent(), trackContainer = angular.element(element[0].querySelector(".md-track-container")), activeTrack = angular.element(element[0].querySelector(".md-track-fill")), tickContainer = angular.element(element[0].querySelector(".md-track-ticks")), throttledRefreshDimensions = $mdUtil.throttle(refreshSliderDimensions, 5e3);
                angular.isDefined(attr.min) ? attr.$observe("min", updateMin) : updateMin(0);
                angular.isDefined(attr.max) ? attr.$observe("max", updateMax) : updateMax(100);
                angular.isDefined(attr.step) ? attr.$observe("step", updateStep) : updateStep(1);
                var stopDisabledWatch = angular.noop;
                attr.ngDisabled && (stopDisabledWatch = scope.$parent.$watch(attr.ngDisabled, function(isDisabled) {
                    element.attr("aria-disabled", !!isDisabled);
                }));
                $mdGesture.register(element, "drag");
                element.on("keydown", function(ev) {
                    if (element[0].hasAttribute("disabled")) return;
                    var changeAmount;
                    ev.keyCode === $mdConstant.KEY_CODE.LEFT_ARROW ? changeAmount = -step : ev.keyCode === $mdConstant.KEY_CODE.RIGHT_ARROW && (changeAmount = step);
                    if (changeAmount) {
                        (ev.metaKey || ev.ctrlKey || ev.altKey) && (changeAmount *= 4);
                        ev.preventDefault();
                        ev.stopPropagation();
                        scope.$evalAsync(function() {
                            setModelValue(ngModelCtrl.$viewValue + changeAmount);
                        });
                    }
                }).on("$md.pressdown", function(ev) {
                    if (isDisabledGetter()) return;
                    element.addClass("md-active");
                    element[0].focus();
                    refreshSliderDimensions();
                    var closestVal = minMaxValidator(stepValidator(percentToValue(positionToPercent(ev.pointer.x))));
                    scope.$apply(function() {
                        setModelValue(closestVal);
                        setSliderPercent((closestVal - min) / (max - min));
                    });
                }).on("$md.pressup", function(ev) {
                    if (isDisabledGetter()) return;
                    element.removeClass("md-dragging md-active");
                    var closestVal = minMaxValidator(stepValidator(percentToValue(positionToPercent(ev.pointer.x))));
                    scope.$apply(function() {
                        setModelValue(closestVal);
                        ngModelRender();
                    });
                }).on("$md.dragstart", function(ev) {
                    if (isDisabledGetter()) return;
                    isDragging = !0;
                    ev.stopPropagation();
                    element.addClass("md-dragging");
                    setSliderFromEvent(ev);
                }).on("$md.drag", function(ev) {
                    if (!isDragging) return;
                    ev.stopPropagation();
                    setSliderFromEvent(ev);
                }).on("$md.dragend", function(ev) {
                    if (!isDragging) return;
                    ev.stopPropagation();
                    isDragging = !1;
                });
                function updateAll() {
                    refreshSliderDimensions();
                    ngModelRender();
                    redrawTicks();
                }
                setTimeout(updateAll, 0);
                var min, max, step, tickCanvas, tickCtx, debouncedUpdateAll = $$rAF.throttle(updateAll);
                angular.element($window).on("resize", debouncedUpdateAll);
                scope.$on("$destroy", function() {
                    angular.element($window).off("resize", debouncedUpdateAll);
                    stopDisabledWatch();
                });
                ngModelCtrl.$render = ngModelRender;
                ngModelCtrl.$viewChangeListeners.push(ngModelRender);
                ngModelCtrl.$formatters.push(minMaxValidator);
                ngModelCtrl.$formatters.push(stepValidator);
                function updateMin(value) {
                    min = parseFloat(value);
                    element.attr("aria-valuemin", value);
                    updateAll();
                }
                function updateMax(value) {
                    max = parseFloat(value);
                    element.attr("aria-valuemax", value);
                    updateAll();
                }
                function updateStep(value) {
                    step = parseFloat(value);
                    redrawTicks();
                }
                function redrawTicks() {
                    if (angular.isDefined(attr.mdDiscrete) && !angular.isUndefined(step)) {
                        if (step <= 0) {
                            var msg = "Slider step value must be greater than zero when in discrete mode";
                            $log.error(msg);
                            throw new Error(msg);
                        }
                        var numSteps = Math.floor((max - min) / step);
                        if (!tickCanvas) {
                            tickCanvas = angular.element('<canvas style="position:absolute;">');
                            tickContainer.append(tickCanvas);
                            var trackTicksStyle = $window.getComputedStyle(tickContainer[0]);
                            (tickCtx = tickCanvas[0].getContext("2d")).fillStyle = trackTicksStyle.backgroundColor || "black";
                        }
                        var distance, dimensions = function() {
                            throttledRefreshDimensions();
                            return sliderDimensions;
                        }();
                        tickCanvas[0].width = dimensions.width;
                        tickCanvas[0].height = dimensions.height;
                        for (var i = 0; i <= numSteps; i++) {
                            distance = Math.floor(dimensions.width * (i / numSteps));
                            tickCtx.fillRect(distance - 1, 0, 2, dimensions.height);
                        }
                    }
                }
                var sliderDimensions = {};
                refreshSliderDimensions();
                function refreshSliderDimensions() {
                    sliderDimensions = trackContainer[0].getBoundingClientRect();
                }
                function setModelValue(value) {
                    ngModelCtrl.$setViewValue(minMaxValidator(stepValidator(value)));
                }
                function ngModelRender() {
                    isNaN(ngModelCtrl.$viewValue) && (ngModelCtrl.$viewValue = ngModelCtrl.$modelValue);
                    var percent = (ngModelCtrl.$viewValue - min) / (max - min);
                    scope.modelValue = ngModelCtrl.$viewValue;
                    element.attr("aria-valuenow", ngModelCtrl.$viewValue);
                    setSliderPercent(percent);
                    thumbText.text(ngModelCtrl.$viewValue);
                }
                function minMaxValidator(value) {
                    if (angular.isNumber(value)) return Math.max(min, Math.min(max, value));
                }
                function stepValidator(value) {
                    if (angular.isNumber(value)) {
                        var formattedValue = Math.round((value - min) / step) * step + min;
                        return Math.round(1e3 * formattedValue) / 1e3;
                    }
                }
                function setSliderPercent(percent) {
                    var percentStr = 100 * percent + "%";
                    activeTrack.css("width", percentStr);
                    thumbContainer.css("left", percentStr);
                    element.toggleClass("md-min", 0 === percent);
                    element.toggleClass("md-max", 1 === percent);
                }
                var isDragging = !1, isDiscrete = angular.isDefined(attr.mdDiscrete);
                function setSliderFromEvent(ev) {
                    isDiscrete ? function(x) {
                        var closestVal = minMaxValidator(stepValidator(percentToValue(positionToPercent(x))));
                        setSliderPercent(positionToPercent(x));
                        thumbText.text(closestVal);
                    }(ev.pointer.x) : (x = ev.pointer.x, scope.$evalAsync(function() {
                        setModelValue(percentToValue(positionToPercent(x)));
                    }));
                    var x;
                }
                function positionToPercent(x) {
                    return Math.max(0, Math.min(1, (x - sliderDimensions.left) / sliderDimensions.width));
                }
                function percentToValue(percent) {
                    return min + percent * (max - min);
                }
            }
        }
        SliderDirective.$inject = [ "$$rAF", "$window", "$mdAria", "$mdUtil", "$mdConstant", "$mdTheming", "$mdGesture", "$parse", "$log" ];
    }();
    !function() {
        angular.module("material.components.sidenav", [ "material.core", "material.components.backdrop" ]).factory("$mdSidenav", SidenavService).directive("mdSidenav", SidenavDirective).directive("mdSidenavFocus", function() {
            return {
                restrict: "A",
                require: "^mdSidenav",
                link: function(scope, element, attr, sidenavCtrl) {}
            };
        }).controller("$mdSidenavController", SidenavController);
        function SidenavService($mdComponentRegistry, $q) {
            return function(handle) {
                var errorMsg = "SideNav '" + handle + "' is not available!", instance = $mdComponentRegistry.get(handle);
                instance || $mdComponentRegistry.notFoundError(handle);
                return {
                    isOpen: function() {
                        return instance && instance.isOpen();
                    },
                    isLockedOpen: function() {
                        return instance && instance.isLockedOpen();
                    },
                    toggle: function() {
                        return instance ? instance.toggle() : $q.reject(errorMsg);
                    },
                    open: function() {
                        return instance ? instance.open() : $q.reject(errorMsg);
                    },
                    close: function() {
                        return instance ? instance.close() : $q.reject(errorMsg);
                    },
                    then: function(callbackFn) {
                        return (instance ? $q.when(instance) : $mdComponentRegistry.when(handle).then(function(it) {
                            return instance = it;
                        })).then(callbackFn || angular.noop);
                    }
                };
            };
        }
        SidenavService.$inject = [ "$mdComponentRegistry", "$q" ];
        function SidenavDirective($mdMedia, $mdUtil, $mdConstant, $mdTheming, $animate, $compile, $parse, $log, $q, $document) {
            return {
                restrict: "E",
                scope: {
                    isOpen: "=?mdIsOpen"
                },
                controller: "$mdSidenavController",
                compile: function(element) {
                    element.addClass("md-closed");
                    element.attr("tabIndex", "-1");
                    return postLink;
                }
            };
            function postLink(scope, element, attr, sidenavCtrl) {
                var lastParentOverFlow, triggeringElement = null, promise = $q.when(!0), isLockedOpenParsed = $parse(attr.mdIsLockedOpen), backdrop = $mdUtil.createBackdrop(scope, "md-sidenav-backdrop md-opaque ng-enter");
                $mdTheming.inherit(backdrop, element);
                element.on("$destroy", function() {
                    backdrop.remove();
                    sidenavCtrl.destroy();
                });
                scope.$on("$destroy", function() {
                    backdrop.remove();
                });
                scope.$watch(function() {
                    return isLockedOpenParsed(scope.$parent, {
                        $media: function(arg) {
                            $log.warn("$media is deprecated for is-locked-open. Use $mdMedia instead.");
                            return $mdMedia(arg);
                        },
                        $mdMedia: $mdMedia
                    });
                }, function(isLocked, oldValue) {
                    (scope.isLockedOpen = isLocked) === oldValue ? element.toggleClass("md-locked-open", !!isLocked) : $animate[isLocked ? "addClass" : "removeClass"](element, "md-locked-open");
                    backdrop.toggleClass("md-locked-open", !!isLocked);
                });
                scope.$watch("isOpen", function(isOpen) {
                    var focusEl = $mdUtil.findFocusTarget(element) || $mdUtil.findFocusTarget(element, "[md-sidenav-focus]") || element, parent = element.parent();
                    parent[isOpen ? "on" : "off"]("keydown", onKeyDown);
                    backdrop[isOpen ? "on" : "off"]("click", close);
                    isOpen && (triggeringElement = $document[0].activeElement);
                    !function(disabled) {
                        var parent = element.parent();
                        if (disabled && !lastParentOverFlow) {
                            lastParentOverFlow = parent.css("overflow");
                            parent.css("overflow", "hidden");
                        } else if (angular.isDefined(lastParentOverFlow)) {
                            parent.css("overflow", lastParentOverFlow);
                            lastParentOverFlow = void 0;
                        }
                    }(isOpen);
                    return promise = $q.all([ isOpen ? $animate.enter(backdrop, parent) : $animate.leave(backdrop), $animate[isOpen ? "removeClass" : "addClass"](element, "md-closed") ]).then(function() {
                        scope.isOpen && focusEl && focusEl.focus();
                    });
                });
                sidenavCtrl.$toggleOpen = function(isOpen) {
                    return scope.isOpen == isOpen ? $q.when(!0) : $q(function(resolve) {
                        scope.isOpen = isOpen;
                        $mdUtil.nextTick(function() {
                            promise.then(function(result) {
                                if (!scope.isOpen) {
                                    triggeringElement && triggeringElement.focus();
                                    triggeringElement = null;
                                }
                                resolve(result);
                            });
                        });
                    });
                };
                function onKeyDown(ev) {
                    return ev.keyCode === $mdConstant.KEY_CODE.ESCAPE ? close(ev) : $q.when(!0);
                }
                function close(ev) {
                    ev.preventDefault();
                    return sidenavCtrl.close();
                }
            }
        }
        SidenavDirective.$inject = [ "$mdMedia", "$mdUtil", "$mdConstant", "$mdTheming", "$animate", "$compile", "$parse", "$log", "$q", "$document" ];
        function SidenavController($scope, $element, $attrs, $mdComponentRegistry, $q) {
            var self = this;
            self.isOpen = function() {
                return !!$scope.isOpen;
            };
            self.isLockedOpen = function() {
                return !!$scope.isLockedOpen;
            };
            self.open = function() {
                return self.$toggleOpen(!0);
            };
            self.close = function() {
                return self.$toggleOpen(!1);
            };
            self.toggle = function() {
                return self.$toggleOpen(!$scope.isOpen);
            };
            self.$toggleOpen = function(value) {
                return $q.when($scope.isOpen = value);
            };
            self.destroy = $mdComponentRegistry.register(self, $attrs.mdComponentId);
        }
        SidenavController.$inject = [ "$scope", "$element", "$attrs", "$mdComponentRegistry", "$q" ];
    }();
    !function() {
        angular.module("material.components.sticky", [ "material.core", "material.components.content" ]).factory("$mdSticky", MdSticky);
        function MdSticky($document, $mdConstant, $$rAF, $mdUtil) {
            var browserStickySupport = function($el) {
                var stickyProp, testEl = angular.element("<div>");
                $document[0].body.appendChild(testEl[0]);
                for (var stickyProps = [ "sticky", "-webkit-sticky" ], i = 0; i < stickyProps.length; ++i) {
                    testEl.css({
                        position: stickyProps[i],
                        top: 0,
                        "z-index": 2
                    });
                    if (testEl.css("position") == stickyProps[i]) {
                        stickyProp = stickyProps[i];
                        break;
                    }
                }
                testEl.remove();
                return stickyProp;
            }();
            return function(scope, element, stickyClone) {
                var contentCtrl = element.controller("mdContent");
                if (contentCtrl) if (browserStickySupport) element.css({
                    position: browserStickySupport,
                    top: 0,
                    "z-index": 2
                }); else {
                    var $$sticky = contentCtrl.$element.data("$$sticky");
                    if (!$$sticky) {
                        $$sticky = function(contentCtrl) {
                            var self, contentEl = contentCtrl.$element, debouncedRefreshElements = $$rAF.throttle(refreshElements);
                            !function(element) {
                                var isScrolling, lastScrollTime, SCROLL_END_DELAY = 200;
                                element.on("scroll touchmove", function() {
                                    if (!isScrolling) {
                                        isScrolling = !0;
                                        $$rAF.throttle(loopScrollEvent);
                                        element.triggerHandler("$scrollstart");
                                    }
                                    element.triggerHandler("$scroll");
                                    lastScrollTime = +$mdUtil.now();
                                });
                                function loopScrollEvent() {
                                    if (+$mdUtil.now() - lastScrollTime > SCROLL_END_DELAY) {
                                        isScrolling = !1;
                                        element.triggerHandler("$scrollend");
                                    } else {
                                        element.triggerHandler("$scroll");
                                        $$rAF.throttle(loopScrollEvent);
                                    }
                                }
                            }(contentEl);
                            contentEl.on("$scrollstart", debouncedRefreshElements);
                            contentEl.on("$scroll", function onScroll() {
                                var scrollTop = contentEl.prop("scrollTop");
                                var isScrollingDown = (onScroll.prevScrollTop || 0) < scrollTop;
                                onScroll.prevScrollTop = scrollTop;
                                if (0 === scrollTop) {
                                    setCurrentItem(null);
                                    return;
                                }
                                if (isScrollingDown) {
                                    if (self.next && self.next.top <= scrollTop) {
                                        setCurrentItem(self.next);
                                        return;
                                    }
                                    if (self.current && self.next && self.next.top - scrollTop <= self.next.height) {
                                        translate(self.current, scrollTop + (self.next.top - self.next.height - scrollTop));
                                        return;
                                    }
                                }
                                if (!isScrollingDown) {
                                    if (self.current && self.prev && scrollTop < self.current.top) {
                                        setCurrentItem(self.prev);
                                        return;
                                    }
                                    if (self.next && self.current && scrollTop >= self.next.top - self.current.height) {
                                        translate(self.current, scrollTop + (self.next.top - scrollTop - self.current.height));
                                        return;
                                    }
                                }
                                self.current && translate(self.current, scrollTop);
                            });
                            return self = {
                                prev: null,
                                current: null,
                                next: null,
                                items: [],
                                add: function(element, stickyClone) {
                                    stickyClone.addClass("md-sticky-clone");
                                    var item = {
                                        element: element,
                                        clone: stickyClone
                                    };
                                    self.items.push(item);
                                    $mdUtil.nextTick(function() {
                                        contentEl.prepend(item.clone);
                                    });
                                    debouncedRefreshElements();
                                    return function() {
                                        self.items.forEach(function(item, index) {
                                            if (item.element[0] === element[0]) {
                                                self.items.splice(index, 1);
                                                item.clone.remove();
                                            }
                                        });
                                        debouncedRefreshElements();
                                    };
                                },
                                refreshElements: refreshElements
                            };
                            function refreshElements() {
                                self.items.forEach(refreshPosition);
                                self.items = self.items.sort(function(a, b) {
                                    return a.top < b.top ? -1 : 1;
                                });
                                for (var item, currentScrollTop = contentEl.prop("scrollTop"), i = self.items.length - 1; 0 <= i; i--) if (currentScrollTop > self.items[i].top) {
                                    item = self.items[i];
                                    break;
                                }
                                setCurrentItem(item);
                            }
                            function refreshPosition(item) {
                                var current = item.element[0];
                                item.top = 0;
                                item.left = 0;
                                for (;current && current !== contentEl[0]; ) {
                                    item.top += current.offsetTop;
                                    item.left += current.offsetLeft;
                                    current = current.offsetParent;
                                }
                                item.height = item.element.prop("offsetHeight");
                                item.clone.css("margin-left", item.left + "px");
                                $mdUtil.floatingScrollbars() && item.clone.css("margin-right", "0");
                            }
                            function setCurrentItem(item) {
                                if (self.current !== item) {
                                    if (self.current) {
                                        translate(self.current, null);
                                        setStickyState(self.current, null);
                                    }
                                    item && setStickyState(item, "active");
                                    self.current = item;
                                    var index = self.items.indexOf(item);
                                    self.next = self.items[index + 1];
                                    self.prev = self.items[index - 1];
                                    setStickyState(self.next, "next");
                                    setStickyState(self.prev, "prev");
                                }
                            }
                            function setStickyState(item, state) {
                                if (item && item.state !== state) {
                                    if (item.state) {
                                        item.clone.attr("sticky-prev-state", item.state);
                                        item.element.attr("sticky-prev-state", item.state);
                                    }
                                    item.clone.attr("sticky-state", state);
                                    item.element.attr("sticky-state", state);
                                    item.state = state;
                                }
                            }
                            function translate(item, amount) {
                                if (item) if (null == amount) {
                                    if (item.translateY) {
                                        item.translateY = null;
                                        item.clone.css($mdConstant.CSS.TRANSFORM, "");
                                    }
                                } else {
                                    item.translateY = amount;
                                    item.clone.css($mdConstant.CSS.TRANSFORM, "translate3d(" + item.left + "px," + amount + "px,0)");
                                }
                            }
                        }(contentCtrl);
                        contentCtrl.$element.data("$$sticky", $$sticky);
                    }
                    var deregister = $$sticky.add(element, stickyClone || element.clone());
                    scope.$on("$destroy", deregister);
                }
            };
        }
        MdSticky.$inject = [ "$document", "$mdConstant", "$$rAF", "$mdUtil" ];
    }();
    !function() {
        angular.module("material.components.subheader", [ "material.core", "material.components.sticky" ]).directive("mdSubheader", MdSubheaderDirective);
        function MdSubheaderDirective($mdSticky, $compile, $mdTheming, $mdUtil) {
            return {
                restrict: "E",
                replace: !0,
                transclude: !0,
                template: '<div class="md-subheader">  <div class="md-subheader-inner">    <span class="md-subheader-content"></span>  </div></div>',
                link: function(scope, element, attr, controllers, transclude) {
                    $mdTheming(element);
                    var outerHTML = element[0].outerHTML;
                    function getContent(el) {
                        return angular.element(el[0].querySelector(".md-subheader-content"));
                    }
                    transclude(scope, function(clone) {
                        getContent(element).append(clone);
                    });
                    element.hasClass("md-no-sticky") || transclude(scope, function(clone) {
                        var stickyClone = $compile('<div class="md-subheader-wrapper">' + outerHTML + "</div>")(scope);
                        $mdSticky(scope, element, stickyClone);
                        $mdUtil.nextTick(function() {
                            getContent(stickyClone).append(clone);
                        });
                    });
                }
            };
        }
        MdSubheaderDirective.$inject = [ "$mdSticky", "$compile", "$mdTheming", "$mdUtil" ];
    }();
    !function() {
        angular.module("material.components.switch", [ "material.core", "material.components.checkbox" ]).directive("mdSwitch", MdSwitch);
        function MdSwitch(mdCheckboxDirective, $mdUtil, $mdConstant, $parse, $$rAF, $mdGesture) {
            var checkboxDirective = mdCheckboxDirective[0];
            return {
                restrict: "E",
                priority: 210,
                transclude: !0,
                template: '<div class="md-container"><div class="md-bar"></div><div class="md-thumb-container"><div class="md-thumb" md-ink-ripple md-ink-ripple-checkbox></div></div></div><div ng-transclude class="md-label"></div>',
                require: "?ngModel",
                compile: function(element, attr) {
                    var checkboxLink = checkboxDirective.compile(element, attr);
                    element.addClass("md-dragging");
                    return function(scope, element, attr, ngModel) {
                        ngModel = ngModel || $mdUtil.fakeNgModel();
                        var disabledGetter = null;
                        null != attr.disabled ? disabledGetter = function() {
                            return !0;
                        } : attr.ngDisabled && (disabledGetter = $parse(attr.ngDisabled));
                        var drag, thumbContainer = angular.element(element[0].querySelector(".md-thumb-container")), switchContainer = angular.element(element[0].querySelector(".md-container"));
                        $$rAF(function() {
                            element.removeClass("md-dragging");
                        });
                        checkboxLink(scope, element, attr, ngModel);
                        disabledGetter && scope.$watch(disabledGetter, function(isDisabled) {
                            element.attr("tabindex", isDisabled ? -1 : 0);
                        });
                        $mdGesture.register(switchContainer, "drag");
                        switchContainer.on("$md.dragstart", function(ev) {
                            if (disabledGetter && disabledGetter(scope)) return;
                            ev.stopPropagation();
                            element.addClass("md-dragging");
                            drag = {
                                width: thumbContainer.prop("offsetWidth")
                            };
                            element.removeClass("transition");
                        }).on("$md.drag", function(ev) {
                            if (!drag) return;
                            ev.stopPropagation();
                            ev.srcEvent && ev.srcEvent.preventDefault();
                            var percent = ev.pointer.distanceX / drag.width, translate = ngModel.$viewValue ? 1 + percent : percent;
                            translate = Math.max(0, Math.min(1, translate));
                            thumbContainer.css($mdConstant.CSS.TRANSFORM, "translate3d(" + 100 * translate + "%,0,0)");
                            drag.translate = translate;
                        }).on("$md.dragend", function(ev) {
                            if (!drag) return;
                            ev.stopPropagation();
                            element.removeClass("md-dragging");
                            thumbContainer.css($mdConstant.CSS.TRANSFORM, "");
                            (ngModel.$viewValue ? .5 < drag.translate : drag.translate < .5) && (newValue = !ngModel.$viewValue, 
                            scope.$apply(function() {
                                ngModel.$setViewValue(newValue);
                                ngModel.$render();
                            }));
                            var newValue;
                            drag = null;
                        });
                    };
                }
            };
        }
        MdSwitch.$inject = [ "mdCheckboxDirective", "$mdUtil", "$mdConstant", "$parse", "$$rAF", "$mdGesture" ];
    }();
    !function() {
        angular.module("material.components.swipe", [ "material.core" ]).directive("mdSwipeLeft", getDirective("SwipeLeft")).directive("mdSwipeRight", getDirective("SwipeRight")).directive("mdSwipeUp", getDirective("SwipeUp")).directive("mdSwipeDown", getDirective("SwipeDown"));
        function getDirective(name) {
            var directiveName = "md" + name, eventName = "$md." + name.toLowerCase();
            DirectiveFactory.$inject = [ "$parse" ];
            return DirectiveFactory;
            function DirectiveFactory($parse) {
                return {
                    restrict: "A",
                    link: function(scope, element, attr) {
                        var fn = $parse(attr[directiveName]);
                        element.on(eventName, function(ev) {
                            scope.$apply(function() {
                                fn(scope, {
                                    $event: ev
                                });
                            });
                        });
                    }
                };
            }
        }
    }();
    angular.module("material.components.tabs", [ "material.core", "material.components.icon" ]);
    !function() {
        angular.module("material.components.toast", [ "material.core", "material.components.button" ]).directive("mdToast", MdToastDirective).provider("$mdToast", MdToastProvider);
        function MdToastDirective($mdToast) {
            return {
                restrict: "E",
                link: function(scope, element, attr) {
                    scope.$on("$destroy", function() {
                        $mdToast.destroy();
                    });
                }
            };
        }
        MdToastDirective.$inject = [ "$mdToast" ];
        function MdToastProvider($$interimElementProvider) {
            var activeToastContent, $mdToast = $$interimElementProvider("$mdToast").setDefaults({
                methods: [ "position", "hideDelay", "capsule", "parent" ],
                options: toastDefaultOptions
            }).addPreset("simple", {
                argOption: "textContent",
                methods: [ "textContent", "content", "action", "highlightAction", "theme", "parent" ],
                options: [ "$mdToast", "$mdTheming", function($mdToast, $mdTheming) {
                    return {
                        template: '<md-toast md-theme="{{ toast.theme }}" ng-class="{\'md-capsule\': toast.capsule}">  <div class="md-toast-content">    <span flex role="alert" aria-relevant="all" aria-atomic="true">      {{ toast.content }}    </span>    <md-button class="md-action" ng-if="toast.action" ng-click="toast.resolve()" ng-class="{\'md-highlight\': toast.highlightAction}">      {{ toast.action }}    </md-button>  </div></md-toast>',
                        controller: [ "$scope", function($scope) {
                            var self = this;
                            $scope.$watch(function() {
                                return activeToastContent;
                            }, function() {
                                self.content = activeToastContent;
                            });
                            this.resolve = function() {
                                $mdToast.hide("ok");
                            };
                        } ],
                        theme: $mdTheming.defaultTheme(),
                        controllerAs: "toast",
                        bindToController: !0
                    };
                } ]
            }).addMethod("updateTextContent", updateTextContent).addMethod("updateContent", updateTextContent);
            function updateTextContent(newContent) {
                activeToastContent = newContent;
            }
            toastDefaultOptions.$inject = [ "$animate", "$mdToast", "$mdUtil", "$mdMedia" ];
            return $mdToast;
            function toastDefaultOptions($animate, $mdToast, $mdUtil, $mdMedia) {
                var SWIPE_EVENTS = "$md.swipeleft $md.swiperight $md.swipeup $md.swipedown";
                return {
                    onShow: function(scope, element, options) {
                        activeToastContent = options.textContent || options.content;
                        var isSmScreen = !$mdMedia("gt-sm");
                        element = $mdUtil.extractElementByName(element, "md-toast", !0);
                        options.onSwipe = function(ev, gesture) {
                            var swipe = ev.type.replace("$md.", ""), direction = swipe.replace("swipe", "");
                            if (("down" !== direction || -1 == options.position.indexOf("top") || isSmScreen) && ("up" !== direction || -1 == options.position.indexOf("bottom") && !isSmScreen) && ("left" !== direction && "right" !== direction || !isSmScreen)) {
                                element.addClass("md-" + swipe);
                                $mdUtil.nextTick($mdToast.cancel);
                            }
                        };
                        options.openClass = (position = options.position, $mdMedia("gt-sm") ? "md-toast-open-" + (-1 < position.indexOf("top") ? "top" : "bottom") : "md-toast-open-bottom");
                        var position;
                        options.parent.addClass(options.openClass);
                        $mdUtil.hasComputedStyle(options.parent, "position", "static") && options.parent.css("position", "relative");
                        element.on(SWIPE_EVENTS, options.onSwipe);
                        element.addClass(isSmScreen ? "md-bottom" : options.position.split(" ").map(function(pos) {
                            return "md-" + pos;
                        }).join(" "));
                        options.parent && options.parent.addClass("md-toast-animating");
                        return $animate.enter(element, options.parent).then(function() {
                            options.parent && options.parent.removeClass("md-toast-animating");
                        });
                    },
                    onRemove: function(scope, element, options) {
                        element.off(SWIPE_EVENTS, options.onSwipe);
                        options.parent && options.parent.addClass("md-toast-animating");
                        options.openClass && options.parent.removeClass(options.openClass);
                        return (1 == options.$destroy ? element.remove() : $animate.leave(element)).then(function() {
                            options.parent && options.parent.removeClass("md-toast-animating");
                            $mdUtil.hasComputedStyle(options.parent, "position", "static") && options.parent.css("position", "");
                        });
                    },
                    position: "bottom left",
                    themable: !0,
                    hideDelay: 3e3,
                    autoWrap: !0,
                    transformTemplate: function(template, options) {
                        var shouldAddWrapper = options.autoWrap && template && !/md-toast-content/g.test(template);
                        if (shouldAddWrapper) {
                            var parsedTemplate = angular.element(template), wrappedContent = '<div class="md-toast-content">' + parsedTemplate.html() + "</div>";
                            parsedTemplate.empty().append(wrappedContent);
                            return parsedTemplate[0].outerHTML;
                        }
                        return shouldAddWrapper ? '<div class="md-toast-content">' + template + "</div>" : template || "";
                    }
                };
            }
        }
        MdToastProvider.$inject = [ "$$interimElementProvider" ];
    }();
    !function() {
        angular.module("material.components.toolbar", [ "material.core", "material.components.content" ]).directive("mdToolbar", mdToolbarDirective);
        function mdToolbarDirective($$rAF, $mdConstant, $mdUtil, $mdTheming, $animate) {
            var translateY = angular.bind(null, $mdUtil.supplant, "translate3d(0,{0}px,0)");
            return {
                template: "",
                restrict: "E",
                link: function(scope, element, attr) {
                    $mdTheming(element);
                    angular.isDefined(attr.mdScrollShrink) && function() {
                        var toolbarHeight, contentElement, disableScrollShrink = angular.noop, y = 0, prevScrollTop = 0, shrinkSpeedFactor = attr.mdShrinkSpeedFactor || .5, debouncedContentScroll = $$rAF.throttle(onContentScroll), debouncedUpdateHeight = $mdUtil.debounce(updateToolbarHeight, 5e3);
                        scope.$on("$mdContentLoaded", onMdContentLoad);
                        attr.$observe("mdScrollShrink", function(shrinkWithScroll) {
                            var closestContent = element.parent().find("md-content");
                            !contentElement && closestContent.length && onMdContentLoad(null, closestContent);
                            !1 === (shrinkWithScroll = scope.$eval(shrinkWithScroll)) ? disableScrollShrink() : disableScrollShrink = enableScrollShrink();
                        });
                        attr.ngShow && scope.$watch(attr.ngShow, updateToolbarHeight);
                        attr.ngHide && scope.$watch(attr.ngHide, updateToolbarHeight);
                        scope.$on("$destroy", disableScrollShrink);
                        function onMdContentLoad($event, newContentEl) {
                            if (newContentEl && element.parent()[0] === newContentEl.parent()[0]) {
                                contentElement && contentElement.off("scroll", debouncedContentScroll);
                                contentElement = newContentEl;
                                disableScrollShrink = enableScrollShrink();
                            }
                        }
                        function onContentScroll(e) {
                            var scrollTop = e ? e.target.scrollTop : prevScrollTop;
                            debouncedUpdateHeight();
                            y = Math.min(toolbarHeight / shrinkSpeedFactor, Math.max(0, y + scrollTop - prevScrollTop));
                            element.css($mdConstant.CSS.TRANSFORM, translateY([ -y * shrinkSpeedFactor ]));
                            contentElement.css($mdConstant.CSS.TRANSFORM, translateY([ (toolbarHeight - y) * shrinkSpeedFactor ]));
                            prevScrollTop = scrollTop;
                            $mdUtil.nextTick(function() {
                                var hasWhiteFrame = element.hasClass("md-whiteframe-z1");
                                hasWhiteFrame && !y ? $animate.removeClass(element, "md-whiteframe-z1") : !hasWhiteFrame && y && $animate.addClass(element, "md-whiteframe-z1");
                            });
                        }
                        function enableScrollShrink() {
                            if (!contentElement) return angular.noop;
                            contentElement.on("scroll", debouncedContentScroll);
                            contentElement.attr("scroll-shrink", "true");
                            $$rAF(updateToolbarHeight);
                            return function() {
                                contentElement.off("scroll", debouncedContentScroll);
                                contentElement.attr("scroll-shrink", "false");
                                $$rAF(updateToolbarHeight);
                            };
                        }
                        function updateToolbarHeight() {
                            var margin = -(toolbarHeight = element.prop("offsetHeight")) * shrinkSpeedFactor + "px";
                            contentElement.css({
                                "margin-top": margin,
                                "margin-bottom": margin
                            });
                            onContentScroll();
                        }
                    }();
                }
            };
        }
        mdToolbarDirective.$inject = [ "$$rAF", "$mdConstant", "$mdUtil", "$mdTheming", "$animate" ];
    }();
    !function() {
        angular.module("material.components.virtualRepeat", [ "material.core", "material.components.showHide" ]).directive("mdVirtualRepeatContainer", function() {
            return {
                controller: VirtualRepeatContainerController,
                template: virtualRepeatContainerTemplate,
                compile: function($element, $attrs) {
                    $element.addClass("md-virtual-repeat-container").addClass($attrs.hasOwnProperty("mdOrientHorizontal") ? "md-orient-horizontal" : "md-orient-vertical");
                }
            };
        }).directive("mdVirtualRepeat", VirtualRepeatDirective);
        function virtualRepeatContainerTemplate($element) {
            return '<div class="md-virtual-repeat-scroller"><div class="md-virtual-repeat-sizer"></div><div class="md-virtual-repeat-offsetter">' + $element[0].innerHTML + "</div></div>";
        }
        function VirtualRepeatContainerController($$rAF, $mdUtil, $parse, $rootScope, $window, $scope, $element, $attrs) {
            this.$rootScope = $rootScope;
            this.$scope = $scope;
            this.$element = $element;
            this.$attrs = $attrs;
            this.size = 0;
            this.scrollSize = 0;
            this.scrollOffset = 0;
            this.horizontal = this.$attrs.hasOwnProperty("mdOrientHorizontal");
            this.repeater = null;
            this.autoShrink = this.$attrs.hasOwnProperty("mdAutoShrink");
            this.autoShrinkMin = parseInt(this.$attrs.mdAutoShrinkMin, 10) || 0;
            this.originalSize = null;
            this.offsetSize = parseInt(this.$attrs.mdOffsetSize, 10) || 0;
            if (this.$attrs.mdTopIndex) {
                this.bindTopIndex = $parse(this.$attrs.mdTopIndex);
                this.topIndex = this.bindTopIndex(this.$scope);
                if (!angular.isDefined(this.topIndex)) {
                    this.topIndex = 0;
                    this.bindTopIndex.assign(this.$scope, 0);
                }
                this.$scope.$watch(this.bindTopIndex, angular.bind(this, function(newIndex) {
                    newIndex !== this.topIndex && this.scrollToIndex(newIndex);
                }));
            } else this.topIndex = 0;
            this.scroller = $element[0].getElementsByClassName("md-virtual-repeat-scroller")[0];
            this.sizer = this.scroller.getElementsByClassName("md-virtual-repeat-sizer")[0];
            this.offsetter = this.scroller.getElementsByClassName("md-virtual-repeat-offsetter")[0];
            var boundUpdateSize = angular.bind(this, this.updateSize);
            $$rAF(angular.bind(this, function() {
                boundUpdateSize();
                var debouncedUpdateSize = $mdUtil.debounce(boundUpdateSize, 10, null, !1), jWindow = angular.element($window);
                this.size || debouncedUpdateSize();
                jWindow.on("resize", debouncedUpdateSize);
                $scope.$on("$destroy", function() {
                    jWindow.off("resize", debouncedUpdateSize);
                });
                $scope.$emit("$md-resize-enable");
                $scope.$on("$md-resize", boundUpdateSize);
            }));
        }
        VirtualRepeatContainerController.$inject = [ "$$rAF", "$mdUtil", "$parse", "$rootScope", "$window", "$scope", "$element", "$attrs" ];
        VirtualRepeatContainerController.prototype.register = function(repeaterCtrl) {
            this.repeater = repeaterCtrl;
            angular.element(this.scroller).on("scroll wheel touchmove touchend", angular.bind(this, this.handleScroll_));
        };
        VirtualRepeatContainerController.prototype.isHorizontal = function() {
            return this.horizontal;
        };
        VirtualRepeatContainerController.prototype.getSize = function() {
            return this.size;
        };
        VirtualRepeatContainerController.prototype.setSize_ = function(size) {
            this.size = size;
            this.$element[0].style[this.isHorizontal() ? "width" : "height"] = size + "px";
        };
        VirtualRepeatContainerController.prototype.updateSize = function() {
            if (!this.originalSize) {
                this.size = this.isHorizontal() ? this.$element[0].clientWidth : this.$element[0].clientHeight;
                this.repeater && this.repeater.containerUpdated();
            }
        };
        VirtualRepeatContainerController.prototype.getScrollSize = function() {
            return this.scrollSize;
        };
        VirtualRepeatContainerController.prototype.sizeScroller_ = function(size) {
            var dimension = this.isHorizontal() ? "width" : "height", crossDimension = this.isHorizontal() ? "height" : "width";
            this.sizer.innerHTML = "";
            if (size < 1533917) this.sizer.style[dimension] = size + "px"; else {
                this.sizer.style[dimension] = "auto";
                this.sizer.style[crossDimension] = "auto";
                var numChildren = Math.floor(size / 1533917), sizerChild = document.createElement("div");
                sizerChild.style[dimension] = "1533917px";
                sizerChild.style[crossDimension] = "1px";
                for (var i = 0; i < numChildren; i++) this.sizer.appendChild(sizerChild.cloneNode(!1));
                sizerChild.style[dimension] = size - 1533917 * numChildren + "px";
                this.sizer.appendChild(sizerChild);
            }
        };
        VirtualRepeatContainerController.prototype.autoShrink_ = function(size) {
            var shrinkSize = Math.max(size, this.autoShrinkMin * this.repeater.getItemSize());
            if (this.autoShrink && shrinkSize !== this.size) {
                var currentSize = this.originalSize || this.size;
                if (!currentSize || shrinkSize < currentSize) {
                    this.originalSize || (this.originalSize = this.size);
                    this.setSize_(shrinkSize);
                } else if (this.originalSize) {
                    this.setSize_(this.originalSize);
                    this.originalSize = null;
                }
                this.repeater.containerUpdated();
            }
        };
        VirtualRepeatContainerController.prototype.setScrollSize = function(itemsSize) {
            var size = itemsSize + this.offsetSize;
            if (this.scrollSize !== size) {
                this.sizeScroller_(size);
                this.autoShrink_(size);
                this.scrollSize = size;
            }
        };
        VirtualRepeatContainerController.prototype.getScrollOffset = function() {
            return this.scrollOffset;
        };
        VirtualRepeatContainerController.prototype.scrollTo = function(position) {
            this.scroller[this.isHorizontal() ? "scrollLeft" : "scrollTop"] = position;
            this.handleScroll_();
        };
        VirtualRepeatContainerController.prototype.scrollToIndex = function(index) {
            var itemSize = this.repeater.getItemSize(), itemsLength = this.repeater.itemsLength;
            itemsLength < index && (index = itemsLength - 1);
            this.scrollTo(itemSize * index);
        };
        VirtualRepeatContainerController.prototype.resetScroll = function() {
            this.scrollTo(0);
        };
        VirtualRepeatContainerController.prototype.handleScroll_ = function() {
            var offset = this.isHorizontal() ? this.scroller.scrollLeft : this.scroller.scrollTop;
            if (offset !== this.scrollOffset) {
                var itemSize = this.repeater.getItemSize();
                if (itemSize) {
                    var numItems = Math.max(0, Math.floor(offset / itemSize) - 3), transform = this.isHorizontal() ? "translateX(" : "translateY(";
                    transform += numItems * itemSize + "px)";
                    this.scrollOffset = offset;
                    this.offsetter.style.webkitTransform = transform;
                    this.offsetter.style.transform = transform;
                    if (this.bindTopIndex) {
                        var topIndex = Math.floor(offset / itemSize);
                        if (topIndex !== this.topIndex && topIndex < this.repeater.itemsLength) {
                            this.topIndex = topIndex;
                            this.bindTopIndex.assign(this.$scope, topIndex);
                            this.$rootScope.$$phase || this.$scope.$digest();
                        }
                    }
                    this.repeater.containerUpdated();
                }
            }
        };
        function VirtualRepeatDirective($parse) {
            return {
                controller: VirtualRepeatController,
                priority: 1e3,
                require: [ "mdVirtualRepeat", "^^mdVirtualRepeatContainer" ],
                restrict: "A",
                terminal: !0,
                transclude: "element",
                compile: function($element, $attrs) {
                    var match = $attrs.mdVirtualRepeat.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)\s*$/), repeatName = match[1], repeatListExpression = $parse(match[2]), extraName = $attrs.mdExtraName && $parse($attrs.mdExtraName);
                    return function($scope, $element, $attrs, ctrl, $transclude) {
                        ctrl[0].link_(ctrl[1], $transclude, repeatName, repeatListExpression, extraName);
                    };
                }
            };
        }
        VirtualRepeatDirective.$inject = [ "$parse" ];
        function VirtualRepeatController($scope, $element, $attrs, $browser, $document, $rootScope, $$rAF) {
            this.$scope = $scope;
            this.$element = $element;
            this.$attrs = $attrs;
            this.$browser = $browser;
            this.$document = $document;
            this.$rootScope = $rootScope;
            this.$$rAF = $$rAF;
            this.onDemand = $attrs.hasOwnProperty("mdOnDemand");
            this.browserCheckUrlChange = $browser.$$checkUrlChange;
            this.newStartIndex = 0;
            this.newEndIndex = 0;
            this.newVisibleEnd = 0;
            this.startIndex = 0;
            this.endIndex = 0;
            this.itemSize = $scope.$eval($attrs.mdItemSize) || null;
            this.isFirstRender = !0;
            this.isVirtualRepeatUpdating_ = !1;
            this.itemsLength = 0;
            this.unwatchItemSize_ = angular.noop;
            this.blocks = {};
            this.pooledBlocks = [];
        }
        VirtualRepeatController.$inject = [ "$scope", "$element", "$attrs", "$browser", "$document", "$rootScope", "$$rAF" ];
        VirtualRepeatController.prototype.link_ = function(container, transclude, repeatName, repeatListExpression, extraName) {
            this.container = container;
            this.transclude = transclude;
            this.repeatName = repeatName;
            this.rawRepeatListExpression = repeatListExpression;
            this.extraName = extraName;
            this.sized = !1;
            this.repeatListExpression = angular.bind(this, this.repeatListExpression_);
            this.container.register(this);
        };
        VirtualRepeatController.prototype.readItemSize_ = function() {
            if (!this.itemSize) {
                this.items = this.repeatListExpression(this.$scope);
                this.parentNode = this.$element[0].parentNode;
                var block = this.getBlock_(0);
                block.element[0].parentNode || this.parentNode.appendChild(block.element[0]);
                this.itemSize = block.element[0][this.container.isHorizontal() ? "offsetWidth" : "offsetHeight"] || null;
                this.blocks[0] = block;
                this.poolBlock_(0);
                this.itemSize && this.containerUpdated();
            }
        };
        VirtualRepeatController.prototype.repeatListExpression_ = function(scope) {
            var repeatList = this.rawRepeatListExpression(scope);
            if (this.onDemand && repeatList) {
                var virtualList = new VirtualRepeatModelArrayLike(repeatList);
                virtualList.$$includeIndexes(this.newStartIndex, this.newVisibleEnd);
                return virtualList;
            }
            return repeatList;
        };
        VirtualRepeatController.prototype.containerUpdated = function() {
            if (this.itemSize) {
                this.sized || (this.items = this.repeatListExpression(this.$scope));
                if (!this.sized) {
                    this.unwatchItemSize_();
                    this.sized = !0;
                    this.$scope.$watchCollection(this.repeatListExpression, angular.bind(this, function(items, oldItems) {
                        this.isVirtualRepeatUpdating_ || this.virtualRepeatUpdate_(items, oldItems);
                    }));
                }
                this.updateIndexes_();
                if (this.newStartIndex !== this.startIndex || this.newEndIndex !== this.endIndex || this.container.getScrollOffset() > this.container.getScrollSize()) {
                    this.items instanceof VirtualRepeatModelArrayLike && this.items.$$includeIndexes(this.newStartIndex, this.newEndIndex);
                    this.virtualRepeatUpdate_(this.items, this.items);
                }
            } else {
                this.unwatchItemSize_ = this.$scope.$watchCollection(this.repeatListExpression, angular.bind(this, function(items) {
                    items && items.length && this.$$rAF(angular.bind(this, this.readItemSize_));
                }));
                this.$rootScope.$$phase || this.$scope.$digest();
            }
        };
        VirtualRepeatController.prototype.getItemSize = function() {
            return this.itemSize;
        };
        VirtualRepeatController.prototype.virtualRepeatUpdate_ = function(items, oldItems) {
            this.isVirtualRepeatUpdating_ = !0;
            var itemsLength = items && items.length || 0, lengthChanged = !1;
            if (this.items && itemsLength < this.items.length && 0 !== this.container.getScrollOffset()) {
                this.items = items;
                this.container.resetScroll();
            } else {
                if (itemsLength !== this.itemsLength) {
                    lengthChanged = !0;
                    this.itemsLength = itemsLength;
                }
                ((this.items = items) !== oldItems || lengthChanged) && this.updateIndexes_();
                this.parentNode = this.$element[0].parentNode;
                lengthChanged && this.container.setScrollSize(itemsLength * this.itemSize);
                if (this.isFirstRender) {
                    this.isFirstRender = !1;
                    var startIndex = this.$attrs.mdStartIndex ? this.$scope.$eval(this.$attrs.mdStartIndex) : this.container.topIndex;
                    this.container.scrollToIndex(startIndex);
                }
                Object.keys(this.blocks).forEach(function(blockIndex) {
                    var index = parseInt(blockIndex, 10);
                    (index < this.newStartIndex || index >= this.newEndIndex) && this.poolBlock_(index);
                }, this);
                this.$browser.$$checkUrlChange = angular.noop;
                var i, block, newStartBlocks = [], newEndBlocks = [];
                for (i = this.newStartIndex; i < this.newEndIndex && null == this.blocks[i]; i++) {
                    block = this.getBlock_(i);
                    this.updateBlock_(block, i);
                    newStartBlocks.push(block);
                }
                for (;null != this.blocks[i]; i++) this.updateBlock_(this.blocks[i], i);
                for (var maxIndex = i - 1; i < this.newEndIndex; i++) {
                    block = this.getBlock_(i);
                    this.updateBlock_(block, i);
                    newEndBlocks.push(block);
                }
                newStartBlocks.length && this.parentNode.insertBefore(this.domFragmentFromBlocks_(newStartBlocks), this.$element[0].nextSibling);
                newEndBlocks.length && this.parentNode.insertBefore(this.domFragmentFromBlocks_(newEndBlocks), this.blocks[maxIndex] && this.blocks[maxIndex].element[0].nextSibling);
                this.$browser.$$checkUrlChange = this.browserCheckUrlChange;
                this.startIndex = this.newStartIndex;
                this.endIndex = this.newEndIndex;
                this.isVirtualRepeatUpdating_ = !1;
            }
        };
        VirtualRepeatController.prototype.getBlock_ = function(index) {
            if (this.pooledBlocks.length) return this.pooledBlocks.pop();
            var block;
            this.transclude(angular.bind(this, function(clone, scope) {
                block = {
                    element: clone,
                    new: !0,
                    scope: scope
                };
                this.updateScope_(scope, index);
                this.parentNode.appendChild(clone[0]);
            }));
            return block;
        };
        VirtualRepeatController.prototype.updateBlock_ = function(block, index) {
            if ((this.blocks[index] = block).new || block.scope.$index !== index || block.scope[this.repeatName] !== this.items[index]) {
                block.new = !1;
                this.updateScope_(block.scope, index);
                this.$rootScope.$$phase || block.scope.$digest();
            }
        };
        VirtualRepeatController.prototype.updateScope_ = function(scope, index) {
            scope.$index = index;
            scope[this.repeatName] = this.items && this.items[index];
            this.extraName && (scope[this.extraName(this.$scope)] = this.items[index]);
        };
        VirtualRepeatController.prototype.poolBlock_ = function(index) {
            this.pooledBlocks.push(this.blocks[index]);
            this.parentNode.removeChild(this.blocks[index].element[0]);
            delete this.blocks[index];
        };
        VirtualRepeatController.prototype.domFragmentFromBlocks_ = function(blocks) {
            var fragment = this.$document[0].createDocumentFragment();
            blocks.forEach(function(block) {
                fragment.appendChild(block.element[0]);
            });
            return fragment;
        };
        VirtualRepeatController.prototype.updateIndexes_ = function() {
            var itemsLength = this.items ? this.items.length : 0, containerLength = Math.ceil(this.container.getSize() / this.itemSize);
            this.newStartIndex = Math.max(0, Math.min(itemsLength - containerLength, Math.floor(this.container.getScrollOffset() / this.itemSize)));
            this.newVisibleEnd = this.newStartIndex + containerLength + 3;
            this.newEndIndex = Math.min(itemsLength, this.newVisibleEnd);
            this.newStartIndex = Math.max(0, this.newStartIndex - 3);
        };
        function VirtualRepeatModelArrayLike(model) {
            if (!angular.isFunction(model.getItemAtIndex) || !angular.isFunction(model.getLength)) throw Error("When md-on-demand is enabled, the Object passed to md-virtual-repeat must implement functions getItemAtIndex() and getLength() ");
            this.model = model;
        }
        VirtualRepeatModelArrayLike.prototype.$$includeIndexes = function(start, end) {
            for (var i = start; i < end; i++) this.hasOwnProperty(i) || (this[i] = this.model.getItemAtIndex(i));
            this.length = this.model.getLength();
        };
    }();
    !function() {
        angular.module("material.components.tooltip", [ "material.core" ]).directive("mdTooltip", MdTooltipDirective);
        function MdTooltipDirective($timeout, $window, $$rAF, $document, $mdUtil, $mdTheming, $rootElement, $animate, $q) {
            return {
                restrict: "E",
                transclude: !0,
                priority: 210,
                template: '<div class="md-content" ng-transclude></div>',
                scope: {
                    delay: "=?mdDelay",
                    visible: "=?mdVisible",
                    autohide: "=?mdAutohide",
                    direction: "@?mdDirection"
                },
                link: function(scope, element, attr) {
                    $mdTheming(element);
                    var parent = $mdUtil.getParentWithPointerEvents(element), content = angular.element(element[0].getElementsByClassName("md-content")[0]), tooltipParent = angular.element(document.body), debouncedOnResize = $$rAF.throttle(function() {
                        updatePosition();
                    });
                    $animate.pin && $animate.pin(element, parent);
                    angular.isDefined(attr.mdDelay) || (scope.delay = 0);
                    !function() {
                        element.detach();
                        element.attr("role", "tooltip");
                    }();
                    !function() {
                        var mouseActive = !1, ngWindow = angular.element($window);
                        if (parent[0] && "MutationObserver" in $window) {
                            var attributeObserver = new MutationObserver(function(mutations) {
                                mutations.forEach(function(mutation) {
                                    if ("disabled" === mutation.attributeName && parent[0].disabled) {
                                        setVisible(!1);
                                        scope.$digest();
                                    }
                                });
                            });
                            attributeObserver.observe(parent[0], {
                                attributes: !0
                            });
                        }
                        var windowBlurHandler = function() {
                            elementFocusedOnWindowBlur = document.activeElement === parent[0];
                        }, elementFocusedOnWindowBlur = !1;
                        function windowScrollHandler() {
                            setVisible(!1);
                        }
                        ngWindow.on("blur", windowBlurHandler);
                        ngWindow.on("resize", debouncedOnResize);
                        document.addEventListener("scroll", windowScrollHandler, !0);
                        scope.$on("$destroy", function() {
                            ngWindow.off("blur", windowBlurHandler);
                            ngWindow.off("resize", debouncedOnResize);
                            document.removeEventListener("scroll", windowScrollHandler, !0);
                            attributeObserver && attributeObserver.disconnect();
                        });
                        var leaveHandler = function() {
                            var autohide = scope.hasOwnProperty("autohide") ? scope.autohide : attr.hasOwnProperty("mdAutohide");
                            if (autohide || mouseActive || $document[0].activeElement !== parent[0]) {
                                parent.off("blur mouseleave touchend touchcancel", leaveHandler);
                                parent.triggerHandler("blur");
                                setVisible(!1);
                            }
                            mouseActive = !1;
                        };
                        parent.on("mousedown", function() {
                            mouseActive = !0;
                        });
                        parent.on("focus mouseenter touchstart", function(e) {
                            if ("focus" === e.type && elementFocusedOnWindowBlur) {
                                elementFocusedOnWindowBlur = !1;
                                return;
                            }
                            parent.on("blur mouseleave touchend touchcancel", leaveHandler);
                            setVisible(!0);
                        });
                    }();
                    updateContentOrigin();
                    !function() {
                        scope.$on("$destroy", function() {
                            scope.visible = !1;
                            element.remove();
                            angular.element($window).off("resize", debouncedOnResize);
                        });
                        scope.$watch("visible", function(isVisible) {
                            isVisible ? function() {
                                tooltipParent.append(element);
                                if ($mdUtil.hasComputedStyle(element, "display", "none")) {
                                    scope.visible = !1;
                                    element.detach();
                                    return;
                                }
                                updatePosition();
                                angular.forEach([ element, content ], function(element) {
                                    $animate.addClass(element, "md-show");
                                });
                            }() : function() {
                                var promises = [];
                                angular.forEach([ element, content ], function(it) {
                                    it.parent() && it.hasClass("md-show") && promises.push($animate.removeClass(it, "md-show"));
                                });
                                $q.all(promises).then(function() {
                                    scope.visible || element.detach();
                                });
                            }();
                        });
                        scope.$watch("direction", updatePosition);
                    }();
                    parent.attr("aria-label") || parent.text().trim() || parent.attr("aria-label", element.text().trim());
                    function updateContentOrigin() {
                        var origin = "center top";
                        switch (scope.direction) {
                          case "left":
                            origin = "right center";
                            break;

                          case "right":
                            origin = "left center";
                            break;

                          case "top":
                            origin = "center bottom";
                            break;

                          case "bottom":
                            origin = "center top";
                        }
                        content.css("transform-origin", origin);
                    }
                    function setVisible(value) {
                        setVisible.value = !!value;
                        if (!setVisible.queued) if (value) {
                            setVisible.queued = !0;
                            $timeout(function() {
                                scope.visible = setVisible.value;
                                setVisible.queued = !1;
                            }, scope.delay);
                        } else $mdUtil.nextTick(function() {
                            scope.visible = !1;
                        });
                    }
                    function updatePosition() {
                        if (scope.visible) {
                            updateContentOrigin();
                            !function() {
                                var tipRect = $mdUtil.offsetRect(element, tooltipParent), parentRect = $mdUtil.offsetRect(parent, tooltipParent), newPosition = getPosition(scope.direction), offsetParent = element.prop("offsetParent");
                                scope.direction ? newPosition = fitInParent(newPosition) : offsetParent && newPosition.top > offsetParent.scrollHeight - tipRect.height - 8 && (newPosition = fitInParent(getPosition("top")));
                                element.css({
                                    left: newPosition.left + "px",
                                    top: newPosition.top + "px"
                                });
                                function fitInParent(pos) {
                                    var newPosition = {
                                        left: pos.left,
                                        top: pos.top
                                    };
                                    newPosition.left = Math.min(newPosition.left, tooltipParent.prop("scrollWidth") - tipRect.width - 8);
                                    newPosition.left = Math.max(newPosition.left, 8);
                                    newPosition.top = Math.min(newPosition.top, tooltipParent.prop("scrollHeight") - tipRect.height - 8);
                                    newPosition.top = Math.max(newPosition.top, 8);
                                    return newPosition;
                                }
                                function getPosition(dir) {
                                    return "left" === dir ? {
                                        left: parentRect.left - tipRect.width - 8,
                                        top: parentRect.top + parentRect.height / 2 - tipRect.height / 2
                                    } : "right" === dir ? {
                                        left: parentRect.left + parentRect.width + 8,
                                        top: parentRect.top + parentRect.height / 2 - tipRect.height / 2
                                    } : "top" === dir ? {
                                        left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,
                                        top: parentRect.top - tipRect.height - 8
                                    } : {
                                        left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,
                                        top: parentRect.top + parentRect.height + 8
                                    };
                                }
                            }();
                        }
                    }
                }
            };
        }
        MdTooltipDirective.$inject = [ "$timeout", "$window", "$$rAF", "$document", "$mdUtil", "$mdTheming", "$rootElement", "$animate", "$q" ];
    }();
    angular.module("material.components.whiteframe", []);
    !function() {
        angular.module("material.components.autocomplete").controller("MdAutocompleteCtrl", MdAutocompleteCtrl);
        var MAX_HEIGHT = 225.5, MENU_PADDING = 8, INPUT_PADDING = 2;
        function MdAutocompleteCtrl($scope, $element, $mdUtil, $mdConstant, $mdTheming, $window, $animate, $rootElement, $attrs, $q) {
            var key, handler, value, ctrl = this, itemParts = $scope.itemsExpr.split(/ in /i), itemExpr = itemParts[1], elements = null, cache = {}, noBlur = !1, selectedItemWatchers = [], hasFocus = !1, lastCount = 0;
            key = "hidden", handler = function(hidden, oldHidden) {
                if (!hidden && oldHidden) {
                    positionDropdown();
                    elements && $mdUtil.nextTick(function() {
                        $mdUtil.disableScrollAround(elements.ul);
                    }, !1, $scope);
                } else hidden && !oldHidden && $mdUtil.nextTick(function() {
                    $mdUtil.enableScrolling();
                }, !1, $scope);
            }, value = !0, Object.defineProperty(ctrl, key, {
                get: function() {
                    return value;
                },
                set: function(newValue) {
                    var oldValue = value;
                    handler(value = newValue, oldValue);
                }
            });
            ctrl.scope = $scope;
            ctrl.parent = $scope.$parent;
            ctrl.itemName = itemParts[0];
            ctrl.matches = [];
            ctrl.loading = !1;
            ctrl.hidden = !0;
            ctrl.index = null;
            ctrl.messages = [];
            ctrl.id = $mdUtil.nextUid();
            ctrl.isDisabled = null;
            ctrl.isRequired = null;
            ctrl.hasNotFound = !1;
            ctrl.keydown = function(event) {
                switch (event.keyCode) {
                  case $mdConstant.KEY_CODE.DOWN_ARROW:
                    if (ctrl.loading) return;
                    event.stopPropagation();
                    event.preventDefault();
                    ctrl.index = Math.min(ctrl.index + 1, ctrl.matches.length - 1);
                    updateScroll();
                    updateMessages();
                    break;

                  case $mdConstant.KEY_CODE.UP_ARROW:
                    if (ctrl.loading) return;
                    event.stopPropagation();
                    event.preventDefault();
                    ctrl.index = ctrl.index < 0 ? ctrl.matches.length - 1 : Math.max(0, ctrl.index - 1);
                    updateScroll();
                    updateMessages();
                    break;

                  case $mdConstant.KEY_CODE.TAB:
                    onListLeave();
                    if (ctrl.hidden || ctrl.loading || ctrl.index < 0 || ctrl.matches.length < 1) return;
                    select(ctrl.index);
                    break;

                  case $mdConstant.KEY_CODE.ENTER:
                    if (ctrl.hidden || ctrl.loading || ctrl.index < 0 || ctrl.matches.length < 1) return;
                    if (hasSelection()) return;
                    event.stopPropagation();
                    event.preventDefault();
                    select(ctrl.index);
                    break;

                  case $mdConstant.KEY_CODE.ESCAPE:
                    event.stopPropagation();
                    event.preventDefault();
                    clearValue();
                    !function(forceBlur) {
                        forceBlur && (hasFocus = noBlur = !1);
                        elements.input.blur();
                    }(!0);
                }
            };
            ctrl.blur = function() {
                hasFocus = !1;
                noBlur || (ctrl.hidden = shouldHide());
            };
            ctrl.focus = function() {
                hasFocus = !0;
                angular.isString($scope.searchText) || ($scope.searchText = "");
                ctrl.hidden = shouldHide();
                ctrl.hidden || handleQuery();
            };
            ctrl.clear = clearValue;
            ctrl.select = select;
            ctrl.listEnter = function() {
                noBlur = !0;
            };
            ctrl.listLeave = onListLeave;
            ctrl.mouseUp = function() {
                elements.input.focus();
            };
            ctrl.getCurrentDisplayValue = getCurrentDisplayValue;
            ctrl.registerSelectedItemWatcher = function(cb) {
                -1 == selectedItemWatchers.indexOf(cb) && selectedItemWatchers.push(cb);
            };
            ctrl.unregisterSelectedItemWatcher = function(cb) {
                var i = selectedItemWatchers.indexOf(cb);
                -1 != i && selectedItemWatchers.splice(i, 1);
            };
            ctrl.notFoundVisible = notFoundVisible;
            ctrl.loadingIsVisible = function() {
                return ctrl.loading && !hasSelection();
            };
            return function() {
                $mdUtil.initOptionalProperties($scope, $attrs, {
                    searchText: null,
                    selectedItem: null
                });
                $mdTheming($element);
                !function() {
                    var wait = parseInt($scope.delay, 10) || 0;
                    $attrs.$observe("disabled", function(value) {
                        ctrl.isDisabled = !!value;
                    });
                    $attrs.$observe("required", function(value) {
                        ctrl.isRequired = !!value;
                    });
                    $scope.$watch("searchText", wait ? $mdUtil.debounce(handleSearchText, wait) : handleSearchText);
                    $scope.$watch("selectedItem", selectedItemChange);
                    angular.element($window).on("resize", positionDropdown);
                    $scope.$on("$destroy", cleanup);
                }();
                $mdUtil.nextTick(function() {
                    !function() {
                        (elements = {
                            main: $element[0],
                            scrollContainer: $element[0].getElementsByClassName("md-virtual-repeat-container")[0],
                            scroller: $element[0].getElementsByClassName("md-virtual-repeat-scroller")[0],
                            ul: $element.find("ul")[0],
                            input: $element.find("input")[0],
                            wrap: $element.find("md-autocomplete-wrap")[0],
                            root: document.body
                        }).li = elements.ul.getElementsByTagName("li");
                        elements.snap = function() {
                            for (var element = $element; element.length; element = element.parent()) if (angular.isDefined(element.attr("md-autocomplete-snap"))) return element[0];
                            return elements.wrap;
                        }();
                        elements.$ = function(elements) {
                            var obj = {};
                            for (var key in elements) elements.hasOwnProperty(key) && (obj[key] = angular.element(elements[key]));
                            return obj;
                        }(elements);
                    }();
                    !function() {
                        if (!elements.$.root.length) return;
                        $mdTheming(elements.$.scrollContainer);
                        elements.$.scrollContainer.detach();
                        elements.$.root.append(elements.$.scrollContainer);
                        $animate.pin && $animate.pin(elements.$.scrollContainer, $rootElement);
                    }();
                    focusElement();
                    $element.on("focus", focusElement);
                });
            }();
            function positionDropdown() {
                if (!elements) return $mdUtil.nextTick(positionDropdown, !1, $scope);
                var styles, hrect = elements.wrap.getBoundingClientRect(), vrect = elements.snap.getBoundingClientRect(), root = elements.root.getBoundingClientRect(), top = vrect.bottom - root.top, bot = root.bottom - vrect.top, left = hrect.left - root.left, width = hrect.width, offset = function() {
                    var offset = 0, inputContainer = $element.find("md-input-container");
                    if (inputContainer.length) {
                        var input = inputContainer.find("input");
                        offset = inputContainer.prop("offsetHeight");
                        offset -= input.prop("offsetTop");
                        offset -= input.prop("offsetHeight");
                        offset += inputContainer.prop("offsetTop");
                    }
                    return offset;
                }();
                if ($attrs.mdFloatingLabel) {
                    left += INPUT_PADDING;
                    width -= 2 * INPUT_PADDING;
                }
                styles = {
                    left: left + "px",
                    minWidth: width + "px",
                    maxWidth: Math.max(hrect.right - root.left, root.right - hrect.left) - MENU_PADDING + "px"
                };
                if (bot < top && root.height - hrect.bottom - MENU_PADDING < MAX_HEIGHT) {
                    styles.top = "auto";
                    styles.bottom = bot + "px";
                    styles.maxHeight = Math.min(MAX_HEIGHT, hrect.top - root.top - MENU_PADDING) + "px";
                } else {
                    styles.top = top - offset + "px";
                    styles.bottom = "auto";
                    styles.maxHeight = Math.min(MAX_HEIGHT, root.bottom + $mdUtil.scrollTop() - hrect.bottom - MENU_PADDING) + "px";
                }
                elements.$.scrollContainer.css(styles);
                $mdUtil.nextTick(function() {
                    var dropdown = elements.scrollContainer.getBoundingClientRect(), styles = {};
                    dropdown.right > root.right - MENU_PADDING && (styles.left = hrect.right - dropdown.width + "px");
                    elements.$.scrollContainer.css(styles);
                }, !1);
            }
            function focusElement() {
                $scope.autofocus && elements.input.focus();
            }
            function cleanup() {
                angular.element($window).off("resize", positionDropdown);
                if (elements) {
                    var items = "ul scroller scrollContainer input".split(" ");
                    angular.forEach(items, function(key) {
                        elements.$[key].remove();
                    });
                }
            }
            function onListLeave() {
                hasFocus || elements.input.focus();
                noBlur = !1;
                ctrl.hidden = shouldHide();
            }
            function selectedItemChange(selectedItem, previousSelectedItem) {
                selectedItem && getDisplayValue(selectedItem).then(function(val) {
                    $scope.searchText = val;
                    !function(selectedItem, previousSelectedItem) {
                        selectedItemWatchers.forEach(function(watcher) {
                            watcher(selectedItem, previousSelectedItem);
                        });
                    }(selectedItem, previousSelectedItem);
                });
                selectedItem !== previousSelectedItem && angular.isFunction($scope.itemChange) && $scope.itemChange(getItemAsNameVal($scope.selectedItem));
            }
            function handleSearchText(searchText, previousSearchText) {
                ctrl.index = $scope.autoselect ? 0 : -1;
                searchText !== previousSearchText && getDisplayValue($scope.selectedItem).then(function(val) {
                    if (searchText !== val) {
                        $scope.selectedItem = null;
                        searchText !== previousSearchText && angular.isFunction($scope.textChange) && $scope.textChange();
                        if (isMinLengthMet()) handleQuery(); else {
                            setLoading(!(ctrl.matches = []));
                            updateMessages();
                        }
                    }
                });
            }
            function getMinLength() {
                return angular.isNumber($scope.minLength) ? $scope.minLength : 1;
            }
            function getDisplayValue(item) {
                return $q.when(function(item) {
                    return item && $scope.itemText ? $scope.itemText(getItemAsNameVal(item)) : null;
                }(item) || item);
            }
            function getItemAsNameVal(item) {
                if (item) {
                    var locals = {};
                    ctrl.itemName && (locals[ctrl.itemName] = item);
                    return locals;
                }
            }
            function setLoading(value) {
                ctrl.loading != value && (ctrl.loading = value);
                ctrl.hidden = shouldHide();
            }
            function shouldHide() {
                return !(!ctrl.loading || hasMatches()) || (!!hasSelection() || (!hasFocus || !(isMinLengthMet() && hasMatches() || notFoundVisible())));
            }
            function hasMatches() {
                return !!ctrl.matches.length;
            }
            function hasSelection() {
                return !!ctrl.scope.selectedItem;
            }
            function getCurrentDisplayValue() {
                return getDisplayValue(ctrl.matches[ctrl.index]);
            }
            function isMinLengthMet() {
                return ($scope.searchText || "").length >= getMinLength();
            }
            function select(index) {
                $mdUtil.nextTick(function() {
                    getDisplayValue(ctrl.matches[index]).then(function(val) {
                        var ngModel = elements.$.input.controller("ngModel");
                        ngModel.$setViewValue(val);
                        ngModel.$render();
                    }).finally(function() {
                        $scope.selectedItem = ctrl.matches[index];
                        setLoading(!1);
                    });
                }, !1);
            }
            function clearValue() {
                setLoading(!0);
                ctrl.index = 0;
                ctrl.matches = [];
                $scope.searchText = "";
                select(-1);
                var eventObj = document.createEvent("CustomEvent");
                eventObj.initCustomEvent("input", !0, !0, {
                    value: $scope.searchText
                });
                elements.input.dispatchEvent(eventObj);
                elements.input.focus();
            }
            function fetchResults(searchText) {
                var items = $scope.$parent.$eval(itemExpr), term = searchText.toLowerCase();
                if (angular.isArray(items)) handleResults(items); else if (items) {
                    setLoading(!0);
                    $mdUtil.nextTick(function() {
                        items.success && items.success(handleResults);
                        items.then && items.then(handleResults);
                        items.finally && items.finally(function() {
                            setLoading(!1);
                        });
                    }, !0, $scope);
                }
                function handleResults(matches) {
                    cache[term] = matches;
                    if ((searchText || "") === ($scope.searchText || "")) {
                        ctrl.matches = matches;
                        ctrl.hidden = shouldHide();
                        $scope.selectOnMatch && function() {
                            var searchText = $scope.searchText, matches = ctrl.matches, item = matches[0];
                            1 === matches.length && getDisplayValue(item).then(function(displayValue) {
                                searchText == displayValue && select(0);
                            });
                        }();
                        updateMessages();
                        positionDropdown();
                    }
                }
            }
            function updateMessages() {
                getCurrentDisplayValue().then(function(msg) {
                    ctrl.messages = [ function() {
                        if (lastCount === ctrl.matches.length) return "";
                        lastCount = ctrl.matches.length;
                        switch (ctrl.matches.length) {
                          case 0:
                            return "There are no matches available.";

                          case 1:
                            return "There is 1 match available.";

                          default:
                            return "There are " + ctrl.matches.length + " matches available.";
                        }
                    }(), msg ];
                });
            }
            function updateScroll() {
                if (elements.li[0]) {
                    var height = elements.li[0].offsetHeight, top = height * ctrl.index, bot = top + height, hgt = elements.scroller.clientHeight, scrollTop = elements.scroller.scrollTop;
                    top < scrollTop ? scrollTo(top) : scrollTop + hgt < bot && scrollTo(bot - hgt);
                }
            }
            function scrollTo(offset) {
                elements.$.scrollContainer.controller("mdVirtualRepeatContainer").scrollTo(offset);
            }
            function notFoundVisible() {
                var textLength = (ctrl.scope.searchText || "").length;
                return ctrl.hasNotFound && !hasMatches() && !ctrl.loading && textLength >= getMinLength() && hasFocus && !hasSelection();
            }
            function handleQuery() {
                var searchText = $scope.searchText || "", term = searchText.toLowerCase();
                if (!$scope.noCache && cache[term]) {
                    ctrl.matches = cache[term];
                    updateMessages();
                } else fetchResults(searchText);
                ctrl.hidden = shouldHide();
            }
        }
        MdAutocompleteCtrl.$inject = [ "$scope", "$element", "$mdUtil", "$mdConstant", "$mdTheming", "$window", "$animate", "$rootElement", "$attrs", "$q" ];
    }();
    angular.module("material.components.autocomplete").directive("mdAutocomplete", function() {
        var hasNotFoundTemplate = !1;
        return {
            controller: "MdAutocompleteCtrl",
            controllerAs: "$mdAutocompleteCtrl",
            scope: {
                inputName: "@mdInputName",
                inputMinlength: "@mdInputMinlength",
                inputMaxlength: "@mdInputMaxlength",
                searchText: "=?mdSearchText",
                selectedItem: "=?mdSelectedItem",
                itemsExpr: "@mdItems",
                itemText: "&mdItemText",
                placeholder: "@placeholder",
                noCache: "=?mdNoCache",
                selectOnMatch: "=?mdSelectOnMatch",
                itemChange: "&?mdSelectedItemChange",
                textChange: "&?mdSearchTextChange",
                minLength: "=?mdMinLength",
                delay: "=?mdDelay",
                autofocus: "=?mdAutofocus",
                floatingLabel: "@?mdFloatingLabel",
                autoselect: "=?mdAutoselect",
                menuClass: "@?mdMenuClass",
                inputId: "@?mdInputId"
            },
            link: function(scope, element, attrs, controller) {
                controller.hasNotFound = hasNotFoundTemplate;
            },
            template: function(element, attr) {
                var templateTag, template, noItemsTemplate = (templateTag = element.find("md-not-found").detach(), 
                (template = templateTag.length ? templateTag.html() : "") ? '<li ng-if="$mdAutocompleteCtrl.notFoundVisible()"                         md-autocomplete-parent-scope>' + template + "</li>" : ""), itemTemplate = function() {
                    var templateTag = element.find("md-item-template").detach(), html = templateTag.length ? templateTag.html() : element.html();
                    templateTag.length || element.empty();
                    return "<md-autocomplete-parent-scope md-autocomplete-replace>" + html + "</md-autocomplete-parent-scope>";
                }(), leftover = element.html(), tabindex = attr.tabindex;
                hasNotFoundTemplate = !!noItemsTemplate;
                attr.hasOwnProperty("tabindex") || element.attr("tabindex", "-1");
                return '        <md-autocomplete-wrap            layout="row"            ng-class="{ \'md-whiteframe-z1\': !floatingLabel, \'md-menu-showing\': !$mdAutocompleteCtrl.hidden }"            role="listbox">          ' + (attr.mdFloatingLabel ? '            <md-input-container flex ng-if="floatingLabel">              <label>{{floatingLabel}}</label>              <input type="search"                  ' + (null != tabindex ? 'tabindex="' + tabindex + '"' : "") + '                  id="{{ inputId || \'fl-input-\' + $mdAutocompleteCtrl.id }}"                  name="{{inputName}}"                  autocomplete="off"                  ng-required="$mdAutocompleteCtrl.isRequired"                  ng-minlength="inputMinlength"                  ng-maxlength="inputMaxlength"                  ng-disabled="$mdAutocompleteCtrl.isDisabled"                  ng-model="$mdAutocompleteCtrl.scope.searchText"                  ng-keydown="$mdAutocompleteCtrl.keydown($event)"                  ng-blur="$mdAutocompleteCtrl.blur()"                  ng-focus="$mdAutocompleteCtrl.focus()"                  aria-owns="ul-{{$mdAutocompleteCtrl.id}}"                  aria-label="{{floatingLabel}}"                  aria-autocomplete="list"                  aria-haspopup="true"                  aria-activedescendant=""                  aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>              <div md-autocomplete-parent-scope md-autocomplete-replace>' + leftover + "</div>            </md-input-container>" : '            <input flex type="search"                ' + (null != tabindex ? 'tabindex="' + tabindex + '"' : "") + '                id="{{ inputId || \'input-\' + $mdAutocompleteCtrl.id }}"                name="{{inputName}}"                ng-if="!floatingLabel"                autocomplete="off"                ng-required="$mdAutocompleteCtrl.isRequired"                ng-disabled="$mdAutocompleteCtrl.isDisabled"                ng-model="$mdAutocompleteCtrl.scope.searchText"                ng-keydown="$mdAutocompleteCtrl.keydown($event)"                ng-blur="$mdAutocompleteCtrl.blur()"                ng-focus="$mdAutocompleteCtrl.focus()"                placeholder="{{placeholder}}"                aria-owns="ul-{{$mdAutocompleteCtrl.id}}"                aria-label="{{placeholder}}"                aria-autocomplete="list"                aria-haspopup="true"                aria-activedescendant=""                aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>            <button                type="button"                tabindex="-1"                ng-if="$mdAutocompleteCtrl.scope.searchText && !$mdAutocompleteCtrl.isDisabled"                ng-click="$mdAutocompleteCtrl.clear()">              <md-icon md-svg-icon="md-close"></md-icon>              <span class="md-visually-hidden">Clear</span>            </button>                ') + '          <md-progress-linear              class="' + (attr.mdFloatingLabel ? "md-inline" : "") + '"              ng-if="$mdAutocompleteCtrl.loadingIsVisible()"              md-mode="indeterminate"></md-progress-linear>          <md-virtual-repeat-container              md-auto-shrink              md-auto-shrink-min="1"              ng-mouseenter="$mdAutocompleteCtrl.listEnter()"              ng-mouseleave="$mdAutocompleteCtrl.listLeave()"              ng-mouseup="$mdAutocompleteCtrl.mouseUp()"              ng-hide="$mdAutocompleteCtrl.hidden"              class="md-autocomplete-suggestions-container md-whiteframe-z1"              ng-class="{ \'md-not-found\': $mdAutocompleteCtrl.notFoundVisible() }"              role="presentation">            <ul class="md-autocomplete-suggestions"                ng-class="::menuClass"                id="ul-{{$mdAutocompleteCtrl.id}}">              <li md-virtual-repeat="item in $mdAutocompleteCtrl.matches"                  ng-class="{ selected: $index === $mdAutocompleteCtrl.index }"                  ng-click="$mdAutocompleteCtrl.select($index)"                  md-extra-name="$mdAutocompleteCtrl.itemName">                  ' + itemTemplate + "                  </li>" + noItemsTemplate + '            </ul>          </md-virtual-repeat-container>        </md-autocomplete-wrap>        <aria-status            class="md-visually-hidden"            role="status"            aria-live="assertive">          <p ng-repeat="message in $mdAutocompleteCtrl.messages track by $index" ng-if="message">{{message}}</p>        </aria-status>';
            }
        };
    });
    !function() {
        angular.module("material.components.autocomplete").directive("mdAutocompleteParentScope", MdAutocompleteItemScopeDirective);
        function MdAutocompleteItemScopeDirective($compile, $mdUtil) {
            return {
                restrict: "AE",
                compile: function(tElement, tAttr, transclude) {
                    return function(scope, element, attr) {
                        var ctrl = scope.$mdAutocompleteCtrl, newScope = ctrl.parent.$new(), itemName = ctrl.itemName;
                        watchVariable("$index", "$index");
                        watchVariable("item", itemName);
                        !function() {
                            var scopeDigesting = !1, newScopeDigesting = !1;
                            scope.$watch(function() {
                                if (!newScopeDigesting && !scopeDigesting) {
                                    scopeDigesting = !0;
                                    scope.$$postDigest(function() {
                                        newScopeDigesting || newScope.$digest();
                                        scopeDigesting = newScopeDigesting = !1;
                                    });
                                }
                            });
                            newScope.$watch(function() {
                                newScopeDigesting = !0;
                            });
                        }();
                        transclude(newScope, function(clone) {
                            element.after(clone);
                        });
                        function watchVariable(variable, alias) {
                            newScope[alias] = scope[variable];
                            scope.$watch(variable, function(value) {
                                $mdUtil.nextTick(function() {
                                    newScope[alias] = value;
                                });
                            });
                        }
                    };
                },
                terminal: !0,
                transclude: "element"
            };
        }
        MdAutocompleteItemScopeDirective.$inject = [ "$compile", "$mdUtil" ];
    }();
    !function() {
        angular.module("material.components.autocomplete").controller("MdHighlightCtrl", MdHighlightCtrl);
        function MdHighlightCtrl($scope, $element, $attrs) {
            this.init = function(termExpr, unsafeTextExpr) {
                var text = null, regex = null, flags = $attrs.mdHighlightFlags || "", watcher = $scope.$watch(function($scope) {
                    return {
                        term: termExpr($scope),
                        unsafeText: unsafeTextExpr($scope)
                    };
                }, function(state, prevState) {
                    null !== text && state.unsafeText === prevState.unsafeText || (text = angular.element("<div>").text(state.unsafeText).html());
                    null !== regex && state.term === prevState.term || (regex = function(text, flags) {
                        var str = "";
                        1 <= flags.indexOf("^") && (str += "^");
                        str += text;
                        1 <= flags.indexOf("$") && (str += "$");
                        return new RegExp((term = str, term && term.replace(/[\\\^\$\*\+\?\.\(\)\|\{}\[\]]/g, "\\$&")), flags.replace(/[\$\^]/g, ""));
                        var term;
                    }(state.term, flags));
                    $element.html(text.replace(regex, '<span class="highlight">$&</span>'));
                }, !0);
                $element.on("$destroy", watcher);
            };
        }
        MdHighlightCtrl.$inject = [ "$scope", "$element", "$attrs" ];
    }();
    !function() {
        angular.module("material.components.autocomplete").directive("mdHighlightText", MdHighlight);
        function MdHighlight($interpolate, $parse) {
            return {
                terminal: !0,
                controller: "MdHighlightCtrl",
                compile: function(tElement, tAttr) {
                    var termExpr = $parse(tAttr.mdHighlightText), unsafeTextExpr = $interpolate(tElement.html());
                    return function(scope, element, attr, ctrl) {
                        ctrl.init(termExpr, unsafeTextExpr);
                    };
                }
            };
        }
        MdHighlight.$inject = [ "$interpolate", "$parse" ];
    }();
    !function() {
        angular.module("material.components.chips").directive("mdChip", MdChip);
        var DELETE_HINT_TEMPLATE = '    <span ng-if="!$mdChipsCtrl.readonly" class="md-visually-hidden">      {{$mdChipsCtrl.deleteHint}}    </span>';
        function MdChip($mdTheming, $mdUtil) {
            var hintTemplate = $mdUtil.processTemplate(DELETE_HINT_TEMPLATE);
            return {
                restrict: "E",
                require: "^?mdChips",
                compile: function(element, attr) {
                    element.append($mdUtil.processTemplate(hintTemplate));
                    return function(scope, element, attr, ctrl) {
                        element.addClass("md-chip");
                        $mdTheming(element);
                        ctrl && angular.element(element[0].querySelector(".md-chip-content")).on("blur", function() {
                            ctrl.selectedChip = -1;
                        });
                    };
                }
            };
        }
        MdChip.$inject = [ "$mdTheming", "$mdUtil" ];
    }();
    !function() {
        angular.module("material.components.chips").directive("mdChipRemove", MdChipRemove);
        function MdChipRemove($timeout) {
            return {
                restrict: "A",
                require: "^mdChips",
                scope: !1,
                link: function(scope, element, attr, ctrl) {
                    element.on("click", function(event) {
                        scope.$apply(function() {
                            ctrl.removeChip(scope.$$replacedScope.$index);
                        });
                    });
                    $timeout(function() {
                        element.attr({
                            tabindex: -1,
                            "aria-hidden": !0
                        });
                        element.find("button").attr("tabindex", "-1");
                    });
                }
            };
        }
        MdChipRemove.$inject = [ "$timeout" ];
    }();
    !function() {
        angular.module("material.components.chips").directive("mdChipTransclude", MdChipTransclude);
        function MdChipTransclude($compile) {
            return {
                restrict: "EA",
                terminal: !0,
                link: function(scope, element, attr) {
                    var ctrl = scope.$parent.$mdChipsCtrl, newScope = ctrl.parent.$new(!1, ctrl.parent);
                    newScope.$$replacedScope = scope;
                    newScope.$chip = scope.$chip;
                    newScope.$index = scope.$index;
                    var newHtml = (newScope.$mdChipsCtrl = ctrl).$scope.$eval(attr.mdChipTransclude);
                    element.html(newHtml);
                    $compile(element.contents())(newScope);
                },
                scope: !1
            };
        }
        MdChipTransclude.$inject = [ "$compile" ];
    }();
    !function() {
        angular.module("material.components.chips").controller("MdChipsCtrl", MdChipsCtrl);
        function MdChipsCtrl($scope, $mdConstant, $log, $element, $timeout) {
            this.$timeout = $timeout;
            this.$mdConstant = $mdConstant;
            this.$scope = $scope;
            this.parent = $scope.$parent;
            this.$log = $log;
            this.$element = $element;
            this.ngModelCtrl = null;
            this.userInputNgModelCtrl = null;
            this.userInputElement = null;
            this.items = [];
            this.selectedChip = -1;
            this.hasAutocomplete = !1;
            this.deleteHint = "Press delete to remove this chip.";
            this.deleteButtonLabel = "Remove";
            this.chipBuffer = "";
            this.useOnAppend = !1;
            this.useTransformChip = !1;
            this.useOnAdd = !1;
            this.useOnRemove = !1;
            this.useOnSelect = !1;
        }
        MdChipsCtrl.$inject = [ "$scope", "$mdConstant", "$log", "$element", "$timeout" ];
        MdChipsCtrl.prototype.inputKeydown = function(event) {
            var chipBuffer = this.getChipBuffer();
            if (!(this.hasAutocomplete && event.isDefaultPrevented && event.isDefaultPrevented())) if (event.keyCode !== this.$mdConstant.KEY_CODE.BACKSPACE) {
                (!this.separatorKeys || this.separatorKeys.length < 1) && (this.separatorKeys = [ this.$mdConstant.KEY_CODE.ENTER ]);
                if (-1 !== this.separatorKeys.indexOf(event.keyCode)) {
                    if (this.hasAutocomplete && this.requireMatch || !chipBuffer) return;
                    event.preventDefault();
                    this.appendChip(chipBuffer);
                    this.resetChipBuffer();
                }
            } else {
                if (chipBuffer) return;
                event.preventDefault();
                event.stopPropagation();
                this.items.length && this.selectAndFocusChipSafe(this.items.length - 1);
            }
        };
        MdChipsCtrl.prototype.chipKeydown = function(event) {
            if (!this.getChipBuffer()) switch (event.keyCode) {
              case this.$mdConstant.KEY_CODE.BACKSPACE:
              case this.$mdConstant.KEY_CODE.DELETE:
                if (this.selectedChip < 0) return;
                event.preventDefault();
                this.removeAndSelectAdjacentChip(this.selectedChip);
                break;

              case this.$mdConstant.KEY_CODE.LEFT_ARROW:
                event.preventDefault();
                this.selectedChip < 0 && (this.selectedChip = this.items.length);
                this.items.length && this.selectAndFocusChipSafe(this.selectedChip - 1);
                break;

              case this.$mdConstant.KEY_CODE.RIGHT_ARROW:
                event.preventDefault();
                this.selectAndFocusChipSafe(this.selectedChip + 1);
                break;

              case this.$mdConstant.KEY_CODE.ESCAPE:
              case this.$mdConstant.KEY_CODE.TAB:
                if (this.selectedChip < 0) return;
                event.preventDefault();
                this.onFocus();
            }
        };
        MdChipsCtrl.prototype.getPlaceholder = function() {
            return this.items.length && ("" == this.secondaryPlaceholder || this.secondaryPlaceholder) ? this.placeholder : this.secondaryPlaceholder;
        };
        MdChipsCtrl.prototype.removeAndSelectAdjacentChip = function(index) {
            var selIndex = this.getAdjacentChipIndex(index);
            this.removeChip(index);
            this.$timeout(angular.bind(this, function() {
                this.selectAndFocusChipSafe(selIndex);
            }));
        };
        MdChipsCtrl.prototype.resetSelectedChip = function() {
            this.selectedChip = -1;
        };
        MdChipsCtrl.prototype.getAdjacentChipIndex = function(index) {
            var len = this.items.length - 1;
            return 0 == len ? -1 : index == len ? index - 1 : index;
        };
        MdChipsCtrl.prototype.appendChip = function(newChip) {
            if (this.useTransformChip && this.transformChip) {
                var transformedChip = this.transformChip({
                    $chip: newChip
                });
                angular.isDefined(transformedChip) && (newChip = transformedChip);
            }
            if (angular.isObject(newChip)) {
                if (this.items.some(function(item) {
                    return angular.equals(newChip, item);
                })) return;
            }
            if (!(null == newChip || this.items.indexOf(newChip) + 1)) {
                var index = this.items.push(newChip);
                this.useOnAdd && this.onAdd && this.onAdd({
                    $chip: newChip,
                    $index: index
                });
            }
        };
        MdChipsCtrl.prototype.useOnAppendExpression = function() {
            this.$log.warn("md-on-append is deprecated; please use md-transform-chip or md-on-add instead");
            if (!this.useTransformChip || !this.transformChip) {
                this.useTransformChip = !0;
                this.transformChip = this.onAppend;
            }
        };
        MdChipsCtrl.prototype.useTransformChipExpression = function() {
            this.useTransformChip = !0;
        };
        MdChipsCtrl.prototype.useOnAddExpression = function() {
            this.useOnAdd = !0;
        };
        MdChipsCtrl.prototype.useOnRemoveExpression = function() {
            this.useOnRemove = !0;
        };
        MdChipsCtrl.prototype.useOnSelectExpression = function() {
            this.useOnSelect = !0;
        };
        MdChipsCtrl.prototype.getChipBuffer = function() {
            return this.userInputElement ? this.userInputNgModelCtrl ? this.userInputNgModelCtrl.$viewValue : this.userInputElement[0].value : this.chipBuffer;
        };
        MdChipsCtrl.prototype.resetChipBuffer = function() {
            if (this.userInputElement) if (this.userInputNgModelCtrl) {
                this.userInputNgModelCtrl.$setViewValue("");
                this.userInputNgModelCtrl.$render();
            } else this.userInputElement[0].value = ""; else this.chipBuffer = "";
        };
        MdChipsCtrl.prototype.removeChip = function(index) {
            var removed = this.items.splice(index, 1);
            removed && removed.length && this.useOnRemove && this.onRemove && this.onRemove({
                $chip: removed[0],
                $index: index
            });
        };
        MdChipsCtrl.prototype.removeChipAndFocusInput = function(index) {
            this.removeChip(index);
            this.onFocus();
        };
        MdChipsCtrl.prototype.selectAndFocusChipSafe = function(index) {
            if (this.items.length) {
                if (index === this.items.length) return this.onFocus();
                index = Math.max(index, 0);
                index = Math.min(index, this.items.length - 1);
                this.selectChip(index);
                this.focusChip(index);
            } else {
                this.selectChip(-1);
                this.onFocus();
            }
        };
        MdChipsCtrl.prototype.selectChip = function(index) {
            if (-1 <= index && index <= this.items.length) {
                this.selectedChip = index;
                this.useOnSelect && this.onSelect && this.onSelect({
                    $chip: this.items[this.selectedChip]
                });
            } else this.$log.warn("Selected Chip index out of bounds; ignoring.");
        };
        MdChipsCtrl.prototype.selectAndFocusChip = function(index) {
            this.selectChip(index);
            -1 != index && this.focusChip(index);
        };
        MdChipsCtrl.prototype.focusChip = function(index) {
            this.$element[0].querySelector('md-chip[index="' + index + '"] .md-chip-content').focus();
        };
        MdChipsCtrl.prototype.configureNgModel = function(ngModelCtrl) {
            this.ngModelCtrl = ngModelCtrl;
            var self = this;
            ngModelCtrl.$render = function() {
                self.items = self.ngModelCtrl.$viewValue;
            };
        };
        MdChipsCtrl.prototype.onFocus = function() {
            var input = this.$element[0].querySelector("input");
            input && input.focus();
            this.resetSelectedChip();
        };
        MdChipsCtrl.prototype.onInputFocus = function() {
            this.inputHasFocus = !0;
            this.resetSelectedChip();
        };
        MdChipsCtrl.prototype.onInputBlur = function() {
            this.inputHasFocus = !1;
        };
        MdChipsCtrl.prototype.configureUserInput = function(inputElement) {
            var ngModelCtrl = (this.userInputElement = inputElement).controller("ngModel");
            ngModelCtrl != this.ngModelCtrl && (this.userInputNgModelCtrl = ngModelCtrl);
            var scope = this.$scope, ctrl = this, scopeApplyFn = function(event, fn) {
                scope.$evalAsync(angular.bind(ctrl, fn, event));
            };
            inputElement.attr({
                tabindex: 0
            }).on("keydown", function(event) {
                scopeApplyFn(event, ctrl.inputKeydown);
            }).on("focus", function(event) {
                scopeApplyFn(event, ctrl.onInputFocus);
            }).on("blur", function(event) {
                scopeApplyFn(event, ctrl.onInputBlur);
            });
        };
        MdChipsCtrl.prototype.configureAutocomplete = function(ctrl) {
            if (ctrl) {
                this.hasAutocomplete = !0;
                ctrl.registerSelectedItemWatcher(angular.bind(this, function(item) {
                    if (item) {
                        this.appendChip(item);
                        this.resetChipBuffer();
                    }
                }));
                this.$element.find("input").on("focus", angular.bind(this, this.onInputFocus)).on("blur", angular.bind(this, this.onInputBlur));
            }
        };
        MdChipsCtrl.prototype.hasFocus = function() {
            return this.inputHasFocus || 0 <= this.selectedChip;
        };
    }();
    !function() {
        angular.module("material.components.chips").directive("mdChips", MdChips);
        var MD_CHIPS_TEMPLATE = '      <md-chips-wrap          ng-if="!$mdChipsCtrl.readonly || $mdChipsCtrl.items.length > 0"          ng-keydown="$mdChipsCtrl.chipKeydown($event)"          ng-class="{ \'md-focused\': $mdChipsCtrl.hasFocus(), \'md-readonly\': !$mdChipsCtrl.ngModelCtrl }"          class="md-chips">        <md-chip ng-repeat="$chip in $mdChipsCtrl.items"            index="{{$index}}"            ng-class="{\'md-focused\': $mdChipsCtrl.selectedChip == $index, \'md-readonly\': $mdChipsCtrl.readonly}">          <div class="md-chip-content"              tabindex="-1"              aria-hidden="true"              ng-focus="!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)"              md-chip-transclude="$mdChipsCtrl.chipContentsTemplate"></div>          <div ng-if="!$mdChipsCtrl.readonly"               class="md-chip-remove-container"               md-chip-transclude="$mdChipsCtrl.chipRemoveTemplate"></div>        </md-chip>        <div ng-if="!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl"            class="md-chip-input-container"            md-chip-transclude="$mdChipsCtrl.chipInputTemplate"></div>        </div>      </md-chips-wrap>', CHIP_INPUT_TEMPLATE = '        <input            class="md-input"            tabindex="0"            placeholder="{{$mdChipsCtrl.getPlaceholder()}}"            aria-label="{{$mdChipsCtrl.getPlaceholder()}}"            ng-model="$mdChipsCtrl.chipBuffer"            ng-focus="$mdChipsCtrl.onInputFocus()"            ng-blur="$mdChipsCtrl.onInputBlur()"            ng-keydown="$mdChipsCtrl.inputKeydown($event)">', CHIP_DEFAULT_TEMPLATE = "      <span>{{$chip}}</span>", CHIP_REMOVE_TEMPLATE = '      <button          class="md-chip-remove"          ng-if="!$mdChipsCtrl.readonly"          ng-click="$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)"          type="button"          aria-hidden="true"          tabindex="-1">        <md-icon md-svg-icon="md-close"></md-icon>        <span class="md-visually-hidden">          {{$mdChipsCtrl.deleteButtonLabel}}        </span>      </button>';
        function MdChips($mdTheming, $mdUtil, $compile, $log, $timeout) {
            var templates = {
                chips: $mdUtil.processTemplate(MD_CHIPS_TEMPLATE),
                input: $mdUtil.processTemplate(CHIP_INPUT_TEMPLATE),
                default: $mdUtil.processTemplate(CHIP_DEFAULT_TEMPLATE),
                remove: $mdUtil.processTemplate(CHIP_REMOVE_TEMPLATE)
            };
            return {
                template: function(element, attrs) {
                    attrs.$mdUserTemplate = element.clone();
                    return templates.chips;
                },
                require: [ "mdChips" ],
                restrict: "E",
                controller: "MdChipsCtrl",
                controllerAs: "$mdChipsCtrl",
                bindToController: !0,
                compile: function(element, attr) {
                    var userTemplate = attr.$mdUserTemplate;
                    attr.$mdUserTemplate = null;
                    var chipRemoveTemplate = getTemplateByQuery("md-chips>*[md-chip-remove]") || templates.remove, chipContentsTemplate = getTemplateByQuery("md-chips>md-chip-template") || templates.default, chipInputTemplate = getTemplateByQuery("md-chips>md-autocomplete") || getTemplateByQuery("md-chips>input") || templates.input, staticChips = userTemplate.find("md-chip");
                    userTemplate[0].querySelector("md-chip-template>*[md-chip-remove]") && $log.warn("invalid placement of md-chip-remove within md-chip-template.");
                    function getTemplateByQuery(query) {
                        if (attr.ngModel) {
                            var element = userTemplate[0].querySelector(query);
                            return element && element.outerHTML;
                        }
                    }
                    return function(scope, element, attrs, controllers) {
                        $mdUtil.initOptionalProperties(scope, attr);
                        $mdTheming(element);
                        var mdChipsCtrl = controllers[0];
                        mdChipsCtrl.chipContentsTemplate = chipContentsTemplate;
                        mdChipsCtrl.chipRemoveTemplate = chipRemoveTemplate;
                        mdChipsCtrl.chipInputTemplate = chipInputTemplate;
                        element.attr({
                            "aria-hidden": !0,
                            tabindex: -1
                        }).on("focus", function() {
                            mdChipsCtrl.onFocus();
                        });
                        if (attr.ngModel) {
                            mdChipsCtrl.configureNgModel(element.controller("ngModel"));
                            attrs.mdTransformChip && mdChipsCtrl.useTransformChipExpression();
                            attrs.mdOnAppend && mdChipsCtrl.useOnAppendExpression();
                            attrs.mdOnAdd && mdChipsCtrl.useOnAddExpression();
                            attrs.mdOnRemove && mdChipsCtrl.useOnRemoveExpression();
                            attrs.mdOnSelect && mdChipsCtrl.useOnSelectExpression();
                            chipInputTemplate != templates.input && scope.$watch("$mdChipsCtrl.readonly", function(readonly) {
                                readonly || $mdUtil.nextTick(function() {
                                    0 === chipInputTemplate.indexOf("<md-autocomplete") && mdChipsCtrl.configureAutocomplete(element.find("md-autocomplete").controller("mdAutocomplete"));
                                    mdChipsCtrl.configureUserInput(element.find("input"));
                                });
                            });
                            $mdUtil.nextTick(function() {
                                var input = element.find("input");
                                input && input.toggleClass("md-input", !0);
                            });
                        }
                        if (0 < staticChips.length) {
                            var compiledStaticChips = $compile(staticChips.clone())(scope.$parent);
                            $timeout(function() {
                                element.find("md-chips-wrap").prepend(compiledStaticChips);
                            });
                        }
                    };
                },
                scope: {
                    readonly: "=readonly",
                    placeholder: "@",
                    secondaryPlaceholder: "@",
                    transformChip: "&mdTransformChip",
                    onAppend: "&mdOnAppend",
                    onAdd: "&mdOnAdd",
                    onRemove: "&mdOnRemove",
                    onSelect: "&mdOnSelect",
                    deleteHint: "@",
                    deleteButtonLabel: "@",
                    separatorKeys: "=?mdSeparatorKeys",
                    requireMatch: "=?mdRequireMatch"
                }
            };
        }
        MdChips.$inject = [ "$mdTheming", "$mdUtil", "$compile", "$log", "$timeout" ];
    }();
    !function() {
        angular.module("material.components.chips").controller("MdContactChipsCtrl", MdContactChipsCtrl);
        function MdContactChipsCtrl() {
            this.selectedItem = null;
            this.searchText = "";
        }
        MdContactChipsCtrl.prototype.queryContact = function(searchText) {
            var results = this.contactQuery({
                $query: searchText
            });
            return this.filterSelected ? results.filter(angular.bind(this, this.filterSelectedContacts)) : results;
        };
        MdContactChipsCtrl.prototype.itemName = function(item) {
            return item[this.contactName];
        };
        MdContactChipsCtrl.prototype.filterSelectedContacts = function(contact) {
            return -1 == this.contacts.indexOf(contact);
        };
    }();
    !function() {
        angular.module("material.components.chips").directive("mdContactChips", MdContactChips);
        var MD_CONTACT_CHIPS_TEMPLATE = '      <md-chips class="md-contact-chips"          ng-model="$mdContactChipsCtrl.contacts"          md-require-match="$mdContactChipsCtrl.requireMatch"          md-autocomplete-snap>          <md-autocomplete              md-menu-class="md-contact-chips-suggestions"              md-selected-item="$mdContactChipsCtrl.selectedItem"              md-search-text="$mdContactChipsCtrl.searchText"              md-items="item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)"              md-item-text="$mdContactChipsCtrl.itemName(item)"              md-no-cache="true"              md-autoselect              placeholder="{{$mdContactChipsCtrl.contacts.length == 0 ?                  $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}">            <div class="md-contact-suggestion">              <img                   ng-src="{{item[$mdContactChipsCtrl.contactImage]}}"                  alt="{{item[$mdContactChipsCtrl.contactName]}}"                  ng-if="item[$mdContactChipsCtrl.contactImage]" />              <span class="md-contact-name" md-highlight-text="$mdContactChipsCtrl.searchText"                    md-highlight-flags="{{$mdContactChipsCtrl.highlightFlags}}">                {{item[$mdContactChipsCtrl.contactName]}}              </span>              <span class="md-contact-email" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>            </div>          </md-autocomplete>          <md-chip-template>            <div class="md-contact-avatar">              <img                   ng-src="{{$chip[$mdContactChipsCtrl.contactImage]}}"                  alt="{{$chip[$mdContactChipsCtrl.contactName]}}"                  ng-if="$chip[$mdContactChipsCtrl.contactImage]" />            </div>            <div class="md-contact-name">              {{$chip[$mdContactChipsCtrl.contactName]}}            </div>          </md-chip-template>      </md-chips>';
        function MdContactChips($mdTheming, $mdUtil) {
            return {
                template: function(element, attrs) {
                    return MD_CONTACT_CHIPS_TEMPLATE;
                },
                restrict: "E",
                controller: "MdContactChipsCtrl",
                controllerAs: "$mdContactChipsCtrl",
                bindToController: !0,
                compile: function(element, attr) {
                    return function(scope, element, attrs, controllers) {
                        $mdUtil.initOptionalProperties(scope, attr);
                        $mdTheming(element);
                        element.attr("tabindex", "-1");
                    };
                },
                scope: {
                    contactQuery: "&mdContacts",
                    placeholder: "@",
                    secondaryPlaceholder: "@",
                    contactName: "@mdContactName",
                    contactImage: "@mdContactImage",
                    contactEmail: "@mdContactEmail",
                    contacts: "=ngModel",
                    requireMatch: "=?mdRequireMatch",
                    highlightFlags: "@?mdHighlightFlags"
                }
            };
        }
        MdContactChips.$inject = [ "$mdTheming", "$mdUtil" ];
    }();
    angular.module("material.components.icon").directive("mdIcon", [ "$mdIcon", "$mdTheming", "$mdAria", function($mdIcon, $mdTheming, $mdAria) {
        return {
            scope: {
                fontSet: "@mdFontSet",
                fontIcon: "@mdFontIcon",
                svgIcon: "@mdSvgIcon",
                svgSrc: "@mdSvgSrc"
            },
            restrict: "E",
            link: function(scope, element, attr) {
                $mdTheming(element);
                !function() {
                    if (!scope.svgIcon && !scope.svgSrc) {
                        scope.fontIcon && element.addClass("md-font " + scope.fontIcon);
                        element.addClass($mdIcon.fontSet(scope.fontSet));
                    }
                }();
                var parent, label = attr.alt || scope.fontIcon || scope.svgIcon || element.text(), attrName = attr.$normalize(attr.$attr.mdSvgIcon || attr.$attr.mdSvgSrc || "");
                if (!attr["aria-label"]) if ("" == label || ((parent = element.parent()).attr("aria-label") || parent.text() || parent.parent().attr("aria-label") || parent.parent().text())) element.text() || $mdAria.expect(element, "aria-hidden", "true"); else {
                    $mdAria.expect(element, "aria-label", label);
                    $mdAria.expect(element, "role", "img");
                }
                attrName && attr.$observe(attrName, function(attrVal) {
                    element.empty();
                    attrVal && $mdIcon(attrVal).then(function(svg) {
                        element.append(svg);
                    });
                });
            }
        };
    } ]);
    !function() {
        angular.module("material.components.icon").provider("$mdIcon", MdIconProvider);
        var config = {
            defaultViewBoxSize: 24,
            defaultFontSet: "material-icons",
            fontSets: []
        };
        function MdIconProvider() {}
        MdIconProvider.prototype = {
            icon: function(id, url, viewBoxSize) {
                -1 == id.indexOf(":") && (id = "$default:" + id);
                config[id] = new ConfigurationItem(url, viewBoxSize);
                return this;
            },
            iconSet: function(id, url, viewBoxSize) {
                config[id] = new ConfigurationItem(url, viewBoxSize);
                return this;
            },
            defaultIconSet: function(url, viewBoxSize) {
                config.$default || (config.$default = new ConfigurationItem(url, viewBoxSize));
                config.$default.viewBoxSize = viewBoxSize || config.defaultViewBoxSize;
                return this;
            },
            defaultViewBoxSize: function(viewBoxSize) {
                config.defaultViewBoxSize = viewBoxSize;
                return this;
            },
            fontSet: function(alias, className) {
                config.fontSets.push({
                    alias: alias,
                    fontSet: className || alias
                });
                return this;
            },
            defaultFontSet: function(className) {
                config.defaultFontSet = className || "";
                return this;
            },
            defaultIconSize: function(iconSize) {
                config.defaultIconSize = iconSize;
                return this;
            },
            preloadIcons: function($templateCache) {
                var iconProvider = this;
                [ {
                    id: "md-tabs-arrow",
                    url: "md-tabs-arrow.svg",
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><polygon points="15.4,7.4 14,6 8,12 14,18 15.4,16.6 10.8,12 "/></g></svg>'
                }, {
                    id: "md-close",
                    url: "md-close.svg",
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"/></g></svg>'
                }, {
                    id: "md-cancel",
                    url: "md-cancel.svg",
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M12 2c-5.53 0-10 4.47-10 10s4.47 10 10 10 10-4.47 10-10-4.47-10-10-10zm5 13.59l-1.41 1.41-3.59-3.59-3.59 3.59-1.41-1.41 3.59-3.59-3.59-3.59 1.41-1.41 3.59 3.59 3.59-3.59 1.41 1.41-3.59 3.59 3.59 3.59z"/></g></svg>'
                }, {
                    id: "md-menu",
                    url: "md-menu.svg",
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><path d="M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z" /></svg>'
                }, {
                    id: "md-toggle-arrow",
                    url: "md-toggle-arrow-svg",
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 48 48"><path d="M24 16l-12 12 2.83 2.83 9.17-9.17 9.17 9.17 2.83-2.83z"/><path d="M0 0h48v48h-48z" fill="none"/></svg>'
                }, {
                    id: "md-calendar",
                    url: "md-calendar.svg",
                    svg: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/></svg>'
                } ].forEach(function(asset) {
                    iconProvider.icon(asset.id, asset.url);
                    $templateCache.put(asset.url, asset.svg);
                });
            },
            $get: [ "$http", "$q", "$log", "$templateCache", function($http, $q, $log, $templateCache) {
                this.preloadIcons($templateCache);
                return MdIconService(config, $http, $q, $log, $templateCache);
            } ]
        };
        function ConfigurationItem(url, viewBoxSize) {
            this.url = url;
            this.viewBoxSize = viewBoxSize || config.defaultViewBoxSize;
        }
        function MdIconService(config, $http, $q, $log, $templateCache) {
            var iconCache = {}, urlRegex = /[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/i;
            Icon.prototype = {
                clone: function() {
                    return this.element.cloneNode(!0);
                },
                prepare: function() {
                    var viewBoxSize = this.config ? this.config.viewBoxSize : config.defaultViewBoxSize;
                    angular.forEach({
                        fit: "",
                        height: "100%",
                        width: "100%",
                        preserveAspectRatio: "xMidYMid meet",
                        viewBox: this.element.getAttribute("viewBox") || "0 0 " + viewBoxSize + " " + viewBoxSize
                    }, function(val, attr) {
                        this.element.setAttribute(attr, val);
                    }, this);
                    angular.forEach({
                        "pointer-events": "none",
                        display: "block"
                    }, function(val, style) {
                        this.element.style[style] = val;
                    }, this);
                }
            };
            getIcon.fontSet = function(alias) {
                if (angular.isUndefined(alias) || !alias || !alias.length) return config.defaultFontSet;
                var result = alias;
                angular.forEach(config.fontSets, function(it) {
                    it.alias == alias && (result = it.fontSet || result);
                });
                return result;
            };
            return getIcon;
            function getIcon(id) {
                if (iconCache[id = id || ""]) return $q.when(iconCache[id].clone());
                if (urlRegex.test(id)) return loadByURL(id).then(cacheIcon(id));
                -1 == id.indexOf(":") && (id = "$default:" + id);
                return (config[id] ? loadByID : loadFromIconSet)(id).then(cacheIcon(id));
            }
            function cacheIcon(id) {
                return function(icon) {
                    iconCache[id] = (target = icon, angular.isDefined(target.element) && angular.isDefined(target.config) ? icon : new Icon(icon, config[id]));
                    var target;
                    return iconCache[id].clone();
                };
            }
            function loadByID(id) {
                var iconConfig = config[id];
                return loadByURL(iconConfig.url).then(function(icon) {
                    return new Icon(icon, iconConfig);
                });
            }
            function loadFromIconSet(id) {
                var setName = id.substring(0, id.lastIndexOf(":")) || "$default", iconSetConfig = config[setName];
                return iconSetConfig ? loadByURL(iconSetConfig.url).then(function(set) {
                    var iconName = id.slice(id.lastIndexOf(":") + 1), icon = set.querySelector("#" + iconName);
                    return icon ? new Icon(icon, iconSetConfig) : announceIdNotFound(id);
                }) : announceIdNotFound(id);
                function announceIdNotFound(id) {
                    var msg = "icon " + id + " not found";
                    $log.warn(msg);
                    return $q.reject(msg || id);
                }
            }
            function loadByURL(url) {
                return $http.get(url, {
                    cache: $templateCache
                }).then(function(response) {
                    return angular.element("<div>").append(response.data).find("svg")[0];
                }).catch(announceNotFound);
            }
            function announceNotFound(err) {
                var msg = angular.isString(err) ? err : err.message || err.data || err.statusText;
                $log.warn(msg);
                return $q.reject(msg);
            }
            function Icon(el, config) {
                el && "svg" != el.tagName && (el = angular.element('<svg xmlns="http://www.w3.org/2000/svg">').append(el)[0]);
                el.getAttribute("xmlns") || el.setAttribute("xmlns", "http://www.w3.org/2000/svg");
                this.element = el;
                this.config = config;
                this.prepare();
            }
        }
        MdIconService.$inject = [ "config", "$http", "$q", "$log", "$templateCache" ];
    }();
    !function() {
        angular.module("material.components.menu").controller("mdMenuCtrl", MenuController);
        function MenuController($mdMenu, $attrs, $element, $scope, $mdUtil, $timeout, $rootScope, $q) {
            var menuContainer, triggerElement, self = this;
            this.nestLevel = parseInt($attrs.mdNestLevel, 10) || 0;
            this.init = function(setMenuContainer, opts) {
                opts = opts || {};
                menuContainer = setMenuContainer;
                (triggerElement = $element[0].querySelector("[ng-click],[ng-mouseenter]")).setAttribute("aria-expanded", "false");
                this.isInMenuBar = opts.isInMenuBar;
                this.nestedMenus = $mdUtil.nodesToArray(menuContainer[0].querySelectorAll(".md-nested-menu"));
                menuContainer.on("$mdInterimElementRemove", function() {
                    self.isOpen = !1;
                });
                var menuContainerId = "menu_container_" + $mdUtil.nextUid();
                menuContainer.attr("id", menuContainerId);
                angular.element(triggerElement).attr({
                    "aria-owns": menuContainerId,
                    "aria-haspopup": "true"
                });
                $scope.$on("$destroy", this.disableHoverListener);
            };
            var openMenuTimeout, menuItems, deregisterScopeListeners = [];
            this.enableHoverListener = function() {
                deregisterScopeListeners.push($rootScope.$on("$mdMenuOpen", function(event, el) {
                    if (menuContainer[0].contains(el[0])) {
                        self.currentlyOpenMenu = el.controller("mdMenu");
                        self.isAlreadyOpening = !1;
                        self.currentlyOpenMenu.registerContainerProxy(self.triggerContainerProxy.bind(self));
                    }
                }));
                deregisterScopeListeners.push($rootScope.$on("$mdMenuClose", function(event, el) {
                    menuContainer[0].contains(el[0]) && (self.currentlyOpenMenu = void 0);
                }));
                (menuItems = angular.element($mdUtil.nodesToArray(menuContainer[0].children[0].children))).on("mouseenter", self.handleMenuItemHover);
                menuItems.on("mouseleave", self.handleMenuItemMouseLeave);
            };
            this.disableHoverListener = function() {
                for (;deregisterScopeListeners.length; ) deregisterScopeListeners.shift()();
                menuItems && menuItems.off("mouseenter", self.handleMenuItemHover);
                menuItems && menuItems.off("mouseleave", self.handleMenuMouseLeave);
            };
            this.handleMenuItemHover = function(event) {
                if (!self.isAlreadyOpening) {
                    var nestedMenu = event.target.querySelector("md-menu") || $mdUtil.getClosest(event.target, "MD-MENU");
                    openMenuTimeout = $timeout(function() {
                        nestedMenu && (nestedMenu = angular.element(nestedMenu).controller("mdMenu"));
                        if (self.currentlyOpenMenu && self.currentlyOpenMenu != nestedMenu) {
                            var closeTo = self.nestLevel + 1;
                            self.currentlyOpenMenu.close(!0, {
                                closeTo: closeTo
                            });
                        } else if (nestedMenu && !nestedMenu.isOpen && nestedMenu.open) {
                            self.isAlreadyOpening = !0;
                            nestedMenu.open();
                        }
                    }, nestedMenu ? 100 : 250);
                    var focusableTarget = event.currentTarget.querySelector("button:not([disabled])");
                    focusableTarget && focusableTarget.focus();
                }
            };
            this.handleMenuItemMouseLeave = function() {
                if (openMenuTimeout) {
                    $timeout.cancel(openMenuTimeout);
                    openMenuTimeout = void 0;
                }
            };
            this.open = function(ev) {
                ev && ev.stopPropagation();
                ev && ev.preventDefault();
                if (!self.isOpen) {
                    self.enableHoverListener();
                    self.isOpen = !0;
                    (triggerElement = triggerElement || (ev ? ev.target : $element[0])).setAttribute("aria-expanded", "true");
                    $scope.$emit("$mdMenuOpen", $element);
                    $mdMenu.show({
                        scope: $scope,
                        mdMenuCtrl: self,
                        nestLevel: self.nestLevel,
                        element: menuContainer,
                        target: triggerElement,
                        preserveElement: !0,
                        parent: "body"
                    }).finally(function() {
                        triggerElement.setAttribute("aria-expanded", "false");
                        self.disableHoverListener();
                    });
                }
            };
            $scope.$mdOpenMenu = this.open;
            $scope.$watch(function() {
                return self.isOpen;
            }, function(isOpen) {
                if (isOpen) {
                    menuContainer.attr("aria-hidden", "false");
                    $element[0].classList.add("md-open");
                    angular.forEach(self.nestedMenus, function(el) {
                        el.classList.remove("md-open");
                    });
                } else {
                    menuContainer.attr("aria-hidden", "true");
                    $element[0].classList.remove("md-open");
                }
                $scope.$mdMenuIsOpen = self.isOpen;
            });
            this.focusMenuContainer = function() {
                var focusTarget = menuContainer[0].querySelector("[md-menu-focus-target]");
                focusTarget || (focusTarget = menuContainer[0].querySelector(".md-button"));
                focusTarget.focus();
            };
            this.registerContainerProxy = function(handler) {
                this.containerProxy = handler;
            };
            this.triggerContainerProxy = function(ev) {
                this.containerProxy && this.containerProxy(ev);
            };
            this.destroy = function() {
                return self.isOpen ? $mdMenu.destroy() : $q.when(!1);
            };
            this.close = function(skipFocus, closeOpts) {
                if (self.isOpen) {
                    self.isOpen = !1;
                    var eventDetails = angular.extend({}, closeOpts, {
                        skipFocus: skipFocus
                    });
                    $scope.$emit("$mdMenuClose", $element, eventDetails);
                    $mdMenu.hide(null, closeOpts);
                    if (!skipFocus) {
                        var el = self.restoreFocusTo || $element.find("button")[0];
                        el instanceof angular.element && (el = el[0]);
                        el && el.focus();
                    }
                }
            };
            this.positionMode = function() {
                var attachment = ($attrs.mdPositionMode || "target").split(" ");
                1 == attachment.length && attachment.push(attachment[0]);
                return {
                    left: attachment[0],
                    top: attachment[1]
                };
            };
            this.offsets = function() {
                var position = ($attrs.mdOffset || "0 0").split(" ").map(parseFloat);
                if (2 == position.length) return {
                    left: position[0],
                    top: position[1]
                };
                if (1 == position.length) return {
                    top: position[0],
                    left: position[0]
                };
                throw Error("Invalid offsets specified. Please follow format <x, y> or <n>");
            };
        }
        MenuController.$inject = [ "$mdMenu", "$attrs", "$element", "$scope", "$mdUtil", "$timeout", "$rootScope", "$q" ];
    }();
    !function() {
        angular.module("material.components.menu").directive("mdMenu", MenuDirective);
        function MenuDirective($mdUtil) {
            return {
                restrict: "E",
                require: [ "mdMenu", "?^mdMenuBar" ],
                controller: "mdMenuCtrl",
                scope: !0,
                compile: function(templateElement) {
                    templateElement.addClass("md-menu");
                    var triggerElement = templateElement.children()[0];
                    triggerElement.hasAttribute("ng-click") || (triggerElement = triggerElement.querySelector("[ng-click],[ng-mouseenter]") || triggerElement);
                    !triggerElement || "MD-BUTTON" != triggerElement.nodeName && "BUTTON" != triggerElement.nodeName || triggerElement.hasAttribute("type") || triggerElement.setAttribute("type", "button");
                    if (2 != templateElement.children().length) throw Error("Invalid HTML for md-menu: Expected two children elements.");
                    triggerElement && triggerElement.setAttribute("aria-haspopup", "true");
                    var nestedMenus = templateElement[0].querySelectorAll("md-menu"), nestingDepth = parseInt(templateElement[0].getAttribute("md-nest-level"), 10) || 0;
                    nestedMenus && angular.forEach($mdUtil.nodesToArray(nestedMenus), function(menuEl) {
                        menuEl.hasAttribute("md-position-mode") || menuEl.setAttribute("md-position-mode", "cascade");
                        menuEl.classList.add("md-nested-menu");
                        menuEl.setAttribute("md-nest-level", nestingDepth + 1);
                    });
                    return link;
                }
            };
            function link(scope, element, attrs, ctrls) {
                var mdMenuCtrl = ctrls[0], isInMenuBar = null != ctrls[1], menuContainer = angular.element('<div class="md-open-menu-container md-whiteframe-z2"></div>'), menuContents = element.children()[1];
                menuContents.hasAttribute("role") || menuContents.setAttribute("role", "menu");
                menuContainer.append(menuContents);
                element.on("$destroy", function() {
                    menuContainer.remove();
                });
                element.append(menuContainer);
                menuContainer[0].style.display = "none";
                mdMenuCtrl.init(menuContainer, {
                    isInMenuBar: isInMenuBar
                });
            }
        }
        MenuDirective.$inject = [ "$mdUtil" ];
    }();
    !function() {
        angular.module("material.components.menu").provider("$mdMenu", MenuProvider);
        function MenuProvider($$interimElementProvider) {
            menuDefaultOptions.$inject = [ "$mdUtil", "$mdTheming", "$mdConstant", "$document", "$window", "$q", "$$rAF", "$animateCss", "$animate" ];
            return $$interimElementProvider("$mdMenu").setDefaults({
                methods: [ "target" ],
                options: menuDefaultOptions
            });
            function menuDefaultOptions($mdUtil, $mdTheming, $mdConstant, $document, $window, $q, $$rAF, $animateCss, $animate) {
                var animator = $mdUtil.dom.animator;
                return {
                    parent: "body",
                    onShow: function(scope, element, opts) {
                        !function() {
                            if (!opts.target) throw Error("$mdMenu.show() expected a target to animate from in options.target");
                            angular.extend(opts, {
                                alreadyOpen: !1,
                                isRemoved: !1,
                                target: angular.element(opts.target),
                                parent: angular.element(opts.parent),
                                menuContentEl: angular.element(element[0].querySelector("md-menu-content"))
                            });
                        }();
                        $mdTheming.inherit(opts.menuContentEl, opts.target);
                        opts.cleanupResizing = function() {
                            var repositionMenu = (target = element, options = opts, $$rAF.throttle(function() {
                                if (!opts.isRemoved) {
                                    var position = calculateMenuPosition(target, options);
                                    target.css(animator.toCss(position));
                                }
                            }));
                            var target, options;
                            $window.addEventListener("resize", repositionMenu);
                            $window.addEventListener("orientationchange", repositionMenu);
                            return function() {
                                $window.removeEventListener("resize", repositionMenu);
                                $window.removeEventListener("orientationchange", repositionMenu);
                            };
                        }();
                        opts.hideBackdrop = function(scope, element, options) {
                            if (options.nestLevel) return angular.noop;
                            options.disableParentScroll && !$mdUtil.getClosest(options.target, "MD-DIALOG") ? options.restoreScroll = $mdUtil.disableScrollAround(options.element, options.parent) : options.disableParentScroll = !1;
                            if (options.hasBackdrop) {
                                options.backdrop = $mdUtil.createBackdrop(scope, "md-menu-backdrop md-click-catcher");
                                $animate.enter(options.backdrop, $document[0].body);
                            }
                            return function() {
                                options.backdrop && options.backdrop.remove();
                                options.disableParentScroll && options.restoreScroll();
                            };
                        }(scope, 0, opts);
                        return function() {
                            opts.parent.append(element);
                            element[0].style.display = "";
                            return $q(function(resolve) {
                                var position = calculateMenuPosition(element, opts);
                                element.removeClass("md-leave");
                                $animateCss(element, {
                                    addClass: "md-active",
                                    from: animator.toCss(position),
                                    to: animator.toCss({
                                        transform: ""
                                    })
                                }).start().then(resolve);
                            });
                        }().then(function(response) {
                            opts.alreadyOpen = !0;
                            opts.cleanupInteraction = function() {
                                element.addClass("md-clickable");
                                opts.backdrop && opts.backdrop.on("click", onBackdropClick);
                                opts.menuContentEl.on("keydown", onMenuKeyDown);
                                opts.menuContentEl[0].addEventListener("click", captureClickListener, !0);
                                var focusTarget = opts.menuContentEl[0].querySelector("[md-menu-focus-target]");
                                if (!focusTarget) {
                                    var firstChild = opts.menuContentEl[0].firstElementChild;
                                    focusTarget = firstChild && (firstChild.querySelector(".md-button:not([disabled])") || firstChild.firstElementChild);
                                }
                                focusTarget && focusTarget.focus();
                                return function() {
                                    element.removeClass("md-clickable");
                                    opts.backdrop && opts.backdrop.off("click", onBackdropClick);
                                    opts.menuContentEl.off("keydown", onMenuKeyDown);
                                    opts.menuContentEl[0].removeEventListener("click", captureClickListener, !0);
                                };
                                function onMenuKeyDown(ev) {
                                    var handled;
                                    switch (ev.keyCode) {
                                      case $mdConstant.KEY_CODE.ESCAPE:
                                        opts.mdMenuCtrl.close(!1, {
                                            closeAll: !0
                                        });
                                        handled = !0;
                                        break;

                                      case $mdConstant.KEY_CODE.UP_ARROW:
                                        focusMenuItem(ev, opts.menuContentEl, opts, -1) || opts.nestLevel || opts.mdMenuCtrl.triggerContainerProxy(ev);
                                        handled = !0;
                                        break;

                                      case $mdConstant.KEY_CODE.DOWN_ARROW:
                                        focusMenuItem(ev, opts.menuContentEl, opts, 1) || opts.nestLevel || opts.mdMenuCtrl.triggerContainerProxy(ev);
                                        handled = !0;
                                        break;

                                      case $mdConstant.KEY_CODE.LEFT_ARROW:
                                        opts.nestLevel ? opts.mdMenuCtrl.close() : opts.mdMenuCtrl.triggerContainerProxy(ev);
                                        handled = !0;
                                        break;

                                      case $mdConstant.KEY_CODE.RIGHT_ARROW:
                                        var parentMenu = $mdUtil.getClosest(ev.target, "MD-MENU");
                                        parentMenu && parentMenu != opts.parent[0] ? ev.target.click() : opts.mdMenuCtrl.triggerContainerProxy(ev);
                                        handled = !0;
                                    }
                                    if (handled) {
                                        ev.preventDefault();
                                        ev.stopImmediatePropagation();
                                    }
                                }
                                function onBackdropClick(e) {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    scope.$apply(function() {
                                        opts.mdMenuCtrl.close(!0, {
                                            closeAll: !0
                                        });
                                    });
                                }
                                function captureClickListener(e) {
                                    var target = e.target;
                                    do {
                                        if (target == opts.menuContentEl[0]) return;
                                        if ((hasAnyAttribute(target, [ "ng-click", "ng-href", "ui-sref" ]) || "BUTTON" == target.nodeName || "MD-BUTTON" == target.nodeName) && !hasAnyAttribute(target, [ "md-prevent-menu-close" ])) {
                                            var closestMenu = $mdUtil.getClosest(target, "MD-MENU");
                                            target.hasAttribute("disabled") || closestMenu && closestMenu != opts.parent[0] || scope.$apply(function() {
                                                opts.mdMenuCtrl.close(!0, {
                                                    closeAll: !0
                                                });
                                            });
                                            break;
                                        }
                                    } while (target = target.parentNode);
                                    function hasAnyAttribute(target, attrs) {
                                        if (!target) return !1;
                                        for (var attr, i = 0; attr = attrs[i]; ++i) for (var rawAttr, altForms = [ attr, "data-" + attr, "x-" + attr ], j = 0; rawAttr = altForms[j]; ++j) if (target.hasAttribute(rawAttr)) return !0;
                                        return !1;
                                    }
                                }
                            }();
                            return response;
                        });
                    },
                    onRemove: function(scope, element, opts) {
                        opts.cleanupInteraction();
                        opts.cleanupResizing();
                        opts.hideBackdrop();
                        return !0 === opts.$destroy ? detachAndClean() : $animateCss(element, {
                            addClass: "md-leave"
                        }).start().then(detachAndClean);
                        function detachAndClean() {
                            element.removeClass("md-active");
                            !function(element, opts) {
                                opts.preserveElement ? toNode(element).style.display = "none" : toNode(element).parentNode === toNode(opts.parent) && toNode(opts.parent).removeChild(toNode(element));
                            }(element, opts);
                            opts.alreadyOpen = !1;
                        }
                    },
                    hasBackdrop: !0,
                    disableParentScroll: !0,
                    skipCompile: !0,
                    preserveScope: !0,
                    skipHide: !0,
                    themable: !0
                };
                function focusMenuItem(e, menuEl, opts, direction) {
                    for (var didFocus, currentItem = $mdUtil.getClosest(e.target, "MD-MENU-ITEM"), items = $mdUtil.nodesToArray(menuEl[0].children), i = items.indexOf(currentItem) + direction; 0 <= i && i < items.length; i += direction) {
                        if (didFocus = attemptFocus(items[i].querySelector(".md-button"))) break;
                    }
                    return didFocus;
                }
                function attemptFocus(el) {
                    if (el && -1 != el.getAttribute("tabindex")) {
                        el.focus();
                        return $document[0].activeElement == el;
                    }
                }
                function calculateMenuPosition(el, opts) {
                    var alignTarget, containerNode = el[0], openMenuNode = el[0].firstElementChild, openMenuNodeRect = openMenuNode.getBoundingClientRect(), boundryNodeRect = $document[0].body.getBoundingClientRect(), menuStyle = $window.getComputedStyle(openMenuNode), originNode = opts.target[0].querySelector("[md-menu-origin]") || opts.target[0], originNodeRect = originNode.getBoundingClientRect(), bounds = {
                        left: boundryNodeRect.left + 8,
                        top: Math.max(boundryNodeRect.top, 0) + 8,
                        bottom: Math.max(boundryNodeRect.bottom, Math.max(boundryNodeRect.top, 0) + boundryNodeRect.height) - 8,
                        right: boundryNodeRect.right - 8
                    }, alignTargetRect = {
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0
                    }, existingOffsets = {
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0
                    }, positionMode = opts.mdMenuCtrl.positionMode();
                    if (("target" == positionMode.top || "target" == positionMode.left || "target-right" == positionMode.left) && (alignTarget = function() {
                        for (var i = 0; i < openMenuNode.children.length; ++i) if ("none" != $window.getComputedStyle(openMenuNode.children[i]).display) return openMenuNode.children[i];
                    }())) {
                        alignTargetRect = (alignTarget = (alignTarget = alignTarget.firstElementChild || alignTarget).querySelector("[md-menu-align-target]") || alignTarget).getBoundingClientRect();
                        existingOffsets = {
                            top: parseFloat(containerNode.style.top || 0),
                            left: parseFloat(containerNode.style.left || 0)
                        };
                    }
                    var position = {}, transformOrigin = "top ";
                    switch (positionMode.top) {
                      case "target":
                        position.top = existingOffsets.top + originNodeRect.top - alignTargetRect.top;
                        break;

                      case "cascade":
                        position.top = originNodeRect.top - parseFloat(menuStyle.paddingTop) - originNode.style.top;
                        break;

                      case "bottom":
                        position.top = originNodeRect.top + originNodeRect.height;
                        break;

                      default:
                        throw new Error('Invalid target mode "' + positionMode.top + '" specified for md-menu on Y axis.');
                    }
                    switch (positionMode.left) {
                      case "target":
                        position.left = existingOffsets.left + originNodeRect.left - alignTargetRect.left;
                        transformOrigin += "left";
                        break;

                      case "target-right":
                        position.left = originNodeRect.right - openMenuNodeRect.width + (openMenuNodeRect.right - alignTargetRect.right);
                        transformOrigin += "right";
                        break;

                      case "cascade":
                        var willFitRight = originNodeRect.right + openMenuNodeRect.width < bounds.right;
                        position.left = willFitRight ? originNodeRect.right - originNode.style.left : originNodeRect.left - originNode.style.left - openMenuNodeRect.width;
                        transformOrigin += willFitRight ? "left" : "right";
                        break;

                      case "left":
                        position.left = originNodeRect.left;
                        transformOrigin += "left";
                        break;

                      default:
                        throw new Error('Invalid target mode "' + positionMode.left + '" specified for md-menu on X axis.');
                    }
                    var offsets = opts.mdMenuCtrl.offsets();
                    position.top += offsets.top;
                    position.left += offsets.left;
                    !function(pos) {
                        pos.top = Math.max(Math.min(pos.top, bounds.bottom - containerNode.offsetHeight), bounds.top);
                        pos.left = Math.max(Math.min(pos.left, bounds.right - containerNode.offsetWidth), bounds.left);
                    }(position);
                    var scaleX = Math.round(100 * Math.min(originNodeRect.width / containerNode.offsetWidth, 1)) / 100, scaleY = Math.round(100 * Math.min(originNodeRect.height / containerNode.offsetHeight, 1)) / 100;
                    return {
                        top: Math.round(position.top),
                        left: Math.round(position.left),
                        transform: opts.alreadyOpen ? void 0 : $mdUtil.supplant("scale({0},{1})", [ scaleX, scaleY ]),
                        transformOrigin: transformOrigin
                    };
                }
            }
            function toNode(el) {
                el instanceof angular.element && (el = el[0]);
                return el;
            }
        }
        MenuProvider.$inject = [ "$$interimElementProvider" ];
    }();
    !function() {
        angular.module("material.components.menuBar").controller("MenuBarController", MenuBarController);
        var BOUND_MENU_METHODS = [ "handleKeyDown", "handleMenuHover", "scheduleOpenHoveredMenu", "cancelScheduledOpen" ];
        function MenuBarController($scope, $rootScope, $element, $attrs, $mdConstant, $document, $mdUtil, $timeout) {
            this.$element = $element;
            this.$attrs = $attrs;
            this.$mdConstant = $mdConstant;
            this.$mdUtil = $mdUtil;
            this.$document = $document;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$timeout = $timeout;
            var self = this;
            angular.forEach(BOUND_MENU_METHODS, function(methodName) {
                self[methodName] = angular.bind(self, self[methodName]);
            });
        }
        MenuBarController.$inject = [ "$scope", "$rootScope", "$element", "$attrs", "$mdConstant", "$document", "$mdUtil", "$timeout" ];
        MenuBarController.prototype.init = function() {
            var $element = this.$element, $mdUtil = this.$mdUtil, $scope = this.$scope, self = this, deregisterFns = [];
            $element.on("keydown", this.handleKeyDown);
            this.parentToolbar = $mdUtil.getClosest($element, "MD-TOOLBAR");
            deregisterFns.push(this.$rootScope.$on("$mdMenuOpen", function(event, el) {
                if (-1 != self.getMenus().indexOf(el[0])) {
                    $element[0].classList.add("md-open");
                    el[0].classList.add("md-open");
                    self.currentlyOpenMenu = el.controller("mdMenu");
                    self.currentlyOpenMenu.registerContainerProxy(self.handleKeyDown);
                    self.enableOpenOnHover();
                }
            }));
            deregisterFns.push(this.$rootScope.$on("$mdMenuClose", function(event, el, opts) {
                var rootMenus = self.getMenus();
                if (-1 != rootMenus.indexOf(el[0])) {
                    $element[0].classList.remove("md-open");
                    el[0].classList.remove("md-open");
                }
                if ($element[0].contains(el[0])) {
                    for (var parentMenu = el[0]; parentMenu && -1 == rootMenus.indexOf(parentMenu); ) parentMenu = $mdUtil.getClosest(parentMenu, "MD-MENU", !0);
                    if (parentMenu) {
                        opts.skipFocus || parentMenu.querySelector("button:not([disabled])").focus();
                        self.currentlyOpenMenu = void 0;
                        self.disableOpenOnHover();
                        self.setKeyboardMode(!0);
                    }
                }
            }));
            $scope.$on("$destroy", function() {
                for (;deregisterFns.length; ) deregisterFns.shift()();
            });
            this.setKeyboardMode(!0);
        };
        MenuBarController.prototype.setKeyboardMode = function(enabled) {
            enabled ? this.$element[0].classList.add("md-keyboard-mode") : this.$element[0].classList.remove("md-keyboard-mode");
        };
        MenuBarController.prototype.enableOpenOnHover = function() {
            if (!this.openOnHoverEnabled) {
                this.openOnHoverEnabled = !0;
                var parentToolbar;
                if (parentToolbar = this.parentToolbar) {
                    parentToolbar.dataset.mdRestoreStyle = parentToolbar.getAttribute("style");
                    parentToolbar.style.position = "relative";
                    parentToolbar.style.zIndex = 100;
                }
                angular.element(this.getMenus()).on("mouseenter", this.handleMenuHover);
            }
        };
        MenuBarController.prototype.handleMenuHover = function(e) {
            this.setKeyboardMode(!1);
            this.openOnHoverEnabled && this.scheduleOpenHoveredMenu(e);
        };
        MenuBarController.prototype.disableOpenOnHover = function() {
            if (this.openOnHoverEnabled) {
                this.openOnHoverEnabled = !1;
                var parentToolbar;
                (parentToolbar = this.parentToolbar) && parentToolbar.setAttribute("style", parentToolbar.dataset.mdRestoreStyle || "");
                angular.element(this.getMenus()).off("mouseenter", this.handleMenuHover);
            }
        };
        MenuBarController.prototype.scheduleOpenHoveredMenu = function(e) {
            var menuCtrl = angular.element(e.currentTarget).controller("mdMenu");
            this.setKeyboardMode(!1);
            this.scheduleOpenMenu(menuCtrl);
        };
        MenuBarController.prototype.scheduleOpenMenu = function(menuCtrl) {
            var self = this, $timeout = this.$timeout;
            if (menuCtrl != self.currentlyOpenMenu) {
                $timeout.cancel(self.pendingMenuOpen);
                self.pendingMenuOpen = $timeout(function() {
                    self.pendingMenuOpen = void 0;
                    self.currentlyOpenMenu && self.currentlyOpenMenu.close(!0, {
                        closeAll: !0
                    });
                    menuCtrl.open();
                }, 200, !1);
            }
        };
        MenuBarController.prototype.handleKeyDown = function(e) {
            var handled, newMenu, newMenuCtrl, keyCodes = this.$mdConstant.KEY_CODE, currentMenu = this.currentlyOpenMenu, wasOpen = currentMenu && currentMenu.isOpen;
            this.setKeyboardMode(!0);
            switch (e.keyCode) {
              case keyCodes.DOWN_ARROW:
                currentMenu ? currentMenu.focusMenuContainer() : this.openFocusedMenu();
                handled = !0;
                break;

              case keyCodes.UP_ARROW:
                currentMenu && currentMenu.close();
                handled = !0;
                break;

              case keyCodes.LEFT_ARROW:
                newMenu = this.focusMenu(-1);
                if (wasOpen) {
                    newMenuCtrl = angular.element(newMenu).controller("mdMenu");
                    this.scheduleOpenMenu(newMenuCtrl);
                }
                handled = !0;
                break;

              case keyCodes.RIGHT_ARROW:
                newMenu = this.focusMenu(1);
                if (wasOpen) {
                    newMenuCtrl = angular.element(newMenu).controller("mdMenu");
                    this.scheduleOpenMenu(newMenuCtrl);
                }
                handled = !0;
            }
            if (handled) {
                e && e.preventDefault && e.preventDefault();
                e && e.stopImmediatePropagation && e.stopImmediatePropagation();
            }
        };
        MenuBarController.prototype.focusMenu = function(direction) {
            var menus = this.getMenus(), focusedIndex = this.getFocusedMenuIndex();
            -1 == focusedIndex && (focusedIndex = this.getOpenMenuIndex());
            var changed = !1;
            if (-1 == focusedIndex) focusedIndex = 0; else if (direction < 0 && 0 < focusedIndex || 0 < direction && focusedIndex < menus.length - direction) {
                focusedIndex += direction;
                changed = !0;
            }
            if (changed) {
                menus[focusedIndex].querySelector("button").focus();
                return menus[focusedIndex];
            }
        };
        MenuBarController.prototype.openFocusedMenu = function() {
            var menu = this.getFocusedMenu();
            menu && angular.element(menu).controller("mdMenu").open();
        };
        MenuBarController.prototype.getMenus = function() {
            var $element = this.$element;
            return this.$mdUtil.nodesToArray($element[0].children).filter(function(el) {
                return "MD-MENU" == el.nodeName;
            });
        };
        MenuBarController.prototype.getFocusedMenu = function() {
            return this.getMenus()[this.getFocusedMenuIndex()];
        };
        MenuBarController.prototype.getFocusedMenuIndex = function() {
            var focusedEl = this.$mdUtil.getClosest(this.$document[0].activeElement, "MD-MENU");
            return focusedEl ? this.getMenus().indexOf(focusedEl) : -1;
        };
        MenuBarController.prototype.getOpenMenuIndex = function() {
            for (var menus = this.getMenus(), i = 0; i < menus.length; ++i) if (menus[i].classList.contains("md-open")) return i;
            return -1;
        };
    }();
    !function() {
        angular.module("material.components.menuBar").directive("mdMenuBar", MenuBarDirective);
        function MenuBarDirective($mdUtil, $mdTheming) {
            return {
                restrict: "E",
                require: "mdMenuBar",
                controller: "MenuBarController",
                compile: function(templateEl, templateAttrs) {
                    templateAttrs.ariaRole || templateEl[0].setAttribute("role", "menubar");
                    angular.forEach(templateEl[0].children, function(menuEl) {
                        if ("MD-MENU" == menuEl.nodeName) {
                            if (!menuEl.hasAttribute("md-position-mode")) {
                                menuEl.setAttribute("md-position-mode", "left bottom");
                                menuEl.querySelector("button,a").setAttribute("role", "menuitem");
                            }
                            var contentEls = $mdUtil.nodesToArray(menuEl.querySelectorAll("md-menu-content"));
                            angular.forEach(contentEls, function(contentEl) {
                                contentEl.classList.add("md-menu-bar-menu");
                                contentEl.classList.add("md-dense");
                                contentEl.hasAttribute("width") || contentEl.setAttribute("width", 5);
                            });
                        }
                    });
                    return function(scope, el, attrs, ctrl) {
                        $mdTheming(scope, el);
                        ctrl.init();
                    };
                }
            };
        }
        MenuBarDirective.$inject = [ "$mdUtil", "$mdTheming" ];
    }();
    angular.module("material.components.menuBar").directive("mdMenuDivider", function() {
        return {
            restrict: "E",
            compile: function(templateEl, templateAttrs) {
                templateAttrs.role || templateEl[0].setAttribute("role", "separator");
            }
        };
    });
    !function() {
        angular.module("material.components.menuBar").controller("MenuItemController", MenuItemController);
        function MenuItemController($scope, $element, $attrs) {
            this.$element = $element;
            this.$attrs = $attrs;
            this.$scope = $scope;
        }
        MenuItemController.$inject = [ "$scope", "$element", "$attrs" ];
        MenuItemController.prototype.init = function(ngModel) {
            var $element = this.$element, $attrs = this.$attrs;
            this.ngModel = ngModel;
            if ("checkbox" == $attrs.type || "radio" == $attrs.type) {
                this.mode = $attrs.type;
                this.iconEl = $element[0].children[0];
                this.buttonEl = $element[0].children[1];
                ngModel && this.initClickListeners();
            }
        };
        MenuItemController.prototype.clearNgAria = function() {
            var el = this.$element[0];
            angular.forEach([ "role", "tabindex", "aria-invalid", "aria-checked" ], function(attr) {
                el.removeAttribute(attr);
            });
        };
        MenuItemController.prototype.initClickListeners = function() {
            var self = this, ngModel = this.ngModel, $scope = this.$scope, $attrs = this.$attrs, mode = (this.$element, 
            this.mode);
            this.handleClick = angular.bind(this, this.handleClick);
            var icon = this.iconEl, button = angular.element(this.buttonEl), handleClick = this.handleClick;
            $attrs.$observe("disabled", setDisabled);
            setDisabled($attrs.disabled);
            ngModel.$render = function() {
                self.clearNgAria();
                if (function() {
                    {
                        if ("radio" != mode) return ngModel.$modelValue;
                        var val = $attrs.ngValue ? $scope.$eval($attrs.ngValue) : $attrs.value;
                        return ngModel.$modelValue == val;
                    }
                }()) {
                    icon.style.display = "";
                    button.attr("aria-checked", "true");
                } else {
                    icon.style.display = "none";
                    button.attr("aria-checked", "false");
                }
            };
            $scope.$$postDigest(ngModel.$render);
            function setDisabled(disabled) {
                disabled ? button.off("click", handleClick) : button.on("click", handleClick);
            }
        };
        MenuItemController.prototype.handleClick = function(e) {
            var newVal, mode = this.mode, ngModel = this.ngModel, $attrs = this.$attrs;
            "checkbox" == mode ? newVal = !ngModel.$modelValue : "radio" == mode && (newVal = $attrs.ngValue ? this.$scope.$eval($attrs.ngValue) : $attrs.value);
            ngModel.$setViewValue(newVal);
            ngModel.$render();
        };
    }();
    angular.module("material.components.menuBar").directive("mdMenuItem", function() {
        return {
            require: [ "mdMenuItem", "?ngModel" ],
            priority: 210,
            compile: function(templateEl, templateAttrs) {
                if ("checkbox" == templateAttrs.type || "radio" == templateAttrs.type) {
                    var text = templateEl[0].textContent, buttonEl = angular.element('<md-button type="button"></md-button>');
                    buttonEl.html(text);
                    buttonEl.attr("tabindex", "0");
                    templateEl.html("");
                    templateEl.append(angular.element('<md-icon md-svg-icon="check"></md-icon>'));
                    templateEl.append(buttonEl);
                    templateEl[0].classList.add("md-indent");
                    setDefault("role", "checkbox" == templateAttrs.type ? "menuitemcheckbox" : "menuitemradio", buttonEl);
                    angular.forEach([ "ng-disabled" ], function(attr) {
                        if (templateEl[0].hasAttribute(attr)) {
                            var val = templateEl[0].getAttribute(attr);
                            buttonEl[0].setAttribute(attr, val);
                            templateEl[0].removeAttribute(attr);
                        }
                    });
                } else setDefault("role", "menuitem", templateEl[0].querySelector("md-button,button,a"));
                return function(scope, el, attrs, ctrls) {
                    var ctrl = ctrls[0], ngModel = ctrls[1];
                    ctrl.init(ngModel);
                };
                function setDefault(attr, val, el) {
                    (el = el || templateEl) instanceof angular.element && (el = el[0]);
                    el.hasAttribute(attr) || el.setAttribute(attr, val);
                }
            },
            controller: "MenuItemController"
        };
    });
    angular.module("material.components.tabs").directive("mdTab", function() {
        return {
            require: "^?mdTabs",
            terminal: !0,
            compile: function(element, attr) {
                var label = firstChild(element, "md-tab-label"), body = firstChild(element, "md-tab-body");
                if (0 == label.length) {
                    label = angular.element("<md-tab-label></md-tab-label>");
                    attr.label ? label.text(attr.label) : label.append(element.contents());
                    if (0 == body.length) {
                        var contents = element.contents().detach();
                        (body = angular.element("<md-tab-body></md-tab-body>")).append(contents);
                    }
                }
                element.append(label);
                body.html() && element.append(body);
                return postLink;
            },
            scope: {
                active: "=?mdActive",
                disabled: "=?ngDisabled",
                select: "&?mdOnSelect",
                deselect: "&?mdOnDeselect"
            }
        };
        function postLink(scope, element, attr, ctrl) {
            if (ctrl) {
                var index = ctrl.getTabElementIndex(element), body = firstChild(element, "md-tab-body").remove(), label = firstChild(element, "md-tab-label").remove(), data = ctrl.insertTab({
                    scope: scope,
                    parent: scope.$parent,
                    index: index,
                    element: element,
                    template: body.html(),
                    label: label.html()
                }, index);
                scope.select = scope.select || angular.noop;
                scope.deselect = scope.deselect || angular.noop;
                scope.$watch("active", function(active) {
                    active && ctrl.select(data.getIndex());
                });
                scope.$watch("disabled", function() {
                    ctrl.refreshIndex();
                });
                scope.$watch(function() {
                    return ctrl.getTabElementIndex(element);
                }, function(newIndex) {
                    data.index = newIndex;
                    ctrl.updateTabOrder();
                });
                scope.$on("$destroy", function() {
                    ctrl.removeTab(data);
                });
            }
        }
        function firstChild(element, tagName) {
            for (var children = element[0].children, i = 0, len = children.length; i < len; i++) {
                var child = children[i];
                if (child.tagName === tagName.toUpperCase()) return angular.element(child);
            }
            return angular.element();
        }
    });
    angular.module("material.components.tabs").directive("mdTabItem", function() {
        return {
            require: "^?mdTabs",
            link: function(scope, element, attr, ctrl) {
                ctrl && ctrl.attachRipple(scope, element);
            }
        };
    });
    angular.module("material.components.tabs").directive("mdTabLabel", function() {
        return {
            terminal: !0
        };
    });
    !function() {
        angular.module("material.components.tabs").directive("mdTabScroll", MdTabScroll);
        function MdTabScroll($parse) {
            return {
                restrict: "A",
                compile: function($element, attr) {
                    var fn = $parse(attr.mdTabScroll, null, !0);
                    return function(scope, element) {
                        element.on("mousewheel", function(event) {
                            scope.$apply(function() {
                                fn(scope, {
                                    $event: event
                                });
                            });
                        });
                    };
                }
            };
        }
        MdTabScroll.$inject = [ "$parse" ];
    }();
    !function() {
        angular.module("material.components.tabs").controller("MdTabsController", MdTabsController);
        function MdTabsController($scope, $element, $window, $mdConstant, $mdTabInkRipple, $mdUtil, $animateCss, $attrs, $compile, $mdTheming) {
            var ctrl = this, locked = !1, elements = getElements(), queue = [], destroyed = !1, loaded = !1;
            !function(key, handler) {
                var attr = $attrs.$normalize("md-" + key);
                handler && defineProperty(key, handler);
                $attrs.$observe(attr, function(newValue) {
                    ctrl[key] = newValue;
                });
            }("stretchTabs", function(stretchTabs) {
                angular.element(elements.wrapper).toggleClass("md-stretch-tabs", shouldStretchTabs());
                updateInkBarStyles();
            });
            defineProperty("focusIndex", function(newIndex, oldIndex) {
                if (newIndex === oldIndex) return;
                if (!elements.tabs[newIndex]) return;
                adjustOffset();
                redirectFocus();
            }, ctrl.selectedIndex || 0);
            defineProperty("offsetLeft", function(left) {
                var newValue = ctrl.shouldCenterTabs ? "" : "-" + left + "px";
                angular.element(elements.paging).css($mdConstant.CSS.TRANSFORM, "translate3d(" + newValue + ", 0, 0)");
                $scope.$broadcast("$mdTabsPaginationChanged");
            }, 0);
            defineProperty("hasContent", function(hasContent) {
                $element[hasContent ? "removeClass" : "addClass"]("md-no-tab-content");
            }, !1);
            defineProperty("maxTabWidth", function(newWidth, oldWidth) {
                newWidth !== oldWidth && $mdUtil.nextTick(ctrl.updateInkBarStyles);
            }, getMaxTabWidth());
            defineProperty("shouldPaginate", function(newValue, oldValue) {
                if (newValue !== oldValue) {
                    ctrl.maxTabWidth = getMaxTabWidth();
                    ctrl.shouldCenterTabs = shouldCenterTabs();
                    $mdUtil.nextTick(function() {
                        ctrl.maxTabWidth = getMaxTabWidth();
                        adjustOffset(ctrl.selectedIndex);
                    });
                }
            }, !1);
            defineBooleanAttribute("noInkBar", function(hide) {
                angular.element(elements.inkBar).toggleClass("ng-hide", hide);
            });
            defineBooleanAttribute("dynamicHeight", function(value) {
                $element.toggleClass("md-dynamic-height", value);
            });
            defineBooleanAttribute("noPagination");
            defineBooleanAttribute("swipeContent");
            defineBooleanAttribute("noDisconnect");
            defineBooleanAttribute("autoselect");
            defineBooleanAttribute("centerTabs", function(newValue) {
                ctrl.shouldCenterTabs = shouldCenterTabs();
            });
            defineBooleanAttribute("enableDisconnect");
            ctrl.scope = $scope;
            ctrl.parent = $scope.$parent;
            ctrl.tabs = [];
            ctrl.lastSelectedIndex = null;
            ctrl.hasFocus = !1;
            ctrl.lastClick = !0;
            ctrl.shouldCenterTabs = shouldCenterTabs();
            ctrl.updatePagination = $mdUtil.debounce(updatePagination, 100);
            ctrl.redirectFocus = redirectFocus;
            ctrl.attachRipple = function(scope, element) {
                var options = {
                    colorElement: angular.element(elements.inkBar)
                };
                $mdTabInkRipple.attach(scope, element, options);
            };
            ctrl.insertTab = function(tabData, index) {
                var hasLoaded = loaded, proto = {
                    getIndex: function() {
                        return ctrl.tabs.indexOf(tab);
                    },
                    isActive: function() {
                        return this.getIndex() === ctrl.selectedIndex;
                    },
                    isLeft: function() {
                        return this.getIndex() < ctrl.selectedIndex;
                    },
                    isRight: function() {
                        return this.getIndex() > ctrl.selectedIndex;
                    },
                    shouldRender: function() {
                        return !ctrl.noDisconnect || this.isActive();
                    },
                    hasFocus: function() {
                        return !ctrl.lastClick && ctrl.hasFocus && this.getIndex() === ctrl.focusIndex;
                    },
                    id: $mdUtil.nextUid()
                }, tab = angular.extend(proto, tabData);
                angular.isDefined(index) ? ctrl.tabs.splice(index, 0, tab) : ctrl.tabs.push(tab);
                !function() {
                    queue.forEach(function(func) {
                        $mdUtil.nextTick(func);
                    });
                    queue = [];
                }();
                !function() {
                    var hasContent = !1;
                    angular.forEach(ctrl.tabs, function(tab) {
                        tab.template && (hasContent = !0);
                    });
                    ctrl.hasContent = hasContent;
                }();
                $mdUtil.nextTick(function() {
                    updatePagination();
                    hasLoaded && ctrl.autoselect && $mdUtil.nextTick(function() {
                        $mdUtil.nextTick(function() {
                            select(ctrl.tabs.indexOf(tab));
                        });
                    });
                });
                return tab;
            };
            ctrl.removeTab = function(tabData) {
                if (destroyed) return;
                var selectedIndex = ctrl.selectedIndex, tab = ctrl.tabs.splice(tabData.getIndex(), 1)[0];
                refreshIndex();
                if (ctrl.selectedIndex === selectedIndex) {
                    tab.scope.deselect();
                    ctrl.tabs[ctrl.selectedIndex] && ctrl.tabs[ctrl.selectedIndex].scope.select();
                }
                $mdUtil.nextTick(function() {
                    updatePagination();
                    ctrl.offsetLeft = fixOffset(ctrl.offsetLeft);
                });
            };
            ctrl.select = select;
            ctrl.scroll = function(event) {
                if (!ctrl.shouldPaginate) return;
                event.preventDefault();
                ctrl.offsetLeft = fixOffset(ctrl.offsetLeft - event.wheelDelta);
            };
            ctrl.nextPage = function() {
                var i, tab, totalWidth = elements.canvas.clientWidth + ctrl.offsetLeft;
                for (i = 0; i < elements.tabs.length && !((tab = elements.tabs[i]).offsetLeft + tab.offsetWidth > totalWidth); i++) ;
                ctrl.offsetLeft = fixOffset(tab.offsetLeft);
            };
            ctrl.previousPage = function() {
                var i, tab;
                for (i = 0; i < elements.tabs.length && !((tab = elements.tabs[i]).offsetLeft + tab.offsetWidth >= ctrl.offsetLeft); i++) ;
                ctrl.offsetLeft = fixOffset(tab.offsetLeft + tab.offsetWidth - elements.canvas.clientWidth);
            };
            ctrl.keydown = function(event) {
                switch (event.keyCode) {
                  case $mdConstant.KEY_CODE.LEFT_ARROW:
                    event.preventDefault();
                    incrementIndex(-1, !0);
                    break;

                  case $mdConstant.KEY_CODE.RIGHT_ARROW:
                    event.preventDefault();
                    incrementIndex(1, !0);
                    break;

                  case $mdConstant.KEY_CODE.SPACE:
                  case $mdConstant.KEY_CODE.ENTER:
                    event.preventDefault();
                    locked || (ctrl.selectedIndex = ctrl.focusIndex);
                }
                ctrl.lastClick = !1;
            };
            ctrl.canPageForward = function() {
                var lastTab = elements.tabs[elements.tabs.length - 1];
                return lastTab && lastTab.offsetLeft + lastTab.offsetWidth > elements.canvas.clientWidth + ctrl.offsetLeft;
            };
            ctrl.canPageBack = function() {
                return 0 < ctrl.offsetLeft;
            };
            ctrl.refreshIndex = refreshIndex;
            ctrl.incrementIndex = incrementIndex;
            ctrl.getTabElementIndex = function(tabEl) {
                var tabs = $element[0].getElementsByTagName("md-tab");
                return Array.prototype.indexOf.call(tabs, tabEl[0]);
            };
            ctrl.updateInkBarStyles = $mdUtil.debounce(updateInkBarStyles, 100);
            ctrl.updateTabOrder = $mdUtil.debounce(function() {
                var selectedItem = ctrl.tabs[ctrl.selectedIndex], focusItem = ctrl.tabs[ctrl.focusIndex];
                ctrl.tabs = ctrl.tabs.sort(function(a, b) {
                    return a.index - b.index;
                });
                ctrl.selectedIndex = ctrl.tabs.indexOf(selectedItem);
                ctrl.focusIndex = ctrl.tabs.indexOf(focusItem);
            }, 100);
            !function() {
                ctrl.selectedIndex = ctrl.selectedIndex || 0;
                !function() {
                    var template = $attrs.$mdTabsTemplate, element = angular.element(elements.data);
                    element.html(template);
                    $compile(element.contents())(ctrl.parent);
                    delete $attrs.$mdTabsTemplate;
                }();
                $scope.$watch("$mdTabsCtrl.selectedIndex", handleSelectedIndexChange);
                !function() {
                    angular.element($window).on("resize", handleWindowResize);
                    $scope.$on("$destroy", cleanup);
                }();
                $mdTheming($element);
                $mdUtil.nextTick(function() {
                    updateHeightFromContent();
                    adjustOffset();
                    updateInkBarStyles();
                    ctrl.tabs[ctrl.selectedIndex] && ctrl.tabs[ctrl.selectedIndex].scope.select();
                    loaded = !0;
                    updatePagination();
                });
            }();
            function defineBooleanAttribute(key, handler) {
                var attr = $attrs.$normalize("md-" + key);
                handler && defineProperty(key, handler);
                $attrs.hasOwnProperty(attr) && updateValue($attrs[attr]);
                $attrs.$observe(attr, updateValue);
                function updateValue(newValue) {
                    ctrl[key] = "false" !== newValue;
                }
            }
            function cleanup() {
                destroyed = !0;
                angular.element($window).off("resize", handleWindowResize);
            }
            function handleSelectedIndexChange(newValue, oldValue) {
                if (newValue !== oldValue) {
                    ctrl.selectedIndex = getNearestSafeIndex(newValue);
                    ctrl.lastSelectedIndex = oldValue;
                    ctrl.updateInkBarStyles();
                    updateHeightFromContent();
                    adjustOffset(newValue);
                    $scope.$broadcast("$mdTabsChanged");
                    ctrl.tabs[oldValue] && ctrl.tabs[oldValue].scope.deselect();
                    ctrl.tabs[newValue] && ctrl.tabs[newValue].scope.select();
                }
            }
            function select(index) {
                locked || (ctrl.focusIndex = ctrl.selectedIndex = index);
                ctrl.lastClick = !0;
                $mdUtil.nextTick(function() {
                    ctrl.tabs[index].element.triggerHandler("click");
                }, !1);
            }
            function handleWindowResize() {
                ctrl.lastSelectedIndex = ctrl.selectedIndex;
                ctrl.offsetLeft = fixOffset(ctrl.offsetLeft);
                $mdUtil.nextTick(function() {
                    ctrl.updateInkBarStyles();
                    updatePagination();
                });
            }
            function getElements() {
                var elements = {};
                elements.wrapper = $element[0].getElementsByTagName("md-tabs-wrapper")[0];
                elements.data = $element[0].getElementsByTagName("md-tab-data")[0];
                elements.canvas = elements.wrapper.getElementsByTagName("md-tabs-canvas")[0];
                elements.paging = elements.canvas.getElementsByTagName("md-pagination-wrapper")[0];
                elements.tabs = elements.paging.getElementsByTagName("md-tab-item");
                elements.dummies = elements.canvas.getElementsByTagName("md-dummy-tab");
                elements.inkBar = elements.paging.getElementsByTagName("md-ink-bar")[0];
                elements.contentsWrapper = $element[0].getElementsByTagName("md-tabs-content-wrapper")[0];
                elements.contents = elements.contentsWrapper.getElementsByTagName("md-tab-content");
                return elements;
            }
            function shouldStretchTabs() {
                switch (ctrl.stretchTabs) {
                  case "always":
                    return !0;

                  case "never":
                    return !1;

                  default:
                    return !ctrl.shouldPaginate && $window.matchMedia("(max-width: 600px)").matches;
                }
            }
            function shouldCenterTabs() {
                return ctrl.centerTabs && !ctrl.shouldPaginate;
            }
            function getNearestSafeIndex(newIndex) {
                if (-1 === newIndex) return -1;
                var i, tab, maxOffset = Math.max(ctrl.tabs.length - newIndex, newIndex);
                for (i = 0; i <= maxOffset; i++) {
                    if ((tab = ctrl.tabs[newIndex + i]) && !0 !== tab.scope.disabled) return tab.getIndex();
                    if ((tab = ctrl.tabs[newIndex - i]) && !0 !== tab.scope.disabled) return tab.getIndex();
                }
                return newIndex;
            }
            function defineProperty(key, handler, value) {
                Object.defineProperty(ctrl, key, {
                    get: function() {
                        return value;
                    },
                    set: function(newValue) {
                        var oldValue = value;
                        value = newValue;
                        handler && handler(newValue, oldValue);
                    }
                });
            }
            function updatePagination() {
                shouldStretchTabs() || function() {
                    var width = 1;
                    angular.forEach(getElements().dummies, function(element) {
                        width += Math.ceil(element.offsetWidth);
                    });
                    angular.element(elements.paging).css("width", width + "px");
                }();
                ctrl.maxTabWidth = getMaxTabWidth();
                ctrl.shouldPaginate = function() {
                    if (ctrl.noPagination || !loaded) return !1;
                    var canvasWidth = $element.prop("clientWidth");
                    angular.forEach(getElements().dummies, function(tab) {
                        canvasWidth -= tab.offsetWidth;
                    });
                    return canvasWidth < 0;
                }();
            }
            function getMaxTabWidth() {
                return $element.prop("clientWidth");
            }
            function incrementIndex(inc, focus) {
                var newIndex, key = focus ? "focusIndex" : "selectedIndex";
                for (newIndex = ctrl[key] + inc; ctrl.tabs[newIndex] && ctrl.tabs[newIndex].scope.disabled; newIndex += inc) ;
                ctrl.tabs[newIndex] && (ctrl[key] = newIndex);
            }
            function redirectFocus() {
                getElements().dummies[ctrl.focusIndex].focus();
            }
            function adjustOffset(index) {
                null == index && (index = ctrl.focusIndex);
                if (elements.tabs[index] && !ctrl.shouldCenterTabs) {
                    var tab = elements.tabs[index], left = tab.offsetLeft, right = tab.offsetWidth + left;
                    ctrl.offsetLeft = Math.max(ctrl.offsetLeft, fixOffset(right - elements.canvas.clientWidth + 64));
                    ctrl.offsetLeft = Math.min(ctrl.offsetLeft, fixOffset(left));
                }
            }
            function refreshIndex() {
                ctrl.selectedIndex = getNearestSafeIndex(ctrl.selectedIndex);
                ctrl.focusIndex = getNearestSafeIndex(ctrl.focusIndex);
            }
            function updateHeightFromContent() {
                if (!ctrl.dynamicHeight) return $element.css("height", "");
                if (!ctrl.tabs.length) return queue.push(updateHeightFromContent);
                var tabContent = elements.contents[ctrl.selectedIndex], contentHeight = tabContent ? tabContent.offsetHeight : 0, tabsHeight = elements.wrapper.offsetHeight, newHeight = contentHeight + tabsHeight, currentHeight = $element.prop("clientHeight");
                if (currentHeight !== newHeight) {
                    if ("bottom" === $element.attr("md-align-tabs")) {
                        currentHeight -= tabsHeight;
                        newHeight -= tabsHeight;
                        void 0 !== $element.attr("md-border-bottom") && ++currentHeight;
                    }
                    locked = !0;
                    var fromHeight = {
                        height: currentHeight + "px"
                    }, toHeight = {
                        height: newHeight + "px"
                    };
                    $element.css(fromHeight);
                    $animateCss($element, {
                        from: fromHeight,
                        to: toHeight,
                        easing: "cubic-bezier(0.35, 0, 0.25, 1)",
                        duration: .5
                    }).start().done(function() {
                        $element.css({
                            transition: "none",
                            height: ""
                        });
                        $mdUtil.nextTick(function() {
                            $element.css("transition", "");
                        });
                        locked = !1;
                    });
                }
            }
            function updateInkBarStyles() {
                if (elements.tabs[ctrl.selectedIndex]) {
                    if (!ctrl.tabs.length) return queue.push(ctrl.updateInkBarStyles);
                    if (!$element.prop("offsetParent")) return function handleResizeWhenVisible() {
                        handleResizeWhenVisible.watcher || (handleResizeWhenVisible.watcher = $scope.$watch(function() {
                            $mdUtil.nextTick(function() {
                                if (handleResizeWhenVisible.watcher && $element.prop("offsetParent")) {
                                    handleResizeWhenVisible.watcher();
                                    handleResizeWhenVisible.watcher = null;
                                    handleWindowResize();
                                }
                            }, !1);
                        }));
                    }();
                    var index = ctrl.selectedIndex, totalWidth = elements.paging.offsetWidth, tab = elements.tabs[index], left = tab.offsetLeft, right = totalWidth - left - tab.offsetWidth;
                    ctrl.shouldCenterTabs && Array.prototype.slice.call(elements.tabs).reduce(function(value, element) {
                        return value + element.offsetWidth;
                    }, 0) < totalWidth && $mdUtil.nextTick(updateInkBarStyles, !1);
                    !function() {
                        var newIndex = ctrl.selectedIndex, oldIndex = ctrl.lastSelectedIndex, ink = angular.element(elements.inkBar);
                        if (!angular.isNumber(oldIndex)) return;
                        ink.toggleClass("md-left", newIndex < oldIndex).toggleClass("md-right", oldIndex < newIndex);
                    }();
                    angular.element(elements.inkBar).css({
                        left: left + "px",
                        right: right + "px"
                    });
                } else angular.element(elements.inkBar).css({
                    left: "auto",
                    right: "auto"
                });
            }
            function fixOffset(value) {
                if (!elements.tabs.length || !ctrl.shouldPaginate) return 0;
                var lastTab = elements.tabs[elements.tabs.length - 1], totalWidth = lastTab.offsetLeft + lastTab.offsetWidth;
                value = Math.max(0, value);
                return value = Math.min(totalWidth - elements.canvas.clientWidth, value);
            }
        }
        MdTabsController.$inject = [ "$scope", "$element", "$window", "$mdConstant", "$mdTabInkRipple", "$mdUtil", "$animateCss", "$attrs", "$compile", "$mdTheming" ];
    }();
    angular.module("material.components.tabs").directive("mdTabs", function() {
        return {
            scope: {
                selectedIndex: "=?mdSelected"
            },
            template: function(element, attr) {
                attr.$mdTabsTemplate = element.html();
                return '<md-tabs-wrapper> <md-tab-data></md-tab-data> <md-prev-button tabindex="-1" role="button" aria-label="Previous Page" aria-disabled="{{!$mdTabsCtrl.canPageBack()}}" ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageBack() }" ng-if="$mdTabsCtrl.shouldPaginate" ng-click="$mdTabsCtrl.previousPage()"> <md-icon md-svg-icon="md-tabs-arrow"></md-icon> </md-prev-button> <md-next-button tabindex="-1" role="button" aria-label="Next Page" aria-disabled="{{!$mdTabsCtrl.canPageForward()}}" ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageForward() }" ng-if="$mdTabsCtrl.shouldPaginate" ng-click="$mdTabsCtrl.nextPage()"> <md-icon md-svg-icon="md-tabs-arrow"></md-icon> </md-next-button> <md-tabs-canvas tabindex="{{ $mdTabsCtrl.hasFocus ? -1 : 0 }}" aria-activedescendant="tab-item-{{$mdTabsCtrl.tabs[$mdTabsCtrl.focusIndex].id}}" ng-focus="$mdTabsCtrl.redirectFocus()" ng-class="{ \'md-paginated\': $mdTabsCtrl.shouldPaginate, \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs }" ng-keydown="$mdTabsCtrl.keydown($event)" role="tablist"> <md-pagination-wrapper ng-class="{ \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs }" md-tab-scroll="$mdTabsCtrl.scroll($event)"> <md-tab-item tabindex="-1" class="md-tab" style="max-width: {{ $mdTabsCtrl.maxTabWidth + \'px\' }}" ng-repeat="tab in $mdTabsCtrl.tabs" role="tab" aria-controls="tab-content-{{::tab.id}}" aria-selected="{{tab.isActive()}}" aria-disabled="{{tab.scope.disabled || \'false\'}}" ng-click="$mdTabsCtrl.select(tab.getIndex())" ng-class="{ \'md-active\':    tab.isActive(), \'md-focused\':   tab.hasFocus(), \'md-disabled\':  tab.scope.disabled }" ng-disabled="tab.scope.disabled" md-swipe-left="$mdTabsCtrl.nextPage()" md-swipe-right="$mdTabsCtrl.previousPage()" md-tabs-template="::tab.label" md-scope="::tab.parent"></md-tab-item> <md-ink-bar></md-ink-bar> </md-pagination-wrapper> <div class="md-visually-hidden md-dummy-wrapper"> <md-dummy-tab class="md-tab" tabindex="-1" id="tab-item-{{::tab.id}}" role="tab" aria-controls="tab-content-{{::tab.id}}" aria-selected="{{tab.isActive()}}" aria-disabled="{{tab.scope.disabled || \'false\'}}" ng-focus="$mdTabsCtrl.hasFocus = true" ng-blur="$mdTabsCtrl.hasFocus = false" ng-repeat="tab in $mdTabsCtrl.tabs" md-tabs-template="::tab.label" md-scope="::tab.parent"></md-dummy-tab> </div> </md-tabs-canvas> </md-tabs-wrapper> <md-tabs-content-wrapper ng-show="$mdTabsCtrl.hasContent && $mdTabsCtrl.selectedIndex >= 0"> <md-tab-content id="tab-content-{{::tab.id}}" role="tabpanel" aria-labelledby="tab-item-{{::tab.id}}" md-swipe-left="$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(1)" md-swipe-right="$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(-1)" ng-if="$mdTabsCtrl.hasContent" ng-repeat="(index, tab) in $mdTabsCtrl.tabs" ng-class="{ \'md-no-transition\': $mdTabsCtrl.lastSelectedIndex == null, \'md-active\':        tab.isActive(), \'md-left\':          tab.isLeft(), \'md-right\':         tab.isRight(), \'md-no-scroll\':     $mdTabsCtrl.dynamicHeight }"> <div md-tabs-template="::tab.template" md-connected-if="tab.isActive()" md-scope="::tab.parent" ng-if="$mdTabsCtrl.enableDisconnect || tab.shouldRender()"></div> </md-tab-content> </md-tabs-content-wrapper>';
            },
            controller: "MdTabsController",
            controllerAs: "$mdTabsCtrl",
            bindToController: !0
        };
    });
    !function() {
        angular.module("material.components.tabs").directive("mdTabsTemplate", MdTabsTemplate);
        function MdTabsTemplate($compile, $mdUtil) {
            return {
                restrict: "A",
                link: function(scope, element, attr, ctrl) {
                    if (!ctrl) return;
                    var compileScope = ctrl.enableDisconnect ? scope.compileScope.$new() : scope.compileScope;
                    element.html(scope.template);
                    $compile(element.contents())(compileScope);
                    element.on("DOMSubtreeModified", function() {
                        ctrl.updatePagination();
                        ctrl.updateInkBarStyles();
                    });
                    return $mdUtil.nextTick(function() {
                        scope.$watch("connected", function(value) {
                            !1 === value ? ctrl.enableDisconnect && $mdUtil.disconnectScope(compileScope) : reconnect();
                        });
                        scope.$on("$destroy", reconnect);
                    });
                    function reconnect() {
                        ctrl.enableDisconnect && $mdUtil.reconnectScope(compileScope);
                    }
                },
                scope: {
                    template: "=mdTabsTemplate",
                    connected: "=?mdConnectedIf",
                    compileScope: "=mdScope"
                },
                require: "^?mdTabs"
            };
        }
        MdTabsTemplate.$inject = [ "$compile", "$mdUtil" ];
    }();
    angular.module("material.core").constant("$MD_THEME_CSS", "md-autocomplete.md-THEME_NAME-theme {  background: '{{background-50}}'; }  md-autocomplete.md-THEME_NAME-theme[disabled] {    background: '{{background-100}}'; }  md-autocomplete.md-THEME_NAME-theme button md-icon path {    fill: '{{background-600}}'; }  md-autocomplete.md-THEME_NAME-theme button:after {    background: '{{background-600-0.3}}'; }.md-autocomplete-suggestions-container.md-THEME_NAME-theme {  background: '{{background-50}}'; }  .md-autocomplete-suggestions-container.md-THEME_NAME-theme li {    color: '{{background-900}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li .highlight {      color: '{{background-600}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li:hover, .md-autocomplete-suggestions-container.md-THEME_NAME-theme li.selected {      background: '{{background-200}}'; }md-backdrop {  background-color: '{{background-900-0.0}}'; }  md-backdrop.md-opaque.md-THEME_NAME-theme {    background-color: '{{background-900-1.0}}'; }md-bottom-sheet.md-THEME_NAME-theme {  background-color: '{{background-50}}';  border-top-color: '{{background-300}}'; }  md-bottom-sheet.md-THEME_NAME-theme.md-list md-list-item {    color: '{{foreground-1}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    background-color: '{{background-50}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    color: '{{foreground-1}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]):hover,.md-button.md-THEME_NAME-theme:not([disabled]):hover {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-focused,.md-button.md-THEME_NAME-theme:not([disabled]).md-focused {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover,.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover {  background-color: transparent; }a.md-button.md-THEME_NAME-theme.md-fab,.md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab md-icon,  .md-button.md-THEME_NAME-theme.md-fab md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-primary,.md-button.md-THEME_NAME-theme.md-primary {  color: '{{primary-color}}'; }  a.md-button.md-THEME_NAME-theme.md-primary.md-raised, a.md-button.md-THEME_NAME-theme.md-primary.md-fab,  .md-button.md-THEME_NAME-theme.md-primary.md-raised,  .md-button.md-THEME_NAME-theme.md-primary.md-fab {    color: '{{primary-contrast}}';    background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon {      color: '{{primary-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover {      background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused {      background-color: '{{primary-600}}'; }  a.md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon {    color: '{{primary-color}}'; }a.md-button.md-THEME_NAME-theme.md-fab,.md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-raised,.md-button.md-THEME_NAME-theme.md-raised {  color: '{{background-900}}';  background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon {    color: '{{background-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover {    background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused {    background-color: '{{background-200}}'; }a.md-button.md-THEME_NAME-theme.md-warn,.md-button.md-THEME_NAME-theme.md-warn {  color: '{{warn-color}}'; }  a.md-button.md-THEME_NAME-theme.md-warn.md-raised, a.md-button.md-THEME_NAME-theme.md-warn.md-fab,  .md-button.md-THEME_NAME-theme.md-warn.md-raised,  .md-button.md-THEME_NAME-theme.md-warn.md-fab {    color: '{{warn-contrast}}';    background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon {      color: '{{warn-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover {      background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused {      background-color: '{{warn-700}}'; }  a.md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon {    color: '{{warn-color}}'; }a.md-button.md-THEME_NAME-theme.md-accent,.md-button.md-THEME_NAME-theme.md-accent {  color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-accent.md-raised, a.md-button.md-THEME_NAME-theme.md-accent.md-fab,  .md-button.md-THEME_NAME-theme.md-accent.md-raised,  .md-button.md-THEME_NAME-theme.md-accent.md-fab {    color: '{{accent-contrast}}';    background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon {      color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover {      background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused {      background-color: '{{accent-700}}'; }  a.md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon {    color: '{{accent-color}}'; }a.md-button.md-THEME_NAME-theme[disabled], a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], a.md-button.md-THEME_NAME-theme.md-accent[disabled], a.md-button.md-THEME_NAME-theme.md-warn[disabled],.md-button.md-THEME_NAME-theme[disabled],.md-button.md-THEME_NAME-theme.md-raised[disabled],.md-button.md-THEME_NAME-theme.md-fab[disabled],.md-button.md-THEME_NAME-theme.md-accent[disabled],.md-button.md-THEME_NAME-theme.md-warn[disabled] {  color: '{{foreground-3}}' !important;  cursor: default; }  a.md-button.md-THEME_NAME-theme[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon,  .md-button.md-THEME_NAME-theme[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon {    color: '{{foreground-3}}'; }a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled],.md-button.md-THEME_NAME-theme.md-raised[disabled],.md-button.md-THEME_NAME-theme.md-fab[disabled] {  background-color: '{{foreground-4}}'; }a.md-button.md-THEME_NAME-theme[disabled],.md-button.md-THEME_NAME-theme[disabled] {  background-color: transparent; }md-card.md-THEME_NAME-theme {  background-color: '{{background-color}}';  border-radius: 2px; }  md-card.md-THEME_NAME-theme .md-card-image {    border-radius: 2px 2px 0 0; }  md-card.md-THEME_NAME-theme md-card-header md-card-avatar md-icon {    color: '{{background-color}}';    background-color: '{{foreground-3}}'; }  md-card.md-THEME_NAME-theme md-card-header md-card-header-text .md-subhead {    color: '{{foreground-2}}'; }  md-card.md-THEME_NAME-theme md-card-title md-card-title-text:not(:only-child) .md-subhead {    color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme .md-ripple {  color: '{{accent-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked.md-focused .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon {  background-color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon:after {  border-color: '{{accent-contrast-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ripple {  color: '{{primary-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon {  background-color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked.md-focused .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon:after {  border-color: '{{primary-contrast-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ripple {  color: '{{warn-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon {  background-color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked.md-focused:not([disabled]) .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-icon {  border-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon {  background-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-label {  color: '{{foreground-3}}'; }md-chips.md-THEME_NAME-theme .md-chips {  box-shadow: 0 1px '{{background-300}}'; }  md-chips.md-THEME_NAME-theme .md-chips.md-focused {    box-shadow: 0 2px '{{primary-color}}'; }md-chips.md-THEME_NAME-theme .md-chip {  background: '{{background-300}}';  color: '{{background-800}}'; }  md-chips.md-THEME_NAME-theme .md-chip.md-focused {    background: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-chips.md-THEME_NAME-theme .md-chip.md-focused md-icon {      color: '{{primary-contrast}}'; }md-chips.md-THEME_NAME-theme md-chip-remove .md-button md-icon path {  fill: '{{background-500}}'; }.md-contact-suggestion span.md-contact-email {  color: '{{background-400}}'; }md-content.md-THEME_NAME-theme {  color: '{{foreground-1}}';  background-color: '{{background-color}}'; }/** Theme styles for mdCalendar. */.md-calendar.md-THEME_NAME-theme {  color: '{{foreground-1}}'; }  .md-calendar.md-THEME_NAME-theme tr:last-child td {    border-bottom-color: '{{background-200}}'; }.md-THEME_NAME-theme .md-calendar-day-header {  background: '{{background-hue-1}}';  color: '{{foreground-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today .md-calendar-date-selection-indicator {  border: 1px solid '{{primary-500}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today.md-calendar-date-disabled {  color: '{{primary-500-0.6}}'; }.md-THEME_NAME-theme .md-calendar-date.md-focus .md-calendar-date-selection-indicator {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date-selection-indicator:hover {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-selected-date .md-calendar-date-selection-indicator,.md-THEME_NAME-theme .md-calendar-date.md-focus.md-calendar-selected-date .md-calendar-date-selection-indicator {  background: '{{primary-500}}';  color: '{{primary-500-contrast}}';  border-color: transparent; }.md-THEME_NAME-theme .md-calendar-date-disabled,.md-THEME_NAME-theme .md-calendar-month-label-disabled {  color: '{{foreground-3}}'; }/** Theme styles for mdDatepicker. */md-datepicker.md-THEME_NAME-theme {  background: '{{background-color}}'; }.md-THEME_NAME-theme .md-datepicker-input {  color: '{{background-contrast}}';  background: '{{background-color}}'; }  .md-THEME_NAME-theme .md-datepicker-input::-webkit-input-placeholder, .md-THEME_NAME-theme .md-datepicker-input::-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-ms-input-placeholder {    color: \"{{foreground-3}}\"; }.md-THEME_NAME-theme .md-datepicker-input-container {  border-bottom-color: '{{background-300}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-focused {    border-bottom-color: '{{primary-500}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-invalid {    border-bottom-color: '{{warn-A700}}'; }.md-THEME_NAME-theme .md-datepicker-calendar-pane {  border-color: '{{background-300}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button .md-datepicker-expand-triangle {  border-top-color: '{{foreground-3}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button:hover .md-datepicker-expand-triangle {  border-top-color: '{{foreground-2}}'; }.md-THEME_NAME-theme .md-datepicker-open .md-datepicker-calendar-icon {  fill: '{{primary-500}}'; }.md-THEME_NAME-theme .md-datepicker-calendar,.md-THEME_NAME-theme .md-datepicker-input-mask-opaque {  background: '{{background-color}}'; }md-dialog.md-THEME_NAME-theme {  border-radius: 4px;  background-color: '{{background-color}}'; }  md-dialog.md-THEME_NAME-theme.md-content-overflow .md-actions, md-dialog.md-THEME_NAME-theme.md-content-overflow md-dialog-actions {    border-top-color: '{{foreground-4}}'; }md-divider.md-THEME_NAME-theme {  border-top-color: '{{foreground-4}}'; }.layout-row > md-divider.md-THEME_NAME-theme {  border-right-color: '{{foreground-4}}'; }md-icon.md-THEME_NAME-theme {  color: '{{foreground-2}}'; }  md-icon.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  md-icon.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  md-icon.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-input-container.md-THEME_NAME-theme .md-input {  color: '{{foreground-1}}';  border-color: '{{foreground-4}}';  text-shadow: '{{foreground-shadow}}'; }  md-input-container.md-THEME_NAME-theme .md-input::-webkit-input-placeholder, md-input-container.md-THEME_NAME-theme .md-input::-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-ms-input-placeholder {    color: \"{{foreground-3}}\"; }md-input-container.md-THEME_NAME-theme > md-icon {  color: '{{foreground-1}}'; }md-input-container.md-THEME_NAME-theme label,md-input-container.md-THEME_NAME-theme .md-placeholder {  text-shadow: '{{foreground-shadow}}';  color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme ng-messages :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [ng-messages] :not(.md-char-counter),md-input-container.md-THEME_NAME-theme ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme data-ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme x-ng-message :not(.md-char-counter),md-input-container.md-THEME_NAME-theme [ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [data-ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [x-ng-message] :not(.md-char-counter),md-input-container.md-THEME_NAME-theme [ng-message-exp] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [data-ng-message-exp] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [x-ng-message-exp] :not(.md-char-counter) {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-has-value label {  color: '{{foreground-2}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused .md-input {  border-color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused label {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused md-icon {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent .md-input {  border-color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent label {  color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn .md-input {  border-color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn label {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid .md-input {  border-color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid.md-input-focused label {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid data-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid x-ng-message,md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message],md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message-exp],md-input-container.md-THEME_NAME-theme.md-input-invalid .md-char-counter {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme .md-input[disabled],md-input-container.md-THEME_NAME-theme .md-input [disabled] {  border-bottom-color: transparent;  color: '{{foreground-3}}';  background-image: linear-gradient(to right, \"{{foreground-3}}\" 0%, \"{{foreground-3}}\" 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, \"{{foreground-3}}\" 100%); }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h4,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h3,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h4 {  color: '{{foreground-1}}'; }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text p,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text p {  color: '{{foreground-2}}'; }md-list.md-THEME_NAME-theme .md-proxy-focus.md-focused div.md-no-style {  background-color: '{{background-100}}'; }md-list.md-THEME_NAME-theme md-list-item > .md-avatar-icon {  background-color: '{{foreground-3}}';  color: '{{background-color}}'; }md-list.md-THEME_NAME-theme md-list-item > md-icon {  color: '{{foreground-2}}'; }  md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight {    color: '{{primary-color}}'; }    md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight.md-accent {      color: '{{accent-color}}'; }md-menu-content.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }  md-menu-content.md-THEME_NAME-theme md-menu-divider {    background-color: '{{foreground-4}}'; }md-menu-bar.md-THEME_NAME-theme > button.md-button {  color: '{{foreground-2}}';  border-radius: 2px; }md-menu-bar.md-THEME_NAME-theme md-menu.md-open > button, md-menu-bar.md-THEME_NAME-theme md-menu > button:focus {  outline: none;  background: '{{background-200}}'; }md-menu-bar.md-THEME_NAME-theme.md-open:not(.md-keyboard-mode) md-menu:hover > button {  background-color: '{{ background-500-0.2}}'; }md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:hover,md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:focus {  background: transparent; }md-menu-content.md-THEME_NAME-theme .md-menu > .md-button:after {  color: '{{foreground-2}}'; }md-menu-content.md-THEME_NAME-theme .md-menu.md-open > .md-button {  background-color: '{{ background-500-0.2}}'; }md-toolbar.md-THEME_NAME-theme.md-menu-toolbar {  background-color: '{{background-color}}';  color: '{{foreground-1}}'; }  md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler {    background-color: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler md-icon {      color: '{{primary-contrast}}'; }md-progress-circular.md-THEME_NAME-theme {  background-color: transparent; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-gap {    border-top-color: '{{primary-color}}';    border-bottom-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-top-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-right-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle {    border-left-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-gap {    border-top-color: '{{warn-color}}';    border-bottom-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-top-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-right-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle {    border-left-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-gap {    border-top-color: '{{accent-color}}';    border-bottom-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-top-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-right-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle {    border-left-color: '{{accent-color}}'; }md-radio-button.md-THEME_NAME-theme .md-off {  border-color: '{{foreground-2}}'; }md-radio-button.md-THEME_NAME-theme .md-on {  background-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-off {  border-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme .md-container .md-ripple {  color: '{{accent-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-on {  background-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off {  border-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple {  color: '{{primary-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-on {  background-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off {  border-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple {  color: '{{warn-600}}'; }md-radio-group.md-THEME_NAME-theme[disabled],md-radio-button.md-THEME_NAME-theme[disabled] {  color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-off,  md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-off {    border-color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-on,  md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-on {    border-color: '{{foreground-3}}'; }md-radio-group.md-THEME_NAME-theme .md-checked .md-ink-ripple {  color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-primary .md-checked:not([disabled]) .md-ink-ripple, md-radio-group.md-THEME_NAME-theme .md-checked:not([disabled]).md-primary .md-ink-ripple {  color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme .md-checked.md-primary .md-ink-ripple {  color: '{{warn-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty).md-primary .md-checked .md-container:before,md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-primary .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty).md-warn .md-checked .md-container:before,md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-warn .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-progress-linear.md-THEME_NAME-theme .md-container {  background-color: '{{primary-100}}'; }md-progress-linear.md-THEME_NAME-theme .md-bar {  background-color: '{{primary-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-container {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-bar {  background-color: '{{warn-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-container {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-bar {  background-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-bar1 {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-dashed:before {  background: radial-gradient(\"{{warn-100}}\" 0%, \"{{warn-100}}\" 16%, transparent 42%); }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-bar1 {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-dashed:before {  background: radial-gradient(\"{{accent-100}}\" 0%, \"{{accent-100}}\" 16%, transparent 42%); }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  border-bottom-color: transparent;  background-image: linear-gradient(to right, \"{{foreground-3}}\" 0%, \"{{foreground-3}}\" 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, \"{{foreground-3}}\" 100%); }md-select.md-THEME_NAME-theme .md-select-value {  border-bottom-color: '{{foreground-4}}'; }  md-select.md-THEME_NAME-theme .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select.md-THEME_NAME-theme.ng-invalid.ng-dirty .md-select-value {  color: '{{warn-A700}}' !important;  border-bottom-color: '{{warn-A700}}' !important; }md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value {  border-bottom-color: '{{primary-color}}';  color: '{{ foreground-1 }}'; }  md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value.md-select-placeholder {    color: '{{ foreground-1 }}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-accent .md-select-value {  border-bottom-color: '{{accent-color}}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-warn .md-select-value {  border-bottom-color: '{{warn-color}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  color: '{{foreground-3}}'; }  md-select.md-THEME_NAME-theme[disabled] .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-option[disabled] {  color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-optgroup {  color: '{{foreground-2}}'; }  md-select-menu.md-THEME_NAME-theme md-optgroup md-option {    color: '{{foreground-1}}'; }md-select-menu.md-THEME_NAME-theme md-option[selected] {  color: '{{primary-500}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected]:focus {    color: '{{primary-600}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent {    color: '{{accent-500}}'; }    md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent:focus {      color: '{{accent-600}}'; }md-select-menu.md-THEME_NAME-theme md-option:focus:not([disabled]):not([selected]) {  background: '{{background-200}}'; }md-slider.md-THEME_NAME-theme .md-track {  background-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme .md-track-ticks {  background-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-focus-thumb {  background-color: '{{foreground-2}}'; }md-slider.md-THEME_NAME-theme .md-focus-ring {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-disabled-thumb {  border-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme.md-min .md-thumb:after {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track.md-track-fill {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb:after {  border-color: '{{accent-color}}';  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-sign {  background-color: '{{accent-color}}'; }  md-slider.md-THEME_NAME-theme .md-sign:after {    border-top-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb-text {  color: '{{accent-contrast}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-focus-ring {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-track.md-track-fill {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb:after {  border-color: '{{warn-color}}';  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-sign {  background-color: '{{warn-color}}'; }  md-slider.md-THEME_NAME-theme.md-warn .md-sign:after {    border-top-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb-text {  color: '{{warn-contrast}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-focus-ring {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-track.md-track-fill {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb:after {  border-color: '{{primary-color}}';  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-sign {  background-color: '{{primary-color}}'; }  md-slider.md-THEME_NAME-theme.md-primary .md-sign:after {    border-top-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb-text {  color: '{{primary-contrast}}'; }md-slider.md-THEME_NAME-theme[disabled] .md-thumb:after {  border-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme[disabled]:not(.md-min) .md-thumb:after {  background-color: '{{foreground-3}}'; }md-sidenav.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }.md-subheader.md-THEME_NAME-theme {  color: '{{ foreground-2-0.23 }}';  background-color: '{{background-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme .md-ink-ripple {  color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme .md-thumb {  background-color: '{{background-50}}'; }md-switch.md-THEME_NAME-theme .md-bar {  background-color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-thumb {  background-color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-bar {  background-color: '{{accent-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-focused .md-thumb:before {  background-color: '{{accent-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-ink-ripple {  color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-thumb {  background-color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-bar {  background-color: '{{primary-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary.md-focused .md-thumb:before {  background-color: '{{primary-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-ink-ripple {  color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-thumb {  background-color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-bar {  background-color: '{{warn-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn.md-focused .md-thumb:before {  background-color: '{{warn-color-0.26}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-thumb {  background-color: '{{background-400}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-bar {  background-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: transparent;  border-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme .md-paginator md-icon {  color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme md-ink-bar {  color: '{{accent-color}}';  background: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme .md-tab {  color: '{{foreground-2}}'; }  md-tabs.md-THEME_NAME-theme .md-tab[disabled], md-tabs.md-THEME_NAME-theme .md-tab[disabled] md-icon {    color: '{{foreground-3}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-active, md-tabs.md-THEME_NAME-theme .md-tab.md-active md-icon, md-tabs.md-THEME_NAME-theme .md-tab.md-focused, md-tabs.md-THEME_NAME-theme .md-tab.md-focused md-icon {    color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    background: '{{primary-color-0.1}}'; }  md-tabs.md-THEME_NAME-theme .md-tab .md-ripple-container {    color: '{{accent-100}}'; }md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{accent-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{primary-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{warn-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{primary-contrast}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{accent-contrast}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{warn-contrast}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toast.md-THEME_NAME-theme .md-toast-content {  background-color: #323232;  color: '{{background-50}}'; }  md-toast.md-THEME_NAME-theme .md-toast-content .md-button {    color: '{{background-50}}'; }    md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight {      color: '{{primary-A200}}'; }      md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight.md-accent {        color: '{{accent-A200}}'; }      md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight.md-warn {        color: '{{warn-A200}}'; }md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) {  background-color: '{{primary-color}}';  color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) md-icon {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) .md-button:not(.md-raised) {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-accent {    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-warn {    background-color: '{{warn-color}}';    color: '{{warn-contrast}}'; }md-tooltip.md-THEME_NAME-theme {  color: '{{background-A100}}'; }  md-tooltip.md-THEME_NAME-theme .md-content {    background-color: '{{foreground-2}}'; }");
}(window, window.angular);

window.ngMaterial = {
    version: {
        full: "1.0.0"
    }
};

!function() {
    "use strict";
    angular.module("app", [ "app.common", "app.error", "app.index", "app.math", "app.imagery", "app.coaching", "app.about" ]);
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app", {
            abstract: !0,
            url: "/",
            views: {
                "panel@": {
                    templateUrl: "panel/index.html",
                    controller: "PanelController",
                    controllerAs: "vm"
                },
                "header@": {
                    templateUrl: "header/index.html",
                    controller: "HeaderController",
                    controllerAs: "vm"
                },
                "footer@": {
                    templateUrl: "footer/index.html",
                    controller: "FooterController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    function internal($compileProvider, $locationProvider, $urlRouterProvider, $urlMatcherFactoryProvider, $windowProvider, AngularyticsProvider, cfpLoadingBarProvider, localStorageServiceProvider, StripeElementsProvider, UIRouterMetatagsProvider) {
        StripeElementsProvider.setAPIKey("pk_test_0zM0gFWV9WoehBQUybIsQcVK00qX07QS8n");
        $locationProvider.html5Mode(!0);
        $urlRouterProvider.otherwise("page-not-found");
        $compileProvider.imgSrcSanitizationWhitelist(/^\s*(local|http|https|app|tel|ftp|file|blob|content|ms-appx|x-wmapp0|cdvfile):|data:image\//);
        cfpLoadingBarProvider.latencyThreshold = 200;
        cfpLoadingBarProvider.includeSpinner = !0;
        cfpLoadingBarProvider.includeBar = !1;
        cfpLoadingBarProvider.spinnerTemplate = "<div class='backdrop'></div>";
        var angularyticsEventHandlers = [];
        $windowProvider.$get().location.hostname.match(/192.168.2.10/) ? angularyticsEventHandlers.push("Console") : angularyticsEventHandlers.push("GoogleUniversal");
        AngularyticsProvider.setEventHandlers(angularyticsEventHandlers);
        localStorageServiceProvider.setPrefix("zissis").setStorageType("localStorage").setNotify(!0, !0);
        UIRouterMetatagsProvider.setTitleSuffix(" | Zissis Liolios");
    }
    angular.module("app").config(internal);
    internal.$inject = [ "$compileProvider", "$locationProvider", "$urlRouterProvider", "$urlMatcherFactoryProvider", "$windowProvider", "AngularyticsProvider", "cfpLoadingBarProvider", "localStorageServiceProvider", "StripeElementsProvider", "UIRouterMetatagsProvider" ];
}();

!function() {
    "use strict";
    function internal($rootScope, $state, $stateParams, MetaTags) {
        var factory = {
            init: function() {
                $rootScope.MetaTags = MetaTags;
                $rootScope.$state = $state;
                $rootScope.$stateParams = $stateParams;
                $rootScope.panel = !1;
                $rootScope.$on("$stateChangeError", function(event, toState, toParams, fromState, fromParams, error) {
                    event.preventDefault();
                    $state.go("app.error");
                });
            }
        };
        return factory;
    }
    angular.module("app").factory("runFactory", internal);
    internal.$inject = [ "$rootScope", "$state", "$stateParams", "Angularytics", "MetaTags" ];
}();

!function() {
    "use strict";
    function internal(Angularytics, runFactory) {
        Angularytics.init();
        runFactory.init();
    }
    angular.module("app").run(internal);
    internal.$inject = [ "Angularytics", "runFactory" ];
}();

!function() {
    "use strict";
    angular.module("app.common", [ "angularjs-stripe-elements", "angularytics", "angular-loading-bar", "duScroll", "LocalStorageModule", "ngAnimate", "ngAria", "ngMaterial", "ngResource", "ui.router", "ui.router.metatags" ]);
}();

!function() {
    "use strict";
    angular.module("app.common").component("paymentForm", {
        bindings: {
            user: "<",
            process: "<"
        },
        controller: function(StripeElements) {
            var ctrl = this, elements = StripeElements.elements(), card = elements.create("cardNumber", {}), expiry = elements.create("cardExpiry", {}), cvc = elements.create("cardCvc", {});
            card.mount("#card-element");
            expiry.mount("#expiry-element");
            cvc.mount("#cvc-element");
            card.on("change", function(e) {
                ctrl.cardErrors = e.error ? e.error.message : "";
            });
            ctrl.card = card;
            ctrl.expiry = expiry;
            ctrl.cvc = cvc;
            ctrl.submitted = !1;
            ctrl.handleSubmit = function() {
                ctrl.submitted = !0;
                var extraValues = {
                    name: this.user.billing.name.first + " " + this.user.billing.name.last,
                    address_line1: this.user.billing.address_line1,
                    address_line2: this.user.billing.address_line2,
                    address_city: this.user.billing.address_city,
                    address_state: this.user.billing.address_state,
                    address_zip: this.user.billing.address_zip,
                    address_country: this.user.billing.address_country
                };
                StripeElements.createToken(card, extraValues).then(function(response) {
                    if (response.error) {
                        ctrl.submitted = !1;
                        ctrl.cardErrors = response.error.message;
                    } else ctrl.process(response);
                });
            };
        },
        templateUrl: "common/component/card/index.html"
    });
}();

!function() {
    "use strict";
    angular.module("app.common").directive("escKey", escKey);
    escKey.$inject = [ "$document" ];
    function escKey($document) {
        return function(scope, element, attrs) {
            $document.bind("keydown keypress", function(event) {
                if (27 === event.which) {
                    scope.$apply(function() {
                        scope.$eval(attrs.escKey);
                    });
                    event.preventDefault();
                }
            });
        };
    }
}();

!function() {
    "use strict";
    angular.module("app.common").filter("categoryFilter", function() {
        return function(projects, value) {
            var filtered = [];
            if (!value || "Categories" === value) return projects;
            angular.forEach(projects, function(project) {
                project.category === value && filtered.push(project);
            });
            return filtered;
        };
    });
}();

!function() {
    "use strict";
    angular.module("app.common").filter("tagFilter", function() {
        return function(projects, value) {
            var filtered = [];
            if (!value || "Tags" === value) return projects;
            angular.forEach(projects, function(project) {
                for (var i = 0; i <= project.tags.length; i++) project.tags[i] === value && filtered.push(project);
            });
            return filtered;
        };
    });
}();

!function() {
    "use strict";
    angular.module("app").controller("HeaderController", Internal);
    Internal.$inject = [ "$rootScope" ];
    function Internal($rootScope) {
        this.open = function() {
            $rootScope.$emit("open", {});
        };
    }
}();

!function() {
    "use strict";
    angular.module("app").controller("PanelController", Panel);
    Panel.$inject = [ "$mdSidenav", "$rootScope" ];
    function Panel($mdSidenav, $rootScope) {
        var vm = this;
        vm.close = function() {
            vm.backdrop = !1;
            $mdSidenav("panel").close().then(function() {});
        };
        $rootScope.$on("open", function() {
            vm.backdrop = !0;
            $mdSidenav("panel").open().then(function() {});
        });
    }
}();

!function() {
    "use strict";
    function Internal() {}
    angular.module("app").controller("FooterController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    angular.module("app.index", []);
}();

!function() {
    "use strict";
    function Internal($document) {
        $document.scrollTopAnimated(0);
        this.slickConfig = {
            enabled: !0,
            accessibility: !0,
            arrows: !1,
            autoplay: !0,
            autoplaySpeed: "4100",
            dots: !0,
            draggable: !0,
            easing: "linear",
            infinite: !0,
            slidesToShow: "1",
            speed: "400",
            swipe: !0
        };
        this.slides = [ {
            image: {
                base64: "",
                filetype: "image/jpeg"
            },
            route: "formal-garden"
        }, {
            image: {
                base64: "",
                filetype: "image/jpeg"
            },
            route: "modern-classic"
        }, {
            image: {
                base64: "",
                filetype: "image/jpeg"
            },
            route: "contemporary-entrance"
        }, {
            image: {
                base64: "",
                filetype: "image/jpeg"
            },
            route: "formal-garden"
        } ];
    }
    angular.module("app.index").controller("IndexController", Internal);
    Internal.$inject = [ "$document" ];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.index", {
            url: "",
            metaTags: {
                title: "Home",
                description: "Transform into your best version. Register for coaching sessions or for one of the powerful workshop - HeartMath, Heart Imagery."
            },
            views: {
                "page@": {
                    templateUrl: "index/index.html",
                    controller: "IndexController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.index").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.coaching", []);
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.coaching", {
            url: "coaching",
            metaTags: {
                title: "Transformational Coaching",
                description: "Focus on where you are in this present moment, how you want to be, where you want to be, and how you want to get there."
            },
            views: {
                "page@": {
                    templateUrl: "coaching/index.html",
                    controller: "CoachingController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.coaching").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.coaching").controller("CoachingController", Internal);
    Internal.$inject = [ "$document" ];
    function Internal($document) {
        $document.scrollTopAnimated(0);
        this.slickConfig = {
            enabled: !0,
            accessibility: !0,
            arrows: !1,
            autoplay: !0,
            autoplaySpeed: "4100",
            dots: !0,
            draggable: !0,
            easing: "linear",
            infinite: !0,
            slidesToShow: "1",
            speed: "400",
            swipe: !0
        };
    }
}();

!function() {
    "use strict";
    angular.module("app.math", []);
}();

!function() {
    "use strict";
    function routes($stateProvider) {
        $stateProvider.state("app.math", {
            url: "heart-math",
            metaTags: {
                title: "Heart Math",
                description: "Contact me to discuss a custom made HeartMath program for your organization, Resilience Advantage or Activating the Heart in Teams."
            },
            views: {
                "page@": {
                    templateUrl: "math/index.html",
                    controller: "MathController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.math").config(routes);
    routes.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.math").controller("MathController", Internal);
    Internal.$inject = [ "$document" ];
    function Internal($document) {
        $document.scrollTopAnimated(0);
        this.slickConfig = {
            enabled: !0,
            accessibility: !0,
            arrows: !1,
            autoplay: !0,
            autoplaySpeed: "4100",
            dots: !0,
            draggable: !0,
            easing: "linear",
            infinite: !0,
            slidesToShow: "1",
            speed: "400",
            swipe: !0
        };
    }
}();

!function() {
    "use strict";
    angular.module("app.imagery", []);
}();

!function() {
    "use strict";
    function routes($stateProvider) {
        $stateProvider.state("app.imagery", {
            url: "heart-imagery",
            metaTags: {
                title: "Heart Imagery",
                description: "Heart Imagery is the most powerful meditation system on the planet now. Contact me to organize a workshop or look at the products section."
            },
            views: {
                "page@": {
                    templateUrl: "imagery/index.html",
                    controller: "ImageryController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.imagery").config(routes);
    routes.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.imagery").controller("ImageryController", Internal);
    Internal.$inject = [ "$document" ];
    function Internal($document) {
        $document.scrollTopAnimated(0);
        this.slickConfig = {
            enabled: !0,
            accessibility: !0,
            arrows: !1,
            autoplay: !0,
            autoplaySpeed: "4100",
            dots: !0,
            draggable: !0,
            easing: "linear",
            infinite: !0,
            slidesToShow: "1",
            speed: "400",
            swipe: !0
        };
    }
}();

!function() {
    "use strict";
    angular.module("app.about", []);
}();

!function() {
    "use strict";
    angular.module("app.about").controller("AboutController", Internal);
    Internal.$inject = [ "$document" ];
    function Internal($document) {
        $document.scrollTopAnimated(0);
        this.slickConfig = {
            enabled: !0,
            accessibility: !0,
            arrows: !1,
            autoplay: !0,
            autoplaySpeed: "4100",
            dots: !0,
            draggable: !0,
            easing: "linear",
            infinite: !0,
            slidesToShow: "1",
            speed: "400",
            swipe: !0
        };
        this.slides = [ {
            image: {
                base64: "",
                filetype: "image/jpeg"
            },
            route: "contemporary-court"
        }, {
            image: {
                base64: "",
                filetype: "image/jpeg"
            },
            route: "contemporary-court"
        }, {
            image: {
                base64: "",
                filetype: "image/jpeg"
            },
            route: "contemporary-court"
        }, {
            image: {
                base64: "",
                filetype: "image/jpeg"
            },
            route: "contemporary-court"
        } ];
    }
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.about", {
            url: "about",
            metaTags: {
                title: "About Me",
                description: "Life is meant to be lived and enjoyed fully, yet most of us walk around numb and unaware of the everyday riches of life."
            },
            views: {
                "page@": {
                    templateUrl: "about/index.html",
                    controller: "AboutController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.about").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.error", []);
}();

!function() {
    "use strict";
    function routes($stateProvider) {
        $stateProvider.state("app.error", {
            url: "page-not-found",
            metaTags: {
                title: "Page Not Found",
                description: "Please use the navigation above to start from the beginning."
            },
            views: {
                "page@": {
                    templateUrl: "error/index.html"
                }
            }
        });
    }
    angular.module("app.error").config(routes);
    routes.$inject = [ "$stateProvider" ];
}();